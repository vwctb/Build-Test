// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = typeof window === 'object';
// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  if (!Module['printErr']) Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) { return Module['read'](filename, true) };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (!Module['thisProgram']) {
    if (process['argv'].length > 1) {
      Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
    } else {
      Module['thisProgram'] = 'unknown-program';
    }
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WORKER) {
    Module['load'] = importScripts;
  }

  if (typeof Module['setWindowTitle'] === 'undefined') {
    Module['setWindowTitle'] = function(title) { document.title = title };
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in: 
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at: 
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  prepVararg: function (ptr, type) {
    if (type === 'double' || type === 'i64') {
      // move so the load is aligned
      if (ptr & 7) {
        assert((ptr & 7) === 4);
        ptr += 4;
      }
    } else {
      assert((ptr & 3) === 0);
    }
    return ptr;
  },
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      assert(sig.length == 1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      sigCache[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return sigCache[func];
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16);(assert((((STACKTOP|0) < (STACK_MAX|0))|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + (assert(DYNAMICTOP > 0),size))|0;DYNAMICTOP = (((DYNAMICTOP)+15)&-16); if (DYNAMICTOP >= TOTAL_MEMORY) { var success = enlargeMemory(); if (!success) { DYNAMICTOP = ret; return 0; } }; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}



Module['Runtime'] = Runtime;



//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try {
      func = eval('_' + ident); // explicit lookup
    } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var JSfuncs = {
    // Helpers for cwrap -- it can't refer to Runtime directly because it might
    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
    // out what the minified function name is.
    'stackSave': function() {
      Runtime.stackSave()
    },
    'stackRestore': function() {
      Runtime.stackRestore()
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        ret = Runtime.stackAlloc((str.length << 2) + 1);
        writeStringToMemory(str, ret);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface. 
  ccall = function ccallFunc(ident, returnType, argTypes, args, opts) {
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    assert(returnType !== 'array', 'Return type should not be "array".');
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if ((!opts || !opts.async) && typeof EmterpreterAsync === 'object') {
      assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling ccall');
    }
    if (opts && opts.async) assert(!returnType, 'async ccalls cannot return values');
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) {
      if (opts && opts.async) {
        EmterpreterAsync.asyncFinalizers.push(function() {
          Runtime.stackRestore(stack);
        });
        return;
      }
      Runtime.stackRestore(stack);
    }
    return ret;
  }

  var sourceRegex = /^function\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }
  var JSsource = {};
  for (var fun in JSfuncs) {
    if (JSfuncs.hasOwnProperty(fun)) {
      // Elements of toCsource are arrays of three items:
      // the code, and the return value
      JSsource[fun] = parseJSFunc(JSfuncs[fun]);
    }
  }

  
  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      funcstr += 'var stack = ' + JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=' + convertCode.returnValue + ';';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    funcstr += "if (typeof EmterpreterAsync === 'object') { assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling cwrap') }";
    if (!numericArgs) {
      // If we had a stack, restore it
      funcstr += JSsource['stackRestore'].body.replace('()', '(stack)') + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["cwrap"] = cwrap;
Module["ccall"] = ccall;


function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;


function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_DYNAMIC'] = ALLOC_DYNAMIC;
Module['ALLOC_NONE'] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module['allocate'] = allocate;

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return Runtime.staticAlloc(size);
  if ((typeof _sbrk !== 'undefined' && !_sbrk.called) || !runtimeInitialized) return Runtime.dynamicAlloc(size);
  return _malloc(size);
}
Module['getMemory'] = getMemory;

function Pointer_stringify(ptr, /* optional */ length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return Module['UTF8ToString'](ptr);
}
Module['Pointer_stringify'] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}
Module['AsciiToString'] = AsciiToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}
Module['stringToAscii'] = stringToAscii;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

function UTF8ArrayToString(u8Array, idx) {
  var u0, u1, u2, u3, u4, u5;

  var str = '';
  while (1) {
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    u0 = u8Array[idx++];
    if (!u0) return str;
    if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
    u1 = u8Array[idx++] & 63;
    if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
    u2 = u8Array[idx++] & 63;
    if ((u0 & 0xF0) == 0xE0) {
      u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
    } else {
      u3 = u8Array[idx++] & 63;
      if ((u0 & 0xF8) == 0xF0) {
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
      } else {
        u4 = u8Array[idx++] & 63;
        if ((u0 & 0xFC) == 0xF8) {
          u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
        } else {
          u5 = u8Array[idx++] & 63;
          u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
        }
      }
    }
    if (u0 < 0x10000) {
      str += String.fromCharCode(u0);
    } else {
      var ch = u0 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    }
  }
}
Module['UTF8ArrayToString'] = UTF8ArrayToString;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8, ptr);
}
Module['UTF8ToString'] = UTF8ToString;

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}
Module['stringToUTF8Array'] = stringToUTF8Array;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8, outPtr, maxBytesToWrite);
}
Module['stringToUTF8'] = stringToUTF8;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}
Module['lengthBytesUTF8'] = lengthBytesUTF8;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module['UTF16ToString'] = UTF16ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}
Module['stringToUTF16'] = stringToUTF16;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}
Module['lengthBytesUTF16'] = lengthBytesUTF16;

function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module['UTF32ToString'] = UTF32ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}
Module['stringToUTF32'] = stringToUTF32;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}
Module['lengthBytesUTF32'] = lengthBytesUTF32;

function demangle(func) {
  var hasLibcxxabi = !!Module['___cxa_demangle'];
  if (hasLibcxxabi) {
    try {
      var buf = _malloc(func.length);
      writeStringToMemory(func.substr(1), buf);
      var status = _malloc(4);
      var ret = Module['___cxa_demangle'](buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed, we can try ours which may return a partial result
    } catch(e) {
      // failure when using libcxxabi, we can try ours which may return a partial result
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
  }
  var i = 3;
  // params, etc.
  var basicTypes = {
    'v': 'void',
    'b': 'bool',
    'c': 'char',
    's': 'short',
    'i': 'int',
    'l': 'long',
    'f': 'float',
    'd': 'double',
    'w': 'wchar_t',
    'a': 'signed char',
    'h': 'unsigned char',
    't': 'unsigned short',
    'j': 'unsigned int',
    'm': 'unsigned long',
    'x': 'long long',
    'y': 'unsigned long long',
    'z': '...'
  };
  var subs = [];
  var first = true;
  function dump(x) {
    //return;
    if (x) Module.print(x);
    Module.print(func);
    var pre = '';
    for (var a = 0; a < i; a++) pre += ' ';
    Module.print (pre + '^');
  }
  function parseNested() {
    i++;
    if (func[i] === 'K') i++; // ignore const
    var parts = [];
    while (func[i] !== 'E') {
      if (func[i] === 'S') { // substitution
        i++;
        var next = func.indexOf('_', i);
        var num = func.substring(i, next) || 0;
        parts.push(subs[num] || '?');
        i = next+1;
        continue;
      }
      if (func[i] === 'C') { // constructor
        parts.push(parts[parts.length-1]);
        i += 2;
        continue;
      }
      var size = parseInt(func.substr(i));
      var pre = size.toString().length;
      if (!size || !pre) { i--; break; } // counter i++ below us
      var curr = func.substr(i + pre, size);
      parts.push(curr);
      subs.push(curr);
      i += pre + size;
    }
    i++; // skip E
    return parts;
  }
  function parse(rawList, limit, allowVoid) { // main parser
    limit = limit || Infinity;
    var ret = '', list = [];
    function flushList() {
      return '(' + list.join(', ') + ')';
    }
    var name;
    if (func[i] === 'N') {
      // namespaced N-E
      name = parseNested().join('::');
      limit--;
      if (limit === 0) return rawList ? [name] : name;
    } else {
      // not namespaced
      if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
      var size = parseInt(func.substr(i));
      if (size) {
        var pre = size.toString().length;
        name = func.substr(i + pre, size);
        i += pre + size;
      }
    }
    first = false;
    if (func[i] === 'I') {
      i++;
      var iList = parse(true);
      var iRet = parse(true, 1, true);
      ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
    } else {
      ret = name;
    }
    paramLoop: while (i < func.length && limit-- > 0) {
      //dump('paramLoop');
      var c = func[i++];
      if (c in basicTypes) {
        list.push(basicTypes[c]);
      } else {
        switch (c) {
          case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
          case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
          case 'L': { // literal
            i++; // skip basic type
            var end = func.indexOf('E', i);
            var size = end - i;
            list.push(func.substr(i, size));
            i += size + 2; // size + 'EE'
            break;
          }
          case 'A': { // array
            var size = parseInt(func.substr(i));
            i += size.toString().length;
            if (func[i] !== '_') throw '?';
            i++; // skip _
            list.push(parse(true, 1, true)[0] + ' [' + size + ']');
            break;
          }
          case 'E': break paramLoop;
          default: ret += '?' + c; break paramLoop;
        }
      }
    }
    if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
    if (rawList) {
      if (ret) {
        list.push(ret + '?');
      }
      return list;
    } else {
      return ret + flushList();
    }
  }
  var parsed = func;
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    parsed = parse();
  } catch(e) {
    parsed += '?';
  }
  if (parsed.indexOf('?') >= 0 && !hasLibcxxabi) {
    Runtime.warnOnce('warning: a problem occurred in builtin C++ name demangling; build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  }
  return parsed;
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  return demangleAll(jsStackTrace());
}
Module['stackTrace'] = stackTrace;

// Memory management

var PAGE_SIZE = 4096;

function alignMemoryPage(x) {
  if (x % 4096 > 0) {
    x += (4096 - (x % 4096));
  }
  return x;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk


function enlargeMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.');
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;

var totalMemory = 64*1024;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be compliant with the asm.js spec (and given that TOTAL_STACK=' + TOTAL_STACK + ')');
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');

var buffer;
buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);

// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module['addOnPreRun'] = Module.addOnPreRun = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module['addOnInit'] = Module.addOnInit = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module['addOnPreMain'] = Module.addOnPreMain = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module['addOnExit'] = Module.addOnExit = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module['addOnPostRun'] = Module.addOnPostRun = addOnPostRun;

// Tools


function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}
Module['intArrayFromString'] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;

function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))>>0)]=chr;
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[((buffer++)>>0)]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}
Module['writeAsciiToMemory'] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}


// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


if (!Math['clz32']) Math['clz32'] = function(x) {
  x = x >>> 0;
  for (var i = 0; i < 32; i++) {
    if (x & (1 << (31 - i))) return i;
  }
  return 32;
};
Math.clz32 = Math['clz32']

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module['removeRunDependency'] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;



// === Body ===

var ASM_CONSTS = [];




STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 4256;
  /* global initializers */  __ATINIT__.push();
  

/* memory initializer */ allocate([196,0,0,0,210,3,0,0,24,0,0,0,0,0,0,0,156,0,0,0,223,3,0,0,156,0,0,0,236,3,0,0,196,0,0,0,249,3,0,0,32,0,0,0,0,0,0,0,196,0,0,0,26,4,0,0,40,0,0,0,0,0,0,0,196,0,0,0,96,4,0,0,40,0,0,0,0,0,0,0,196,0,0,0,60,4,0,0,72,0,0,0,0,0,0,0,196,0,0,0,130,4,0,0,56,0,0,0,0,0,0,0,42,0,0,0,0,0,0,0,8,0,0,0,42,0,0,0,43,0,0,0,42,0,0,0,0,0,0,0,0,0,0,0,56,0,0,0,44,0,0,0,45,0,0,0,46,0,0,0,47,0,0,0,42,0,0,0,42,0,0,0,42,0,0,0,42,0,0,0,0,0,0,0,104,0,0,0,44,0,0,0,48,0,0,0,46,0,0,0,47,0,0,0,42,0,0,0,43,0,0,0,43,0,0,0,43,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,43,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,48,49,50,51,52,53,54,55,56,57,43,47,0,87,97,114,110,105,110,103,58,32,111,114,112,104,97,110,101,100,32,98,105,116,115,32,105,103,110,111,114,101,100,46,10,0,87,97,114,110,105,110,103,58,32,103,97,114,98,97,103,101,32,102,111,117,110,100,44,32,103,105,118,105,110,103,32,117,112,46,10,0,83,116,57,98,97,100,95,97,108,108,111,99,0,83,116,57,101,120,99,101,112,116,105,111,110,0,83,116,57,116,121,112,101,95,105,110,102,111,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,54,95,95,115,104,105,109,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,57,95,95,112,111,105,110,116,101,114,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,112,98,97,115,101,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,48,95,95,115,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,112,116,104,114,101,97,100,95,111,110,99,101,32,102,97,105,108,117,114,101,32,105,110,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,95,102,97,115,116,40,41,0,115,116,100,58,58,98,97,100,95,97,108,108,111,99,0,116,101,114,109,105,110,97,116,101,95,104,97,110,100,108,101,114,32,117,110,101,120,112,101,99,116,101,100,108,121,32,114,101,116,117,114,110,101,100,0,99,97,110,110,111,116,32,99,114,101,97,116,101,32,112,116,104,114,101,97,100,32,107,101,121,32,102,111,114,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,40,41,0,99,97,110,110,111,116,32,122,101,114,111,32,111,117,116,32,116,104,114,101,97,100,32,118,97,108,117,101,32,102,111,114,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,40,41,0,33,34,98,97,115,105,99,95,115,116,114,105,110,103,32,108,101,110,103,116,104,95,101,114,114,111,114,34,0,67,58,92,101,109,115,100,107,92,101,109,115,99,114,105,112,116,101,110,92,116,97,103,45,49,46,51,52,46,49,92,115,121,115,116,101,109,92,105,110,99,108,117,100,101,92,108,105,98,99,120,120,92,115,116,114,105,110,103,0,95,95,116,104,114,111,119,95,108,101,110,103,116,104,95,101,114,114,111,114,0,32,40,0,41,0,95,98,108,111,99,107,95,105,110,118,111,107,101,0,105,110,118,111,99,97,116,105,111,110,32,102,117,110,99,116,105,111,110,32,102,111,114,32,98,108,111,99,107,32,105,110,32,0,32,99,111,110,115,116,0,32,118,111,108,97,116,105,108,101,0,32,114,101,115,116,114,105,99,116,0,32,91,0,32,91,93,0,93,0,32,99,111,109,112,108,101,120,0,40,0,44,32,0,32,38,0,32,38,38,0,32,0,32,105,109,97,103,105,110,97,114,121,0,58,58,42,0,38,38,0,111,98,106,99,95,111,98,106,101,99,116,60,0,42,0,105,100,0,38,0,111,98,106,99,112,114,111,116,111,0,60,0,62,0,32,118,101,99,116,111,114,91,0,112,105,120,101,108,32,118,101,99,116,111,114,91,0,100,101,99,108,116,121,112,101,40,0,115,116,100,58,58,97,108,108,111,99,97,116,111,114,0,115,116,100,58,58,98,97,115,105,99,95,115,116,114,105,110,103,0,115,116,100,58,58,115,116,114,105,110,103,0,115,116,100,58,58,105,115,116,114,101,97,109,0,115,116,100,58,58,111,115,116,114,101,97,109,0,115,116,100,58,58,105,111,115,116,114,101,97,109,0,115,116,100,0,58,58,0,58,58,115,116,114,105,110,103,32,108,105,116,101,114,97,108,0,115,116,100,58,58,0,126,0,39,117,110,110,97,109,101,100,0,39,108,97,109,98,100,97,39,40,0,111,112,101,114,97,116,111,114,38,38,0,111,112,101,114,97,116,111,114,38,0,111,112,101,114,97,116,111,114,38,61,0,111,112,101,114,97,116,111,114,61,0,111,112,101,114,97,116,111,114,40,41,0,111,112,101,114,97,116,111,114,44,0,111,112,101,114,97,116,111,114,126,0,111,112,101,114,97,116,111,114,32,0,111,112,101,114,97,116,111,114,32,100,101,108,101,116,101,91,93,0,111,112,101,114,97,116,111,114,42,0,111,112,101,114,97,116,111,114,32,100,101,108,101,116,101,0,111,112,101,114,97,116,111,114,47,0,111,112,101,114,97,116,111,114,47,61,0,111,112,101,114,97,116,111,114,94,0,111,112,101,114,97,116,111,114,94,61,0,111,112,101,114,97,116,111,114,61,61,0,111,112,101,114,97,116,111,114,62,61,0,111,112,101,114,97,116,111,114,62,0,111,112,101,114,97,116,111,114,91,93,0,111,112,101,114,97,116,111,114,60,61,0,111,112,101,114,97,116,111,114,34,34,32,0,111,112,101,114,97,116,111,114,60,60,0,111,112,101,114,97,116,111,114,60,60,61,0,111,112,101,114,97,116,111,114,60,0,111,112,101,114,97,116,111,114,45,0,111,112,101,114,97,116,111,114,45,61,0,111,112,101,114,97,116,111,114,42,61,0,111,112,101,114,97,116,111,114,45,45,0,111,112,101,114,97,116,111,114,32,110,101,119,91,93,0,111,112,101,114,97,116,111,114,33,61,0,111,112,101,114,97,116,111,114,33,0,111,112,101,114,97,116,111,114,32,110,101,119,0,111,112,101,114,97,116,111,114,124,124,0,111,112,101,114,97,116,111,114,124,0,111,112,101,114,97,116,111,114,124,61,0,111,112,101,114,97,116,111,114,45,62,42,0,111,112,101,114,97,116,111,114,43,0,111,112,101,114,97,116,111,114,43,61,0,111,112,101,114,97,116,111,114,43,43,0,111,112,101,114,97,116,111,114,45,62,0,111,112,101,114,97,116,111,114,63,0,111,112,101,114,97,116,111,114,37,0,111,112,101,114,97,116,111,114,37,61,0,111,112,101,114,97,116,111,114,62,62,0,111,112,101,114,97,116,111,114,62,62,61,0,115,116,100,58,58,98,97,115,105,99,95,115,116,114,105,110,103,60,99,104,97,114,44,32,115,116,100,58,58,99,104,97,114,95,116,114,97,105,116,115,60,99,104,97,114,62,44,32,115,116,100,58,58,97,108,108,111,99,97,116,111,114,60,99,104,97,114,62,32,62,0,98,97,115,105,99,95,115,116,114,105,110,103,0,115,116,100,58,58,98,97,115,105,99,95,105,115,116,114,101,97,109,60,99,104,97,114,44,32,115,116,100,58,58,99,104,97,114,95,116,114,97,105,116,115,60,99,104,97,114,62,32,62,0,98,97,115,105,99,95,105,115,116,114,101,97,109,0,115,116,100,58,58,98,97,115,105,99,95,111,115,116,114,101,97,109,60,99,104,97,114,44,32,115,116,100,58,58,99,104,97,114,95,116,114,97,105,116,115,60,99,104,97,114,62,32,62,0,98,97,115,105,99,95,111,115,116,114,101,97,109,0,115,116,100,58,58,98,97,115,105,99,95,105,111,115,116,114,101,97,109,60,99,104,97,114,44,32,115,116,100,58,58,99,104,97,114,95,116,114,97,105,116,115,60,99,104,97,114,62,32,62,0,98,97,115,105,99,95,105,111,115,116,114,101,97,109,0,95,71,76,79,66,65,76,95,95,78,0,40,97,110,111,110,121,109,111,117,115,32,110,97,109,101,115,112,97,99,101,41,0,32,62,0,119,99,104,97,114,95,116,0,102,97,108,115,101,0,116,114,117,101,0,99,104,97,114,0,115,105,103,110,101,100,32,99,104,97,114,0,117,110,115,105,103,110,101,100,32,99,104,97,114,0,115,104,111,114,116,0,117,110,115,105,103,110,101,100,32,115,104,111,114,116,0,0,117,0,108,0,117,108,0,108,108,0,117,108,108,0,95,95,105,110,116,49,50,56,0,117,110,115,105,103,110,101,100,32,95,95,105,110,116,49,50,56,0,37,97,102,0,37,97,0,37,76,97,76,0,38,61,0,61,0,97,108,105,103,110,111,102,32,40,0,99,111,110,115,116,95,99,97,115,116,60,0,62,40,0,44,0,41,40,0,100,101,108,101,116,101,91,93,32,0,100,121,110,97,109,105,99,95,99,97,115,116,60,0,100,101,108,101,116,101,32,0,46,42,0,47,0,47,61,0,94,0,94,61,0,61,61,0,62,61,0,41,91,0,60,61,0,60,60,0,60,60,61,0,45,0,45,61,0,42,61,0,45,45,0,41,45,45,0,91,93,32,0,41,32,0,33,61,0,33,0,110,111,101,120,99,101,112,116,32,40,0,124,124,0,124,0,124,61,0,45,62,42,0,43,0,43,61,0,43,43,0,41,43,43,0,45,62,0,41,32,63,32,40,0,41,32,58,32,40,0,114,101,105,110,116,101,114,112,114,101,116,95,99,97,115,116,60,0,37,0,37,61,0,62,62,0,62,62,61,0,115,116,97,116,105,99,95,99,97,115,116,60,0,115,105,122,101,111,102,32,40,0,115,105,122,101,111,102,46,46,46,40,0,116,121,112,101,105,100,40,0,116,104,114,111,119,0,116,104,114,111,119,32,0,102,112,0,33,34,98,97,115,105,99,95,115,116,114,105,110,103,32,111,117,116,95,111,102,95,114,97,110,103,101,34,0,95,95,116,104,114,111,119,95,111,117,116,95,111,102,95,114,97,110,103,101,0,118,111,105,100,0,98,111,111,108,0,105,110,116,0,117,110,115,105,103,110,101,100,32,105,110,116,0,108,111,110,103,0,117,110,115,105,103,110,101,100,32,108,111,110,103,0,108,111,110,103,32,108,111,110,103,0,117,110,115,105,103,110,101,100,32,108,111,110,103,32,108,111,110,103,0,102,108,111,97,116,0,100,111,117,98,108,101,0,108,111,110,103,32,100,111,117,98,108,101,0,95,95,102,108,111,97,116,49,50,56,0,46,46,46,0,100,101,99,105,109,97,108,54,52,0,100,101,99,105,109,97,108,49,50,56,0,100,101,99,105,109,97,108,51,50,0,100,101,99,105,109,97,108,49,54,0,99,104,97,114,51,50,95,116,0,99,104,97,114,49,54,95,116,0,97,117,116,111,0,115,116,100,58,58,110,117,108,108,112,116,114,95,116,0,33,34,118,101,99,116,111,114,32,108,101,110,103,116,104,95,101,114,114,111,114,34,0,67,58,92,101,109,115,100,107,92,101,109,115,99,114,105,112,116,101,110,92,116,97,103,45,49,46,51,52,46,49,92,115,121,115,116,101,109,92,105,110,99,108,117,100,101,92,108,105,98,99,120,120,92,118,101,99,116,111,114,0,118,116,97,98,108,101,32,102,111,114,32,0,86,84,84,32,102,111,114,32,0,116,121,112,101,105,110,102,111,32,102,111,114,32,0,116,121,112,101,105,110,102,111,32,110,97,109,101,32,102,111,114,32,0,99,111,118,97,114,105,97,110,116,32,114,101,116,117,114,110,32,116,104,117,110,107,32,116,111,32,0,99,111,110,115,116,114,117,99,116,105,111,110,32,118,116,97,98,108,101,32,102,111,114,32,0,45,105,110,45,0,118,105,114,116,117,97,108,32,116,104,117,110,107,32,116,111,32,0,110,111,110,45,118,105,114,116,117,97,108,32,116,104,117,110,107,32,116,111,32,0,103,117,97,114,100,32,118,97,114,105,97,98,108,101,32,102,111,114,32,0,114,101,102,101,114,101,110,99,101,32,116,101,109,112,111,114,97,114,121,32,102,111,114,32,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,101,120,99,101,112,116,105,111,110,32,111,102,32,116,121,112,101,32,37,115,58,32,37,115,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,101,120,99,101,112,116,105,111,110,32,111,102,32,116,121,112,101,32,37,115,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,102,111,114,101,105,103,110,32,101,120,99,101,112,116,105,111,110,0,116,101,114,109,105,110,97,116,105,110,103,0,117,110,99,97,117,103,104,116,0,17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,45,43,32,32,32,48,88,48,120,0,40,110,117,108,108,41,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,105,110,102,0,73,78,70,0,110,97,110,0,78,65,78,0,46,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);





/* no memory initializer */
var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


   
  Module["_i64Subtract"] = _i64Subtract;

  function ___assert_fail(condition, filename, line, func) {
      ABORT = true;
      throw 'Assertion failed: ' + Pointer_stringify(condition) + ', at: ' + [filename ? Pointer_stringify(filename) : 'unknown filename', line, func ? Pointer_stringify(func) : 'unknown function'] + ' at ' + stackTrace();
    }

  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  
  
  
  var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:function (adjusted) {
        if (!adjusted || EXCEPTIONS.infos[adjusted]) return adjusted;
        for (var ptr in EXCEPTIONS.infos) {
          var info = EXCEPTIONS.infos[ptr];
          if (info.adjusted === adjusted) {
            return ptr;
          }
        }
        return adjusted;
      },addRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount++;
      },decRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        assert(info.refcount > 0);
        info.refcount--;
        if (info.refcount === 0) {
          if (info.destructor) {
            Runtime.dynCall('vi', info.destructor, [ptr]);
          }
          delete EXCEPTIONS.infos[ptr];
          ___cxa_free_exception(ptr);
        }
      },clearRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount = 0;
      }};
  function ___resumeException(ptr) {
      if (!EXCEPTIONS.last) { EXCEPTIONS.last = ptr; }
      EXCEPTIONS.clearRef(EXCEPTIONS.deAdjust(ptr)); // exception refcount should be cleared, but don't free it
      throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
    }function ___cxa_find_matching_catch() {
      var thrown = EXCEPTIONS.last;
      if (!thrown) {
        // just pass through the null ptr
        return ((asm["setTempRet0"](0),0)|0);
      }
      var info = EXCEPTIONS.infos[thrown];
      var throwntype = info.type;
      if (!throwntype) {
        // just pass through the thrown ptr
        return ((asm["setTempRet0"](0),thrown)|0);
      }
      var typeArray = Array.prototype.slice.call(arguments);
  
      var pointer = Module['___cxa_is_pointer_type'](throwntype);
      // can_catch receives a **, add indirection
      if (!___cxa_find_matching_catch.buffer) ___cxa_find_matching_catch.buffer = _malloc(4);
      HEAP32[((___cxa_find_matching_catch.buffer)>>2)]=thrown;
      thrown = ___cxa_find_matching_catch.buffer;
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (typeArray[i] && Module['___cxa_can_catch'](typeArray[i], throwntype, thrown)) {
          thrown = HEAP32[((thrown)>>2)]; // undo indirection
          info.adjusted = thrown;
          return ((asm["setTempRet0"](typeArray[i]),thrown)|0);
        }
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      thrown = HEAP32[((thrown)>>2)]; // undo indirection
      return ((asm["setTempRet0"](throwntype),thrown)|0);
    }function ___cxa_throw(ptr, type, destructor) {
      EXCEPTIONS.infos[ptr] = {
        ptr: ptr,
        adjusted: ptr,
        type: type,
        destructor: destructor,
        refcount: 0
      };
      EXCEPTIONS.last = ptr;
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
    }

   
  Module["_memset"] = _memset;

  var _BDtoILow=true;

  
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  
  var ___errno_state=0;function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      HEAP32[((___errno_state)>>2)]=value;
      return value;
    }function _strerror_r(errnum, strerrbuf, buflen) {
      if (errnum in ERRNO_MESSAGES) {
        if (ERRNO_MESSAGES[errnum].length > buflen - 1) {
          return ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          var msg = ERRNO_MESSAGES[errnum];
          writeAsciiToMemory(msg, strerrbuf);
          return 0;
        }
      } else {
        return ___setErrNo(ERRNO_CODES.EINVAL);
      }
    }function _strerror(errnum) {
      if (!_strerror.buffer) _strerror.buffer = _malloc(256);
      _strerror_r(errnum, _strerror.buffer, 256);
      return _strerror.buffer;
    }

   
  Module["_bitshift64Shl"] = _bitshift64Shl;

  function _abort() {
      Module['abort']();
    }

  
  
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var fd = process.stdin.fd;
              // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
              var usingDevice = false;
              try {
                fd = fs.openSync('/dev/stdin', 'r');
                usingDevice = true;
              } catch (e) {}
  
              bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
  
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.buffer.byteLength which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.buffer.byteLength : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) { // Can we just reuse the buffer we are given?
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function(e) {
            callback(this.error);
            e.preventDefault();
          };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          return flags;
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          if (length === 0) return 0; // node errors on 0 length reads
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);
  
  function _fflush(stream) {
      // int fflush(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fflush.html
  
      /*
      // Disabled, see https://github.com/kripken/emscripten/issues/2770
      stream = FS.getStreamFromPtr(stream);
      if (stream.stream_ops.flush) {
        stream.stream_ops.flush(stream);
      }
      */
    }var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var accmode = flag & 2097155;
        var perms = ['r', 'w', 'rw'][accmode];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },getStreamFromPtr:function (ptr) {
        return FS.streams[ptr - 1];
      },getPtrForStream:function (stream) {
        return stream ? stream.fd + 1 : 0;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            callback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return PATH.resolve(FS.getPath(lookup.node.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        HEAP32[((_stdin)>>2)]=FS.getPtrForStream(stdin);
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        HEAP32[((_stdout)>>2)]=FS.getPtrForStream(stdout);
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        HEAP32[((_stderr)>>2)]=FS.getPtrForStream(stderr);
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperty(node, "usedBytes", {
            get: function() { return this.contents.length; }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};
  
  
  
  
  function _mkport() { throw 'TODO' }var SOCKFS={mount:function (mount) {
        // If Module['websocket'] has already been defined (e.g. for configuring
        // the subprotocol/url) use that, if not initialise it to a new object.
        Module['websocket'] = (Module['websocket'] && 
                               ('object' === typeof Module['websocket'])) ? Module['websocket'] : {};
  
        // Add the Event registration mechanism to the exported websocket configuration
        // object so we can register network callbacks from native JavaScript too.
        // For more documentation see system/include/emscripten/emscripten.h
        Module['websocket']._callbacks = {};
        Module['websocket']['on'] = function(event, callback) {
  	    if ('function' === typeof callback) {
  		  this._callbacks[event] = callback;
          }
  	    return this;
        };
  
        Module['websocket'].emit = function(event, param) {
  	    if ('function' === typeof this._callbacks[event]) {
  		  this._callbacks[event].call(this, param);
          }
        };
  
        // If debug is enabled register simple default logging callbacks for each Event.
  
        return FS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createSocket:function (family, type, protocol) {
        var streaming = type == 1;
        if (protocol) {
          assert(streaming == (protocol == 6)); // if SOCK_STREAM, must be tcp
        }
  
        // create our internal socket structure
        var sock = {
          family: family,
          type: type,
          protocol: protocol,
          server: null,
          error: null, // Used in getsockopt for SOL_SOCKET/SO_ERROR test
          peers: {},
          pending: [],
          recv_queue: [],
          sock_ops: SOCKFS.websocket_sock_ops
        };
  
        // create the filesystem node to store the socket structure
        var name = SOCKFS.nextname();
        var node = FS.createNode(SOCKFS.root, name, 49152, 0);
        node.sock = sock;
  
        // and the wrapping stream that enables library functions such
        // as read and write to indirectly interact with the socket
        var stream = FS.createStream({
          path: name,
          node: node,
          flags: FS.modeStringToFlags('r+'),
          seekable: false,
          stream_ops: SOCKFS.stream_ops
        });
  
        // map the new stream to the socket structure (sockets have a 1:1
        // relationship with a stream)
        sock.stream = stream;
  
        return sock;
      },getSocket:function (fd) {
        var stream = FS.getStream(fd);
        if (!stream || !FS.isSocket(stream.node.mode)) {
          return null;
        }
        return stream.node.sock;
      },stream_ops:{poll:function (stream) {
          var sock = stream.node.sock;
          return sock.sock_ops.poll(sock);
        },ioctl:function (stream, request, varargs) {
          var sock = stream.node.sock;
          return sock.sock_ops.ioctl(sock, request, varargs);
        },read:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          var msg = sock.sock_ops.recvmsg(sock, length);
          if (!msg) {
            // socket is closed
            return 0;
          }
          buffer.set(msg.buffer, offset);
          return msg.buffer.length;
        },write:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          return sock.sock_ops.sendmsg(sock, buffer, offset, length);
        },close:function (stream) {
          var sock = stream.node.sock;
          sock.sock_ops.close(sock);
        }},nextname:function () {
        if (!SOCKFS.nextname.current) {
          SOCKFS.nextname.current = 0;
        }
        return 'socket[' + (SOCKFS.nextname.current++) + ']';
      },websocket_sock_ops:{createPeer:function (sock, addr, port) {
          var ws;
  
          if (typeof addr === 'object') {
            ws = addr;
            addr = null;
            port = null;
          }
  
          if (ws) {
            // for sockets that've already connected (e.g. we're the server)
            // we can inspect the _socket property for the address
            if (ws._socket) {
              addr = ws._socket.remoteAddress;
              port = ws._socket.remotePort;
            }
            // if we're just now initializing a connection to the remote,
            // inspect the url property
            else {
              var result = /ws[s]?:\/\/([^:]+):(\d+)/.exec(ws.url);
              if (!result) {
                throw new Error('WebSocket URL must be in the format ws(s)://address:port');
              }
              addr = result[1];
              port = parseInt(result[2], 10);
            }
          } else {
            // create the actual websocket object and connect
            try {
              // runtimeConfig gets set to true if WebSocket runtime configuration is available.
              var runtimeConfig = (Module['websocket'] && ('object' === typeof Module['websocket']));
  
              // The default value is 'ws://' the replace is needed because the compiler replaces '//' comments with '#'
              // comments without checking context, so we'd end up with ws:#, the replace swaps the '#' for '//' again.
              var url = 'ws:#'.replace('#', '//');
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['url']) {
                  url = Module['websocket']['url']; // Fetch runtime WebSocket URL config.
                }
              }
  
              if (url === 'ws://' || url === 'wss://') { // Is the supplied URL config just a prefix, if so complete it.
                var parts = addr.split('/');
                url = url + parts[0] + ":" + port + "/" + parts.slice(1).join('/');
              }
  
              // Make the WebSocket subprotocol (Sec-WebSocket-Protocol) default to binary if no configuration is set.
              var subProtocols = 'binary'; // The default value is 'binary'
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['subprotocol']) {
                  subProtocols = Module['websocket']['subprotocol']; // Fetch runtime WebSocket subprotocol config.
                }
              }
  
              // The regex trims the string (removes spaces at the beginning and end, then splits the string by
              // <any space>,<any space> into an Array. Whitespace removal is important for Websockify and ws.
              subProtocols = subProtocols.replace(/^ +| +$/g,"").split(/ *, */);
  
              // The node ws library API for specifying optional subprotocol is slightly different than the browser's.
              var opts = ENVIRONMENT_IS_NODE ? {'protocol': subProtocols.toString()} : subProtocols;
  
              // If node we use the ws library.
              var WebSocket = ENVIRONMENT_IS_NODE ? require('ws') : window['WebSocket'];
              ws = new WebSocket(url, opts);
              ws.binaryType = 'arraybuffer';
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EHOSTUNREACH);
            }
          }
  
  
          var peer = {
            addr: addr,
            port: port,
            socket: ws,
            dgram_send_queue: []
          };
  
          SOCKFS.websocket_sock_ops.addPeer(sock, peer);
          SOCKFS.websocket_sock_ops.handlePeerEvents(sock, peer);
  
          // if this is a bound dgram socket, send the port number first to allow
          // us to override the ephemeral port reported to us by remotePort on the
          // remote end.
          if (sock.type === 2 && typeof sock.sport !== 'undefined') {
            peer.dgram_send_queue.push(new Uint8Array([
                255, 255, 255, 255,
                'p'.charCodeAt(0), 'o'.charCodeAt(0), 'r'.charCodeAt(0), 't'.charCodeAt(0),
                ((sock.sport & 0xff00) >> 8) , (sock.sport & 0xff)
            ]));
          }
  
          return peer;
        },getPeer:function (sock, addr, port) {
          return sock.peers[addr + ':' + port];
        },addPeer:function (sock, peer) {
          sock.peers[peer.addr + ':' + peer.port] = peer;
        },removePeer:function (sock, peer) {
          delete sock.peers[peer.addr + ':' + peer.port];
        },handlePeerEvents:function (sock, peer) {
          var first = true;
  
          var handleOpen = function () {
  
            Module['websocket'].emit('open', sock.stream.fd);
  
            try {
              var queued = peer.dgram_send_queue.shift();
              while (queued) {
                peer.socket.send(queued);
                queued = peer.dgram_send_queue.shift();
              }
            } catch (e) {
              // not much we can do here in the way of proper error handling as we've already
              // lied and said this data was sent. shut it down.
              peer.socket.close();
            }
          };
  
          function handleMessage(data) {
            assert(typeof data !== 'string' && data.byteLength !== undefined);  // must receive an ArrayBuffer
            data = new Uint8Array(data);  // make a typed array view on the array buffer
  
  
            // if this is the port message, override the peer's port with it
            var wasfirst = first;
            first = false;
            if (wasfirst &&
                data.length === 10 &&
                data[0] === 255 && data[1] === 255 && data[2] === 255 && data[3] === 255 &&
                data[4] === 'p'.charCodeAt(0) && data[5] === 'o'.charCodeAt(0) && data[6] === 'r'.charCodeAt(0) && data[7] === 't'.charCodeAt(0)) {
              // update the peer's port and it's key in the peer map
              var newport = ((data[8] << 8) | data[9]);
              SOCKFS.websocket_sock_ops.removePeer(sock, peer);
              peer.port = newport;
              SOCKFS.websocket_sock_ops.addPeer(sock, peer);
              return;
            }
  
            sock.recv_queue.push({ addr: peer.addr, port: peer.port, data: data });
            Module['websocket'].emit('message', sock.stream.fd);
          };
  
          if (ENVIRONMENT_IS_NODE) {
            peer.socket.on('open', handleOpen);
            peer.socket.on('message', function(data, flags) {
              if (!flags.binary) {
                return;
              }
              handleMessage((new Uint8Array(data)).buffer);  // copy from node Buffer -> ArrayBuffer
            });
            peer.socket.on('close', function() {
              Module['websocket'].emit('close', sock.stream.fd);
            });
            peer.socket.on('error', function(error) {
              // Although the ws library may pass errors that may be more descriptive than
              // ECONNREFUSED they are not necessarily the expected error code e.g. 
              // ENOTFOUND on getaddrinfo seems to be node.js specific, so using ECONNREFUSED
              // is still probably the most useful thing to do.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
              // don't throw
            });
          } else {
            peer.socket.onopen = handleOpen;
            peer.socket.onclose = function() {
              Module['websocket'].emit('close', sock.stream.fd);
            };
            peer.socket.onmessage = function peer_socket_onmessage(event) {
              handleMessage(event.data);
            };
            peer.socket.onerror = function(error) {
              // The WebSocket spec only allows a 'simple event' to be thrown on error,
              // so we only really know as much as ECONNREFUSED.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
            };
          }
        },poll:function (sock) {
          if (sock.type === 1 && sock.server) {
            // listen sockets should only say they're available for reading
            // if there are pending clients.
            return sock.pending.length ? (64 | 1) : 0;
          }
  
          var mask = 0;
          var dest = sock.type === 1 ?  // we only care about the socket state for connection-based sockets
            SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport) :
            null;
  
          if (sock.recv_queue.length ||
              !dest ||  // connection-less sockets are always ready to read
              (dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {  // let recv return 0 once closed
            mask |= (64 | 1);
          }
  
          if (!dest ||  // connection-less sockets are always ready to write
              (dest && dest.socket.readyState === dest.socket.OPEN)) {
            mask |= 4;
          }
  
          if ((dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {
            mask |= 16;
          }
  
          return mask;
        },ioctl:function (sock, request, arg) {
          switch (request) {
            case 21531:
              var bytes = 0;
              if (sock.recv_queue.length) {
                bytes = sock.recv_queue[0].data.length;
              }
              HEAP32[((arg)>>2)]=bytes;
              return 0;
            default:
              return ERRNO_CODES.EINVAL;
          }
        },close:function (sock) {
          // if we've spawned a listen server, close it
          if (sock.server) {
            try {
              sock.server.close();
            } catch (e) {
            }
            sock.server = null;
          }
          // close any peer connections
          var peers = Object.keys(sock.peers);
          for (var i = 0; i < peers.length; i++) {
            var peer = sock.peers[peers[i]];
            try {
              peer.socket.close();
            } catch (e) {
            }
            SOCKFS.websocket_sock_ops.removePeer(sock, peer);
          }
          return 0;
        },bind:function (sock, addr, port) {
          if (typeof sock.saddr !== 'undefined' || typeof sock.sport !== 'undefined') {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already bound
          }
          sock.saddr = addr;
          sock.sport = port || _mkport();
          // in order to emulate dgram sockets, we need to launch a listen server when
          // binding on a connection-less socket
          // note: this is only required on the server side
          if (sock.type === 2) {
            // close the existing server if it exists
            if (sock.server) {
              sock.server.close();
              sock.server = null;
            }
            // swallow error operation not supported error that occurs when binding in the
            // browser where this isn't supported
            try {
              sock.sock_ops.listen(sock, 0);
            } catch (e) {
              if (!(e instanceof FS.ErrnoError)) throw e;
              if (e.errno !== ERRNO_CODES.EOPNOTSUPP) throw e;
            }
          }
        },connect:function (sock, addr, port) {
          if (sock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
  
          // TODO autobind
          // if (!sock.addr && sock.type == 2) {
          // }
  
          // early out if we're already connected / in the middle of connecting
          if (typeof sock.daddr !== 'undefined' && typeof sock.dport !== 'undefined') {
            var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
            if (dest) {
              if (dest.socket.readyState === dest.socket.CONNECTING) {
                throw new FS.ErrnoError(ERRNO_CODES.EALREADY);
              } else {
                throw new FS.ErrnoError(ERRNO_CODES.EISCONN);
              }
            }
          }
  
          // add the socket to our peer list and set our
          // destination address / port to match
          var peer = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
          sock.daddr = peer.addr;
          sock.dport = peer.port;
  
          // always "fail" in non-blocking mode
          throw new FS.ErrnoError(ERRNO_CODES.EINPROGRESS);
        },listen:function (sock, backlog) {
          if (!ENVIRONMENT_IS_NODE) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
          if (sock.server) {
             throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already listening
          }
          var WebSocketServer = require('ws').Server;
          var host = sock.saddr;
          sock.server = new WebSocketServer({
            host: host,
            port: sock.sport
            // TODO support backlog
          });
          Module['websocket'].emit('listen', sock.stream.fd); // Send Event with listen fd.
  
          sock.server.on('connection', function(ws) {
            if (sock.type === 1) {
              var newsock = SOCKFS.createSocket(sock.family, sock.type, sock.protocol);
  
              // create a peer on the new socket
              var peer = SOCKFS.websocket_sock_ops.createPeer(newsock, ws);
              newsock.daddr = peer.addr;
              newsock.dport = peer.port;
  
              // push to queue for accept to pick up
              sock.pending.push(newsock);
              Module['websocket'].emit('connection', newsock.stream.fd);
            } else {
              // create a peer on the listen socket so calling sendto
              // with the listen socket and an address will resolve
              // to the correct client
              SOCKFS.websocket_sock_ops.createPeer(sock, ws);
              Module['websocket'].emit('connection', sock.stream.fd);
            }
          });
          sock.server.on('closed', function() {
            Module['websocket'].emit('close', sock.stream.fd);
            sock.server = null;
          });
          sock.server.on('error', function(error) {
            // Although the ws library may pass errors that may be more descriptive than
            // ECONNREFUSED they are not necessarily the expected error code e.g. 
            // ENOTFOUND on getaddrinfo seems to be node.js specific, so using EHOSTUNREACH
            // is still probably the most useful thing to do. This error shouldn't
            // occur in a well written app as errors should get trapped in the compiled
            // app's own getaddrinfo call.
            sock.error = ERRNO_CODES.EHOSTUNREACH; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
            Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'EHOSTUNREACH: Host is unreachable']);
            // don't throw
          });
        },accept:function (listensock) {
          if (!listensock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          var newsock = listensock.pending.shift();
          newsock.stream.flags = listensock.stream.flags;
          return newsock;
        },getname:function (sock, peer) {
          var addr, port;
          if (peer) {
            if (sock.daddr === undefined || sock.dport === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            }
            addr = sock.daddr;
            port = sock.dport;
          } else {
            // TODO saddr and sport will be set for bind()'d UDP sockets, but what
            // should we be returning for TCP sockets that've been connect()'d?
            addr = sock.saddr || 0;
            port = sock.sport || 0;
          }
          return { addr: addr, port: port };
        },sendmsg:function (sock, buffer, offset, length, addr, port) {
          if (sock.type === 2) {
            // connection-less sockets will honor the message address,
            // and otherwise fall back to the bound destination address
            if (addr === undefined || port === undefined) {
              addr = sock.daddr;
              port = sock.dport;
            }
            // if there was no address to fall back to, error out
            if (addr === undefined || port === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.EDESTADDRREQ);
            }
          } else {
            // connection-based sockets will only use the bound
            addr = sock.daddr;
            port = sock.dport;
          }
  
          // find the peer for the destination address
          var dest = SOCKFS.websocket_sock_ops.getPeer(sock, addr, port);
  
          // early out if not connected with a connection-based socket
          if (sock.type === 1) {
            if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            } else if (dest.socket.readyState === dest.socket.CONNECTING) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // create a copy of the incoming data to send, as the WebSocket API
          // doesn't work entirely with an ArrayBufferView, it'll just send
          // the entire underlying buffer
          var data;
          if (buffer instanceof Array || buffer instanceof ArrayBuffer) {
            data = buffer.slice(offset, offset + length);
          } else {  // ArrayBufferView
            data = buffer.buffer.slice(buffer.byteOffset + offset, buffer.byteOffset + offset + length);
          }
  
          // if we're emulating a connection-less dgram socket and don't have
          // a cached connection, queue the buffer to send upon connect and
          // lie, saying the data was sent now.
          if (sock.type === 2) {
            if (!dest || dest.socket.readyState !== dest.socket.OPEN) {
              // if we're not connected, open a new connection
              if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                dest = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
              }
              dest.dgram_send_queue.push(data);
              return length;
            }
          }
  
          try {
            // send the actual data
            dest.socket.send(data);
            return length;
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
        },recvmsg:function (sock, length) {
          // http://pubs.opengroup.org/onlinepubs/7908799/xns/recvmsg.html
          if (sock.type === 1 && sock.server) {
            // tcp servers should not be recv()'ing on the listen socket
            throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
          }
  
          var queued = sock.recv_queue.shift();
          if (!queued) {
            if (sock.type === 1) {
              var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
  
              if (!dest) {
                // if we have a destination address but are not connected, error out
                throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
              }
              else if (dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                // return null if the socket has closed
                return null;
              }
              else {
                // else, our socket is in a valid state but truly has nothing available
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
            } else {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // queued.data will be an ArrayBuffer if it's unadulterated, but if it's
          // requeued TCP data it'll be an ArrayBufferView
          var queuedLength = queued.data.byteLength || queued.data.length;
          var queuedOffset = queued.data.byteOffset || 0;
          var queuedBuffer = queued.data.buffer || queued.data;
          var bytesRead = Math.min(length, queuedLength);
          var res = {
            buffer: new Uint8Array(queuedBuffer, queuedOffset, bytesRead),
            addr: queued.addr,
            port: queued.port
          };
  
  
          // push back any unread data for TCP connections
          if (sock.type === 1 && bytesRead < queuedLength) {
            var bytesRemaining = queuedLength - bytesRead;
            queued.data = new Uint8Array(queuedBuffer, queuedOffset + bytesRead, bytesRemaining);
            sock.recv_queue.unshift(queued);
          }
  
          return res;
        }}};function _send(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _write(fd, buf, len);
    }
  
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  
  function _fileno(stream) {
      // int fileno(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fileno.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) return -1;
      return stream.fd;
    }function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var fd = _fileno(stream);
      var bytesWritten = _write(fd, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return 0;
      } else {
        return (bytesWritten / size)|0;
      }
    }
  
  
   
  Module["_strlen"] = _strlen;
  
  function __reallyNegative(x) {
      return x < 0 || (x === 0 && (1/x) === -Infinity);
    }function __formatString(format, varargs) {
      assert((varargs & 3) === 0);
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        argIndex = Runtime.prepVararg(argIndex, type);
        if (type === 'double') {
          ret = (HEAP32[((tempDoublePtr)>>2)]=HEAP32[(((varargs)+(argIndex))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((varargs)+((argIndex)+(4)))>>2)],(+(HEAPF64[(tempDoublePtr)>>3])));
          argIndex += 8;
        } else if (type == 'i64') {
          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                 HEAP32[(((varargs)+(argIndex+4))>>2)]];
  
          argIndex += 8;
        } else {
          assert((argIndex & 3) === 0);
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[(((varargs)+(argIndex))>>2)];
          argIndex += 4;
        }
        return ret;
      }
  
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[((textIndex)>>0)];
        if (curr === 0) break;
        next = HEAP8[((textIndex+1)>>0)];
        if (curr == 37) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          var flagPadSign = false;
          flagsLoop: while (1) {
            switch (next) {
              case 43:
                flagAlwaysSigned = true;
                break;
              case 45:
                flagLeftAlign = true;
                break;
              case 35:
                flagAlternative = true;
                break;
              case 48:
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              case 32:
                flagPadSign = true;
                break;
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          }
  
          // Handle width.
          var width = 0;
          if (next == 42) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          } else {
            while (next >= 48 && next <= 57) {
              width = width * 10 + (next - 48);
              textIndex++;
              next = HEAP8[((textIndex+1)>>0)];
            }
          }
  
          // Handle precision.
          var precisionSet = false, precision = -1;
          if (next == 46) {
            precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
            if (next == 42) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[((textIndex+1)>>0)];
                if (precisionChr < 48 ||
                    precisionChr > 57) break;
                precision = precision * 10 + (precisionChr - 48);
                textIndex++;
              }
            }
            next = HEAP8[((textIndex+1)>>0)];
          }
          if (precision < 0) {
            precision = 6; // Standard default.
            precisionSet = false;
          }
  
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 104) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 108) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[((textIndex+1)>>0)];
  
          // Handle type specifier.
          switch (String.fromCharCode(next)) {
            case 'd': case 'i': case 'u': case 'o': case 'x': case 'X': case 'p': {
              // Integer.
              var signed = next == 100 || next == 105;
              argSize = argSize || 4;
              var currArg = getNextArg('i' + (argSize * 8));
              var origArg = currArg;
              var argText;
              // Flatten i64-1 [low, high] into a (slightly rounded) double
              if (argSize == 8) {
                currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 117);
              }
              // Truncate to requested size.
              if (argSize <= 4) {
                var limit = Math.pow(256, argSize) - 1;
                currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
              }
              // Format the number.
              var currAbsArg = Math.abs(currArg);
              var prefix = '';
              if (next == 100 || next == 105) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
                argText = reSign(currArg, 8 * argSize, 1).toString(10);
              } else if (next == 117) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
                argText = unSign(currArg, 8 * argSize, 1).toString(10);
                currArg = Math.abs(currArg);
              } else if (next == 111) {
                argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
              } else if (next == 120 || next == 88) {
                prefix = (flagAlternative && currArg != 0) ? '0x' : '';
                if (argSize == 8 && i64Math) {
                  if (origArg[1]) {
                    argText = (origArg[1]>>>0).toString(16);
                    var lower = (origArg[0]>>>0).toString(16);
                    while (lower.length < 8) lower = '0' + lower;
                    argText += lower;
                  } else {
                    argText = (origArg[0]>>>0).toString(16);
                  }
                } else
                if (currArg < 0) {
                  // Represent negative numbers in hex as 2's complement.
                  currArg = -currArg;
                  argText = (currAbsArg - 1).toString(16);
                  var buffer = [];
                  for (var i = 0; i < argText.length; i++) {
                    buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                  }
                  argText = buffer.join('');
                  while (argText.length < argSize * 2) argText = 'f' + argText;
                } else {
                  argText = currAbsArg.toString(16);
                }
                if (next == 88) {
                  prefix = prefix.toUpperCase();
                  argText = argText.toUpperCase();
                }
              } else if (next == 112) {
                if (currAbsArg === 0) {
                  argText = '(nil)';
                } else {
                  prefix = '0x';
                  argText = currAbsArg.toString(16);
                }
              }
              if (precisionSet) {
                while (argText.length < precision) {
                  argText = '0' + argText;
                }
              }
  
              // Add sign if needed
              if (currArg >= 0) {
                if (flagAlwaysSigned) {
                  prefix = '+' + prefix;
                } else if (flagPadSign) {
                  prefix = ' ' + prefix;
                }
              }
  
              // Move sign to prefix so we zero-pad after the sign
              if (argText.charAt(0) == '-') {
                prefix = '-' + prefix;
                argText = argText.substr(1);
              }
  
              // Add padding.
              while (prefix.length + argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad) {
                    argText = '0' + argText;
                  } else {
                    prefix = ' ' + prefix;
                  }
                }
              }
  
              // Insert the result into the buffer.
              argText = prefix + argText;
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 'f': case 'F': case 'e': case 'E': case 'g': case 'G': {
              // Float.
              var currArg = getNextArg('double');
              var argText;
              if (isNaN(currArg)) {
                argText = 'nan';
                flagZeroPad = false;
              } else if (!isFinite(currArg)) {
                argText = (currArg < 0 ? '-' : '') + 'inf';
                flagZeroPad = false;
              } else {
                var isGeneral = false;
                var effectivePrecision = Math.min(precision, 20);
  
                // Convert g/G to f/F or e/E, as per:
                // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
                if (next == 103 || next == 71) {
                  isGeneral = true;
                  precision = precision || 1;
                  var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                  if (precision > exponent && exponent >= -4) {
                    next = ((next == 103) ? 'f' : 'F').charCodeAt(0);
                    precision -= exponent + 1;
                  } else {
                    next = ((next == 103) ? 'e' : 'E').charCodeAt(0);
                    precision--;
                  }
                  effectivePrecision = Math.min(precision, 20);
                }
  
                if (next == 101 || next == 69) {
                  argText = currArg.toExponential(effectivePrecision);
                  // Make sure the exponent has at least 2 digits.
                  if (/[eE][-+]\d$/.test(argText)) {
                    argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                  }
                } else if (next == 102 || next == 70) {
                  argText = currArg.toFixed(effectivePrecision);
                  if (currArg === 0 && __reallyNegative(currArg)) {
                    argText = '-' + argText;
                  }
                }
  
                var parts = argText.split('e');
                if (isGeneral && !flagAlternative) {
                  // Discard trailing zeros and periods.
                  while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                         (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                    parts[0] = parts[0].slice(0, -1);
                  }
                } else {
                  // Make sure we have a period in alternative mode.
                  if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                  // Zero pad until required precision.
                  while (precision > effectivePrecision++) parts[0] += '0';
                }
                argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
  
                // Capitalize 'E' if needed.
                if (next == 69) argText = argText.toUpperCase();
  
                // Add sign.
                if (currArg >= 0) {
                  if (flagAlwaysSigned) {
                    argText = '+' + argText;
                  } else if (flagPadSign) {
                    argText = ' ' + argText;
                  }
                }
              }
  
              // Add padding.
              while (argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                    argText = argText[0] + '0' + argText.slice(1);
                  } else {
                    argText = (flagZeroPad ? '0' : ' ') + argText;
                  }
                }
              }
  
              // Adjust case.
              if (next < 97) argText = argText.toUpperCase();
  
              // Insert the result into the buffer.
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 's': {
              // String.
              var arg = getNextArg('i8*');
              var argLength = arg ? _strlen(arg) : '(null)'.length;
              if (precisionSet) argLength = Math.min(argLength, precision);
              if (!flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              if (arg) {
                for (var i = 0; i < argLength; i++) {
                  ret.push(HEAPU8[((arg++)>>0)]);
                }
              } else {
                ret = ret.concat(intArrayFromString('(null)'.substr(0, argLength), true));
              }
              if (flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              break;
            }
            case 'c': {
              // Character.
              if (flagLeftAlign) ret.push(getNextArg('i8'));
              while (--width > 0) {
                ret.push(32);
              }
              if (!flagLeftAlign) ret.push(getNextArg('i8'));
              break;
            }
            case 'n': {
              // Write the length written so far to the next parameter.
              var ptr = getNextArg('i32*');
              HEAP32[((ptr)>>2)]=ret.length;
              break;
            }
            case '%': {
              // Literal percent sign.
              ret.push(curr);
              break;
            }
            default: {
              // Unknown specifiers remain untouched.
              for (var i = startTextIndex; i < textIndex + 2; i++) {
                ret.push(HEAP8[((i)>>0)]);
              }
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _fprintf(stream, format, varargs) {
      // int fprintf(FILE *restrict stream, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var stack = Runtime.stackSave();
      var ret = _fwrite(allocate(result, 'i8', ALLOC_STACK), 1, result.length, stream);
      Runtime.stackRestore(stack);
      return ret;
    }

  function _pthread_once(ptr, func) {
      if (!_pthread_once.seen) _pthread_once.seen = {};
      if (ptr in _pthread_once.seen) return;
      Runtime.dynCall('v', func);
      _pthread_once.seen[ptr] = 1;
    }


  function _fputc(c, stream) {
      // int fputc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputc.html
      var chr = unSign(c & 0xFF);
      HEAP8[((_fputc.ret)>>0)]=chr;
      var fd = _fileno(stream);
      var ret = _write(fd, _fputc.ret, 1);
      if (ret == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return -1;
      } else {
        return chr;
      }
    }

  
  var PTHREAD_SPECIFIC={};function _pthread_getspecific(key) {
      return PTHREAD_SPECIFIC[key] || 0;
    }

  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 85: return totalMemory / PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 79:
          return 0;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: {
          if (typeof navigator === 'object') return navigator['hardwareConcurrency'] || 1;
          return 1;
        }
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

  function _Load_JPEG_Buffer() {
  Module['printErr']('missing function: Load_JPEG_Buffer'); abort(-1);
  }

  
  var PTHREAD_SPECIFIC_NEXT_KEY=1;function _pthread_key_create(key, destructor) {
      if (key == 0) {
        return ERRNO_CODES.EINVAL;
      }
      HEAP32[((key)>>2)]=PTHREAD_SPECIFIC_NEXT_KEY;
      // values start at 0
      PTHREAD_SPECIFIC[PTHREAD_SPECIFIC_NEXT_KEY] = 0;
      PTHREAD_SPECIFIC_NEXT_KEY++;
      return 0;
    }

  function _pthread_setspecific(key, value) {
      if (!(key in PTHREAD_SPECIFIC)) {
        return ERRNO_CODES.EINVAL;
      }
      PTHREAD_SPECIFIC[key] = value;
      return 0;
    }

  
  function _malloc(bytes) {
      /* Over-allocate to make sure it is byte-aligned by 8.
       * This will leak memory, but this is only the dummy
       * implementation (replaced by dlmalloc normally) so
       * not an issue.
       */
      Runtime.warnOnce('using stub malloc (reference it from C to have the real one included)');
      var ptr = Runtime.dynamicAlloc(bytes + 8);
      return (ptr+8) & 0xFFFFFFF8;
    }
  Module["_malloc"] = _malloc;function ___cxa_allocate_exception(size) {
      return _malloc(size);
    }

   
  Module["_i64Add"] = _i64Add;

   
  Module["_bitshift64Lshr"] = _bitshift64Lshr;

  var _BDtoIHigh=true;

  function _vfprintf(s, f, va_arg) {
      return _fprintf(s, f, HEAP32[((va_arg)>>2)]);
    }

  function ___cxa_begin_catch(ptr) {
      __ZSt18uncaught_exceptionv.uncaught_exception--;
      EXCEPTIONS.caught.push(ptr);
      EXCEPTIONS.addRef(EXCEPTIONS.deAdjust(ptr));
      return ptr;
    }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) {
        var success = self.alloc(bytes);
        if (!success) return -1 >>> 0; // sbrk failure code
      }
      return ret;  // Previous break location.
    }

   
  Module["_memmove"] = _memmove;

  function ___errno_location() {
      return ___errno_state;
    }

  var _BItoD=true;

   
  Module["_strcpy"] = _strcpy;

  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

___errno_state = Runtime.staticAlloc(4); HEAP32[((___errno_state)>>2)]=0;
FS.staticInit();__ATINIT__.unshift(function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() });__ATMAIN__.push(function() { FS.ignorePermissions = false });__ATEXIT__.push(function() { FS.quit() });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
__ATINIT__.unshift(function() { TTY.init() });__ATEXIT__.push(function() { TTY.shutdown() });
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); }
__ATINIT__.push(function() { SOCKFS.root = FS.mount(SOCKFS, {}, null); });
_fputc.ret = allocate([0], "i8", ALLOC_STATIC);
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

 var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);


var debug_table_iiii = ["0", "0", "jsCall_iiii_0", "0", "jsCall_iiii_1", "0", "jsCall_iiii_2", "0", "jsCall_iiii_3", "0", "jsCall_iiii_4", "0", "jsCall_iiii_5", "0", "jsCall_iiii_6", "0", "jsCall_iiii_7", "0", "jsCall_iiii_8", "0", "jsCall_iiii_9", "0", "jsCall_iiii_10", "0", "jsCall_iiii_11", "0", "jsCall_iiii_12", "0", "jsCall_iiii_13", "0", "jsCall_iiii_14", "0", "jsCall_iiii_15", "0", "jsCall_iiii_16", "0", "jsCall_iiii_17", "0", "jsCall_iiii_18", "0", "jsCall_iiii_19", "0", "__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv", "_sn_write", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"];
var debug_table_viiiii = ["0", "0", "jsCall_viiiii_0", "0", "jsCall_viiiii_1", "0", "jsCall_viiiii_2", "0", "jsCall_viiiii_3", "0", "jsCall_viiiii_4", "0", "jsCall_viiiii_5", "0", "jsCall_viiiii_6", "0", "jsCall_viiiii_7", "0", "jsCall_viiiii_8", "0", "jsCall_viiiii_9", "0", "jsCall_viiiii_10", "0", "jsCall_viiiii_11", "0", "jsCall_viiiii_12", "0", "jsCall_viiiii_13", "0", "jsCall_viiiii_14", "0", "jsCall_viiiii_15", "0", "jsCall_viiiii_16", "0", "jsCall_viiiii_17", "0", "jsCall_viiiii_18", "0", "jsCall_viiiii_19", "0", "__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib", "__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"];
var debug_table_vi = ["0", "0", "jsCall_vi_0", "0", "jsCall_vi_1", "0", "jsCall_vi_2", "0", "jsCall_vi_3", "0", "jsCall_vi_4", "0", "jsCall_vi_5", "0", "jsCall_vi_6", "0", "jsCall_vi_7", "0", "jsCall_vi_8", "0", "jsCall_vi_9", "0", "jsCall_vi_10", "0", "jsCall_vi_11", "0", "jsCall_vi_12", "0", "jsCall_vi_13", "0", "jsCall_vi_14", "0", "jsCall_vi_15", "0", "jsCall_vi_16", "0", "jsCall_vi_17", "0", "jsCall_vi_18", "0", "jsCall_vi_19", "0", "__ZNSt9bad_allocD2Ev", "__ZNSt9bad_allocD0Ev", "__ZN10__cxxabiv116__shim_type_infoD2Ev", "__ZN10__cxxabiv117__class_type_infoD0Ev", "__ZNK10__cxxabiv116__shim_type_info5noop1Ev", "__ZNK10__cxxabiv116__shim_type_info5noop2Ev", "__ZN10__cxxabiv120__si_class_type_infoD0Ev", "__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"];
var debug_table_ii = ["0", "0", "jsCall_ii_0", "0", "jsCall_ii_1", "0", "jsCall_ii_2", "0", "jsCall_ii_3", "0", "jsCall_ii_4", "0", "jsCall_ii_5", "0", "jsCall_ii_6", "0", "jsCall_ii_7", "0", "jsCall_ii_8", "0", "jsCall_ii_9", "0", "jsCall_ii_10", "0", "jsCall_ii_11", "0", "jsCall_ii_12", "0", "jsCall_ii_13", "0", "jsCall_ii_14", "0", "jsCall_ii_15", "0", "jsCall_ii_16", "0", "jsCall_ii_17", "0", "jsCall_ii_18", "0", "jsCall_ii_19", "0", "__ZNKSt9bad_alloc4whatEv", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"];
var debug_table_v = ["0", "0", "jsCall_v_0", "0", "jsCall_v_1", "0", "jsCall_v_2", "0", "jsCall_v_3", "0", "jsCall_v_4", "0", "jsCall_v_5", "0", "jsCall_v_6", "0", "jsCall_v_7", "0", "jsCall_v_8", "0", "jsCall_v_9", "0", "jsCall_v_10", "0", "jsCall_v_11", "0", "jsCall_v_12", "0", "jsCall_v_13", "0", "jsCall_v_14", "0", "jsCall_v_15", "0", "jsCall_v_16", "0", "jsCall_v_17", "0", "jsCall_v_18", "0", "jsCall_v_19", "0", "__ZL25default_terminate_handlerv", "__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"];
var debug_table_viiiiii = ["0", "0", "jsCall_viiiiii_0", "0", "jsCall_viiiiii_1", "0", "jsCall_viiiiii_2", "0", "jsCall_viiiiii_3", "0", "jsCall_viiiiii_4", "0", "jsCall_viiiiii_5", "0", "jsCall_viiiiii_6", "0", "jsCall_viiiiii_7", "0", "jsCall_viiiiii_8", "0", "jsCall_viiiiii_9", "0", "jsCall_viiiiii_10", "0", "jsCall_viiiiii_11", "0", "jsCall_viiiiii_12", "0", "jsCall_viiiiii_13", "0", "jsCall_viiiiii_14", "0", "jsCall_viiiiii_15", "0", "jsCall_viiiiii_16", "0", "jsCall_viiiiii_17", "0", "jsCall_viiiiii_18", "0", "jsCall_viiiiii_19", "0", "__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib", "__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"];
var debug_table_viiii = ["0", "0", "jsCall_viiii_0", "0", "jsCall_viiii_1", "0", "jsCall_viiii_2", "0", "jsCall_viiii_3", "0", "jsCall_viiii_4", "0", "jsCall_viiii_5", "0", "jsCall_viiii_6", "0", "jsCall_viiii_7", "0", "jsCall_viiii_8", "0", "jsCall_viiii_9", "0", "jsCall_viiii_10", "0", "jsCall_viiii_11", "0", "jsCall_viiii_12", "0", "jsCall_viiii_13", "0", "jsCall_viiii_14", "0", "jsCall_viiii_15", "0", "jsCall_viiii_16", "0", "jsCall_viiii_17", "0", "jsCall_viiii_18", "0", "jsCall_viiii_19", "0", "__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi", "__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"];
function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: ii: " + debug_table_ii[x] + "  viiii: " + debug_table_viiii[x] + "  vi: " + debug_table_vi[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  v: " + debug_table_v[x] + "  "); abort(x) }

function nullFunc_viiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: viiii: " + debug_table_viiii[x] + "  vi: " + debug_table_vi[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  v: " + debug_table_v[x] + "  iiii: " + debug_table_iiii[x] + "  ii: " + debug_table_ii[x] + "  "); abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: v: " + debug_table_v[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  ii: " + debug_table_ii[x] + "  iiii: " + debug_table_iiii[x] + "  "); abort(x) }

function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: iiii: " + debug_table_iiii[x] + "  vi: " + debug_table_vi[x] + "  v: " + debug_table_v[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  "); abort(x) }

function nullFunc_v(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: vi: " + debug_table_vi[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  ii: " + debug_table_ii[x] + "  iiii: " + debug_table_iiii[x] + "  "); abort(x) }

function nullFunc_viiiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  vi: " + debug_table_vi[x] + "  v: " + debug_table_v[x] + "  iiii: " + debug_table_iiii[x] + "  ii: " + debug_table_ii[x] + "  "); abort(x) }

function nullFunc_viiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: vi: " + debug_table_vi[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  v: " + debug_table_v[x] + "  iiii: " + debug_table_iiii[x] + "  ii: " + debug_table_ii[x] + "  "); abort(x) }

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function jsCall_iiii(index,a1,a2,a3) {
    return Runtime.functionPointers[index](a1,a2,a3);
}

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function jsCall_viiiii(index,a1,a2,a3,a4,a5) {
    Runtime.functionPointers[index](a1,a2,a3,a4,a5);
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function jsCall_vi(index,a1) {
    Runtime.functionPointers[index](a1);
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function jsCall_ii(index,a1) {
    return Runtime.functionPointers[index](a1);
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function jsCall_v(index) {
    Runtime.functionPointers[index]();
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function jsCall_viiiiii(index,a1,a2,a3,a4,a5,a6) {
    Runtime.functionPointers[index](a1,a2,a3,a4,a5,a6);
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function jsCall_viiii(index,a1,a2,a3,a4) {
    Runtime.functionPointers[index](a1,a2,a3,a4);
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };
Module.asmLibraryArg = { "abort": abort, "assert": assert, "nullFunc_iiii": nullFunc_iiii, "nullFunc_viiiii": nullFunc_viiiii, "nullFunc_vi": nullFunc_vi, "nullFunc_ii": nullFunc_ii, "nullFunc_v": nullFunc_v, "nullFunc_viiiiii": nullFunc_viiiiii, "nullFunc_viiii": nullFunc_viiii, "invoke_iiii": invoke_iiii, "jsCall_iiii": jsCall_iiii, "invoke_viiiii": invoke_viiiii, "jsCall_viiiii": jsCall_viiiii, "invoke_vi": invoke_vi, "jsCall_vi": jsCall_vi, "invoke_ii": invoke_ii, "jsCall_ii": jsCall_ii, "invoke_v": invoke_v, "jsCall_v": jsCall_v, "invoke_viiiiii": invoke_viiiiii, "jsCall_viiiiii": jsCall_viiiiii, "invoke_viiii": invoke_viiii, "jsCall_viiii": jsCall_viiii, "_send": _send, "___setErrNo": ___setErrNo, "_vfprintf": _vfprintf, "___assert_fail": ___assert_fail, "___cxa_allocate_exception": ___cxa_allocate_exception, "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv, "_fflush": _fflush, "_pwrite": _pwrite, "_strerror_r": _strerror_r, "__reallyNegative": __reallyNegative, "_sbrk": _sbrk, "_Load_JPEG_Buffer": _Load_JPEG_Buffer, "___cxa_begin_catch": ___cxa_begin_catch, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_fileno": _fileno, "___resumeException": ___resumeException, "___cxa_find_matching_catch": ___cxa_find_matching_catch, "_sysconf": _sysconf, "_pthread_getspecific": _pthread_getspecific, "_pthread_once": _pthread_once, "_mkport": _mkport, "_pthread_key_create": _pthread_key_create, "_write": _write, "___errno_location": ___errno_location, "_pthread_setspecific": _pthread_setspecific, "_fputc": _fputc, "___cxa_throw": ___cxa_throw, "_abort": _abort, "_fwrite": _fwrite, "_time": _time, "_fprintf": _fprintf, "_strerror": _strerror, "__formatString": __formatString, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8, "_stderr": _stderr };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'use asm';
  
  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);


  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;
  var _stderr=env._stderr|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;

  var tempRet0 = 0;
  var tempRet1 = 0;
  var tempRet2 = 0;
  var tempRet3 = 0;
  var tempRet4 = 0;
  var tempRet5 = 0;
  var tempRet6 = 0;
  var tempRet7 = 0;
  var tempRet8 = 0;
  var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_viiiii=env.nullFunc_viiiii;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_v=env.nullFunc_v;
  var nullFunc_viiiiii=env.nullFunc_viiiiii;
  var nullFunc_viiii=env.nullFunc_viiii;
  var invoke_iiii=env.invoke_iiii;
  var jsCall_iiii=env.jsCall_iiii;
  var invoke_viiiii=env.invoke_viiiii;
  var jsCall_viiiii=env.jsCall_viiiii;
  var invoke_vi=env.invoke_vi;
  var jsCall_vi=env.jsCall_vi;
  var invoke_ii=env.invoke_ii;
  var jsCall_ii=env.jsCall_ii;
  var invoke_v=env.invoke_v;
  var jsCall_v=env.jsCall_v;
  var invoke_viiiiii=env.invoke_viiiiii;
  var jsCall_viiiiii=env.jsCall_viiiiii;
  var invoke_viiii=env.invoke_viiii;
  var jsCall_viiii=env.jsCall_viiii;
  var _send=env._send;
  var ___setErrNo=env.___setErrNo;
  var _vfprintf=env._vfprintf;
  var ___assert_fail=env.___assert_fail;
  var ___cxa_allocate_exception=env.___cxa_allocate_exception;
  var __ZSt18uncaught_exceptionv=env.__ZSt18uncaught_exceptionv;
  var _fflush=env._fflush;
  var _pwrite=env._pwrite;
  var _strerror_r=env._strerror_r;
  var __reallyNegative=env.__reallyNegative;
  var _sbrk=env._sbrk;
  var _Load_JPEG_Buffer=env._Load_JPEG_Buffer;
  var ___cxa_begin_catch=env.___cxa_begin_catch;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _fileno=env._fileno;
  var ___resumeException=env.___resumeException;
  var ___cxa_find_matching_catch=env.___cxa_find_matching_catch;
  var _sysconf=env._sysconf;
  var _pthread_getspecific=env._pthread_getspecific;
  var _pthread_once=env._pthread_once;
  var _mkport=env._mkport;
  var _pthread_key_create=env._pthread_key_create;
  var _write=env._write;
  var ___errno_location=env.___errno_location;
  var _pthread_setspecific=env._pthread_setspecific;
  var _fputc=env._fputc;
  var ___cxa_throw=env.___cxa_throw;
  var _abort=env._abort;
  var _fwrite=env._fwrite;
  var _time=env._time;
  var _fprintf=env._fprintf;
  var _strerror=env._strerror;
  var __formatString=env.__formatString;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS
function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;
if ((STACKTOP|0) >= (STACK_MAX|0)) abort();

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function establishStackSpace(stackBase, stackMax) {
  stackBase = stackBase|0;
  stackMax = stackMax|0;
  STACKTOP = stackBase;
  STACK_MAX = stackMax;
}

function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}
function copyTempFloat(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
}
function copyTempDouble(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
  HEAP8[tempDoublePtr+4>>0] = HEAP8[ptr+4>>0];
  HEAP8[tempDoublePtr+5>>0] = HEAP8[ptr+5>>0];
  HEAP8[tempDoublePtr+6>>0] = HEAP8[ptr+6>>0];
  HEAP8[tempDoublePtr+7>>0] = HEAP8[ptr+7>>0];
}

function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}
function getTempRet0() {
  return tempRet0|0;
}

function _emscripten_bind_VoidPtr___destroy___0($self) {
 $self = $self|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($self|0)==(0|0); //@line 18 "./visTest_glue.cpp"
 if (!($0)) {
  __ZdlPv($self); //@line 18 "./visTest_glue.cpp"
 }
 return; //@line 19 "./visTest_glue.cpp"
}
function _emscripten_bind_CImageUtilHtml5_CImageUtilHtml5_0() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__Znwj(1)|0); //@line 24 "./visTest_glue.cpp"
 __ZN15CImageUtilHtml5C2Ev($0); //@line 24 "./visTest_glue.cpp"
 return ($0|0); //@line 24 "./visTest_glue.cpp"
}
function _emscripten_bind_CImageUtilHtml5_LoadImageBuffer_3($self,$arg0,$arg1,$arg2) {
 $self = $self|0;
 $arg0 = $arg0|0;
 $arg1 = $arg1|0;
 $arg2 = $arg2|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN15CImageUtilHtml515LoadImageBufferEPcii($self,$arg0,$arg1,$arg2)|0); //@line 28 "./visTest_glue.cpp"
 return ($0|0); //@line 28 "./visTest_glue.cpp"
}
function _emscripten_bind_CImageUtilHtml5___destroy___0($self) {
 $self = $self|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($self|0)==(0|0); //@line 32 "./visTest_glue.cpp"
 if ($0) {
  return; //@line 33 "./visTest_glue.cpp"
 }
 __ZN15CImageUtilHtml5D2Ev($self); //@line 32 "./visTest_glue.cpp"
 __ZdlPv($self); //@line 32 "./visTest_glue.cpp"
 return; //@line 33 "./visTest_glue.cpp"
}
function __ZN10CImageUtilC2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 HEAP32[$0>>2] = $this;
 STACKTOP = sp;return;
}
function __ZN10CImageUtilD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 HEAP32[$0>>2] = $this;
 STACKTOP = sp;return;
}
function __ZN10CImageUtil15LoadImageBufferEPciiiP4RECTS0_i($this,$buffer,$bufSize,$pageNumber,$Reduction,$r,$pUserKey,$bitOrder) {
 $this = $this|0;
 $buffer = $buffer|0;
 $bufSize = $bufSize|0;
 $pageNumber = $pageNumber|0;
 $Reduction = $Reduction|0;
 $r = $r|0;
 $pUserKey = $pUserKey|0;
 $bitOrder = $bitOrder|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $bflag = 0, $errorCode = 0, $format = 0, $hImage = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 44|0;
 $1 = sp + 40|0;
 $2 = sp + 36|0;
 $3 = sp + 32|0;
 $4 = sp + 28|0;
 $5 = sp + 24|0;
 $6 = sp + 20|0;
 $7 = sp + 12|0;
 $8 = sp + 8|0;
 $hImage = sp + 4|0;
 $format = sp;
 $bflag = sp + 48|0;
 $errorCode = sp + 16|0;
 HEAP32[$1>>2] = $this;
 HEAP32[$2>>2] = $buffer;
 HEAP32[$3>>2] = $bufSize;
 HEAP32[$4>>2] = $pageNumber;
 HEAP32[$5>>2] = $Reduction;
 HEAP32[$6>>2] = $r;
 HEAP32[$7>>2] = $pUserKey;
 HEAP32[$8>>2] = $bitOrder;
 $9 = HEAP32[$1>>2]|0;
 HEAP32[$hImage>>2] = 0;
 HEAP8[$bflag>>0] = 0;
 HEAP32[$errorCode>>2] = 0;
 $10 = HEAP32[$2>>2]|0;
 $11 = (__ZN10CImageUtil12GetImageTypeEPc($9,$10)|0);
 HEAP32[$format>>2] = $11;
 $12 = HEAP32[$4>>2]|0;
 $13 = ($12|0)==(0);
 if ($13) {
  HEAP32[$4>>2] = 1;
 }
 $14 = HEAP32[$format>>2]|0;
 $15 = ($14|0)==(2);
 if (!($15)) {
  HEAP32[$0>>2] = 0;
  $42 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($42|0);
 }
 $16 = (_malloc(1336)|0);
 HEAP32[$hImage>>2] = $16;
 $17 = HEAP32[$hImage>>2]|0;
 $18 = ($17|0)==(0|0);
 if ($18) {
  HEAP32[$0>>2] = 0;
  $42 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($42|0);
 }
 $19 = HEAP32[$hImage>>2]|0;
 __ZN10CImageUtil8InitHIMGEP8ImageTag($9,$19);
 $20 = HEAP32[$2>>2]|0;
 $21 = HEAP32[$3>>2]|0;
 $22 = HEAP32[$hImage>>2]|0;
 $23 = ((($22)) + 4|0);
 $24 = HEAP32[$hImage>>2]|0;
 $25 = ((($24)) + 8|0);
 $26 = HEAP32[$hImage>>2]|0;
 $27 = ((($26)) + 1056|0);
 $28 = HEAP32[$hImage>>2]|0;
 $29 = ((($28)) + 1060|0);
 $30 = HEAP32[$hImage>>2]|0;
 $31 = ((($30)) + 1064|0);
 $32 = (_Load_JPEG_Buffer(($20|0),($21|0),($23|0),($25|0),($27|0),($29|0),($31|0))|0);
 $33 = HEAP32[$hImage>>2]|0;
 HEAP32[$33>>2] = $32;
 $34 = HEAP32[$hImage>>2]|0;
 $35 = ((($34)) + 1052|0);
 HEAP32[$35>>2] = 1;
 $36 = HEAP32[$hImage>>2]|0;
 $37 = ((($36)) + 1068|0);
 HEAP32[$37>>2] = 2;
 $38 = HEAP32[$hImage>>2]|0;
 $39 = HEAP32[$38>>2]|0;
 $40 = ($39|0)!=(0|0);
 if ($40) {
  $41 = HEAP32[$hImage>>2]|0;
  HEAP32[$0>>2] = $41;
  $42 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($42|0);
 } else {
  HEAP32[$0>>2] = 0;
  $42 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($42|0);
 }
 return (0)|0;
}
function __ZN10CImageUtil12GetImageTypeEPc($this,$buffer) {
 $this = $this|0;
 $buffer = $buffer|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buf = 0, $format = 0, $len = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 12|0;
 $1 = sp;
 $buf = sp + 16|0;
 $len = sp + 8|0;
 $format = sp + 4|0;
 HEAP32[$0>>2] = $this;
 HEAP32[$1>>2] = $buffer;
 HEAP32[$len>>2] = 0;
 HEAP32[$format>>2] = 0;
 $2 = HEAP32[$1>>2]|0;
 dest=$buf; src=$2; stop=dest+20|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $3 = HEAP8[$buf>>0]|0;
 $4 = $3&255;
 $5 = ($4|0)==(255);
 if ($5) {
  $6 = ((($buf)) + 1|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = $7&255;
  $9 = ($8|0)==(216);
  if ($9) {
   HEAP32[$format>>2] = 2;
   $108 = HEAP32[$format>>2]|0;
   STACKTOP = sp;return ($108|0);
  }
 }
 $10 = HEAP8[$buf>>0]|0;
 $11 = $10&255;
 $12 = ($11|0)==(66);
 if ($12) {
  $13 = ((($buf)) + 1|0);
  $14 = HEAP8[$13>>0]|0;
  $15 = $14&255;
  $16 = ($15|0)==(77);
  if ($16) {
   HEAP32[$format>>2] = 4;
   $108 = HEAP32[$format>>2]|0;
   STACKTOP = sp;return ($108|0);
  }
 }
 $17 = HEAP8[$buf>>0]|0;
 $18 = $17&255;
 $19 = ($18|0)==(77);
 if ($19) {
  $20 = ((($buf)) + 1|0);
  $21 = HEAP8[$20>>0]|0;
  $22 = $21&255;
  $23 = ($22|0)==(77);
  if ($23) {
   $24 = ((($buf)) + 2|0);
   $25 = HEAP8[$24>>0]|0;
   $26 = $25&255;
   $27 = ($26|0)==(0);
   if ($27) {
    $28 = ((($buf)) + 3|0);
    $29 = HEAP8[$28>>0]|0;
    $30 = $29&255;
    $31 = ($30|0)==(42);
    if (!($31)) {
     label = 11;
    }
   } else {
    label = 11;
   }
  } else {
   label = 11;
  }
 } else {
  label = 11;
 }
 do {
  if ((label|0) == 11) {
   $32 = HEAP8[$buf>>0]|0;
   $33 = $32&255;
   $34 = ($33|0)==(73);
   if ($34) {
    $35 = ((($buf)) + 1|0);
    $36 = HEAP8[$35>>0]|0;
    $37 = $36&255;
    $38 = ($37|0)==(73);
    if ($38) {
     $39 = ((($buf)) + 2|0);
     $40 = HEAP8[$39>>0]|0;
     $41 = $40&255;
     $42 = ($41|0)==(42);
     if ($42) {
      $43 = ((($buf)) + 3|0);
      $44 = HEAP8[$43>>0]|0;
      $45 = $44&255;
      $46 = ($45|0)==(0);
      if ($46) {
       break;
      }
     }
    }
   }
   $47 = ((($buf)) + 4|0);
   $48 = HEAP8[$47>>0]|0;
   $49 = $48&255;
   $50 = ($49|0)==(106);
   if ($50) {
    $51 = ((($buf)) + 5|0);
    $52 = HEAP8[$51>>0]|0;
    $53 = $52&255;
    $54 = ($53|0)==(80);
    if ($54) {
     HEAP32[$format>>2] = 3;
     $108 = HEAP32[$format>>2]|0;
     STACKTOP = sp;return ($108|0);
    }
   }
   $55 = ((($buf)) + 1|0);
   $56 = HEAP8[$55>>0]|0;
   $57 = $56&255;
   $58 = ($57|0)==(80);
   if ($58) {
    $59 = ((($buf)) + 2|0);
    $60 = HEAP8[$59>>0]|0;
    $61 = $60&255;
    $62 = ($61|0)==(78);
    if ($62) {
     $63 = ((($buf)) + 3|0);
     $64 = HEAP8[$63>>0]|0;
     $65 = $64&255;
     $66 = ($65|0)==(71);
     if ($66) {
      HEAP32[$format>>2] = 5;
      $108 = HEAP32[$format>>2]|0;
      STACKTOP = sp;return ($108|0);
     }
    }
   }
   $67 = HEAP8[$buf>>0]|0;
   $68 = $67&255;
   $69 = ($68|0)==(71);
   if ($69) {
    $70 = ((($buf)) + 1|0);
    $71 = HEAP8[$70>>0]|0;
    $72 = $71&255;
    $73 = ($72|0)==(73);
    if ($73) {
     $74 = ((($buf)) + 2|0);
     $75 = HEAP8[$74>>0]|0;
     $76 = $75&255;
     $77 = ($76|0)==(70);
     if ($77) {
      HEAP32[$format>>2] = 6;
      $108 = HEAP32[$format>>2]|0;
      STACKTOP = sp;return ($108|0);
     }
    }
   }
   $78 = HEAP8[$buf>>0]|0;
   $79 = $78&255;
   $80 = ($79|0)==(37);
   if ($80) {
    $81 = ((($buf)) + 1|0);
    $82 = HEAP8[$81>>0]|0;
    $83 = $82&255;
    $84 = ($83|0)==(80);
    if ($84) {
     $85 = ((($buf)) + 2|0);
     $86 = HEAP8[$85>>0]|0;
     $87 = $86&255;
     $88 = ($87|0)==(68);
     if ($88) {
      $89 = ((($buf)) + 3|0);
      $90 = HEAP8[$89>>0]|0;
      $91 = $90&255;
      $92 = ($91|0)==(70);
      if ($92) {
       HEAP32[$format>>2] = 10;
       $108 = HEAP32[$format>>2]|0;
       STACKTOP = sp;return ($108|0);
      }
     }
    }
   }
   $93 = HEAP8[$buf>>0]|0;
   $94 = $93&255;
   $95 = ($94|0)==(65);
   if ($95) {
    $96 = ((($buf)) + 1|0);
    $97 = HEAP8[$96>>0]|0;
    $98 = $97&255;
    $99 = ($98|0)==(84);
    if ($99) {
     $100 = ((($buf)) + 2|0);
     $101 = HEAP8[$100>>0]|0;
     $102 = $101&255;
     $103 = ($102|0)==(38);
     if ($103) {
      $104 = ((($buf)) + 3|0);
      $105 = HEAP8[$104>>0]|0;
      $106 = $105&255;
      $107 = ($106|0)==(84);
      if ($107) {
       HEAP32[$format>>2] = 11;
       $108 = HEAP32[$format>>2]|0;
       STACKTOP = sp;return ($108|0);
      }
     }
    }
   }
   HEAP32[$format>>2] = 0;
   $108 = HEAP32[$format>>2]|0;
   STACKTOP = sp;return ($108|0);
  }
 } while(0);
 HEAP32[$format>>2] = 1;
 $108 = HEAP32[$format>>2]|0;
 STACKTOP = sp;return ($108|0);
}
function __ZN10CImageUtil8InitHIMGEP8ImageTag($this,$hImage) {
 $this = $this|0;
 $hImage = $hImage|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 4|0;
 $1 = sp;
 HEAP32[$0>>2] = $this;
 HEAP32[$1>>2] = $hImage;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 1056|0);
 HEAP32[$3>>2] = 0;
 $4 = HEAP32[$1>>2]|0;
 $5 = ((($4)) + 1040|0);
 HEAP32[$5>>2] = 0;
 $6 = HEAP32[$1>>2]|0;
 $7 = ((($6)) + 1044|0);
 HEAP32[$7>>2] = 0;
 $8 = HEAP32[$1>>2]|0;
 $9 = ((($8)) + 1036|0);
 HEAP32[$9>>2] = 0;
 $10 = HEAP32[$1>>2]|0;
 $11 = ((($10)) + 1068|0);
 HEAP32[$11>>2] = 0;
 $12 = HEAP32[$1>>2]|0;
 HEAP32[$12>>2] = 0;
 $13 = HEAP32[$1>>2]|0;
 $14 = ((($13)) + 1052|0);
 HEAP32[$14>>2] = 0;
 $15 = HEAP32[$1>>2]|0;
 $16 = ((($15)) + 1060|0);
 HEAP32[$16>>2] = 0;
 $17 = HEAP32[$1>>2]|0;
 $18 = ((($17)) + 4|0);
 HEAP32[$18>>2] = 0;
 $19 = HEAP32[$1>>2]|0;
 $20 = ((($19)) + 1064|0);
 HEAP32[$20>>2] = 0;
 $21 = HEAP32[$1>>2]|0;
 $22 = ((($21)) + 8|0);
 HEAP32[$22>>2] = 0;
 $23 = HEAP32[$1>>2]|0;
 $24 = ((($23)) + 1072|0);
 HEAP32[$24>>2] = 0;
 $25 = HEAP32[$1>>2]|0;
 $26 = ((($25)) + 1048|0);
 HEAP32[$26>>2] = 0;
 $27 = HEAP32[$1>>2]|0;
 $28 = ((($27)) + 1080|0);
 HEAP8[$28>>0] = 0;
 $29 = HEAP32[$1>>2]|0;
 $30 = ((($29)) + 1076|0);
 HEAP32[$30>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN10CImageUtil10FreeHImageEP8ImageTag($this,$himg) {
 $this = $this|0;
 $himg = $himg|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $img = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 12|0;
 $1 = sp;
 $2 = sp + 4|0;
 $img = sp + 8|0;
 HEAP32[$1>>2] = $this;
 HEAP32[$2>>2] = $himg;
 $3 = HEAP32[$1>>2]|0;
 $4 = HEAP32[$2>>2]|0;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  HEAP32[$0>>2] = 0;
  $43 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($43|0);
 }
 $6 = HEAP32[$2>>2]|0;
 HEAP32[$img>>2] = $6;
 $7 = HEAP32[$img>>2]|0;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)>(0);
 if ($10) {
  $11 = HEAP32[$img>>2]|0;
  $12 = ((($11)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)>(0);
  if ($14) {
   $15 = HEAP32[$img>>2]|0;
   $16 = ((($15)) + 1052|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($17|0)>(0);
   if ($18) {
    $19 = HEAP32[$img>>2]|0;
    $20 = ((($19)) + 1056|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = ($21|0)>(0);
    if ($22) {
     $23 = HEAP32[$img>>2]|0;
     $24 = HEAP32[$23>>2]|0;
     $25 = HEAP32[$img>>2]|0;
     $26 = ((($25)) + 8|0);
     $27 = HEAP32[$26>>2]|0;
     __ZN10CImageUtil9FreeImageEPPhi($3,$24,$27);
     $28 = HEAP32[$img>>2]|0;
     $29 = ((($28)) + 1044|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = ($30|0)>(0);
     if ($31) {
      $32 = HEAP32[$img>>2]|0;
      $33 = ((($32)) + 1040|0);
      $34 = HEAP32[$33>>2]|0;
      _free($34);
     }
     $35 = HEAP32[$img>>2]|0;
     $36 = ((($35)) + 1048|0);
     $37 = HEAP32[$36>>2]|0;
     $38 = ($37>>>0)>(0>>>0);
     if ($38) {
      $39 = HEAP32[$img>>2]|0;
      $40 = ((($39)) + 1048|0);
      $41 = HEAP32[$40>>2]|0;
      _free($41);
     }
     $42 = HEAP32[$img>>2]|0;
     _free($42);
     HEAP32[$img>>2] = 0;
     HEAP32[$0>>2] = 1;
     $43 = HEAP32[$0>>2]|0;
     STACKTOP = sp;return ($43|0);
    }
   }
  }
 }
 HEAP32[$0>>2] = 0;
 $43 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($43|0);
}
function __ZN10CImageUtil9FreeImageEPPhi($this,$image,$ysize) {
 $this = $this|0;
 $image = $image|0;
 $ysize = $ysize|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 12|0;
 $1 = sp;
 $2 = sp + 4|0;
 $y = sp + 8|0;
 HEAP32[$0>>2] = $this;
 HEAP32[$1>>2] = $image;
 HEAP32[$2>>2] = $ysize;
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)>(0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 HEAP32[$y>>2] = 0;
 while(1) {
  $5 = HEAP32[$y>>2]|0;
  $6 = HEAP32[$2>>2]|0;
  $7 = ($5|0)<($6|0);
  if (!($7)) {
   break;
  }
  $8 = HEAP32[$y>>2]|0;
  $9 = HEAP32[$1>>2]|0;
  $10 = (($9) + ($8<<2)|0);
  $11 = HEAP32[$10>>2]|0;
  _free($11);
  $12 = HEAP32[$y>>2]|0;
  $13 = (($12) + 1)|0;
  HEAP32[$y>>2] = $13;
 }
 $14 = HEAP32[$1>>2]|0;
 _free($14);
 HEAP32[$1>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN15CImageUtilHtml5C2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 HEAP32[$0>>2] = $this;
 STACKTOP = sp;return;
}
function __ZN15CImageUtilHtml5D2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 HEAP32[$0>>2] = $this;
 STACKTOP = sp;return;
}
function __ZN15CImageUtilHtml515LoadImageBufferEPcii($this,$inbufferBase64,$bufSize,$pageNumber) {
 $this = $this|0;
 $inbufferBase64 = $inbufferBase64|0;
 $bufSize = $bufSize|0;
 $pageNumber = $pageNumber|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $Base64 = 0, $ImageUtil = 0, $count = 0, $hImage = 0, $inbuffer = 0, $insize = 0, $outBuffer = 0, $outBufferBase64 = 0, $outsize = 0, $size = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 64|0;
 $1 = sp + 60|0;
 $2 = sp + 56|0;
 $3 = sp + 52|0;
 $4 = sp + 48|0;
 $ImageUtil = sp + 44|0;
 $Base64 = sp + 68|0;
 $inbuffer = sp + 40|0;
 $insize = sp + 36|0;
 $outBuffer = sp + 32|0;
 $size = sp + 24|0;
 $count = sp + 20|0;
 $y = sp + 16|0;
 $x = sp + 12|0;
 $hImage = sp + 8|0;
 $outBufferBase64 = sp + 4|0;
 $outsize = sp;
 $5 = sp + 28|0;
 HEAP32[$1>>2] = $this;
 HEAP32[$2>>2] = $inbufferBase64;
 HEAP32[$3>>2] = $bufSize;
 HEAP32[$4>>2] = $pageNumber;
 __ZN10CImageUtilC2Ev($ImageUtil);
 __ZN7CBase64C2Ev($Base64);
 HEAP32[$count>>2] = 0;
 $6 = HEAP32[$2>>2]|0;
 $7 = (__ZN7CBase6416Base64_DecodeLenEPKc($Base64,$6)|0);
 HEAP32[$insize>>2] = $7;
 $8 = HEAP32[$insize>>2]|0;
 $9 = (_malloc($8)|0);
 HEAP32[$inbuffer>>2] = $9;
 $10 = HEAP32[$inbuffer>>2]|0;
 $11 = HEAP32[$2>>2]|0;
 (__ZN7CBase6413Base64_DecodeEPcPKc($Base64,$10,$11)|0);
 $12 = HEAP32[$inbuffer>>2]|0;
 $13 = HEAP32[$insize>>2]|0;
 $14 = (__ZN10CImageUtil15LoadImageBufferEPciiiP4RECTS0_i($ImageUtil,$12,$13,1,0,0,0,0)|0);
 HEAP32[$hImage>>2] = $14;
 $15 = HEAP32[$inbuffer>>2]|0;
 _free($15);
 $16 = HEAP32[$hImage>>2]|0;
 $17 = ($16|0)!=(0|0);
 if (!($17)) {
  HEAP32[$0>>2] = 0;
  HEAP32[$5>>2] = 1;
  __ZN7CBase64D2Ev($Base64);
  __ZN10CImageUtilD2Ev($ImageUtil);
  $103 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($103|0);
 }
 $18 = HEAP32[$hImage>>2]|0;
 $19 = ((($18)) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = HEAP32[$hImage>>2]|0;
 $22 = ((($21)) + 8|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = Math_imul($20, $23)|0;
 $25 = $24<<2;
 HEAP32[$size>>2] = $25;
 $26 = HEAP32[$size>>2]|0;
 $27 = (_malloc($26)|0);
 HEAP32[$outBuffer>>2] = $27;
 $28 = HEAP32[$outBuffer>>2]|0;
 $29 = HEAP32[$size>>2]|0;
 _memset(($28|0),0,($29|0))|0;
 HEAP32[$y>>2] = 0;
 while(1) {
  $30 = HEAP32[$y>>2]|0;
  $31 = HEAP32[$hImage>>2]|0;
  $32 = ((($31)) + 8|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = ($30|0)<($33|0);
  if (!($34)) {
   break;
  }
  HEAP32[$x>>2] = 0;
  while(1) {
   $35 = HEAP32[$x>>2]|0;
   $36 = HEAP32[$hImage>>2]|0;
   $37 = ((($36)) + 4|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = ($35|0)<($38|0);
   if (!($39)) {
    break;
   }
   $40 = HEAP32[$x>>2]|0;
   $41 = ($40*3)|0;
   $42 = (($41) + 0)|0;
   $43 = HEAP32[$y>>2]|0;
   $44 = HEAP32[$hImage>>2]|0;
   $45 = HEAP32[$44>>2]|0;
   $46 = (($45) + ($43<<2)|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = (($47) + ($42)|0);
   $49 = HEAP8[$48>>0]|0;
   $50 = HEAP32[$count>>2]|0;
   $51 = (($50) + 0)|0;
   $52 = HEAP32[$outBuffer>>2]|0;
   $53 = (($52) + ($51)|0);
   HEAP8[$53>>0] = $49;
   $54 = HEAP32[$x>>2]|0;
   $55 = ($54*3)|0;
   $56 = (($55) + 1)|0;
   $57 = HEAP32[$y>>2]|0;
   $58 = HEAP32[$hImage>>2]|0;
   $59 = HEAP32[$58>>2]|0;
   $60 = (($59) + ($57<<2)|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = (($61) + ($56)|0);
   $63 = HEAP8[$62>>0]|0;
   $64 = HEAP32[$count>>2]|0;
   $65 = (($64) + 1)|0;
   $66 = HEAP32[$outBuffer>>2]|0;
   $67 = (($66) + ($65)|0);
   HEAP8[$67>>0] = $63;
   $68 = HEAP32[$x>>2]|0;
   $69 = ($68*3)|0;
   $70 = (($69) + 2)|0;
   $71 = HEAP32[$y>>2]|0;
   $72 = HEAP32[$hImage>>2]|0;
   $73 = HEAP32[$72>>2]|0;
   $74 = (($73) + ($71<<2)|0);
   $75 = HEAP32[$74>>2]|0;
   $76 = (($75) + ($70)|0);
   $77 = HEAP8[$76>>0]|0;
   $78 = HEAP32[$count>>2]|0;
   $79 = (($78) + 2)|0;
   $80 = HEAP32[$outBuffer>>2]|0;
   $81 = (($80) + ($79)|0);
   HEAP8[$81>>0] = $77;
   $82 = HEAP32[$count>>2]|0;
   $83 = (($82) + 4)|0;
   HEAP32[$count>>2] = $83;
   $84 = HEAP32[$x>>2]|0;
   $85 = (($84) + 1)|0;
   HEAP32[$x>>2] = $85;
  }
  $86 = HEAP32[$count>>2]|0;
  $87 = HEAP32[$size>>2]|0;
  $88 = ($86|0)>($87|0);
  if ($88) {
   break;
  }
  $89 = HEAP32[$y>>2]|0;
  $90 = (($89) + 1)|0;
  HEAP32[$y>>2] = $90;
 }
 $91 = HEAP32[$size>>2]|0;
 $92 = $91<<1;
 HEAP32[$outsize>>2] = $92;
 $93 = HEAP32[$outsize>>2]|0;
 $94 = (_malloc($93)|0);
 HEAP32[$outBufferBase64>>2] = $94;
 $95 = HEAP32[$outBufferBase64>>2]|0;
 $96 = HEAP32[$outsize>>2]|0;
 _memset(($95|0),0,($96|0))|0;
 $97 = HEAP32[$outBufferBase64>>2]|0;
 $98 = HEAP32[$outBuffer>>2]|0;
 $99 = HEAP32[$size>>2]|0;
 (__ZN7CBase6413Base64_EncodeEPcPKci($Base64,$97,$98,$99)|0);
 $100 = HEAP32[$hImage>>2]|0;
 (__ZN10CImageUtil10FreeHImageEP8ImageTag($ImageUtil,$100)|0);
 $101 = HEAP32[$outBuffer>>2]|0;
 _free($101);
 $102 = HEAP32[$outBufferBase64>>2]|0;
 HEAP32[$0>>2] = $102;
 HEAP32[$5>>2] = 1;
 __ZN7CBase64D2Ev($Base64);
 __ZN10CImageUtilD2Ev($ImageUtil);
 $103 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($103|0);
}
function __ZN7CBase64C2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 HEAP32[$0>>2] = $this;
 $1 = HEAP32[$0>>2]|0;
 (_strcpy(($1|0),(844|0))|0);
 $2 = ((($1)) + 256|0);
 HEAP8[$2>>0] = 61;
 STACKTOP = sp;return;
}
function __ZN7CBase64D2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 HEAP32[$0>>2] = $this;
 STACKTOP = sp;return;
}
function __ZN7CBase6413Base64_EncodeEPcPKci($this,$dest,$src,$len) {
 $this = $this|0;
 $dest = $dest|0;
 $src = $src|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $outsz = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 16|0;
 $1 = sp;
 $2 = sp + 4|0;
 $3 = sp + 8|0;
 $outsz = sp + 12|0;
 HEAP32[$0>>2] = $this;
 HEAP32[$1>>2] = $dest;
 HEAP32[$2>>2] = $src;
 HEAP32[$3>>2] = $len;
 $4 = HEAP32[$0>>2]|0;
 HEAP32[$outsz>>2] = 0;
 while(1) {
  $5 = HEAP32[$3>>2]|0;
  $6 = ($5|0)>(0);
  if (!($6)) {
   break;
  }
  $7 = HEAP32[$1>>2]|0;
  $8 = HEAP32[$outsz>>2]|0;
  $9 = (($7) + ($8)|0);
  $10 = HEAP32[$2>>2]|0;
  $11 = HEAP32[$3>>2]|0;
  $12 = ($11|0)>(3);
  $13 = HEAP32[$3>>2]|0;
  $14 = $12 ? 3 : $13;
  __ZN7CBase6412Encode_groupEPhPKhi($4,$9,$10,$14);
  $15 = HEAP32[$3>>2]|0;
  $16 = (($15) - 3)|0;
  HEAP32[$3>>2] = $16;
  $17 = HEAP32[$2>>2]|0;
  $18 = ((($17)) + 3|0);
  HEAP32[$2>>2] = $18;
  $19 = HEAP32[$outsz>>2]|0;
  $20 = (($19) + 4)|0;
  HEAP32[$outsz>>2] = $20;
 }
 $21 = HEAP32[$outsz>>2]|0;
 STACKTOP = sp;return ($21|0);
}
function __ZN7CBase6412Encode_groupEPhPKhi($this,$output,$input,$n) {
 $this = $this|0;
 $output = $output|0;
 $input = $input|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $ingrp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 12|0;
 $1 = sp;
 $2 = sp + 4|0;
 $3 = sp + 8|0;
 $ingrp = sp + 16|0;
 HEAP32[$0>>2] = $this;
 HEAP32[$1>>2] = $output;
 HEAP32[$2>>2] = $input;
 HEAP32[$3>>2] = $n;
 $4 = HEAP32[$0>>2]|0;
 $5 = HEAP32[$3>>2]|0;
 $6 = ($5|0)>(0);
 if ($6) {
  $7 = HEAP32[$2>>2]|0;
  $8 = HEAP8[$7>>0]|0;
  $9 = $8&255;
  $11 = $9;
 } else {
  $11 = 0;
 }
 $10 = $11&255;
 HEAP8[$ingrp>>0] = $10;
 $12 = HEAP32[$3>>2]|0;
 $13 = ($12|0)>(1);
 if ($13) {
  $14 = HEAP32[$2>>2]|0;
  $15 = ((($14)) + 1|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = $16&255;
  $19 = $17;
 } else {
  $19 = 0;
 }
 $18 = $19&255;
 $20 = ((($ingrp)) + 1|0);
 HEAP8[$20>>0] = $18;
 $21 = HEAP32[$3>>2]|0;
 $22 = ($21|0)>(2);
 if ($22) {
  $23 = HEAP32[$2>>2]|0;
  $24 = ((($23)) + 2|0);
  $25 = HEAP8[$24>>0]|0;
  $26 = $25&255;
  $28 = $26;
 } else {
  $28 = 0;
 }
 $27 = $28&255;
 $29 = ((($ingrp)) + 2|0);
 HEAP8[$29>>0] = $27;
 $30 = HEAP32[$3>>2]|0;
 $31 = ($30|0)>(0);
 if ($31) {
  $32 = HEAP8[$ingrp>>0]|0;
  $33 = $32&255;
  $34 = $33 >> 2;
  $35 = (($4) + ($34)|0);
  $36 = HEAP8[$35>>0]|0;
  $40 = $36;
 } else {
  $37 = ((($4)) + 256|0);
  $38 = HEAP8[$37>>0]|0;
  $40 = $38;
 }
 $39 = HEAP32[$1>>2]|0;
 HEAP8[$39>>0] = $40;
 $41 = HEAP32[$3>>2]|0;
 $42 = ($41|0)>(0);
 if ($42) {
  $43 = HEAP8[$ingrp>>0]|0;
  $44 = $43&255;
  $45 = $44 & 3;
  $46 = $45 << 4;
  $47 = ((($ingrp)) + 1|0);
  $48 = HEAP8[$47>>0]|0;
  $49 = $48&255;
  $50 = $49 >> 4;
  $51 = $46 | $50;
  $52 = (($4) + ($51)|0);
  $53 = HEAP8[$52>>0]|0;
  $58 = $53;
 } else {
  $54 = ((($4)) + 256|0);
  $55 = HEAP8[$54>>0]|0;
  $58 = $55;
 }
 $56 = HEAP32[$1>>2]|0;
 $57 = ((($56)) + 1|0);
 HEAP8[$57>>0] = $58;
 $59 = HEAP32[$3>>2]|0;
 $60 = ($59|0)>(1);
 if ($60) {
  $61 = ((($ingrp)) + 1|0);
  $62 = HEAP8[$61>>0]|0;
  $63 = $62&255;
  $64 = $63 & 15;
  $65 = $64 << 2;
  $66 = ((($ingrp)) + 2|0);
  $67 = HEAP8[$66>>0]|0;
  $68 = $67&255;
  $69 = $68 >> 6;
  $70 = $65 | $69;
  $71 = (($4) + ($70)|0);
  $72 = HEAP8[$71>>0]|0;
  $77 = $72;
 } else {
  $73 = ((($4)) + 256|0);
  $74 = HEAP8[$73>>0]|0;
  $77 = $74;
 }
 $75 = HEAP32[$1>>2]|0;
 $76 = ((($75)) + 2|0);
 HEAP8[$76>>0] = $77;
 $78 = HEAP32[$3>>2]|0;
 $79 = ($78|0)>(2);
 if ($79) {
  $80 = ((($ingrp)) + 2|0);
  $81 = HEAP8[$80>>0]|0;
  $82 = $81&255;
  $83 = $82 & 63;
  $84 = (($4) + ($83)|0);
  $85 = HEAP8[$84>>0]|0;
  $90 = $85;
  $88 = HEAP32[$1>>2]|0;
  $89 = ((($88)) + 3|0);
  HEAP8[$89>>0] = $90;
  STACKTOP = sp;return;
 } else {
  $86 = ((($4)) + 256|0);
  $87 = HEAP8[$86>>0]|0;
  $90 = $87;
  $88 = HEAP32[$1>>2]|0;
  $89 = ((($88)) + 3|0);
  HEAP8[$89>>0] = $90;
  STACKTOP = sp;return;
 }
}
function __ZN7CBase6413Base64_DecodeEPcPKc($this,$dest,$src) {
 $this = $this|0;
 $dest = $dest|0;
 $src = $src|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $len = 0, $outsz = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 16|0;
 $1 = sp;
 $2 = sp + 4|0;
 $len = sp + 8|0;
 $outsz = sp + 12|0;
 HEAP32[$0>>2] = $this;
 HEAP32[$1>>2] = $dest;
 HEAP32[$2>>2] = $src;
 $3 = HEAP32[$0>>2]|0;
 HEAP32[$outsz>>2] = 0;
 while(1) {
  $4 = HEAP32[$2>>2]|0;
  $5 = HEAP8[$4>>0]|0;
  $6 = ($5<<24>>24)!=(0);
  if (!($6)) {
   break;
  }
  $7 = HEAP32[$1>>2]|0;
  $8 = HEAP32[$outsz>>2]|0;
  $9 = (($7) + ($8)|0);
  $10 = HEAP32[$2>>2]|0;
  __ZN7CBase6412Decode_GroupEPhPKhPi($3,$9,$10,$len);
  $11 = HEAP32[$2>>2]|0;
  $12 = ((($11)) + 4|0);
  HEAP32[$2>>2] = $12;
  $13 = HEAP32[$len>>2]|0;
  $14 = HEAP32[$outsz>>2]|0;
  $15 = (($14) + ($13))|0;
  HEAP32[$outsz>>2] = $15;
 }
 $16 = HEAP32[$outsz>>2]|0;
 STACKTOP = sp;return ($16|0);
}
function __ZN7CBase6412Decode_GroupEPhPKhPi($this,$output,$input,$n) {
 $this = $this|0;
 $output = $output|0;
 $input = $input|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $t1 = 0;
 var $t2 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer4 = 0, $vararg_buffer6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer4 = sp;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp + 16|0;
 $0 = sp + 44|0;
 $1 = sp + 48|0;
 $2 = sp + 32|0;
 $3 = sp + 36|0;
 $t1 = sp + 40|0;
 $t2 = sp + 28|0;
 HEAP32[$0>>2] = $this;
 HEAP32[$1>>2] = $output;
 HEAP32[$2>>2] = $input;
 HEAP32[$3>>2] = $n;
 $4 = HEAP32[$0>>2]|0;
 $5 = HEAP32[$3>>2]|0;
 HEAP32[$5>>2] = 0;
 $6 = HEAP32[$2>>2]|0;
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&255;
 $9 = ((($4)) + 256|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10&255;
 $12 = ($8|0)==($11|0);
 if ($12) {
  STACKTOP = sp;return;
 }
 $13 = HEAP32[$2>>2]|0;
 $14 = ((($13)) + 1|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = $15&255;
 $17 = ((($4)) + 256|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = $18&255;
 $20 = ($16|0)==($19|0);
 if ($20) {
  $21 = HEAP32[_stderr>>2]|0;
  (_fprintf(($21|0),(909|0),($vararg_buffer|0))|0);
  STACKTOP = sp;return;
 }
 $22 = HEAP32[$2>>2]|0;
 $23 = HEAP8[$22>>0]|0;
 $24 = $23&255;
 $25 = (_strchr($4,$24)|0);
 HEAP32[$t1>>2] = $25;
 $26 = HEAP32[$2>>2]|0;
 $27 = ((($26)) + 1|0);
 $28 = HEAP8[$27>>0]|0;
 $29 = $28&255;
 $30 = (_strchr($4,$29)|0);
 HEAP32[$t2>>2] = $30;
 $31 = HEAP32[$t1>>2]|0;
 $32 = ($31|0)==(0|0);
 $33 = HEAP32[$t2>>2]|0;
 $34 = ($33|0)==(0|0);
 $or$cond = $32 | $34;
 if ($or$cond) {
  $35 = HEAP32[_stderr>>2]|0;
  (_fprintf(($35|0),(942|0),($vararg_buffer2|0))|0);
  STACKTOP = sp;return;
 }
 $36 = HEAP32[$t1>>2]|0;
 $37 = $36;
 $38 = $4;
 $39 = (($37) - ($38))|0;
 $40 = $39 << 2;
 $41 = HEAP32[$t2>>2]|0;
 $42 = $41;
 $43 = $4;
 $44 = (($42) - ($43))|0;
 $45 = $44 >> 4;
 $46 = $40 | $45;
 $47 = $46&255;
 $48 = HEAP32[$3>>2]|0;
 $49 = HEAP32[$48>>2]|0;
 $50 = (($49) + 1)|0;
 HEAP32[$48>>2] = $50;
 $51 = HEAP32[$1>>2]|0;
 $52 = (($51) + ($49)|0);
 HEAP8[$52>>0] = $47;
 $53 = HEAP32[$2>>2]|0;
 $54 = ((($53)) + 2|0);
 $55 = HEAP8[$54>>0]|0;
 $56 = $55&255;
 $57 = ((($4)) + 256|0);
 $58 = HEAP8[$57>>0]|0;
 $59 = $58&255;
 $60 = ($56|0)==($59|0);
 if ($60) {
  STACKTOP = sp;return;
 }
 $61 = HEAP32[$2>>2]|0;
 $62 = ((($61)) + 2|0);
 $63 = HEAP8[$62>>0]|0;
 $64 = $63&255;
 $65 = (_strchr($4,$64)|0);
 HEAP32[$t1>>2] = $65;
 $66 = HEAP32[$t1>>2]|0;
 $67 = ($66|0)==(0|0);
 if ($67) {
  $68 = HEAP32[_stderr>>2]|0;
  (_fprintf(($68|0),(942|0),($vararg_buffer4|0))|0);
  STACKTOP = sp;return;
 }
 $69 = HEAP32[$t2>>2]|0;
 $70 = $69;
 $71 = $4;
 $72 = (($70) - ($71))|0;
 $73 = $72 << 4;
 $74 = HEAP32[$t1>>2]|0;
 $75 = $74;
 $76 = $4;
 $77 = (($75) - ($76))|0;
 $78 = $77 >> 2;
 $79 = $73 | $78;
 $80 = $79&255;
 $81 = HEAP32[$3>>2]|0;
 $82 = HEAP32[$81>>2]|0;
 $83 = (($82) + 1)|0;
 HEAP32[$81>>2] = $83;
 $84 = HEAP32[$1>>2]|0;
 $85 = (($84) + ($82)|0);
 HEAP8[$85>>0] = $80;
 $86 = HEAP32[$2>>2]|0;
 $87 = ((($86)) + 3|0);
 $88 = HEAP8[$87>>0]|0;
 $89 = $88&255;
 $90 = ((($4)) + 256|0);
 $91 = HEAP8[$90>>0]|0;
 $92 = $91&255;
 $93 = ($89|0)==($92|0);
 if ($93) {
  STACKTOP = sp;return;
 }
 $94 = HEAP32[$2>>2]|0;
 $95 = ((($94)) + 3|0);
 $96 = HEAP8[$95>>0]|0;
 $97 = $96&255;
 $98 = (_strchr($4,$97)|0);
 HEAP32[$t2>>2] = $98;
 $99 = HEAP32[$t2>>2]|0;
 $100 = ($99|0)==(0|0);
 if ($100) {
  $101 = HEAP32[_stderr>>2]|0;
  (_fprintf(($101|0),(942|0),($vararg_buffer6|0))|0);
  STACKTOP = sp;return;
 } else {
  $102 = HEAP32[$t1>>2]|0;
  $103 = $102;
  $104 = $4;
  $105 = (($103) - ($104))|0;
  $106 = $105 << 6;
  $107 = HEAP32[$t2>>2]|0;
  $108 = $107;
  $109 = $4;
  $110 = (($108) - ($109))|0;
  $111 = $106 | $110;
  $112 = $111&255;
  $113 = HEAP32[$3>>2]|0;
  $114 = HEAP32[$113>>2]|0;
  $115 = (($114) + 1)|0;
  HEAP32[$113>>2] = $115;
  $116 = HEAP32[$1>>2]|0;
  $117 = (($116) + ($114)|0);
  HEAP8[$117>>0] = $112;
  STACKTOP = sp;return;
 }
}
function __ZN7CBase6416Base64_DecodeLenEPKc($this,$src) {
 $this = $this|0;
 $src = $src|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dest = 0, $len = 0, $outsz = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 12|0;
 $1 = sp;
 $len = sp + 4|0;
 $outsz = sp + 8|0;
 $dest = sp + 16|0;
 HEAP32[$0>>2] = $this;
 HEAP32[$1>>2] = $src;
 $2 = HEAP32[$0>>2]|0;
 HEAP32[$outsz>>2] = 0;
 while(1) {
  $3 = HEAP32[$1>>2]|0;
  $4 = HEAP8[$3>>0]|0;
  $5 = ($4<<24>>24)!=(0);
  if (!($5)) {
   break;
  }
  $6 = HEAP32[$1>>2]|0;
  __ZN7CBase6412Decode_GroupEPhPKhPi($2,$dest,$6,$len);
  $7 = HEAP32[$1>>2]|0;
  $8 = ((($7)) + 4|0);
  HEAP32[$1>>2] = $8;
  $9 = HEAP32[$len>>2]|0;
  $10 = HEAP32[$outsz>>2]|0;
  $11 = (($10) + ($9))|0;
  HEAP32[$outsz>>2] = $11;
 }
 $12 = HEAP32[$outsz>>2]|0;
 STACKTOP = sp;return ($12|0);
}
function ___clang_call_terminate($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___cxa_begin_catch(($0|0))|0);
 __ZSt9terminatev();
 // unreachable;
}
function _strchr($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___strchrnul($s,$c)|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $c&255;
 $3 = ($1<<24>>24)==($2<<24>>24);
 $4 = $3 ? $0 : 0;
 return ($4|0);
}
function ___strchrnul($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $$0 = 0, $$02$lcssa = 0, $$0211 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond5 = 0, $w$0$lcssa = 0, $w$08 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = ($0|0)==(0);
 if ($1) {
  $6 = (_strlen(($s|0))|0);
  $7 = (($s) + ($6)|0);
  $$0 = $7;
  return ($$0|0);
 }
 $2 = $s;
 $3 = $2 & 3;
 $4 = ($3|0)==(0);
 L5: do {
  if ($4) {
   $$02$lcssa = $s;
  } else {
   $5 = $c&255;
   $$0211 = $s;
   while(1) {
    $8 = HEAP8[$$0211>>0]|0;
    $9 = ($8<<24>>24)==(0);
    $10 = ($8<<24>>24)==($5<<24>>24);
    $or$cond = $9 | $10;
    if ($or$cond) {
     $$0 = $$0211;
     break;
    }
    $11 = ((($$0211)) + 1|0);
    $12 = $11;
    $13 = $12 & 3;
    $14 = ($13|0)==(0);
    if ($14) {
     $$02$lcssa = $11;
     break L5;
    } else {
     $$0211 = $11;
    }
   }
   return ($$0|0);
  }
 } while(0);
 $15 = Math_imul($0, 16843009)|0;
 $16 = HEAP32[$$02$lcssa>>2]|0;
 $17 = (($16) + -16843009)|0;
 $18 = $16 & -2139062144;
 $19 = $18 ^ -2139062144;
 $20 = $19 & $17;
 $21 = ($20|0)==(0);
 L12: do {
  if ($21) {
   $23 = $16;$w$08 = $$02$lcssa;
   while(1) {
    $22 = $23 ^ $15;
    $24 = (($22) + -16843009)|0;
    $25 = $22 & -2139062144;
    $26 = $25 ^ -2139062144;
    $27 = $26 & $24;
    $28 = ($27|0)==(0);
    if (!($28)) {
     $w$0$lcssa = $w$08;
     break L12;
    }
    $29 = ((($w$08)) + 4|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = (($30) + -16843009)|0;
    $32 = $30 & -2139062144;
    $33 = $32 ^ -2139062144;
    $34 = $33 & $31;
    $35 = ($34|0)==(0);
    if ($35) {
     $23 = $30;$w$08 = $29;
    } else {
     $w$0$lcssa = $29;
     break;
    }
   }
  } else {
   $w$0$lcssa = $$02$lcssa;
  }
 } while(0);
 $36 = $c&255;
 $$1 = $w$0$lcssa;
 while(1) {
  $37 = HEAP8[$$1>>0]|0;
  $38 = ($37<<24>>24)==(0);
  $39 = ($37<<24>>24)==($36<<24>>24);
  $or$cond5 = $38 | $39;
  $40 = ((($$1)) + 1|0);
  if ($or$cond5) {
   $$0 = $$1;
   break;
  } else {
   $$1 = $40;
  }
 }
 return ($$0|0);
}
function _abort_message($format,$varargs) {
 $format = $format|0;
 $varargs = $varargs|0;
 var $0 = 0, $list = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $list = sp;
 HEAP32[$list>>2] = $varargs;
 $0 = HEAP32[_stderr>>2]|0;
 (_vfprintf(($0|0),($format|0),($list|0))|0);
 (_fputc(10,($0|0))|0);
 _abort();
 // unreachable;
}
function ___cxa_demangle($mangled_name,$buf,$n,$status) {
 $mangled_name = $mangled_name|0;
 $buf = $buf|0;
 $n = $n|0;
 $status = $status|0;
 var $$0 = 0, $$028 = 0, $$1 = 0, $$pr$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__v$i$i = 0, $a = 0, $db = 0;
 var $internal_status = 0, $or$cond = 0, $or$cond6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__v$i$i = sp + 4180|0;
 $a = sp;
 $db = sp + 4112|0;
 $internal_status = sp + 4176|0;
 $0 = ($mangled_name|0)==(0|0);
 if ($0) {
  label = 3;
 } else {
  $1 = ($buf|0)!=(0|0);
  $2 = ($n|0)==(0|0);
  $or$cond = $1 & $2;
  if ($or$cond) {
   label = 3;
  } else {
   if ($1) {
    $4 = HEAP32[$n>>2]|0;
    $82 = $4;
   } else {
    $82 = 0;
   }
   $5 = ((($a)) + 4096|0);
   HEAP32[$5>>2] = $a;
   $6 = $a;
   HEAP32[$db>>2] = 0;
   $7 = ((($db)) + 4|0);
   HEAP32[$7>>2] = 0;
   $8 = ((($db)) + 8|0);
   HEAP32[$8>>2] = 0;
   $9 = ((($db)) + 12|0);
   HEAP32[$9>>2] = $6;
   $10 = ((($db)) + 16|0);
   HEAP32[$10>>2] = 0;
   $11 = ((($db)) + 20|0);
   HEAP32[$11>>2] = 0;
   $12 = ((($db)) + 24|0);
   HEAP32[$12>>2] = 0;
   $13 = ((($db)) + 28|0);
   HEAP32[$13>>2] = $6;
   $14 = ((($db)) + 32|0);
   HEAP32[$14>>2] = 0;
   $15 = ((($db)) + 36|0);
   HEAP32[$15>>2] = 0;
   $16 = ((($db)) + 40|0);
   HEAP32[$16>>2] = 0;
   $17 = ((($db)) + 44|0);
   HEAP32[$17>>2] = $6;
   $18 = ((($db)) + 48|0);
   $19 = ((($db)) + 61|0);
   ;HEAP32[$18>>2]=0|0;HEAP32[$18+4>>2]=0|0;HEAP32[$18+8>>2]=0|0;HEAP8[$18+12>>0]=0|0;
   HEAP8[$19>>0] = 1;
   $20 = ((($db)) + 32|0);
   __ZNSt3__114__split_bufferINS_6vectorINS1_IN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEEERNS5_IS9_Lj4096EEEEC2EjjSB_($__v$i$i,1,0,$17);
   $21 = ((($__v$i$i)) + 8|0);
   $22 = HEAP32[$21>>2]|0;
   HEAP32[$22>>2] = 0;
   $23 = ((($22)) + 4|0);
   HEAP32[$23>>2] = 0;
   $24 = ((($22)) + 8|0);
   HEAP32[$24>>2] = 0;
   $25 = ((($22)) + 12|0);
   HEAP32[$25>>2] = $6;
   $26 = ((($22)) + 16|0);
   HEAP32[$21>>2] = $26;
   __ZNSt3__16vectorINS0_INS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEEENS4_IS8_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS8_RS9_EE($20,$__v$i$i);
   __ZNSt3__114__split_bufferINS_6vectorINS1_IN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEEERNS5_IS9_Lj4096EEEED2Ev($__v$i$i);
   $27 = ((($db)) + 62|0);
   HEAP8[$27>>0] = 0;
   $28 = ((($db)) + 63|0);
   HEAP8[$28>>0] = 1;
   HEAP32[$internal_status>>2] = 0;
   $29 = (_strlen(($mangled_name|0))|0);
   $30 = (($mangled_name) + ($29)|0);
   __ZN10__cxxabiv112_GLOBAL__N_18demangleINS0_2DbEEEvPKcS4_RT_Ri($mangled_name,$30,$db,$internal_status);
   $31 = HEAP32[$internal_status>>2]|0;
   $32 = ($31|0)!=(0);
   $33 = HEAP8[$27>>0]|0;
   $34 = ($33<<24>>24)==(0);
   $or$cond6 = $32 | $34;
   do {
    if ($or$cond6) {
     $58 = $31;
     label = 17;
    } else {
     $35 = HEAP32[$20>>2]|0;
     $36 = HEAP32[$15>>2]|0;
     $37 = ($35|0)==($36|0);
     if ($37) {
      label = 18;
     } else {
      $38 = HEAP32[$35>>2]|0;
      $39 = ((($35)) + 4|0);
      $40 = HEAP32[$39>>2]|0;
      $41 = ($38|0)==($40|0);
      if ($41) {
       label = 18;
      } else {
       HEAP8[$27>>0] = 0;
       HEAP8[$19>>0] = 0;
       $42 = HEAP32[$db>>2]|0;
       $43 = HEAP32[$7>>2]|0;
       $44 = ($43|0)==($42|0);
       if (!($44)) {
        $46 = $43;
        while(1) {
         $45 = ((($46)) + -24|0);
         HEAP32[$7>>2] = $45;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($45);
         $47 = HEAP32[$7>>2]|0;
         $48 = ($47|0)==($42|0);
         if ($48) {
          break;
         } else {
          $46 = $47;
         }
        }
       }
       $49 = HEAP32[$10>>2]|0;
       $50 = HEAP32[$11>>2]|0;
       $51 = ($50|0)==($49|0);
       if (!($51)) {
        $53 = $50;
        while(1) {
         $52 = ((($53)) + -16|0);
         HEAP32[$11>>2] = $52;
         __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($52);
         $54 = HEAP32[$11>>2]|0;
         $55 = ($54|0)==($49|0);
         if ($55) {
          break;
         } else {
          $53 = $54;
         }
        }
       }
       __ZN10__cxxabiv112_GLOBAL__N_18demangleINS0_2DbEEEvPKcS4_RT_Ri($mangled_name,$30,$db,$internal_status);
       $56 = HEAP8[$27>>0]|0;
       $57 = ($56<<24>>24)==(0);
       if ($57) {
        $$pr$pre = HEAP32[$internal_status>>2]|0;
        $58 = $$pr$pre;
        label = 17;
        break;
       } else {
        HEAP32[$internal_status>>2] = -2;
        $$1 = 0;$112 = -2;
        break;
       }
      }
     }
    }
   } while(0);
   if ((label|0) == 17) {
    $59 = ($58|0)==(0);
    if ($59) {
     label = 18;
    } else {
     $$1 = 0;$112 = $58;
    }
   }
   do {
    if ((label|0) == 18) {
     $60 = HEAP32[$7>>2]|0;
     $61 = ((($60)) + -24|0);
     $62 = HEAP8[$61>>0]|0;
     $63 = $62 & 1;
     $64 = ($63<<24>>24)==(0);
     if ($64) {
      $67 = $62&255;
      $68 = $67 >>> 1;
      $79 = $68;
     } else {
      $65 = ((($60)) + -20|0);
      $66 = HEAP32[$65>>2]|0;
      $79 = $66;
     }
     $69 = ((($60)) + -12|0);
     $70 = HEAP8[$69>>0]|0;
     $71 = $70 & 1;
     $72 = ($71<<24>>24)==(0);
     if ($72) {
      $75 = $70&255;
      $76 = $75 >>> 1;
      $78 = $76;
     } else {
      $73 = ((($60)) + -8|0);
      $74 = HEAP32[$73>>2]|0;
      $78 = $74;
     }
     $77 = (($78) + ($79))|0;
     $80 = (($77) + 1)|0;
     $81 = ($80>>>0)>($82>>>0);
     if ($81) {
      $83 = (_realloc($buf,$80)|0);
      $84 = ($83|0)==(0|0);
      if ($84) {
       HEAP32[$internal_status>>2] = -1;
       $$1 = 0;$112 = -1;
       break;
      }
      if ($2) {
       $$028 = $83;
      } else {
       HEAP32[$n>>2] = $80;
       $$028 = $83;
      }
     } else {
      $85 = ($buf|0)==(0|0);
      if ($85) {
       $$1 = 0;$112 = 0;
       break;
      } else {
       $$028 = $buf;
      }
     }
     $86 = HEAP32[$7>>2]|0;
     $87 = ((($86)) + -24|0);
     $88 = ((($86)) + -12|0);
     $89 = HEAP8[$88>>0]|0;
     $90 = $89 & 1;
     $91 = ($90<<24>>24)==(0);
     $92 = ((($86)) + -4|0);
     $93 = HEAP32[$92>>2]|0;
     $94 = ((($88)) + 1|0);
     $95 = $91 ? $94 : $93;
     $96 = ((($86)) + -8|0);
     $97 = HEAP32[$96>>2]|0;
     $98 = $89&255;
     $99 = $98 >>> 1;
     $100 = $91 ? $99 : $97;
     (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($87,$95,$100)|0);
     $101 = HEAP32[$7>>2]|0;
     $102 = ((($101)) + -24|0);
     $103 = HEAP8[$102>>0]|0;
     $104 = $103 & 1;
     $105 = ($104<<24>>24)==(0);
     if ($105) {
      $108 = ((($102)) + 1|0);
      $109 = $108;
     } else {
      $106 = ((($101)) + -16|0);
      $107 = HEAP32[$106>>2]|0;
      $109 = $107;
     }
     _memcpy(($$028|0),($109|0),($77|0))|0;
     $110 = (($$028) + ($77)|0);
     HEAP8[$110>>0] = 0;
     $$1 = $$028;$112 = 0;
    }
   } while(0);
   $111 = ($status|0)==(0|0);
   if (!($111)) {
    HEAP32[$status>>2] = $112;
   }
   __ZN10__cxxabiv112_GLOBAL__N_12DbD2Ev($db);
   $$0 = $$1;
  }
 }
 if ((label|0) == 3) {
  $3 = ($status|0)==(0|0);
  if ($3) {
   $$0 = 0;
  } else {
   HEAP32[$status>>2] = -3;
   $$0 = 0;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___cxa_get_globals_fast() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_pthread_once((232|0),(43|0))|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $2 = HEAP32[228>>2]|0;
  $3 = (_pthread_getspecific(($2|0))|0);
  STACKTOP = sp;return ($3|0);
 } else {
  _abort_message(1191,$vararg_buffer);
  // unreachable;
 }
 return (0)|0;
}
function __Znwj($size) {
 $size = $size|0;
 var $$lcssa = 0, $$size = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($size|0)==(0);
 $$size = $0 ? 1 : $size;
 $1 = (_malloc($$size)|0);
 $2 = ($1|0)==(0|0);
 L1: do {
  if ($2) {
   while(1) {
    $3 = (__ZSt15get_new_handlerv()|0);
    $4 = ($3|0)==(0|0);
    if ($4) {
     break;
    }
    FUNCTION_TABLE_v[$3 & 63]();
    $5 = (_malloc($$size)|0);
    $6 = ($5|0)==(0|0);
    if (!($6)) {
     $$lcssa = $5;
     break L1;
    }
   }
   $7 = (___cxa_allocate_exception(4)|0);
   HEAP32[$7>>2] = (132);
   ___cxa_throw(($7|0),(8|0),(42|0));
   // unreachable;
  } else {
   $$lcssa = $1;
  }
 } while(0);
 return ($$lcssa|0);
}
function __ZdlPv($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($ptr);
 return;
}
function __ZNSt9bad_allocD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt9bad_allocD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt9bad_alloc4whatEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (1240|0);
}
function __ZSt11__terminatePFvvE($func) {
 $func = $func|0;
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 FUNCTION_TABLE_v[$func & 63]();
 _abort_message(1255,$vararg_buffer);
 // unreachable;
}
function __ZSt9terminatev() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (___cxa_get_globals_fast()|0);
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  $2 = HEAP32[$0>>2]|0;
  $3 = ($2|0)==(0|0);
  if (!($3)) {
   $4 = ((($2)) + 48|0);
   $5 = $4;
   $6 = $5;
   $7 = HEAP32[$6>>2]|0;
   $8 = (($5) + 4)|0;
   $9 = $8;
   $10 = HEAP32[$9>>2]|0;
   $11 = $7 & -256;
   $12 = ($11|0)==(1126902528);
   $13 = ($10|0)==(1129074247);
   $14 = $12 & $13;
   if ($14) {
    $15 = ((($2)) + 12|0);
    $16 = HEAP32[$15>>2]|0;
    __ZSt11__terminatePFvvE($16);
    // unreachable;
   }
  }
 }
 $17 = HEAP32[30]|0;HEAP32[30] = (($17+0)|0);
 $18 = $17;
 __ZSt11__terminatePFvvE($18);
 // unreachable;
}
function __ZSt15get_new_handlerv() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[144>>2]|0;HEAP32[144>>2] = (($0+0)|0);
 $1 = $0;
 return ($1|0);
}
function __ZNSt9exceptionD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt9type_infoD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10__cxxabiv116__shim_type_infoD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10__cxxabiv117__class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN10__cxxabiv120__si_class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($this,$thrown_type,$adjustedPtr) {
 $this = $this|0;
 $thrown_type = $thrown_type|0;
 $adjustedPtr = $adjustedPtr|0;
 var $$0 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $info = 0, dest = 0;
 var label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $info = sp;
 $0 = ($this|0)==($thrown_type|0);
 if ($0) {
  $$1 = 1;
 } else {
  $1 = ($thrown_type|0)==(0|0);
  if ($1) {
   $$1 = 0;
  } else {
   $2 = (___dynamic_cast($thrown_type,40,56,0)|0);
   $3 = ($2|0)==(0|0);
   if ($3) {
    $$1 = 0;
   } else {
    dest=$info; stop=dest+56|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
    HEAP32[$info>>2] = $2;
    $4 = ((($info)) + 8|0);
    HEAP32[$4>>2] = $this;
    $5 = ((($info)) + 12|0);
    HEAP32[$5>>2] = -1;
    $6 = ((($info)) + 48|0);
    HEAP32[$6>>2] = 1;
    $7 = HEAP32[$2>>2]|0;
    $8 = ((($7)) + 28|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = HEAP32[$adjustedPtr>>2]|0;
    FUNCTION_TABLE_viiii[$9 & 63]($2,$info,$10,1);
    $11 = ((($info)) + 24|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($12|0)==(1);
    if ($13) {
     $14 = ((($info)) + 16|0);
     $15 = HEAP32[$14>>2]|0;
     HEAP32[$adjustedPtr>>2] = $15;
     $$0 = 1;
    } else {
     $$0 = 0;
    }
    $$1 = $$0;
   }
  }
 }
 STACKTOP = sp;return ($$1|0);
}
function __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 do {
  if ($2) {
   HEAP32[$0>>2] = $adjustedPtr;
   $3 = ((($info)) + 24|0);
   HEAP32[$3>>2] = $path_below;
   $4 = ((($info)) + 36|0);
   HEAP32[$4>>2] = 1;
  } else {
   $5 = ($1|0)==($adjustedPtr|0);
   if (!($5)) {
    $9 = ((($info)) + 36|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = (($10) + 1)|0;
    HEAP32[$9>>2] = $11;
    $12 = ((($info)) + 24|0);
    HEAP32[$12>>2] = 2;
    $13 = ((($info)) + 54|0);
    HEAP8[$13>>0] = 1;
    break;
   }
   $6 = ((($info)) + 24|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7|0)==(2);
   if ($8) {
    HEAP32[$6>>2] = $path_below;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$info,$adjustedPtr,$path_below);
 }
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$info,$adjustedPtr,$path_below);
 } else {
  $3 = ((($this)) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($5)) + 28|0);
  $7 = HEAP32[$6>>2]|0;
  FUNCTION_TABLE_viiii[$7 & 63]($4,$info,$adjustedPtr,$path_below);
 }
 return;
}
function ___dynamic_cast($static_ptr,$static_type,$dst_type,$src2dst_offset) {
 $static_ptr = $static_ptr|0;
 $static_type = $static_type|0;
 $dst_type = $dst_type|0;
 $src2dst_offset = $src2dst_offset|0;
 var $$ = 0, $$8 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dst_ptr$0 = 0, $info = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $info = sp;
 $0 = HEAP32[$static_ptr>>2]|0;
 $1 = ((($0)) + -8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2;
 $4 = (($static_ptr) + ($3)|0);
 $5 = ((($0)) + -4|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$info>>2] = $dst_type;
 $7 = ((($info)) + 4|0);
 HEAP32[$7>>2] = $static_ptr;
 $8 = ((($info)) + 8|0);
 HEAP32[$8>>2] = $static_type;
 $9 = ((($info)) + 12|0);
 HEAP32[$9>>2] = $src2dst_offset;
 $10 = ((($info)) + 16|0);
 $11 = ((($info)) + 20|0);
 $12 = ((($info)) + 24|0);
 $13 = ((($info)) + 28|0);
 $14 = ((($info)) + 32|0);
 $15 = ((($info)) + 40|0);
 $16 = ($6|0)==($dst_type|0);
 dest=$10; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));HEAP16[$10+36>>1]=0|0;HEAP8[$10+38>>0]=0|0;
 L1: do {
  if ($16) {
   $17 = ((($info)) + 48|0);
   HEAP32[$17>>2] = 1;
   $18 = HEAP32[$dst_type>>2]|0;
   $19 = ((($18)) + 20|0);
   $20 = HEAP32[$19>>2]|0;
   FUNCTION_TABLE_viiiiii[$20 & 63]($dst_type,$info,$4,$4,1,0);
   $21 = HEAP32[$12>>2]|0;
   $22 = ($21|0)==(1);
   $$ = $22 ? $4 : 0;
   $dst_ptr$0 = $$;
  } else {
   $23 = ((($info)) + 36|0);
   $24 = HEAP32[$6>>2]|0;
   $25 = ((($24)) + 24|0);
   $26 = HEAP32[$25>>2]|0;
   FUNCTION_TABLE_viiiii[$26 & 63]($6,$info,$4,1,0);
   $27 = HEAP32[$23>>2]|0;
   switch ($27|0) {
   case 0:  {
    $28 = HEAP32[$15>>2]|0;
    $29 = ($28|0)==(1);
    $30 = HEAP32[$13>>2]|0;
    $31 = ($30|0)==(1);
    $or$cond = $29 & $31;
    $32 = HEAP32[$14>>2]|0;
    $33 = ($32|0)==(1);
    $or$cond3 = $or$cond & $33;
    $34 = HEAP32[$11>>2]|0;
    $$8 = $or$cond3 ? $34 : 0;
    $dst_ptr$0 = $$8;
    break L1;
    break;
   }
   case 1:  {
    break;
   }
   default: {
    $dst_ptr$0 = 0;
    break L1;
   }
   }
   $35 = HEAP32[$12>>2]|0;
   $36 = ($35|0)==(1);
   if (!($36)) {
    $37 = HEAP32[$15>>2]|0;
    $38 = ($37|0)==(0);
    $39 = HEAP32[$13>>2]|0;
    $40 = ($39|0)==(1);
    $or$cond5 = $38 & $40;
    $41 = HEAP32[$14>>2]|0;
    $42 = ($41|0)==(1);
    $or$cond7 = $or$cond5 & $42;
    if (!($or$cond7)) {
     $dst_ptr$0 = 0;
     break;
    }
   }
   $43 = HEAP32[$10>>2]|0;
   $dst_ptr$0 = $43;
  }
 } while(0);
 STACKTOP = sp;return ($dst_ptr$0|0);
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($this,$info,$dst_ptr,$current_ptr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 53|0);
 HEAP8[$0>>0] = 1;
 $1 = ((($info)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==($current_ptr|0);
 do {
  if ($3) {
   $4 = ((($info)) + 52|0);
   HEAP8[$4>>0] = 1;
   $5 = ((($info)) + 16|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($6|0)==(0|0);
   if ($7) {
    HEAP32[$5>>2] = $dst_ptr;
    $8 = ((($info)) + 24|0);
    HEAP32[$8>>2] = $path_below;
    $9 = ((($info)) + 36|0);
    HEAP32[$9>>2] = 1;
    $10 = ((($info)) + 48|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ($11|0)==(1);
    $13 = ($path_below|0)==(1);
    $or$cond = $12 & $13;
    if (!($or$cond)) {
     break;
    }
    $14 = ((($info)) + 54|0);
    HEAP8[$14>>0] = 1;
    break;
   }
   $15 = ($6|0)==($dst_ptr|0);
   if (!($15)) {
    $25 = ((($info)) + 36|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = (($26) + 1)|0;
    HEAP32[$25>>2] = $27;
    $28 = ((($info)) + 54|0);
    HEAP8[$28>>0] = 1;
    break;
   }
   $16 = ((($info)) + 24|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($17|0)==(2);
   if ($18) {
    HEAP32[$16>>2] = $path_below;
    $22 = $path_below;
   } else {
    $22 = $17;
   }
   $19 = ((($info)) + 48|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = ($20|0)==(1);
   $23 = ($22|0)==(1);
   $or$cond1 = $21 & $23;
   if ($or$cond1) {
    $24 = ((($info)) + 54|0);
    HEAP8[$24>>0] = 1;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $is_dst_type_derived_from_static_type$0$off01 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 L1: do {
  if ($2) {
   $3 = ((($info)) + 4|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)==($current_ptr|0);
   if ($5) {
    $6 = ((($info)) + 28|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = ($7|0)==(1);
    if (!($8)) {
     HEAP32[$6>>2] = $path_below;
    }
   }
  } else {
   $9 = HEAP32[$info>>2]|0;
   $10 = ($this|0)==($9|0);
   if (!($10)) {
    $43 = ((($this)) + 8|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = HEAP32[$44>>2]|0;
    $46 = ((($45)) + 24|0);
    $47 = HEAP32[$46>>2]|0;
    FUNCTION_TABLE_viiiii[$47 & 63]($44,$info,$current_ptr,$path_below,$use_strcmp);
    break;
   }
   $11 = ((($info)) + 16|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)==($current_ptr|0);
   if (!($13)) {
    $14 = ((($info)) + 20|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = ($15|0)==($current_ptr|0);
    if (!($16)) {
     $19 = ((($info)) + 32|0);
     HEAP32[$19>>2] = $path_below;
     $20 = ((($info)) + 44|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ($21|0)==(4);
     if ($22) {
      break;
     }
     $23 = ((($info)) + 52|0);
     HEAP8[$23>>0] = 0;
     $24 = ((($info)) + 53|0);
     HEAP8[$24>>0] = 0;
     $25 = ((($this)) + 8|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = HEAP32[$26>>2]|0;
     $28 = ((($27)) + 20|0);
     $29 = HEAP32[$28>>2]|0;
     FUNCTION_TABLE_viiiiii[$29 & 63]($26,$info,$current_ptr,$current_ptr,1,$use_strcmp);
     $30 = HEAP8[$24>>0]|0;
     $31 = ($30<<24>>24)==(0);
     if ($31) {
      $is_dst_type_derived_from_static_type$0$off01 = 0;
      label = 13;
     } else {
      $32 = HEAP8[$23>>0]|0;
      $not$ = ($32<<24>>24)==(0);
      if ($not$) {
       $is_dst_type_derived_from_static_type$0$off01 = 1;
       label = 13;
      }
     }
     do {
      if ((label|0) == 13) {
       HEAP32[$14>>2] = $current_ptr;
       $33 = ((($info)) + 40|0);
       $34 = HEAP32[$33>>2]|0;
       $35 = (($34) + 1)|0;
       HEAP32[$33>>2] = $35;
       $36 = ((($info)) + 36|0);
       $37 = HEAP32[$36>>2]|0;
       $38 = ($37|0)==(1);
       if ($38) {
        $39 = ((($info)) + 24|0);
        $40 = HEAP32[$39>>2]|0;
        $41 = ($40|0)==(2);
        if ($41) {
         $42 = ((($info)) + 54|0);
         HEAP8[$42>>0] = 1;
         if ($is_dst_type_derived_from_static_type$0$off01) {
          break;
         }
        } else {
         label = 16;
        }
       } else {
        label = 16;
       }
       if ((label|0) == 16) {
        if ($is_dst_type_derived_from_static_type$0$off01) {
         break;
        }
       }
       HEAP32[$20>>2] = 4;
       break L1;
      }
     } while(0);
     HEAP32[$20>>2] = 3;
     break;
    }
   }
   $17 = ($path_below|0)==(1);
   if ($17) {
    $18 = ((($info)) + 32|0);
    HEAP32[$18>>2] = 1;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 do {
  if ($2) {
   $3 = ((($info)) + 4|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)==($current_ptr|0);
   if ($5) {
    $6 = ((($info)) + 28|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = ($7|0)==(1);
    if (!($8)) {
     HEAP32[$6>>2] = $path_below;
    }
   }
  } else {
   $9 = HEAP32[$info>>2]|0;
   $10 = ($this|0)==($9|0);
   if ($10) {
    $11 = ((($info)) + 16|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($12|0)==($current_ptr|0);
    if (!($13)) {
     $14 = ((($info)) + 20|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = ($15|0)==($current_ptr|0);
     if (!($16)) {
      $19 = ((($info)) + 32|0);
      HEAP32[$19>>2] = $path_below;
      HEAP32[$14>>2] = $current_ptr;
      $20 = ((($info)) + 40|0);
      $21 = HEAP32[$20>>2]|0;
      $22 = (($21) + 1)|0;
      HEAP32[$20>>2] = $22;
      $23 = ((($info)) + 36|0);
      $24 = HEAP32[$23>>2]|0;
      $25 = ($24|0)==(1);
      if ($25) {
       $26 = ((($info)) + 24|0);
       $27 = HEAP32[$26>>2]|0;
       $28 = ($27|0)==(2);
       if ($28) {
        $29 = ((($info)) + 54|0);
        HEAP8[$29>>0] = 1;
       }
      }
      $30 = ((($info)) + 44|0);
      HEAP32[$30>>2] = 4;
      break;
     }
    }
    $17 = ($path_below|0)==(1);
    if ($17) {
     $18 = ((($info)) + 32|0);
     HEAP32[$18>>2] = 1;
    }
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$info,$dst_ptr,$current_ptr,$path_below);
 } else {
  $3 = ((($this)) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($5)) + 20|0);
  $7 = HEAP32[$6>>2]|0;
  FUNCTION_TABLE_viiiiii[$7 & 63]($4,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp);
 }
 return;
}
function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$info,$dst_ptr,$current_ptr,$path_below);
 }
 return;
}
function ___cxa_can_catch($catchType,$excpType,$thrown) {
 $catchType = $catchType|0;
 $excpType = $excpType|0;
 $thrown = $thrown|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $temp = sp;
 $0 = HEAP32[$thrown>>2]|0;
 HEAP32[$temp>>2] = $0;
 $1 = HEAP32[$catchType>>2]|0;
 $2 = ((($1)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_iiii[$3 & 63]($catchType,$excpType,$temp)|0);
 $5 = $4&1;
 if ($4) {
  $6 = HEAP32[$temp>>2]|0;
  HEAP32[$thrown>>2] = $6;
 }
 STACKTOP = sp;return ($5|0);
}
function ___cxa_is_pointer_type($type) {
 $type = $type|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($type|0)==(0|0);
 if ($0) {
  $3 = 0;
 } else {
  $1 = (___dynamic_cast($type,40,88,0)|0);
  $phitmp = ($1|0)!=(0|0);
  $3 = $phitmp;
 }
 $2 = $3&1;
 return ($2|0);
}
function __ZL25default_terminate_handlerv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $thrown_object = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0;
 var $vararg_ptr2 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp;
 $vararg_buffer3 = sp + 8|0;
 $vararg_buffer = sp + 16|0;
 $thrown_object = sp + 36|0;
 $0 = (___cxa_get_globals_fast()|0);
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  $2 = HEAP32[$0>>2]|0;
  $3 = ($2|0)==(0|0);
  if (!($3)) {
   $4 = ((($2)) + 80|0);
   $5 = ((($2)) + 48|0);
   $6 = $5;
   $7 = $6;
   $8 = HEAP32[$7>>2]|0;
   $9 = (($6) + 4)|0;
   $10 = $9;
   $11 = HEAP32[$10>>2]|0;
   $12 = $8 & -256;
   $13 = ($12|0)==(1126902528);
   $14 = ($11|0)==(1129074247);
   $15 = $13 & $14;
   if (!($15)) {
    HEAP32[$vararg_buffer7>>2] = 3703;
    _abort_message(3653,$vararg_buffer7);
    // unreachable;
   }
   $16 = ($8|0)==(1126902529);
   $17 = ($11|0)==(1129074247);
   $18 = $16 & $17;
   if ($18) {
    $19 = ((($2)) + 44|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = $20;
   } else {
    $21 = $4;
   }
   HEAP32[$thrown_object>>2] = $21;
   $22 = HEAP32[$2>>2]|0;
   $23 = ((($22)) + 4|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = HEAP32[24>>2]|0;
   $26 = ((($25)) + 16|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = (FUNCTION_TABLE_iiii[$27 & 63](24,$22,$thrown_object)|0);
   if ($28) {
    $29 = HEAP32[$thrown_object>>2]|0;
    $30 = HEAP32[$29>>2]|0;
    $31 = ((($30)) + 8|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = (FUNCTION_TABLE_ii[$32 & 63]($29)|0);
    HEAP32[$vararg_buffer>>2] = 3703;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = $24;
    $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr2>>2] = $33;
    _abort_message(3567,$vararg_buffer);
    // unreachable;
   } else {
    HEAP32[$vararg_buffer3>>2] = 3703;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = $24;
    _abort_message(3612,$vararg_buffer3);
    // unreachable;
   }
  }
 }
 _abort_message(3691,$vararg_buffer10);
 // unreachable;
}
function __ZNSt3__114__split_bufferINS_6vectorINS1_IN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEEERNS5_IS9_Lj4096EEEEC2EjjSB_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 12|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($this)) + 16|0);
 HEAP32[$1>>2] = $__a;
 $2 = ($__cap|0)==(0);
 if ($2) {
  $6 = 0;
 } else {
  $3 = HEAP32[$__a>>2]|0;
  $4 = $__cap << 4;
  $5 = (__ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE8allocateEj($3,$4)|0);
  $6 = $5;
 }
 HEAP32[$this>>2] = $6;
 $7 = (($6) + ($__start<<4)|0);
 $8 = ((($this)) + 8|0);
 HEAP32[$8>>2] = $7;
 $9 = ((($this)) + 4|0);
 HEAP32[$9>>2] = $7;
 $10 = (($6) + ($__cap<<4)|0);
 $11 = ((($this)) + 12|0);
 HEAP32[$11>>2] = $10;
 return;
}
function __ZNSt3__16vectorINS0_INS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEEENS4_IS8_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS8_RS9_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $$0$i1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ((($this)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($__v)) + 4|0);
 $4 = ($2|0)==($0|0);
 if (!($4)) {
  $$0$i1 = $2;
  while(1) {
   $5 = HEAP32[$3>>2]|0;
   $6 = ((($5)) + -16|0);
   $7 = ((($$0$i1)) + -16|0);
   $8 = ((($$0$i1)) + -4|0);
   HEAP32[$6>>2] = 0;
   $9 = ((($5)) + -12|0);
   HEAP32[$9>>2] = 0;
   $10 = ((($5)) + -8|0);
   $11 = HEAP32[$8>>2]|0;
   HEAP32[$10>>2] = 0;
   $12 = ((($5)) + -4|0);
   HEAP32[$12>>2] = $11;
   $13 = HEAP32[$7>>2]|0;
   HEAP32[$6>>2] = $13;
   $14 = ((($$0$i1)) + -12|0);
   $15 = HEAP32[$14>>2]|0;
   HEAP32[$9>>2] = $15;
   $16 = ((($$0$i1)) + -8|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ((($5)) + -8|0);
   HEAP32[$18>>2] = $17;
   HEAP32[$16>>2] = 0;
   HEAP32[$14>>2] = 0;
   HEAP32[$7>>2] = 0;
   $19 = HEAP32[$3>>2]|0;
   $20 = ((($19)) + -16|0);
   HEAP32[$3>>2] = $20;
   $21 = ($7|0)==($0|0);
   if ($21) {
    break;
   } else {
    $$0$i1 = $7;
   }
  }
 }
 $22 = HEAP32[$this>>2]|0;
 $23 = HEAP32[$3>>2]|0;
 HEAP32[$this>>2] = $23;
 HEAP32[$3>>2] = $22;
 $24 = ((($__v)) + 8|0);
 $25 = HEAP32[$1>>2]|0;
 $26 = HEAP32[$24>>2]|0;
 HEAP32[$1>>2] = $26;
 HEAP32[$24>>2] = $25;
 $27 = ((($this)) + 8|0);
 $28 = ((($__v)) + 12|0);
 $29 = HEAP32[$27>>2]|0;
 $30 = HEAP32[$28>>2]|0;
 HEAP32[$27>>2] = $30;
 HEAP32[$28>>2] = $29;
 $31 = HEAP32[$3>>2]|0;
 HEAP32[$__v>>2] = $31;
 return;
}
function __ZNSt3__114__split_bufferINS_6vectorINS1_IN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEEERNS5_IS9_Lj4096EEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($this)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==($1|0);
 if (!($4)) {
  $6 = $3;
  while(1) {
   $5 = ((($6)) + -16|0);
   HEAP32[$2>>2] = $5;
   __ZNSt3__113__vector_baseINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEED2Ev($5);
   $7 = HEAP32[$2>>2]|0;
   $8 = ($7|0)==($1|0);
   if ($8) {
    break;
   } else {
    $6 = $7;
   }
  }
 }
 $9 = HEAP32[$this>>2]|0;
 $10 = ($9|0)==(0|0);
 if (!($10)) {
  $11 = ((($this)) + 16|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ((($this)) + 12|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = $14;
  $16 = $9;
  $17 = (($15) - ($16))|0;
  $18 = HEAP32[$12>>2]|0;
  __ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE10deallocateEPcj($18,$9,$17);
 }
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_18demangleINS0_2DbEEEvPKcS4_RT_Ri($first,$last,$db,$status) {
 $first = $first|0;
 $last = $last|0;
 $db = $db|0;
 $status = $status|0;
 var $$0$i$i$i11 = 0, $$0$i2 = 0, $$03$i = 0, $$lcssa = 0, $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__p$0$i$i$i10 = 0, $__p$0$ph$i$i$i = 0, $i$0$i16 = 0, $isdigit$i = 0, $isdigit3$i = 0, $isdigittmp$i = 0, $isdigittmp2$i = 0, $or$cond = 0, $or$cond1 = 0;
 var $scevgep2$i$i$i = 0, $t$0 = 0, $t$0$i15 = 0, $t$0$i15$lcssa20 = 0, $t$1$i$ph = 0, $t$1$i12 = 0, $t$2$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 24|0;
 $1 = sp;
 $2 = sp + 12|0;
 $3 = ($first>>>0)<($last>>>0);
 L1: do {
  if ($3) {
   $4 = HEAP8[$first>>0]|0;
   $5 = ($4<<24>>24)==(95);
   L3: do {
    if ($5) {
     $6 = $last;
     $7 = $first;
     $8 = (($6) - ($7))|0;
     $9 = ($8|0)>(3);
     if (!($9)) {
      HEAP32[$status>>2] = -2;
      break L1;
     }
     $10 = ((($first)) + 1|0);
     $11 = HEAP8[$10>>0]|0;
     switch ($11<<24>>24) {
     case 90:  {
      $12 = ((($first)) + 2|0);
      $13 = (__ZN10__cxxabiv112_GLOBAL__N_114parse_encodingINS0_2DbEEEPKcS4_S4_RT_($12,$last,$db)|0);
      $14 = ($13|0)==($12|0);
      $15 = ($13|0)==($last|0);
      $or$cond = $14 | $15;
      if ($or$cond) {
       $t$0 = $13;
      } else {
       $16 = HEAP8[$13>>0]|0;
       $17 = ($16<<24>>24)==(46);
       if ($17) {
        $18 = HEAP32[$db>>2]|0;
        $19 = ((($db)) + 4|0);
        $20 = HEAP32[$19>>2]|0;
        $21 = ($18|0)==($20|0);
        if ($21) {
         $$03$i = $13;
        } else {
         $22 = ((($20)) + -24|0);
         $23 = $13;
         $24 = (($6) - ($23))|0;
         $25 = ($24>>>0)>(4294967279);
         if ($25) {
          __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($2);
          // unreachable;
         }
         $26 = ($24>>>0)<(11);
         if ($26) {
          $27 = $24 << 1;
          $28 = $27&255;
          HEAP8[$2>>0] = $28;
          $29 = ((($2)) + 1|0);
          $__p$0$ph$i$i$i = $29;
         } else {
          $30 = (($24) + 16)|0;
          $31 = $30 & -16;
          $32 = (_malloc($31)|0);
          $33 = ((($2)) + 8|0);
          HEAP32[$33>>2] = $32;
          $34 = $31 | 1;
          HEAP32[$2>>2] = $34;
          $35 = ((($2)) + 4|0);
          HEAP32[$35>>2] = $24;
          $__p$0$ph$i$i$i = $32;
         }
         $36 = ($13|0)==($last|0);
         if (!($36)) {
          $$0$i$i$i11 = $13;$__p$0$i$i$i10 = $__p$0$ph$i$i$i;
          while(1) {
           $37 = HEAP8[$$0$i$i$i11>>0]|0;
           HEAP8[$__p$0$i$i$i10>>0] = $37;
           $38 = ((($$0$i$i$i11)) + 1|0);
           $39 = ((($__p$0$i$i$i10)) + 1|0);
           $40 = ($38|0)==($last|0);
           if ($40) {
            break;
           } else {
            $$0$i$i$i11 = $38;$__p$0$i$i$i10 = $39;
           }
          }
         }
         $scevgep2$i$i$i = (($__p$0$ph$i$i$i) + ($24)|0);
         HEAP8[$scevgep2$i$i$i>>0] = 0;
         $41 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($2,0,1508)|0);
         ;HEAP32[$1>>2]=HEAP32[$41>>2]|0;HEAP32[$1+4>>2]=HEAP32[$41+4>>2]|0;HEAP32[$1+8>>2]=HEAP32[$41+8>>2]|0;
         HEAP32[$41>>2] = 0;
         $42 = ((($41)) + 4|0);
         HEAP32[$42>>2] = 0;
         $43 = ((($41)) + 8|0);
         HEAP32[$43>>2] = 0;
         $44 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($1,1511)|0);
         ;HEAP32[$0>>2]=HEAP32[$44>>2]|0;HEAP32[$0+4>>2]=HEAP32[$44+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$44+8>>2]|0;
         HEAP32[$44>>2] = 0;
         $45 = ((($44)) + 4|0);
         HEAP32[$45>>2] = 0;
         $46 = ((($44)) + 8|0);
         HEAP32[$46>>2] = 0;
         $47 = HEAP8[$0>>0]|0;
         $48 = $47 & 1;
         $49 = ($48<<24>>24)==(0);
         $50 = ((($0)) + 8|0);
         $51 = HEAP32[$50>>2]|0;
         $52 = ((($0)) + 1|0);
         $53 = $49 ? $52 : $51;
         $54 = ((($0)) + 4|0);
         $55 = HEAP32[$54>>2]|0;
         $56 = $47&255;
         $57 = $56 >>> 1;
         $58 = $49 ? $57 : $55;
         (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($22,$53,$58)|0);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($0);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($1);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($2);
         $$03$i = $last;
        }
        $t$0 = $$03$i;
       } else {
        $t$0 = $13;
       }
      }
      $59 = ($t$0|0)==($last|0);
      if ($59) {
       break L3;
      }
      HEAP32[$status>>2] = -2;
      break L1;
      break;
     }
     case 95:  {
      label = 20;
      break;
     }
     default: {
     }
     }
     if ((label|0) == 20) {
      $60 = ((($first)) + 2|0);
      $61 = HEAP8[$60>>0]|0;
      $62 = ($61<<24>>24)==(95);
      if ($62) {
       $63 = ((($first)) + 3|0);
       $64 = HEAP8[$63>>0]|0;
       $65 = ($64<<24>>24)==(90);
       if ($65) {
        $66 = ((($first)) + 4|0);
        $67 = (__ZN10__cxxabiv112_GLOBAL__N_114parse_encodingINS0_2DbEEEPKcS4_S4_RT_($66,$last,$db)|0);
        $68 = ($67|0)==($66|0);
        $69 = ($67|0)==($last|0);
        $or$cond1 = $68 | $69;
        if ($or$cond1) {
         HEAP32[$status>>2] = -2;
         break L1;
        }
        $70 = $67;
        $71 = (($6) - ($70))|0;
        $72 = ($71|0)>(12);
        L36: do {
         if ($72) {
          $i$0$i16 = 0;$t$0$i15 = $67;
          while(1) {
           $73 = HEAP8[$t$0$i15>>0]|0;
           $74 = (1513 + ($i$0$i16)|0);
           $75 = HEAP8[$74>>0]|0;
           $76 = ($73<<24>>24)==($75<<24>>24);
           if (!($76)) {
            $$0$i2 = $67;
            break L36;
           }
           $77 = (($i$0$i16) + 1)|0;
           $78 = ((($t$0$i15)) + 1|0);
           $79 = ($77|0)<(13);
           if ($79) {
            $i$0$i16 = $77;$t$0$i15 = $78;
           } else {
            $$lcssa = $78;$t$0$i15$lcssa20 = $t$0$i15;
            break;
           }
          }
          $80 = ($$lcssa|0)==($last|0);
          L41: do {
           if ($80) {
            $t$2$i = $last;
           } else {
            $81 = HEAP8[$$lcssa>>0]|0;
            $82 = ($81<<24>>24)==(95);
            if ($82) {
             $83 = ((($t$0$i15$lcssa20)) + 2|0);
             $84 = ($83|0)==($last|0);
             if ($84) {
              $$0$i2 = $67;
              break L36;
             }
             $85 = HEAP8[$83>>0]|0;
             $86 = $85 << 24 >> 24;
             $isdigittmp2$i = (($86) + -48)|0;
             $isdigit3$i = ($isdigittmp2$i>>>0)<(10);
             if (!($isdigit3$i)) {
              $$0$i2 = $67;
              break L36;
             }
             $87 = ((($t$0$i15$lcssa20)) + 3|0);
             $t$1$i$ph = $87;
            } else {
             $t$1$i$ph = $$lcssa;
            }
            $88 = ($t$1$i$ph|0)==($last|0);
            if ($88) {
             $t$2$i = $last;
            } else {
             $t$1$i12 = $t$1$i$ph;
             while(1) {
              $89 = HEAP8[$t$1$i12>>0]|0;
              $90 = $89 << 24 >> 24;
              $isdigittmp$i = (($90) + -48)|0;
              $isdigit$i = ($isdigittmp$i>>>0)<(10);
              if (!($isdigit$i)) {
               $t$2$i = $t$1$i12;
               break L41;
              }
              $91 = ((($t$1$i12)) + 1|0);
              $92 = ($91|0)==($last|0);
              if ($92) {
               $t$2$i = $last;
               break;
              } else {
               $t$1$i12 = $91;
              }
             }
            }
           }
          } while(0);
          $93 = HEAP32[$db>>2]|0;
          $94 = ((($db)) + 4|0);
          $95 = HEAP32[$94>>2]|0;
          $96 = ($93|0)==($95|0);
          if ($96) {
           $$0$i2 = $67;
          } else {
           $97 = ((($95)) + -24|0);
           (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($97,0,1527)|0);
           $$0$i2 = $t$2$i;
          }
         } else {
          $$0$i2 = $67;
         }
        } while(0);
        $98 = ($$0$i2|0)==($last|0);
        if ($98) {
         break;
        }
        HEAP32[$status>>2] = -2;
        break L1;
       }
      }
     }
     HEAP32[$status>>2] = -2;
     break L1;
    } else {
     $99 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db)|0);
     $100 = ($99|0)==($last|0);
     if (!($100)) {
      HEAP32[$status>>2] = -2;
      break L1;
     }
    }
   } while(0);
   $$pr = HEAP32[$status>>2]|0;
   $101 = ($$pr|0)==(0);
   if ($101) {
    $102 = HEAP32[$db>>2]|0;
    $103 = ((($db)) + 4|0);
    $104 = HEAP32[$103>>2]|0;
    $105 = ($102|0)==($104|0);
    if ($105) {
     HEAP32[$status>>2] = -2;
    }
   }
  } else {
   HEAP32[$status>>2] = -2;
  }
 } while(0);
 STACKTOP = sp;return;
}
function __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 12|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($this);
 return;
}
function __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  $2 = ((($this)) + 4|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)==($0|0);
  if (!($4)) {
   $6 = $3;
   while(1) {
    $5 = ((($6)) + -24|0);
    HEAP32[$2>>2] = $5;
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($5);
    $7 = HEAP32[$2>>2]|0;
    $8 = ($7|0)==($0|0);
    if ($8) {
     break;
    } else {
     $6 = $7;
    }
   }
  }
  $9 = HEAP32[$this>>2]|0;
  $10 = ((($this)) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = $11;
  $13 = $9;
  $14 = (($12) - ($13))|0;
  $15 = ((($this)) + 12|0);
  $16 = HEAP32[$15>>2]|0;
  __ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE10deallocateEPcj($16,$9,$14);
 }
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $14 = 10;$7 = $0;
 } else {
  $3 = HEAP32[$this>>2]|0;
  $4 = $3 & -2;
  $phitmp$i = (($4) + -1)|0;
  $5 = $3&255;
  $14 = $phitmp$i;$7 = $5;
 }
 $6 = $7 & 1;
 $8 = ($6<<24>>24)==(0);
 if ($8) {
  $11 = $7&255;
  $12 = $11 >>> 1;
  $15 = $12;
 } else {
  $9 = ((($this)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $15 = $10;
 }
 $13 = (($14) - ($15))|0;
 $16 = ($13>>>0)<($__n>>>0);
 if ($16) {
  $33 = (($__n) - ($14))|0;
  $34 = (($33) + ($15))|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$14,$34,$15,$15,0,$__n,$__s);
 } else {
  $17 = ($__n|0)==(0);
  if (!($17)) {
   $18 = $7 & 1;
   $19 = ($18<<24>>24)==(0);
   if ($19) {
    $22 = ((($this)) + 1|0);
    $24 = $22;
   } else {
    $20 = ((($this)) + 8|0);
    $21 = HEAP32[$20>>2]|0;
    $24 = $21;
   }
   $23 = (($24) + ($15)|0);
   _memcpy(($23|0),($__s|0),($__n|0))|0;
   $25 = (($15) + ($__n))|0;
   $26 = HEAP8[$this>>0]|0;
   $27 = $26 & 1;
   $28 = ($27<<24>>24)==(0);
   if ($28) {
    $30 = $25 << 1;
    $31 = $30&255;
    HEAP8[$this>>0] = $31;
   } else {
    $29 = ((($this)) + 4|0);
    HEAP32[$29>>2] = $25;
   }
   $32 = (($24) + ($25)|0);
   HEAP8[$32>>0] = 0;
  }
 }
 return ($this|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_12DbD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 32|0);
 __ZNSt3__113__vector_baseINS_6vectorINS1_IN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEEENS5_IS9_Lj4096EEEED2Ev($0);
 $1 = ((($this)) + 16|0);
 __ZNSt3__113__vector_baseINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEED2Ev($1);
 __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($this);
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_110construct_Ev() {
 var $0 = 0, $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_pthread_key_create((228|0),(49|0))|0);
 $1 = ($0|0)==(0);
 if ($1) {
  STACKTOP = sp;return;
 } else {
  _abort_message(1295,$vararg_buffer);
  // unreachable;
 }
}
function __ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 _free($p);
 $0 = HEAP32[228>>2]|0;
 $1 = (_pthread_setspecific(($0|0),(0|0))|0);
 $2 = ($1|0)==(0);
 if ($2) {
  STACKTOP = sp;return;
 } else {
  _abort_message(1345,$vararg_buffer);
  // unreachable;
 }
}
function __ZNSt3__113__vector_baseINS_6vectorINS1_IN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEEENS5_IS9_Lj4096EEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  $2 = ((($this)) + 4|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)==($0|0);
  if (!($4)) {
   $6 = $3;
   while(1) {
    $5 = ((($6)) + -16|0);
    HEAP32[$2>>2] = $5;
    __ZNSt3__113__vector_baseINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEED2Ev($5);
    $7 = HEAP32[$2>>2]|0;
    $8 = ($7|0)==($0|0);
    if ($8) {
     break;
    } else {
     $6 = $7;
    }
   }
  }
  $9 = HEAP32[$this>>2]|0;
  $10 = ((($this)) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = $11;
  $13 = $9;
  $14 = (($12) - ($13))|0;
  $15 = ((($this)) + 12|0);
  $16 = HEAP32[$15>>2]|0;
  __ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE10deallocateEPcj($16,$9,$14);
 }
 return;
}
function __ZNSt3__113__vector_baseINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  $2 = ((($this)) + 4|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)==($0|0);
  if (!($4)) {
   $6 = $3;
   while(1) {
    $5 = ((($6)) + -16|0);
    HEAP32[$2>>2] = $5;
    __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($5);
    $7 = HEAP32[$2>>2]|0;
    $8 = ($7|0)==($0|0);
    if ($8) {
     break;
    } else {
     $6 = $7;
    }
   }
  }
  $9 = HEAP32[$this>>2]|0;
  $10 = ((($this)) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = $11;
  $13 = $9;
  $14 = (($12) - ($13))|0;
  $15 = ((($this)) + 12|0);
  $16 = HEAP32[$15>>2]|0;
  __ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE10deallocateEPcj($16,$9,$14);
 }
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE10deallocateEPcj($this,$p,$n) {
 $this = $this|0;
 $p = $p|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($this>>>0)<=($p>>>0);
 $1 = ((($this)) + 4096|0);
 $2 = ($1>>>0)>=($p>>>0);
 $3 = $0 & $2;
 if ($3) {
  $4 = (($n) + 15)|0;
  $5 = $4 & -16;
  $6 = (($p) + ($5)|0);
  $7 = ((($this)) + 4096|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($6|0)==($8|0);
  if ($9) {
   HEAP32[$7>>2] = $p;
  }
 } else {
  _free($p);
 }
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add,$__p_new_stuff) {
 $this = $this|0;
 $__old_cap = $__old_cap|0;
 $__delta_cap = $__delta_cap|0;
 $__old_sz = $__old_sz|0;
 $__n_copy = $__n_copy|0;
 $__n_del = $__n_del|0;
 $__n_add = $__n_add|0;
 $__p_new_stuff = $__p_new_stuff|0;
 var $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (-18 - ($__old_cap))|0;
 $1 = ($0>>>0)<($__delta_cap>>>0);
 if ($1) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $2 = HEAP8[$this>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = ((($this)) + 1|0);
  $20 = $7;
 } else {
  $5 = ((($this)) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $20 = $6;
 }
 $8 = ($__old_cap>>>0)<(2147483623);
 if ($8) {
  $9 = (($__delta_cap) + ($__old_cap))|0;
  $10 = $__old_cap << 1;
  $11 = ($9>>>0)<($10>>>0);
  $12 = $11 ? $10 : $9;
  $13 = ($12>>>0)<(11);
  $14 = (($12) + 16)|0;
  $15 = $14 & -16;
  $16 = $13 ? 11 : $15;
  $17 = $16;
 } else {
  $17 = -17;
 }
 $18 = (_malloc($17)|0);
 $19 = ($__n_copy|0)==(0);
 if (!($19)) {
  _memcpy(($18|0),($20|0),($__n_copy|0))|0;
 }
 $21 = ($__n_add|0)==(0);
 if (!($21)) {
  $22 = (($18) + ($__n_copy)|0);
  _memcpy(($22|0),($__p_new_stuff|0),($__n_add|0))|0;
 }
 $23 = (($__old_sz) - ($__n_del))|0;
 $24 = ($23|0)==($__n_copy|0);
 if (!($24)) {
  $25 = (($23) - ($__n_copy))|0;
  $$sum = (($__n_add) + ($__n_copy))|0;
  $26 = (($18) + ($$sum)|0);
  $$sum1 = (($__n_del) + ($__n_copy))|0;
  $27 = (($20) + ($$sum1)|0);
  _memcpy(($26|0),($27|0),($25|0))|0;
 }
 $28 = ($__old_cap|0)==(10);
 if (!($28)) {
  _free($20);
 }
 $29 = ((($this)) + 8|0);
 HEAP32[$29>>2] = $18;
 $30 = $17 | 1;
 HEAP32[$this>>2] = $30;
 $31 = (($23) + ($__n_add))|0;
 $32 = ((($this)) + 4|0);
 HEAP32[$32>>2] = $31;
 $33 = (($18) + ($31)|0);
 HEAP8[$33>>0] = 0;
 return;
}
function __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___assert_fail((1398|0),(1427|0),1164,(1487|0));
 // unreachable;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if (!($2)) {
  $3 = ((($this)) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  _free($4);
 }
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_114parse_encodingINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db) {
 $first = $first|0;
 $last = $last|0;
 $db = $db|0;
 var $$0$i = 0, $$24$ph = 0, $$7 = 0, $$in = 0, $$in109 = 0, $$lcssa150 = 0, $$lcssa151 = 0, $$lcssa156 = 0, $$ph96 = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i$i$i$i = 0, $$pre$i27 = 0, $$pre86 = 0, $$pre87 = 0, $$pre88 = 0, $$pre89 = 0, $$pre90 = 0, $$pre91 = 0;
 var $$pre92 = 0, $$sum$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
 var $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0;
 var $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0;
 var $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0;
 var $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0;
 var $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0;
 var $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0;
 var $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0;
 var $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $first_arg$0$off0$ph = 0, $first_arg$3$off0$ph = 0, $k$0121 = 0, $k2$0122 = 0, $left$i = 0, $or$cond$i = 0, $or$cond$i$i$i$i$i = 0, $or$cond$i$i$i$i$i$i = 0, $phitmp$i$i$i$i$i$i = 0, $phitmp$i$i$i$i$i$i$i = 0, $phitmp$i2$i$i$i$i$i = 0;
 var $phitmp$i2$i$i$i$i$i$i = 0, $ret1 = 0, $ret2 = 0, $t$0 = 0, $t$1 = 0, $t$1$ph = 0, $t$2 = 0, $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $left$i = sp + 96|0;
 $0 = sp + 84|0;
 $1 = sp + 72|0;
 $2 = sp + 60|0;
 $3 = sp + 48|0;
 $ret2 = sp + 24|0;
 $ret1 = sp + 12|0;
 $tmp = sp;
 $4 = sp + 36|0;
 $5 = ($first|0)==($last|0);
 L1: do {
  if ($5) {
   $$7 = $first;
  } else {
   $6 = ((($db)) + 56|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = (($7) + 1)|0;
   HEAP32[$6>>2] = $8;
   $9 = ((($db)) + 61|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = ($8>>>0)>(1);
   if ($11) {
    HEAP8[$9>>0] = 1;
   }
   $12 = HEAP8[$first>>0]|0;
   $13 = $12 << 24 >> 24;
   L6: do {
    switch ($13|0) {
    case 84: case 71:  {
     $14 = $last;
     $15 = $first;
     $16 = (($14) - ($15))|0;
     $17 = ($16|0)>(2);
     L107: do {
      if ($17) {
       switch ($13|0) {
       case 84:  {
        break;
       }
       case 71:  {
        $172 = ((($first)) + 1|0);
        $173 = HEAP8[$172>>0]|0;
        $174 = $173 << 24 >> 24;
        switch ($174|0) {
        case 86:  {
         $175 = ((($first)) + 2|0);
         $176 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_nameINS0_2DbEEEPKcS4_S4_RT_($175,$last,$db)|0);
         $177 = ($176|0)==($175|0);
         if ($177) {
          $$0$i = $first;
          break L107;
         }
         $178 = HEAP32[$db>>2]|0;
         $179 = ((($db)) + 4|0);
         $180 = HEAP32[$179>>2]|0;
         $181 = ($178|0)==($180|0);
         if ($181) {
          $$0$i = $first;
          break L107;
         }
         $182 = ((($180)) + -24|0);
         (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($182,0,3522)|0);
         $$0$i = $176;
         break L107;
         break;
        }
        case 82:  {
         $183 = ((($first)) + 2|0);
         $184 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_nameINS0_2DbEEEPKcS4_S4_RT_($183,$last,$db)|0);
         $185 = ($184|0)==($183|0);
         if ($185) {
          $$0$i = $first;
          break L107;
         }
         $186 = HEAP32[$db>>2]|0;
         $187 = ((($db)) + 4|0);
         $188 = HEAP32[$187>>2]|0;
         $189 = ($186|0)==($188|0);
         if ($189) {
          $$0$i = $first;
          break L107;
         }
         $190 = ((($188)) + -24|0);
         (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($190,0,3542)|0);
         $$0$i = $184;
         break L107;
         break;
        }
        default: {
         $$0$i = $first;
         break L107;
        }
        }
        break;
       }
       default: {
        $$0$i = $first;
        break L107;
       }
       }
       $18 = ((($first)) + 1|0);
       $19 = HEAP8[$18>>0]|0;
       $20 = $19 << 24 >> 24;
       switch ($20|0) {
       case 86:  {
        $21 = ((($first)) + 2|0);
        $22 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($21,$last,$db)|0);
        $23 = ($22|0)==($21|0);
        if ($23) {
         $$0$i = $first;
         break L107;
        }
        $24 = HEAP32[$db>>2]|0;
        $25 = ((($db)) + 4|0);
        $26 = HEAP32[$25>>2]|0;
        $27 = ($24|0)==($26|0);
        if ($27) {
         $$0$i = $first;
         break L107;
        }
        $28 = ((($26)) + -24|0);
        (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($28,0,3371)|0);
        $$0$i = $22;
        break L107;
        break;
       }
       case 84:  {
        $29 = ((($first)) + 2|0);
        $30 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($29,$last,$db)|0);
        $31 = ($30|0)==($29|0);
        if ($31) {
         $$0$i = $first;
         break L107;
        }
        $32 = HEAP32[$db>>2]|0;
        $33 = ((($db)) + 4|0);
        $34 = HEAP32[$33>>2]|0;
        $35 = ($32|0)==($34|0);
        if ($35) {
         $$0$i = $first;
         break L107;
        }
        $36 = ((($34)) + -24|0);
        (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($36,0,3383)|0);
        $$0$i = $30;
        break L107;
        break;
       }
       case 73:  {
        $37 = ((($first)) + 2|0);
        $38 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($37,$last,$db)|0);
        $39 = ($38|0)==($37|0);
        if ($39) {
         $$0$i = $first;
         break L107;
        }
        $40 = HEAP32[$db>>2]|0;
        $41 = ((($db)) + 4|0);
        $42 = HEAP32[$41>>2]|0;
        $43 = ($40|0)==($42|0);
        if ($43) {
         $$0$i = $first;
         break L107;
        }
        $44 = ((($42)) + -24|0);
        (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($44,0,3392)|0);
        $$0$i = $38;
        break L107;
        break;
       }
       case 83:  {
        $45 = ((($first)) + 2|0);
        $46 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($45,$last,$db)|0);
        $47 = ($46|0)==($45|0);
        if ($47) {
         $$0$i = $first;
         break L107;
        }
        $48 = HEAP32[$db>>2]|0;
        $49 = ((($db)) + 4|0);
        $50 = HEAP32[$49>>2]|0;
        $51 = ($48|0)==($50|0);
        if ($51) {
         $$0$i = $first;
         break L107;
        }
        $52 = ((($50)) + -24|0);
        (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($52,0,3406)|0);
        $$0$i = $46;
        break L107;
        break;
       }
       case 99:  {
        $53 = ((($first)) + 2|0);
        $54 = (__ZN10__cxxabiv112_GLOBAL__N_117parse_call_offsetEPKcS2_($53,$last)|0);
        $55 = ($54|0)==($53|0);
        if ($55) {
         $$0$i = $first;
         break L107;
        }
        $56 = (__ZN10__cxxabiv112_GLOBAL__N_117parse_call_offsetEPKcS2_($54,$last)|0);
        $57 = ($56|0)==($54|0);
        if ($57) {
         $$0$i = $first;
         break L107;
        }
        $58 = (__ZN10__cxxabiv112_GLOBAL__N_114parse_encodingINS0_2DbEEEPKcS4_S4_RT_($56,$last,$db)|0);
        $59 = ($58|0)==($56|0);
        if ($59) {
         $$0$i = $first;
         break L107;
        }
        $60 = HEAP32[$db>>2]|0;
        $61 = ((($db)) + 4|0);
        $62 = HEAP32[$61>>2]|0;
        $63 = ($60|0)==($62|0);
        if ($63) {
         $$0$i = $first;
         break L107;
        }
        $64 = ((($62)) + -24|0);
        (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($64,0,3425)|0);
        $$0$i = $58;
        break L107;
        break;
       }
       case 67:  {
        $65 = ((($first)) + 2|0);
        $66 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($65,$last,$db)|0);
        $67 = ($66|0)==($65|0);
        if ($67) {
         $$0$i = $first;
         break L107;
        }
        $68 = (__ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($66,$last)|0);
        $69 = ($68|0)==($66|0);
        $70 = ($68|0)==($last|0);
        $or$cond$i = $69 | $70;
        if ($or$cond$i) {
         $$0$i = $first;
         break L107;
        }
        $71 = HEAP8[$68>>0]|0;
        $72 = ($71<<24>>24)==(95);
        if (!($72)) {
         $$0$i = $first;
         break L107;
        }
        $73 = ((($68)) + 1|0);
        $74 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($73,$last,$db)|0);
        $75 = ($74|0)==($73|0);
        if ($75) {
         $$0$i = $first;
         break L107;
        }
        $76 = ((($db)) + 4|0);
        $77 = HEAP32[$76>>2]|0;
        $78 = HEAP32[$db>>2]|0;
        $79 = $77;
        $80 = $78;
        $81 = (($79) - ($80))|0;
        $82 = (($81|0) / 24)&-1;
        $83 = ($82>>>0)<(2);
        if ($83) {
         $$0$i = $first;
         break L107;
        }
        $84 = ((($77)) + -24|0);
        __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($left$i,$84);
        $85 = HEAP32[$76>>2]|0;
        $86 = ((($85)) + -24|0);
        $88 = $85;
        while(1) {
         $87 = ((($88)) + -24|0);
         HEAP32[$76>>2] = $87;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($87);
         $$pre$i$i = HEAP32[$76>>2]|0;
         $89 = ($$pre$i$i|0)==($86|0);
         if ($89) {
          break;
         } else {
          $88 = $$pre$i$i;
         }
        }
        $90 = ((($85)) + -48|0);
        $91 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($left$i,0,3452)|0);
        ;HEAP32[$2>>2]=HEAP32[$91>>2]|0;HEAP32[$2+4>>2]=HEAP32[$91+4>>2]|0;HEAP32[$2+8>>2]=HEAP32[$91+8>>2]|0;
        HEAP32[$91>>2] = 0;
        $92 = ((($91)) + 4|0);
        HEAP32[$92>>2] = 0;
        $93 = ((($91)) + 8|0);
        HEAP32[$93>>2] = 0;
        $94 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($2,3477)|0);
        ;HEAP32[$1>>2]=HEAP32[$94>>2]|0;HEAP32[$1+4>>2]=HEAP32[$94+4>>2]|0;HEAP32[$1+8>>2]=HEAP32[$94+8>>2]|0;
        HEAP32[$94>>2] = 0;
        $95 = ((($94)) + 4|0);
        HEAP32[$95>>2] = 0;
        $96 = ((($94)) + 8|0);
        HEAP32[$96>>2] = 0;
        $97 = HEAP32[$76>>2]|0;
        $98 = ((($97)) + -24|0);
        __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3,$98);
        $99 = HEAP8[$3>>0]|0;
        $100 = $99 & 1;
        $101 = ($100<<24>>24)==(0);
        $102 = ((($3)) + 8|0);
        $103 = HEAP32[$102>>2]|0;
        $104 = ((($3)) + 1|0);
        $105 = $101 ? $104 : $103;
        $106 = ((($3)) + 4|0);
        $107 = HEAP32[$106>>2]|0;
        $108 = $99&255;
        $109 = $108 >>> 1;
        $110 = $101 ? $109 : $107;
        $111 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($1,$105,$110)|0);
        ;HEAP32[$0>>2]=HEAP32[$111>>2]|0;HEAP32[$0+4>>2]=HEAP32[$111+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$111+8>>2]|0;
        HEAP32[$111>>2] = 0;
        $112 = ((($111)) + 4|0);
        HEAP32[$112>>2] = 0;
        $113 = ((($111)) + 8|0);
        HEAP32[$113>>2] = 0;
        $114 = HEAP8[$90>>0]|0;
        $115 = $114 & 1;
        $116 = ($115<<24>>24)==(0);
        do {
         if ($116) {
          $117 = ((($90)) + 1|0);
          HEAP8[$117>>0] = 0;
          HEAP8[$90>>0] = 0;
         } else {
          $118 = ((($85)) + -40|0);
          $119 = HEAP32[$118>>2]|0;
          HEAP8[$119>>0] = 0;
          $120 = ((($85)) + -44|0);
          HEAP32[$120>>2] = 0;
          $$pre$i$i$i$i = HEAP8[$90>>0]|0;
          $121 = $$pre$i$i$i$i & 1;
          $122 = ($121<<24>>24)==(0);
          if ($122) {
           $127 = $$pre$i$i$i$i;$136 = 10;
          } else {
           $123 = HEAP32[$90>>2]|0;
           $124 = $123 & -2;
           $phitmp$i$i$i$i$i$i$i = (($124) + -1)|0;
           $125 = $123&255;
           $127 = $125;$136 = $phitmp$i$i$i$i$i$i$i;
          }
          $126 = $127 & 1;
          $128 = ($126<<24>>24)==(0);
          if ($128) {
           $129 = $127&255;
           $130 = $129 >>> 1;
           $131 = ($127&255)<(22);
           if ($131) {
            $134 = 10;$155 = $130;$446 = 1;
           } else {
            $132 = (($130) + 16)|0;
            $133 = $132 & 240;
            $phitmp$i2$i$i$i$i$i$i = (($133) + -1)|0;
            $134 = $phitmp$i2$i$i$i$i$i$i;$155 = $130;$446 = 1;
           }
          } else {
           $134 = 10;$155 = 0;$446 = 0;
          }
          $135 = ($134|0)==($136|0);
          if (!($135)) {
           $137 = ($134|0)==(10);
           if ($137) {
            $142 = ((($90)) + 1|0);
            $143 = HEAP32[$118>>2]|0;
            if ($446) {
             $144 = $127&255;
             $145 = $144 >>> 1;
             $146 = (($145) + 1)|0;
             _memcpy(($142|0),($143|0),($146|0))|0;
             _free($143);
            } else {
             $151 = HEAP8[$143>>0]|0;
             HEAP8[$142>>0] = $151;
             _free($143);
            }
            $156 = $155 << 1;
            $157 = $156&255;
            HEAP8[$90>>0] = $157;
            break;
           }
           $138 = ($134>>>0)<=($136>>>0);
           $139 = (($134) + 1)|0;
           $140 = (_malloc($139)|0);
           $141 = ($140|0)==(0|0);
           $or$cond$i$i$i$i$i$i = $138 & $141;
           if (!($or$cond$i$i$i$i$i$i)) {
            if ($446) {
             $147 = ((($90)) + 1|0);
             $148 = $127&255;
             $149 = $148 >>> 1;
             $150 = (($149) + 1)|0;
             _memcpy(($140|0),($147|0),($150|0))|0;
            } else {
             $152 = HEAP32[$118>>2]|0;
             $153 = HEAP8[$152>>0]|0;
             HEAP8[$140>>0] = $153;
             _free($152);
            }
            $154 = $139 | 1;
            HEAP32[$90>>2] = $154;
            HEAP32[$120>>2] = $155;
            HEAP32[$118>>2] = $140;
           }
          }
         }
        } while(0);
        ;HEAP32[$90>>2]=HEAP32[$0>>2]|0;HEAP32[$90+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$90+8>>2]=HEAP32[$0+8>>2]|0;
        HEAP32[$0>>2] = 0;
        $158 = ((($0)) + 4|0);
        HEAP32[$158>>2] = 0;
        $159 = ((($0)) + 8|0);
        HEAP32[$159>>2] = 0;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($0);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($1);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($2);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($left$i);
        $$0$i = $74;
        break L107;
        break;
       }
       default: {
        $160 = (__ZN10__cxxabiv112_GLOBAL__N_117parse_call_offsetEPKcS2_($18,$last)|0);
        $161 = ($160|0)==($18|0);
        if ($161) {
         $$0$i = $first;
         break L107;
        }
        $162 = (__ZN10__cxxabiv112_GLOBAL__N_114parse_encodingINS0_2DbEEEPKcS4_S4_RT_($160,$last,$db)|0);
        $163 = ($162|0)==($160|0);
        if ($163) {
         $$0$i = $first;
         break L107;
        }
        $164 = HEAP32[$db>>2]|0;
        $165 = ((($db)) + 4|0);
        $166 = HEAP32[$165>>2]|0;
        $167 = ($164|0)==($166|0);
        if ($167) {
         $$0$i = $first;
         break L107;
        }
        $168 = ((($first)) + 2|0);
        $169 = HEAP8[$168>>0]|0;
        $170 = ($169<<24>>24)==(118);
        $171 = ((($166)) + -24|0);
        if ($170) {
         (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($171,0,3482)|0);
         $$0$i = $162;
         break L107;
        } else {
         (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($171,0,3500)|0);
         $$0$i = $162;
         break L107;
        }
       }
       }
      } else {
       $$0$i = $first;
      }
     } while(0);
     $$24$ph = $$0$i;
     break;
    }
    default: {
     $191 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_nameINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db)|0);
     $192 = ((($db)) + 48|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = ((($db)) + 52|0);
     $195 = HEAP32[$194>>2]|0;
     $196 = ($191|0)==($first|0);
     if ($196) {
      $$24$ph = $first;
     } else {
      $197 = ($191|0)==($last|0);
      if ($197) {
       $$24$ph = $last;
      } else {
       $198 = HEAP8[$191>>0]|0;
       switch ($198<<24>>24) {
       case 46: case 69:  {
        $$24$ph = $191;
        break L6;
        break;
       }
       default: {
       }
       }
       $199 = HEAP8[$9>>0]|0;
       HEAP8[$9>>0] = 0;
       HEAP32[$ret2>>2] = 0;
       $200 = ((($ret2)) + 4|0);
       HEAP32[$200>>2] = 0;
       $201 = ((($ret2)) + 8|0);
       HEAP32[$201>>2] = 0;
       $202 = HEAP32[$db>>2]|0;
       $203 = ((($db)) + 4|0);
       $204 = HEAP32[$203>>2]|0;
       $205 = ($202|0)==($204|0);
       L11: do {
        if (!($205)) {
         $206 = ((($204)) + -24|0);
         $207 = HEAP8[$206>>0]|0;
         $208 = $207 & 1;
         $209 = ($208<<24>>24)==(0);
         if ($209) {
          $212 = $207&255;
          $213 = $212 >>> 1;
          $214 = $213;
         } else {
          $210 = ((($204)) + -20|0);
          $211 = HEAP32[$210>>2]|0;
          $214 = $211;
         }
         $215 = ($214|0)==(0);
         if (!($215)) {
          $216 = ((($db)) + 60|0);
          $217 = HEAP8[$216>>0]|0;
          $218 = ($217<<24>>24)==(0);
          if ($218) {
           if ($209) {
            $223 = ((($206)) + 1|0);
            $224 = $207&255;
            $225 = $224 >>> 1;
            $226 = $225;$228 = $223;
           } else {
            $219 = ((($204)) + -16|0);
            $220 = HEAP32[$219>>2]|0;
            $221 = ((($204)) + -20|0);
            $222 = HEAP32[$221>>2]|0;
            $226 = $222;$228 = $220;
           }
           $$sum$i = (($226) + -1)|0;
           $227 = (($228) + ($$sum$i)|0);
           $229 = HEAP8[$227>>0]|0;
           $230 = ($229<<24>>24)==(62);
           if ($230) {
            if ($209) {
             $235 = $207&255;
             $236 = $235 >>> 1;
             $237 = ((($206)) + 1|0);
             $$in = $236;$240 = $237;
            } else {
             $231 = ((($204)) + -20|0);
             $232 = HEAP32[$231>>2]|0;
             $233 = ((($204)) + -16|0);
             $234 = HEAP32[$233>>2]|0;
             $$in = $232;$240 = $234;
            }
            $238 = (($$in) + -2)|0;
            $239 = (($240) + ($238)|0);
            $241 = HEAP8[$239>>0]|0;
            $242 = ($241<<24>>24)==(45);
            if ($242) {
             $331 = $204;$t$0 = $191;
            } else {
             if ($209) {
              $247 = $207&255;
              $248 = $247 >>> 1;
              $249 = ((($206)) + 1|0);
              $$in109 = $248;$252 = $249;
             } else {
              $243 = ((($204)) + -20|0);
              $244 = HEAP32[$243>>2]|0;
              $245 = ((($204)) + -16|0);
              $246 = HEAP32[$245>>2]|0;
              $$in109 = $244;$252 = $246;
             }
             $250 = (($$in109) + -2)|0;
             $251 = (($252) + ($250)|0);
             $253 = HEAP8[$251>>0]|0;
             $254 = ($253<<24>>24)==(62);
             if ($254) {
              $331 = $204;$t$0 = $191;
             } else {
              $255 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($191,$last,$db)|0);
              $256 = ($255|0)==($191|0);
              if ($256) {
               break;
              }
              $257 = HEAP32[$203>>2]|0;
              $258 = HEAP32[$db>>2]|0;
              $259 = $257;
              $260 = $258;
              $261 = (($259) - ($260))|0;
              $262 = (($261|0) / 24)&-1;
              $263 = ($262>>>0)<(2);
              if ($263) {
               break;
              }
              $264 = ((($257)) + -24|0);
              ;HEAP32[$ret1>>2]=HEAP32[$264>>2]|0;HEAP32[$ret1+4>>2]=HEAP32[$264+4>>2]|0;HEAP32[$ret1+8>>2]=HEAP32[$264+8>>2]|0;
              HEAP32[$264>>2] = 0;
              $265 = ((($264)) + 4|0);
              HEAP32[$265>>2] = 0;
              $266 = ((($264)) + 8|0);
              HEAP32[$266>>2] = 0;
              $267 = ((($257)) + -12|0);
              $268 = HEAP8[$ret2>>0]|0;
              $269 = $268 & 1;
              $270 = ($269<<24>>24)==(0);
              L37: do {
               if ($270) {
                $271 = ((($ret2)) + 1|0);
                HEAP8[$271>>0] = 0;
                HEAP8[$ret2>>0] = 0;
               } else {
                $272 = ((($ret2)) + 8|0);
                $273 = HEAP32[$272>>2]|0;
                HEAP8[$273>>0] = 0;
                $274 = ((($ret2)) + 4|0);
                HEAP32[$274>>2] = 0;
                $275 = HEAP32[$ret2>>2]|0;
                $276 = $275 & -2;
                $phitmp$i$i$i$i$i$i = (($276) + -1)|0;
                $277 = $275&255;
                $278 = $277 & 1;
                $279 = ($278<<24>>24)==(0);
                do {
                 if ($279) {
                  $280 = $275 >>> 1;
                  $281 = $280 & 127;
                  $282 = ($277&255)<(22);
                  if ($282) {
                   $289 = ((($ret2)) + 1|0);
                   $290 = $275 >>> 1;
                   $291 = $290 & 127;
                   $292 = (($291) + 1)|0;
                   _memcpy(($289|0),($273|0),($292|0))|0;
                   _free($273);
                   $$ph96 = $281;
                   break;
                  }
                  $283 = (($281) + 16)|0;
                  $284 = $283 & 240;
                  $phitmp$i2$i$i$i$i$i = (($284) + -1)|0;
                  $285 = ($phitmp$i2$i$i$i$i$i|0)==($phitmp$i$i$i$i$i$i|0);
                  if ($285) {
                   break L37;
                  }
                  $286 = ($phitmp$i2$i$i$i$i$i>>>0)<=($phitmp$i$i$i$i$i$i>>>0);
                  $287 = (_malloc($284)|0);
                  $288 = ($287|0)==(0|0);
                  $or$cond$i$i$i$i$i = $286 & $288;
                  if ($or$cond$i$i$i$i$i) {
                   break L37;
                  }
                  $294 = ((($ret2)) + 1|0);
                  $295 = $275 >>> 1;
                  $296 = $295 & 127;
                  $297 = (($296) + 1)|0;
                  _memcpy(($287|0),($294|0),($297|0))|0;
                  $298 = $284 | 1;
                  HEAP32[$ret2>>2] = $298;
                  HEAP32[$274>>2] = $281;
                  HEAP32[$272>>2] = $287;
                  break L37;
                 } else {
                  $293 = ((($ret2)) + 1|0);
                  HEAP8[$293>>0] = 0;
                  _free($273);
                  $$ph96 = 0;
                 }
                } while(0);
                $299 = $$ph96 << 1;
                $300 = $299&255;
                HEAP8[$ret2>>0] = $300;
               }
              } while(0);
              ;HEAP32[$ret2>>2]=HEAP32[$267>>2]|0;HEAP32[$ret2+4>>2]=HEAP32[$267+4>>2]|0;HEAP32[$ret2+8>>2]=HEAP32[$267+8>>2]|0;
              HEAP32[$267>>2] = 0;
              $301 = ((($267)) + 4|0);
              HEAP32[$301>>2] = 0;
              $302 = ((($267)) + 8|0);
              HEAP32[$302>>2] = 0;
              $303 = HEAP8[$ret2>>0]|0;
              $304 = $303 & 1;
              $305 = ($304<<24>>24)==(0);
              $306 = ((($ret2)) + 4|0);
              $307 = HEAP32[$306>>2]|0;
              $308 = $303&255;
              $309 = $308 >>> 1;
              $310 = $305 ? $309 : $307;
              $311 = ($310|0)==(0);
              if ($311) {
               __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9push_backEc($ret1,32);
              }
              $312 = HEAP32[$203>>2]|0;
              $313 = ((($312)) + -24|0);
              $315 = $312;
              while(1) {
               $314 = ((($315)) + -24|0);
               HEAP32[$203>>2] = $314;
               __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($314);
               $$pre$i27 = HEAP32[$203>>2]|0;
               $316 = ($$pre$i27|0)==($313|0);
               if ($316) {
                break;
               } else {
                $315 = $$pre$i27;
               }
              }
              $317 = ((($312)) + -48|0);
              $318 = HEAP8[$ret1>>0]|0;
              $319 = $318 & 1;
              $320 = ($319<<24>>24)==(0);
              $321 = ((($ret1)) + 8|0);
              $322 = HEAP32[$321>>2]|0;
              $323 = ((($ret1)) + 1|0);
              $324 = $320 ? $323 : $322;
              $325 = ((($ret1)) + 4|0);
              $326 = HEAP32[$325>>2]|0;
              $327 = $318&255;
              $328 = $327 >>> 1;
              $329 = $320 ? $328 : $326;
              (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKcj($317,0,$324,$329)|0);
              __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ret1);
              $$pre = HEAP32[$203>>2]|0;
              $331 = $$pre;$t$0 = $255;
             }
            }
           } else {
            $331 = $204;$t$0 = $191;
           }
          } else {
           $331 = $204;$t$0 = $191;
          }
          $330 = ((($331)) + -24|0);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9push_backEc($330,40);
          $332 = ($t$0|0)==($last|0);
          if ($332) {
           label = 105;
          } else {
           $333 = HEAP8[$t$0>>0]|0;
           $334 = ($333<<24>>24)==(118);
           if ($334) {
            $343 = ((($t$0)) + 1|0);
            $$pre91 = HEAP32[$db>>2]|0;
            $$pre92 = HEAP32[$203>>2]|0;
            $412 = $$pre91;$414 = $$pre92;$t$2 = $343;
           } else {
            label = 105;
           }
          }
          L60: do {
           if ((label|0) == 105) {
            $335 = ((($tmp)) + 4|0);
            $336 = ((($4)) + 8|0);
            $337 = ((($4)) + 1|0);
            $338 = ((($4)) + 4|0);
            $339 = ((($tmp)) + 8|0);
            $340 = ((($tmp)) + 1|0);
            $341 = ((($tmp)) + 4|0);
            $342 = ((($tmp)) + 8|0);
            $first_arg$0$off0$ph = 1;$t$1$ph = $t$0;
            while(1) {
             $$pre86 = HEAP32[$203>>2]|0;
             $$pre87 = HEAP32[$db>>2]|0;
             $344 = $$pre86;$346 = $$pre87;$t$1 = $t$1$ph;
             while(1) {
              $345 = $344;
              $347 = $346;
              $348 = (($345) - ($347))|0;
              $349 = (($348|0) / 24)&-1;
              $350 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($t$1,$last,$db)|0);
              $351 = HEAP32[$203>>2]|0;
              $352 = HEAP32[$db>>2]|0;
              $353 = $351;
              $354 = $352;
              $355 = (($353) - ($354))|0;
              $356 = (($355|0) / 24)&-1;
              $357 = ($350|0)==($t$1|0);
              if ($357) {
               $412 = $352;$414 = $351;$t$2 = $t$1;
               break L60;
              }
              $358 = ($356>>>0)>($349>>>0);
              if ($358) {
               $$lcssa150 = $349;$$lcssa151 = $350;$$lcssa156 = $356;
               break;
              } else {
               $344 = $351;$346 = $352;$t$1 = $350;
              }
             }
             HEAP32[$tmp>>2] = 0;
             HEAP32[$341>>2] = 0;
             HEAP32[$342>>2] = 0;
             $359 = ($$lcssa150>>>0)<($$lcssa156>>>0);
             if ($359) {
              $k$0121 = $$lcssa150;
              while(1) {
               $361 = HEAP8[$tmp>>0]|0;
               $362 = $361 & 1;
               $363 = ($362<<24>>24)==(0);
               $364 = HEAP32[$335>>2]|0;
               $365 = $361&255;
               $366 = $365 >>> 1;
               $367 = $363 ? $366 : $364;
               $368 = ($367|0)==(0);
               if (!($368)) {
                (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($tmp,1608)|0);
               }
               $369 = HEAP32[$db>>2]|0;
               $370 = (($369) + (($k$0121*24)|0)|0);
               __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($4,$370);
               $371 = HEAP8[$4>>0]|0;
               $372 = $371 & 1;
               $373 = ($372<<24>>24)==(0);
               $374 = HEAP32[$336>>2]|0;
               $375 = $373 ? $337 : $374;
               $376 = HEAP32[$338>>2]|0;
               $377 = $371&255;
               $378 = $377 >>> 1;
               $379 = $373 ? $378 : $376;
               (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($tmp,$375,$379)|0);
               __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
               $380 = (($k$0121) + 1)|0;
               $381 = ($380>>>0)<($$lcssa156>>>0);
               if ($381) {
                $k$0121 = $380;
               } else {
                break;
               }
              }
             }
             $360 = ($$lcssa150>>>0)<($$lcssa156>>>0);
             if ($360) {
              $k2$0122 = $$lcssa150;
              while(1) {
               $382 = HEAP32[$203>>2]|0;
               $383 = ((($382)) + -24|0);
               $385 = $382;
               while(1) {
                $384 = ((($385)) + -24|0);
                HEAP32[$203>>2] = $384;
                __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($384);
                $$pre$i = HEAP32[$203>>2]|0;
                $386 = ($$pre$i|0)==($383|0);
                if ($386) {
                 break;
                } else {
                 $385 = $$pre$i;
                }
               }
               $387 = (($k2$0122) + 1)|0;
               $388 = ($387>>>0)<($$lcssa156>>>0);
               if ($388) {
                $k2$0122 = $387;
               } else {
                break;
               }
              }
             }
             $389 = HEAP8[$tmp>>0]|0;
             $390 = $389 & 1;
             $391 = ($390<<24>>24)==(0);
             $392 = HEAP32[$335>>2]|0;
             $393 = $389&255;
             $394 = $393 >>> 1;
             $395 = $391 ? $394 : $392;
             $396 = ($395|0)==(0);
             if ($396) {
              $first_arg$3$off0$ph = $first_arg$0$off0$ph;
             } else {
              $397 = HEAP32[$db>>2]|0;
              $398 = HEAP32[$203>>2]|0;
              $399 = ($397|0)==($398|0);
              if ($399) {
               break;
              }
              if ($first_arg$0$off0$ph) {
               $402 = $398;$404 = $389;$410 = $392;
              } else {
               $400 = ((($398)) + -24|0);
               (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($400,1608)|0);
               $$pre88 = HEAP32[$203>>2]|0;
               $$pre89 = HEAP8[$tmp>>0]|0;
               $$pre90 = HEAP32[$335>>2]|0;
               $402 = $$pre88;$404 = $$pre89;$410 = $$pre90;
              }
              $401 = ((($402)) + -24|0);
              $403 = $404 & 1;
              $405 = ($403<<24>>24)==(0);
              $406 = HEAP32[$339>>2]|0;
              $407 = $405 ? $340 : $406;
              $408 = $404&255;
              $409 = $408 >>> 1;
              $411 = $405 ? $409 : $410;
              (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($401,$407,$411)|0);
              $first_arg$3$off0$ph = 0;
             }
             __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($tmp);
             $first_arg$0$off0$ph = $first_arg$3$off0$ph;$t$1$ph = $$lcssa151;
            }
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($tmp);
            break L11;
           }
          } while(0);
          $413 = ($412|0)==($414|0);
          if (!($413)) {
           $415 = ((($414)) + -24|0);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9push_backEc($415,41);
           $416 = $193 & 1;
           $417 = ($416|0)==(0);
           if (!($417)) {
            $418 = HEAP32[$203>>2]|0;
            $419 = ((($418)) + -24|0);
            (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($419,1561)|0);
           }
           $420 = $193 & 2;
           $421 = ($420|0)==(0);
           if (!($421)) {
            $422 = HEAP32[$203>>2]|0;
            $423 = ((($422)) + -24|0);
            (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($423,1568)|0);
           }
           $424 = $193 & 4;
           $425 = ($424|0)==(0);
           if (!($425)) {
            $426 = HEAP32[$203>>2]|0;
            $427 = ((($426)) + -24|0);
            (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($427,1578)|0);
           }
           switch ($195|0) {
           case 1:  {
            $428 = HEAP32[$203>>2]|0;
            $429 = ((($428)) + -24|0);
            (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($429,1611)|0);
            break;
           }
           case 2:  {
            $430 = HEAP32[$203>>2]|0;
            $431 = ((($430)) + -24|0);
            (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($431,1614)|0);
            break;
           }
           default: {
           }
           }
           $432 = HEAP32[$203>>2]|0;
           $433 = ((($432)) + -24|0);
           $434 = HEAP8[$ret2>>0]|0;
           $435 = $434 & 1;
           $436 = ($435<<24>>24)==(0);
           $437 = ((($ret2)) + 8|0);
           $438 = HEAP32[$437>>2]|0;
           $439 = ((($ret2)) + 1|0);
           $440 = $436 ? $439 : $438;
           $441 = ((($ret2)) + 4|0);
           $442 = HEAP32[$441>>2]|0;
           $443 = $434&255;
           $444 = $443 >>> 1;
           $445 = $436 ? $444 : $442;
           (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($433,$440,$445)|0);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ret2);
           HEAP8[$9>>0] = $199;
           $$24$ph = $t$2;
           break L6;
          }
         }
        }
       } while(0);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ret2);
       HEAP8[$9>>0] = $10;
       HEAP32[$6>>2] = $7;
       $$7 = $first;
       break L1;
      }
     }
    }
    }
   } while(0);
   HEAP8[$9>>0] = $10;
   HEAP32[$6>>2] = $7;
   $$7 = $$24$ph;
  }
 } while(0);
 STACKTOP = sp;return ($$7|0);
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($this,$__pos,$__s) {
 $this = $this|0;
 $__pos = $__pos|0;
 $__s = $__s|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen(($__s|0))|0);
 $1 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKcj($this,$__pos,$__s,$0)|0);
 return ($1|0);
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($this,$__s) {
 $this = $this|0;
 $__s = $__s|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen(($__s|0))|0);
 $1 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($this,$__s,$0)|0);
 return ($1|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db) {
 $first = $first|0;
 $last = $last|0;
 $db = $db|0;
 var $$ = 0, $$$$i$i$i = 0, $$$$i$i$i$i = 0, $$$$i$i$i$i162 = 0, $$$$i$i$i$i189 = 0, $$$$i$i$i100 = 0, $$$$i$i$i118 = 0, $$$$i$i$i13$i = 0, $$$$i$i$i22$i = 0, $$$i$i$i = 0, $$$i$i$i$i = 0, $$$i$i$i$i161 = 0, $$$i$i$i$i188 = 0, $$$i$i$i117 = 0, $$$i$i$i12$i = 0, $$$i$i$i21$i = 0, $$$i$i$i99 = 0, $$0 = 0, $$0$i = 0, $$0$i$i = 0;
 var $$0$i$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i105 = 0, $$0$i$i$i113 = 0, $$0$i$i$i123 = 0, $$0$i$i$i131 = 0, $$0$i$i$i136 = 0, $$0$i$i$i148 = 0, $$0$i$i$i153 = 0, $$0$i$i$i17 = 0, $$0$i$i$i181 = 0, $$0$i$i$i191509 = 0, $$0$i$i$i22 = 0, $$0$i$i$i27 = 0, $$0$i$i$i29 = 0, $$0$i$i$i31 = 0, $$0$i$i$i38 = 0, $$0$i$i$i43 = 0, $$0$i$i$i51 = 0, $$0$i$i$i56 = 0;
 var $$0$i$i$i61 = 0, $$0$i$i$i66 = 0, $$0$i$i$i71 = 0, $$0$i$i$i76 = 0, $$0$i$i$i81 = 0, $$0$i$i$i87 = 0, $$0$i$i$i95 = 0, $$01$i$i = 0, $$03$i$i = 0, $$08$i = 0, $$1$i$i = 0, $$1$i263 = 0, $$12$i$i = 0, $$13$i259$ph = 0, $$14$i$i = 0, $$2$i$i = 0, $$in = 0, $$lcssa667 = 0, $$lcssa674 = 0, $$lcssa682 = 0;
 var $$lcssa690 = 0, $$lcssa698 = 0, $$lcssa706 = 0, $$off = 0, $$off271 = 0, $$ph390 = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i$i$i$i = 0, $$pre$i$i$i$i203 = 0, $$pre$i$i$i21$i = 0, $$pre$i$i$i36$i = 0, $$pre$i$i$i52$i = 0, $$pre$i$i$i71$i = 0, $$pre$i$i183 = 0, $$pre$i$i200 = 0, $$pre$i$i256 = 0, $$pre$i143 = 0, $$pre$i157 = 0, $$pre$i165 = 0;
 var $$pre$i36 = 0, $$pre$i7$i = 0, $$sum$i = 0, $$sum$i$i = 0, $$sum1$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0;
 var $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0;
 var $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0;
 var $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0;
 var $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0;
 var $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0;
 var $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0;
 var $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0;
 var $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0;
 var $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0;
 var $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0;
 var $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0;
 var $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0;
 var $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0;
 var $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0;
 var $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0;
 var $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0;
 var $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0, $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0;
 var $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0, $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0;
 var $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0, $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0;
 var $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0, $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0;
 var $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0, $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0;
 var $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0, $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0;
 var $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0, $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0;
 var $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0, $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0;
 var $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0, $1448 = 0, $1449 = 0, $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0;
 var $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0, $1466 = 0, $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0;
 var $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0, $1484 = 0, $1485 = 0, $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0;
 var $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0, $1501 = 0, $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0;
 var $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0, $152 = 0, $1520 = 0, $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0;
 var $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0, $1538 = 0, $1539 = 0, $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0;
 var $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0, $1556 = 0, $1557 = 0, $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0;
 var $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0, $1574 = 0, $1575 = 0, $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0;
 var $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0, $1592 = 0, $1593 = 0, $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0, $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0;
 var $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0, $161 = 0, $1610 = 0, $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0, $1620 = 0, $1621 = 0, $1622 = 0;
 var $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0, $1627 = 0, $1628 = 0, $1629 = 0, $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0;
 var $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0, $1645 = 0, $1646 = 0, $1647 = 0, $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0;
 var $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0, $1663 = 0, $1664 = 0, $1665 = 0, $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0, $1672 = 0, $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0;
 var $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0, $1681 = 0, $1682 = 0, $1683 = 0, $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0, $1689 = 0, $169 = 0, $1690 = 0, $1691 = 0, $1692 = 0, $1693 = 0, $1694 = 0, $1695 = 0;
 var $1696 = 0, $1697 = 0, $1698 = 0, $1699 = 0, $17 = 0, $170 = 0, $1700 = 0, $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0, $1705 = 0, $1706 = 0, $1707 = 0, $1708 = 0, $1709 = 0, $171 = 0, $1710 = 0, $1711 = 0, $1712 = 0;
 var $1713 = 0, $1714 = 0, $1715 = 0, $1716 = 0, $1717 = 0, $1718 = 0, $1719 = 0, $172 = 0, $1720 = 0, $1721 = 0, $1722 = 0, $1723 = 0, $1724 = 0, $1725 = 0, $1726 = 0, $1727 = 0, $1728 = 0, $1729 = 0, $173 = 0, $1730 = 0;
 var $1731 = 0, $1732 = 0, $1733 = 0, $1734 = 0, $1735 = 0, $1736 = 0, $1737 = 0, $1738 = 0, $1739 = 0, $174 = 0, $1740 = 0, $1741 = 0, $1742 = 0, $1743 = 0, $1744 = 0, $1745 = 0, $1746 = 0, $1747 = 0, $1748 = 0, $1749 = 0;
 var $175 = 0, $1750 = 0, $1751 = 0, $1752 = 0, $1753 = 0, $1754 = 0, $1755 = 0, $1756 = 0, $1757 = 0, $1758 = 0, $1759 = 0, $176 = 0, $1760 = 0, $1761 = 0, $1762 = 0, $1763 = 0, $1764 = 0, $1765 = 0, $1766 = 0, $1767 = 0;
 var $1768 = 0, $1769 = 0, $177 = 0, $1770 = 0, $1771 = 0, $1772 = 0, $1773 = 0, $1774 = 0, $1775 = 0, $1776 = 0, $1777 = 0, $1778 = 0, $1779 = 0, $178 = 0, $1780 = 0, $1781 = 0, $1782 = 0, $1783 = 0, $1784 = 0, $1785 = 0;
 var $1786 = 0, $1787 = 0, $1788 = 0, $1789 = 0, $179 = 0, $1790 = 0, $1791 = 0, $1792 = 0, $1793 = 0, $1794 = 0, $1795 = 0, $1796 = 0, $1797 = 0, $1798 = 0, $1799 = 0, $18 = 0, $180 = 0, $1800 = 0, $1801 = 0, $1802 = 0;
 var $1803 = 0, $1804 = 0, $1805 = 0, $1806 = 0, $1807 = 0, $1808 = 0, $1809 = 0, $181 = 0, $1810 = 0, $1811 = 0, $1812 = 0, $1813 = 0, $1814 = 0, $1815 = 0, $1816 = 0, $1817 = 0, $1818 = 0, $1819 = 0, $182 = 0, $1820 = 0;
 var $1821 = 0, $1822 = 0, $1823 = 0, $1824 = 0, $1825 = 0, $1826 = 0, $1827 = 0, $1828 = 0, $1829 = 0, $183 = 0, $1830 = 0, $1831 = 0, $1832 = 0, $1833 = 0, $1834 = 0, $1835 = 0, $1836 = 0, $1837 = 0, $1838 = 0, $1839 = 0;
 var $184 = 0, $1840 = 0, $1841 = 0, $1842 = 0, $1843 = 0, $1844 = 0, $1845 = 0, $1846 = 0, $1847 = 0, $1848 = 0, $1849 = 0, $185 = 0, $1850 = 0, $1851 = 0, $1852 = 0, $1853 = 0, $1854 = 0, $1855 = 0, $1856 = 0, $1857 = 0;
 var $1858 = 0, $1859 = 0, $186 = 0, $1860 = 0, $1861 = 0, $1862 = 0, $1863 = 0, $1864 = 0, $1865 = 0, $1866 = 0, $1867 = 0, $1868 = 0, $1869 = 0, $187 = 0, $1870 = 0, $1871 = 0, $1872 = 0, $1873 = 0, $1874 = 0, $1875 = 0;
 var $1876 = 0, $1877 = 0, $1878 = 0, $1879 = 0, $188 = 0, $1880 = 0, $1881 = 0, $1882 = 0, $1883 = 0, $1884 = 0, $1885 = 0, $1886 = 0, $1887 = 0, $1888 = 0, $1889 = 0, $189 = 0, $1890 = 0, $1891 = 0, $1892 = 0, $1893 = 0;
 var $1894 = 0, $1895 = 0, $1896 = 0, $1897 = 0, $1898 = 0, $1899 = 0, $19 = 0, $190 = 0, $1900 = 0, $1901 = 0, $1902 = 0, $1903 = 0, $1904 = 0, $1905 = 0, $1906 = 0, $1907 = 0, $1908 = 0, $1909 = 0, $191 = 0, $1910 = 0;
 var $1911 = 0, $1912 = 0, $1913 = 0, $1914 = 0, $1915 = 0, $1916 = 0, $1917 = 0, $1918 = 0, $1919 = 0, $192 = 0, $1920 = 0, $1921 = 0, $1922 = 0, $1923 = 0, $1924 = 0, $1925 = 0, $1926 = 0, $1927 = 0, $1928 = 0, $1929 = 0;
 var $193 = 0, $1930 = 0, $1931 = 0, $1932 = 0, $1933 = 0, $1934 = 0, $1935 = 0, $1936 = 0, $1937 = 0, $1938 = 0, $1939 = 0, $194 = 0, $1940 = 0, $1941 = 0, $1942 = 0, $1943 = 0, $1944 = 0, $1945 = 0, $1946 = 0, $1947 = 0;
 var $1948 = 0, $1949 = 0, $195 = 0, $1950 = 0, $1951 = 0, $1952 = 0, $1953 = 0, $1954 = 0, $1955 = 0, $1956 = 0, $1957 = 0, $1958 = 0, $1959 = 0, $196 = 0, $1960 = 0, $1961 = 0, $1962 = 0, $1963 = 0, $1964 = 0, $1965 = 0;
 var $1966 = 0, $1967 = 0, $1968 = 0, $1969 = 0, $197 = 0, $1970 = 0, $1971 = 0, $1972 = 0, $1973 = 0, $1974 = 0, $1975 = 0, $1976 = 0, $1977 = 0, $1978 = 0, $1979 = 0, $198 = 0, $1980 = 0, $1981 = 0, $1982 = 0, $1983 = 0;
 var $1984 = 0, $1985 = 0, $1986 = 0, $1987 = 0, $1988 = 0, $1989 = 0, $199 = 0, $1990 = 0, $1991 = 0, $1992 = 0, $1993 = 0, $1994 = 0, $1995 = 0, $1996 = 0, $1997 = 0, $1998 = 0, $1999 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $2000 = 0, $2001 = 0, $2002 = 0, $2003 = 0, $2004 = 0, $2005 = 0, $2006 = 0, $2007 = 0, $2008 = 0, $2009 = 0, $201 = 0, $2010 = 0, $2011 = 0, $2012 = 0, $2013 = 0, $2014 = 0, $2015 = 0, $2016 = 0, $2017 = 0, $2018 = 0;
 var $2019 = 0, $202 = 0, $2020 = 0, $2021 = 0, $2022 = 0, $2023 = 0, $2024 = 0, $2025 = 0, $2026 = 0, $2027 = 0, $2028 = 0, $2029 = 0, $203 = 0, $2030 = 0, $2031 = 0, $2032 = 0, $2033 = 0, $2034 = 0, $2035 = 0, $2036 = 0;
 var $2037 = 0, $2038 = 0, $2039 = 0, $204 = 0, $2040 = 0, $2041 = 0, $2042 = 0, $2043 = 0, $2044 = 0, $2045 = 0, $2046 = 0, $2047 = 0, $2048 = 0, $2049 = 0, $205 = 0, $2050 = 0, $2051 = 0, $2052 = 0, $2053 = 0, $2054 = 0;
 var $2055 = 0, $2056 = 0, $2057 = 0, $2058 = 0, $2059 = 0, $206 = 0, $2060 = 0, $2061 = 0, $2062 = 0, $2063 = 0, $2064 = 0, $2065 = 0, $2066 = 0, $2067 = 0, $2068 = 0, $2069 = 0, $207 = 0, $2070 = 0, $2071 = 0, $2072 = 0;
 var $2073 = 0, $2074 = 0, $2075 = 0, $2076 = 0, $2077 = 0, $2078 = 0, $2079 = 0, $208 = 0, $2080 = 0, $2081 = 0, $2082 = 0, $2083 = 0, $2084 = 0, $2085 = 0, $2086 = 0, $2087 = 0, $2088 = 0, $2089 = 0, $209 = 0, $2090 = 0;
 var $2091 = 0, $2092 = 0, $2093 = 0, $2094 = 0, $2095 = 0, $2096 = 0, $2097 = 0, $2098 = 0, $2099 = 0, $21 = 0, $210 = 0, $2100 = 0, $2101 = 0, $2102 = 0, $2103 = 0, $2104 = 0, $2105 = 0, $2106 = 0, $2107 = 0, $2108 = 0;
 var $2109 = 0, $211 = 0, $2110 = 0, $2111 = 0, $2112 = 0, $2113 = 0, $2114 = 0, $2115 = 0, $2116 = 0, $2117 = 0, $2118 = 0, $2119 = 0, $212 = 0, $2120 = 0, $2121 = 0, $2122 = 0, $2123 = 0, $2124 = 0, $2125 = 0, $2126 = 0;
 var $2127 = 0, $2128 = 0, $2129 = 0, $213 = 0, $2130 = 0, $2131 = 0, $2132 = 0, $2133 = 0, $2134 = 0, $2135 = 0, $2136 = 0, $2137 = 0, $2138 = 0, $2139 = 0, $214 = 0, $2140 = 0, $2141 = 0, $2142 = 0, $2143 = 0, $2144 = 0;
 var $2145 = 0, $2146 = 0, $2147 = 0, $2148 = 0, $2149 = 0, $215 = 0, $2150 = 0, $2151 = 0, $2152 = 0, $2153 = 0, $2154 = 0, $2155 = 0, $2156 = 0, $2157 = 0, $2158 = 0, $2159 = 0, $216 = 0, $2160 = 0, $2161 = 0, $2162 = 0;
 var $2163 = 0, $2164 = 0, $2165 = 0, $2166 = 0, $2167 = 0, $2168 = 0, $2169 = 0, $217 = 0, $2170 = 0, $2171 = 0, $2172 = 0, $2173 = 0, $2174 = 0, $2175 = 0, $2176 = 0, $2177 = 0, $2178 = 0, $2179 = 0, $218 = 0, $2180 = 0;
 var $2181 = 0, $2182 = 0, $2183 = 0, $2184 = 0, $2185 = 0, $2186 = 0, $2187 = 0, $2188 = 0, $2189 = 0, $219 = 0, $2190 = 0, $2191 = 0, $2192 = 0, $2193 = 0, $2194 = 0, $2195 = 0, $2196 = 0, $2197 = 0, $2198 = 0, $2199 = 0;
 var $22 = 0, $220 = 0, $2200 = 0, $2201 = 0, $2202 = 0, $2203 = 0, $2204 = 0, $2205 = 0, $2206 = 0, $2207 = 0, $2208 = 0, $2209 = 0, $221 = 0, $2210 = 0, $2211 = 0, $2212 = 0, $2213 = 0, $2214 = 0, $2215 = 0, $2216 = 0;
 var $2217 = 0, $2218 = 0, $2219 = 0, $222 = 0, $2220 = 0, $2221 = 0, $2222 = 0, $2223 = 0, $2224 = 0, $2225 = 0, $2226 = 0, $2227 = 0, $2228 = 0, $2229 = 0, $223 = 0, $2230 = 0, $2231 = 0, $2232 = 0, $2233 = 0, $2234 = 0;
 var $2235 = 0, $2236 = 0, $2237 = 0, $2238 = 0, $2239 = 0, $224 = 0, $2240 = 0, $2241 = 0, $2242 = 0, $2243 = 0, $2244 = 0, $2245 = 0, $2246 = 0, $2247 = 0, $2248 = 0, $2249 = 0, $225 = 0, $2250 = 0, $2251 = 0, $2252 = 0;
 var $2253 = 0, $2254 = 0, $2255 = 0, $2256 = 0, $2257 = 0, $2258 = 0, $2259 = 0, $226 = 0, $2260 = 0, $2261 = 0, $2262 = 0, $2263 = 0, $2264 = 0, $2265 = 0, $2266 = 0, $2267 = 0, $2268 = 0, $2269 = 0, $227 = 0, $2270 = 0;
 var $2271 = 0, $2272 = 0, $2273 = 0, $2274 = 0, $2275 = 0, $2276 = 0, $2277 = 0, $2278 = 0, $2279 = 0, $228 = 0, $2280 = 0, $2281 = 0, $2282 = 0, $2283 = 0, $2284 = 0, $2285 = 0, $2286 = 0, $2287 = 0, $2288 = 0, $2289 = 0;
 var $229 = 0, $2290 = 0, $2291 = 0, $2292 = 0, $2293 = 0, $2294 = 0, $2295 = 0, $2296 = 0, $2297 = 0, $2298 = 0, $2299 = 0, $23 = 0, $230 = 0, $2300 = 0, $2301 = 0, $2302 = 0, $2303 = 0, $2304 = 0, $2305 = 0, $2306 = 0;
 var $2307 = 0, $2308 = 0, $2309 = 0, $231 = 0, $2310 = 0, $2311 = 0, $2312 = 0, $2313 = 0, $2314 = 0, $2315 = 0, $2316 = 0, $2317 = 0, $2318 = 0, $2319 = 0, $232 = 0, $2320 = 0, $2321 = 0, $2322 = 0, $2323 = 0, $2324 = 0;
 var $2325 = 0, $2326 = 0, $2327 = 0, $2328 = 0, $2329 = 0, $233 = 0, $2330 = 0, $2331 = 0, $2332 = 0, $2333 = 0, $2334 = 0, $2335 = 0, $2336 = 0, $2337 = 0, $2338 = 0, $2339 = 0, $234 = 0, $2340 = 0, $2341 = 0, $2342 = 0;
 var $2343 = 0, $2344 = 0, $2345 = 0, $2346 = 0, $2347 = 0, $2348 = 0, $2349 = 0, $235 = 0, $2350 = 0, $2351 = 0, $2352 = 0, $2353 = 0, $2354 = 0, $2355 = 0, $2356 = 0, $2357 = 0, $2358 = 0, $2359 = 0, $236 = 0, $2360 = 0;
 var $2361 = 0, $2362 = 0, $2363 = 0, $2364 = 0, $2365 = 0, $2366 = 0, $2367 = 0, $2368 = 0, $2369 = 0, $237 = 0, $2370 = 0, $2371 = 0, $2372 = 0, $2373 = 0, $2374 = 0, $2375 = 0, $2376 = 0, $2377 = 0, $2378 = 0, $2379 = 0;
 var $238 = 0, $2380 = 0, $2381 = 0, $2382 = 0, $2383 = 0, $2384 = 0, $2385 = 0, $2386 = 0, $2387 = 0, $2388 = 0, $2389 = 0, $239 = 0, $2390 = 0, $2391 = 0, $2392 = 0, $2393 = 0, $2394 = 0, $2395 = 0, $2396 = 0, $2397 = 0;
 var $2398 = 0, $2399 = 0, $24 = 0, $240 = 0, $2400 = 0, $2401 = 0, $2402 = 0, $2403 = 0, $2404 = 0, $2405 = 0, $2406 = 0, $2407 = 0, $2408 = 0, $2409 = 0, $241 = 0, $2410 = 0, $2411 = 0, $2412 = 0, $2413 = 0, $2414 = 0;
 var $2415 = 0, $2416 = 0, $2417 = 0, $2418 = 0, $2419 = 0, $242 = 0, $2420 = 0, $2421 = 0, $2422 = 0, $2423 = 0, $2424 = 0, $2425 = 0, $2426 = 0, $2427 = 0, $2428 = 0, $2429 = 0, $243 = 0, $2430 = 0, $2431 = 0, $2432 = 0;
 var $2433 = 0, $2434 = 0, $2435 = 0, $2436 = 0, $2437 = 0, $2438 = 0, $2439 = 0, $244 = 0, $2440 = 0, $2441 = 0, $2442 = 0, $2443 = 0, $2444 = 0, $2445 = 0, $2446 = 0, $2447 = 0, $2448 = 0, $2449 = 0, $245 = 0, $2450 = 0;
 var $2451 = 0, $2452 = 0, $2453 = 0, $2454 = 0, $2455 = 0, $2456 = 0, $2457 = 0, $2458 = 0, $2459 = 0, $246 = 0, $2460 = 0, $2461 = 0, $2462 = 0, $2463 = 0, $2464 = 0, $2465 = 0, $2466 = 0, $2467 = 0, $2468 = 0, $2469 = 0;
 var $247 = 0, $2470 = 0, $2471 = 0, $2472 = 0, $2473 = 0, $2474 = 0, $2475 = 0, $2476 = 0, $2477 = 0, $2478 = 0, $2479 = 0, $248 = 0, $2480 = 0, $2481 = 0, $2482 = 0, $2483 = 0, $2484 = 0, $2485 = 0, $2486 = 0, $2487 = 0;
 var $2488 = 0, $2489 = 0, $249 = 0, $2490 = 0, $2491 = 0, $2492 = 0, $2493 = 0, $2494 = 0, $2495 = 0, $2496 = 0, $2497 = 0, $2498 = 0, $2499 = 0, $25 = 0, $250 = 0, $2500 = 0, $2501 = 0, $2502 = 0, $2503 = 0, $2504 = 0;
 var $2505 = 0, $2506 = 0, $2507 = 0, $2508 = 0, $2509 = 0, $251 = 0, $2510 = 0, $2511 = 0, $2512 = 0, $2513 = 0, $2514 = 0, $2515 = 0, $2516 = 0, $2517 = 0, $2518 = 0, $2519 = 0, $252 = 0, $2520 = 0, $2521 = 0, $2522 = 0;
 var $2523 = 0, $2524 = 0, $2525 = 0, $2526 = 0, $2527 = 0, $2528 = 0, $2529 = 0, $253 = 0, $2530 = 0, $2531 = 0, $2532 = 0, $2533 = 0, $2534 = 0, $2535 = 0, $2536 = 0, $2537 = 0, $2538 = 0, $2539 = 0, $254 = 0, $2540 = 0;
 var $2541 = 0, $2542 = 0, $2543 = 0, $2544 = 0, $2545 = 0, $2546 = 0, $2547 = 0, $2548 = 0, $2549 = 0, $255 = 0, $2550 = 0, $2551 = 0, $2552 = 0, $2553 = 0, $2554 = 0, $2555 = 0, $2556 = 0, $2557 = 0, $2558 = 0, $2559 = 0;
 var $256 = 0, $2560 = 0, $2561 = 0, $2562 = 0, $2563 = 0, $2564 = 0, $2565 = 0, $2566 = 0, $2567 = 0, $2568 = 0, $2569 = 0, $257 = 0, $2570 = 0, $2571 = 0, $2572 = 0, $2573 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0;
 var $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0;
 var $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0;
 var $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0;
 var $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0;
 var $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0;
 var $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0;
 var $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0;
 var $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0;
 var $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0;
 var $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0;
 var $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0;
 var $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0;
 var $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0;
 var $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0;
 var $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0;
 var $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0;
 var $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0;
 var $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0;
 var $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0;
 var $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0;
 var $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0;
 var $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0;
 var $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0;
 var $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0;
 var $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0;
 var $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0;
 var $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0;
 var $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0;
 var $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0;
 var $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0;
 var $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0;
 var $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0;
 var $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0;
 var $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0;
 var $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0;
 var $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0;
 var $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0;
 var $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $__p$0$i$i$i508 = 0;
 var $__p$0$ph$i$i$i = 0, $__v$i$i$i = 0, $args = 0, $cv = 0, $k$0$i515 = 0, $k$0560 = 0, $k11$0540 = 0, $k15$0543 = 0, $k2$0$i516 = 0, $k20$0550 = 0, $k5$0533 = 0, $k8$0536 = 0, $num1$i = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i$i = 0, $or$cond$i$i$i$i$i$i = 0, $or$cond$i$i$i$i$i$i210 = 0, $or$cond$i$i$i$i$i$i245 = 0, $or$cond$i$i$i$i$i28$i = 0;
 var $or$cond$i$i$i$i$i43$i = 0, $or$cond$i$i$i$i$i59$i = 0, $or$cond$i$i$i$i$i78$i = 0, $or$cond10$i = 0, $or$cond448 = 0, $or$cond449 = 0, $p$0 = 0, $p$1 = 0, $p$2 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i$i$i$i$i = 0, $phitmp$i$i$i$i$i$i$i205 = 0, $phitmp$i$i$i$i$i$i$i240 = 0, $phitmp$i$i$i$i$i$i23$i = 0, $phitmp$i$i$i$i$i$i38$i = 0, $phitmp$i$i$i$i$i$i54$i = 0, $phitmp$i$i$i$i$i$i73$i = 0, $phitmp$i2$i$i$i$i$i$i = 0, $phitmp$i2$i$i$i$i$i$i208 = 0, $phitmp$i2$i$i$i$i$i$i243 = 0;
 var $phitmp$i2$i$i$i$i$i26$i = 0, $phitmp$i2$i$i$i$i$i41$i = 0, $phitmp$i2$i$i$i$i$i57$i = 0, $phitmp$i2$i$i$i$i$i76$i = 0, $proto = 0, $ref_qual$0$i$ph$ph = 0, $ref_qual$0$i$ph521 = 0, $ref_qual$0$i$ph521$lcssa = 0, $scevgep2$i$i$i = 0, $t$0$i = 0, $t$1$i$be = 0, $t$1$i$ph$ph = 0, $t$1$i$ph520 = 0, $t$1$i518 = 0, $t$1$i518$lcssa = 0, $t12$0$i = 0, $template_args = 0, $type = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 768|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__v$i$i$i = sp + 744|0;
 $0 = sp + 720|0;
 $1 = sp + 708|0;
 $2 = sp + 696|0;
 $3 = sp + 672|0;
 $4 = sp + 648|0;
 $5 = sp + 624|0;
 $6 = sp + 612|0;
 $num1$i = sp + 600|0;
 $7 = sp + 588|0;
 $8 = sp + 576|0;
 $9 = sp + 564|0;
 $cv = sp + 560|0;
 $10 = sp + 544|0;
 $11 = sp + 536|0;
 $12 = sp + 520|0;
 $13 = sp + 512|0;
 $14 = sp + 496|0;
 $15 = sp + 488|0;
 $16 = sp + 472|0;
 $17 = sp + 464|0;
 $18 = sp + 448|0;
 $19 = sp + 444|0;
 $20 = sp + 432|0;
 $21 = sp + 420|0;
 $22 = sp + 408|0;
 $23 = sp + 396|0;
 $args = sp + 384|0;
 $24 = sp + 368|0;
 $25 = sp + 364|0;
 $type = sp + 180|0;
 $26 = sp + 168|0;
 $27 = sp + 144|0;
 $28 = sp + 132|0;
 $29 = sp + 120|0;
 $30 = sp + 108|0;
 $proto = sp + 96|0;
 $31 = sp + 48|0;
 $32 = sp + 36|0;
 $33 = sp + 24|0;
 $34 = sp + 12|0;
 $35 = sp;
 $36 = sp + 72|0;
 $37 = sp + 192|0;
 $38 = sp + 204|0;
 $39 = sp + 216|0;
 $40 = sp + 232|0;
 $41 = sp + 240|0;
 $42 = sp + 256|0;
 $template_args = sp + 260|0;
 $43 = sp + 272|0;
 $44 = sp + 288|0;
 $45 = sp + 296|0;
 $46 = sp + 312|0;
 $47 = sp + 320|0;
 $48 = sp + 336|0;
 $49 = sp + 344|0;
 $50 = sp + 360|0;
 $51 = ($first|0)==($last|0);
 L1: do {
  if ($51) {
   $$0 = $first;
  } else {
   $52 = HEAP8[$first>>0]|0;
   $53 = $52 << 24 >> 24;
   switch ($53|0) {
   case 75: case 86: case 114:  {
    HEAP32[$cv>>2] = 0;
    $54 = (__ZN10__cxxabiv112_GLOBAL__N_119parse_cv_qualifiersEPKcS2_Rj($first,$last,$cv)|0);
    $55 = ($54|0)==($first|0);
    if ($55) {
     $$0 = $first;
     break L1;
    }
    $56 = HEAP8[$54>>0]|0;
    $57 = ((($db)) + 4|0);
    $58 = HEAP32[$57>>2]|0;
    $59 = HEAP32[$db>>2]|0;
    $60 = $58;
    $61 = $59;
    $62 = (($60) - ($61))|0;
    $63 = (($62|0) / 24)&-1;
    $64 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($54,$last,$db)|0);
    $65 = HEAP32[$57>>2]|0;
    $66 = HEAP32[$db>>2]|0;
    $67 = $65;
    $68 = $66;
    $69 = (($67) - ($68))|0;
    $70 = (($69|0) / 24)&-1;
    $71 = ($64|0)==($54|0);
    if ($71) {
     $$0 = $first;
     break L1;
    }
    $72 = ($56<<24>>24)==(70);
    $73 = ((($db)) + 20|0);
    $74 = HEAP32[$73>>2]|0;
    if ($72) {
     $75 = ((($74)) + -16|0);
     $77 = $74;
     while(1) {
      $76 = ((($77)) + -16|0);
      HEAP32[$73>>2] = $76;
      __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($76);
      $$pre$i36 = HEAP32[$73>>2]|0;
      $78 = ($$pre$i36|0)==($75|0);
      if ($78) {
       $85 = $75;
       break;
      } else {
       $77 = $$pre$i36;
      }
     }
    } else {
     $85 = $74;
    }
    $79 = ((($db)) + 16|0);
    $80 = ((($db)) + 12|0);
    $81 = HEAP32[$80>>2]|0;
    $82 = $81;
    $83 = ((($db)) + 24|0);
    $84 = HEAP32[$83>>2]|0;
    $86 = ($85>>>0)<($84>>>0);
    if ($86) {
     HEAP32[$85>>2] = 0;
     $87 = ((($85)) + 4|0);
     HEAP32[$87>>2] = 0;
     $88 = ((($85)) + 8|0);
     HEAP32[$88>>2] = 0;
     $89 = ((($85)) + 12|0);
     HEAP32[$89>>2] = $82;
     $90 = HEAP32[$73>>2]|0;
     $91 = ((($90)) + 16|0);
     HEAP32[$73>>2] = $91;
    } else {
     $92 = ((($db)) + 28|0);
     $93 = HEAP32[$79>>2]|0;
     $94 = $85;
     $95 = $93;
     $96 = (($94) - ($95))|0;
     $97 = $96 >> 4;
     $98 = (($97) + 1)|0;
     $99 = ($96|0)<(-16);
     if ($99) {
      __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($79);
      // unreachable;
     }
     $100 = $84;
     $101 = (($100) - ($95))|0;
     $102 = $101 >> 4;
     $103 = ($102>>>0)<(1073741823);
     if ($103) {
      $104 = $101 >> 3;
      $105 = ($104>>>0)<($98>>>0);
      $106 = $105 ? $98 : $104;
      $$0$i$i$i38 = $106;
     } else {
      $$0$i$i$i38 = 2147483647;
     }
     __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i$i,$$0$i$i$i38,$97,$92);
     $107 = ((($__v$i$i$i)) + 8|0);
     $108 = HEAP32[$107>>2]|0;
     HEAP32[$108>>2] = 0;
     $109 = ((($108)) + 4|0);
     HEAP32[$109>>2] = 0;
     $110 = ((($108)) + 8|0);
     HEAP32[$110>>2] = 0;
     $111 = ((($108)) + 12|0);
     HEAP32[$111>>2] = $82;
     $112 = ((($108)) + 16|0);
     HEAP32[$107>>2] = $112;
     __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($79,$__v$i$i$i);
     __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i$i);
    }
    $113 = HEAP32[$cv>>2]|0;
    $114 = $113 & 1;
    $115 = ($114|0)==(0);
    $116 = $113 & 2;
    $117 = ($116|0)==(0);
    $118 = $113 & 4;
    $119 = ($118|0)==(0);
    $120 = ((($__v$i$i$i)) + 8|0);
    $121 = ($63>>>0)<($70>>>0);
    if ($121) {
     $k$0560 = $63;
    } else {
     $$0 = $64;
     break L1;
    }
    while(1) {
     if ($72) {
      $122 = HEAP32[$db>>2]|0;
      $123 = (((($122) + (($k$0560*24)|0)|0)) + 12|0);
      $124 = HEAP8[$123>>0]|0;
      $125 = $124 & 1;
      $126 = ($125<<24>>24)==(0);
      if ($126) {
       $131 = $124&255;
       $132 = $131 >>> 1;
       $133 = ((($123)) + 1|0);
       $$in = $132;$136 = $133;
      } else {
       $127 = (((($122) + (($k$0560*24)|0)|0)) + 16|0);
       $128 = HEAP32[$127>>2]|0;
       $129 = (((($122) + (($k$0560*24)|0)|0)) + 20|0);
       $130 = HEAP32[$129>>2]|0;
       $$in = $128;$136 = $130;
      }
      $134 = (($$in) + -2)|0;
      $135 = (($136) + ($134)|0);
      $137 = HEAP8[$135>>0]|0;
      $138 = ($137<<24>>24)==(38);
      if ($138) {
       $139 = (($$in) + -3)|0;
       $p$0 = $139;
      } else {
       if ($126) {
        $144 = ((($123)) + 1|0);
        $145 = $124&255;
        $146 = $145 >>> 1;
        $147 = $146;$149 = $144;
       } else {
        $140 = (((($122) + (($k$0560*24)|0)|0)) + 20|0);
        $141 = HEAP32[$140>>2]|0;
        $142 = (((($122) + (($k$0560*24)|0)|0)) + 16|0);
        $143 = HEAP32[$142>>2]|0;
        $147 = $143;$149 = $141;
       }
       $$sum$i = (($147) + -1)|0;
       $148 = (($149) + ($$sum$i)|0);
       $150 = HEAP8[$148>>0]|0;
       $151 = ($150<<24>>24)==(38);
       $$ = $151 ? $134 : $$in;
       $p$0 = $$;
      }
      if ($115) {
       $p$1 = $p$0;
      } else {
       (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($123,$p$0,1561)|0);
       $152 = (($p$0) + 6)|0;
       $p$1 = $152;
      }
      if ($117) {
       $p$2 = $p$1;
      } else {
       $153 = HEAP32[$db>>2]|0;
       $154 = (((($153) + (($k$0560*24)|0)|0)) + 12|0);
       (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($154,$p$1,1568)|0);
       $155 = (($p$1) + 9)|0;
       $p$2 = $155;
      }
      if (!($119)) {
       $156 = HEAP32[$db>>2]|0;
       $157 = (((($156) + (($k$0560*24)|0)|0)) + 12|0);
       (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($157,$p$2,1578)|0);
      }
     } else {
      if (!($115)) {
       $158 = HEAP32[$db>>2]|0;
       $159 = (($158) + (($k$0560*24)|0)|0);
       (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($159,1561)|0);
      }
      if (!($117)) {
       $160 = HEAP32[$db>>2]|0;
       $161 = (($160) + (($k$0560*24)|0)|0);
       (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($161,1568)|0);
      }
      if (!($119)) {
       $162 = HEAP32[$db>>2]|0;
       $163 = (($162) + (($k$0560*24)|0)|0);
       (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($163,1578)|0);
      }
     }
     $164 = HEAP32[$73>>2]|0;
     $165 = ((($164)) + -16|0);
     $166 = HEAP32[$db>>2]|0;
     $167 = (($166) + (($k$0560*24)|0)|0);
     $168 = ((($164)) + -12|0);
     $169 = HEAP32[$168>>2]|0;
     $170 = ((($164)) + -8|0);
     $171 = HEAP32[$170>>2]|0;
     $172 = ($169|0)==($171|0);
     if ($172) {
      $177 = ((($164)) + -4|0);
      $178 = HEAP32[$165>>2]|0;
      $179 = $169;
      $180 = $178;
      $181 = (($179) - ($180))|0;
      $182 = (($181|0) / 24)&-1;
      $183 = (($182) + 1)|0;
      $184 = ($181|0)<(-24);
      if ($184) {
       $$lcssa706 = $165;
       break;
      }
      $185 = ($182>>>0)<(1073741823);
      if ($185) {
       $186 = $182 << 1;
       $187 = ($186>>>0)<($183>>>0);
       $188 = $187 ? $183 : $186;
       $$0$i$i$i43 = $188;
      } else {
       $$0$i$i$i43 = 2147483647;
      }
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i$i,$$0$i$i$i43,$182,$177);
      $189 = HEAP32[$120>>2]|0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($189,$167);
      $190 = ((($189)) + 12|0);
      $191 = (((($166) + (($k$0560*24)|0)|0)) + 12|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($190,$191);
      $192 = ((($189)) + 24|0);
      HEAP32[$120>>2] = $192;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($165,$__v$i$i$i);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i$i);
     } else {
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($169,$167);
      $173 = ((($169)) + 12|0);
      $174 = (((($166) + (($k$0560*24)|0)|0)) + 12|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($173,$174);
      $175 = HEAP32[$168>>2]|0;
      $176 = ((($175)) + 24|0);
      HEAP32[$168>>2] = $176;
     }
     $193 = (($k$0560) + 1)|0;
     $194 = ($193>>>0)<($70>>>0);
     if ($194) {
      $k$0560 = $193;
     } else {
      $$0 = $64;
      break L1;
     }
    }
    __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($$lcssa706);
    // unreachable;
    break;
   }
   default: {
   }
   }
   $195 = (__ZN10__cxxabiv112_GLOBAL__N_118parse_builtin_typeINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db)|0);
   $196 = ($195|0)==($first|0);
   if ($196) {
    $197 = HEAP8[$first>>0]|0;
    $198 = $197 << 24 >> 24;
    L65: do {
     switch ($198|0) {
     case 65:  {
      $199 = ($197<<24>>24)==(65);
      do {
       if ($199) {
        $200 = ((($first)) + 1|0);
        $201 = ($200|0)==($last|0);
        if ($201) {
         $$0$i = $first;
        } else {
         $202 = HEAP8[$200>>0]|0;
         $203 = ($202<<24>>24)==(95);
         if ($203) {
          $204 = ((($first)) + 2|0);
          $205 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($204,$last,$db)|0);
          $206 = ($205|0)==($204|0);
          if ($206) {
           $$0$i = $first;
           break;
          }
          $207 = HEAP32[$db>>2]|0;
          $208 = ((($db)) + 4|0);
          $209 = HEAP32[$208>>2]|0;
          $210 = ($207|0)==($209|0);
          if ($210) {
           $$0$i = $first;
           break;
          }
          $211 = ((($209)) + -12|0);
          $212 = HEAP8[$211>>0]|0;
          $213 = $212 & 1;
          $214 = ($213<<24>>24)==(0);
          $215 = ((($209)) + -8|0);
          $216 = HEAP32[$215>>2]|0;
          $217 = $212&255;
          $218 = $217 >>> 1;
          $219 = $214 ? $218 : $216;
          $220 = ((($209)) + -4|0);
          $221 = HEAP32[$220>>2]|0;
          $222 = ((($211)) + 1|0);
          $223 = $214 ? $222 : $221;
          $224 = ($219>>>0)<(2);
          $225 = $224 ? $219 : 2;
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($__v$i$i$i,$223,$225);
          $226 = HEAP8[$__v$i$i$i>>0]|0;
          $227 = $226 & 1;
          $228 = ($227<<24>>24)==(0);
          $229 = ((($__v$i$i$i)) + 4|0);
          $230 = HEAP32[$229>>2]|0;
          $231 = $226&255;
          $232 = $231 >>> 1;
          $233 = $228 ? $232 : $230;
          $234 = ((($__v$i$i$i)) + 8|0);
          $235 = HEAP32[$234>>2]|0;
          $236 = ((($__v$i$i$i)) + 1|0);
          $237 = $228 ? $236 : $235;
          $238 = ($233>>>0)>(2);
          $239 = $238 ? 2 : $233;
          $240 = (_memcmp($237,1588,$239)|0);
          $241 = ($240|0)==(0);
          $242 = ($233>>>0)<(2);
          $$$i$i$i$i188 = $238&1;
          $$$$i$i$i$i189 = $242 ? -1 : $$$i$i$i$i188;
          $243 = $241 ? $$$$i$i$i$i189 : $240;
          $244 = ($243|0)==(0);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($__v$i$i$i);
          if ($244) {
           $245 = HEAP32[$208>>2]|0;
           $246 = ((($245)) + -12|0);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE5eraseEjj($246);
          }
          $247 = HEAP32[$208>>2]|0;
          $248 = ((($247)) + -12|0);
          (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($248,0,1591)|0);
          $$0$i = $205;
          break;
         }
         $$off271 = (($202) + -49)<<24>>24;
         $249 = ($$off271&255)<(9);
         if ($249) {
          $250 = (__ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($200,$last)|0);
          $251 = ($250|0)==($last|0);
          if ($251) {
           $$0$i = $first;
           break;
          }
          $252 = HEAP8[$250>>0]|0;
          $253 = ($252<<24>>24)==(95);
          if (!($253)) {
           $$0$i = $first;
           break;
          }
          $254 = ((($250)) + 1|0);
          $255 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($254,$last,$db)|0);
          $256 = ($255|0)==($254|0);
          if ($256) {
           $$0$i = $first;
           break;
          }
          $257 = HEAP32[$db>>2]|0;
          $258 = ((($db)) + 4|0);
          $259 = HEAP32[$258>>2]|0;
          $260 = ($257|0)==($259|0);
          if ($260) {
           $$0$i = $first;
           break;
          }
          $261 = ((($259)) + -12|0);
          $262 = HEAP8[$261>>0]|0;
          $263 = $262 & 1;
          $264 = ($263<<24>>24)==(0);
          $265 = ((($259)) + -8|0);
          $266 = HEAP32[$265>>2]|0;
          $267 = $262&255;
          $268 = $267 >>> 1;
          $269 = $264 ? $268 : $266;
          $270 = ((($259)) + -4|0);
          $271 = HEAP32[$270>>2]|0;
          $272 = ((($261)) + 1|0);
          $273 = $264 ? $272 : $271;
          $274 = ($269>>>0)<(2);
          $275 = $274 ? $269 : 2;
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($0,$273,$275);
          $276 = HEAP8[$0>>0]|0;
          $277 = $276 & 1;
          $278 = ($277<<24>>24)==(0);
          $279 = ((($0)) + 4|0);
          $280 = HEAP32[$279>>2]|0;
          $281 = $276&255;
          $282 = $281 >>> 1;
          $283 = $278 ? $282 : $280;
          $284 = ((($0)) + 8|0);
          $285 = HEAP32[$284>>2]|0;
          $286 = ((($0)) + 1|0);
          $287 = $278 ? $286 : $285;
          $288 = ($283>>>0)>(2);
          $289 = $288 ? 2 : $283;
          $290 = (_memcmp($287,1588,$289)|0);
          $291 = ($290|0)==(0);
          $292 = ($283>>>0)<(2);
          $$$i$i$i12$i = $288&1;
          $$$$i$i$i13$i = $292 ? -1 : $$$i$i$i12$i;
          $293 = $291 ? $$$$i$i$i13$i : $290;
          $294 = ($293|0)==(0);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($0);
          if ($294) {
           $295 = HEAP32[$258>>2]|0;
           $296 = ((($295)) + -12|0);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE5eraseEjj($296);
          }
          $297 = HEAP32[$258>>2]|0;
          $298 = ((($297)) + -12|0);
          $299 = $200;
          $300 = $250;
          $301 = (($300) - ($299))|0;
          $302 = ($301>>>0)>(4294967279);
          if ($302) {
           __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($3);
           // unreachable;
          }
          $303 = ($301>>>0)<(11);
          if ($303) {
           $304 = $301 << 1;
           $305 = $304&255;
           HEAP8[$3>>0] = $305;
           $306 = ((($3)) + 1|0);
           $__p$0$ph$i$i$i = $306;
          } else {
           $307 = (($301) + 16)|0;
           $308 = $307 & -16;
           $309 = (_malloc($308)|0);
           $310 = ((($3)) + 8|0);
           HEAP32[$310>>2] = $309;
           $311 = $308 | 1;
           HEAP32[$3>>2] = $311;
           $312 = ((($3)) + 4|0);
           HEAP32[$312>>2] = $301;
           $__p$0$ph$i$i$i = $309;
          }
          $313 = ($200|0)==($250|0);
          if (!($313)) {
           $$0$i$i$i191509 = $200;$__p$0$i$i$i508 = $__p$0$ph$i$i$i;
           while(1) {
            $314 = HEAP8[$$0$i$i$i191509>>0]|0;
            HEAP8[$__p$0$i$i$i508>>0] = $314;
            $315 = ((($$0$i$i$i191509)) + 1|0);
            $316 = ((($__p$0$i$i$i508)) + 1|0);
            $317 = ($315|0)==($250|0);
            if ($317) {
             break;
            } else {
             $$0$i$i$i191509 = $315;$__p$0$i$i$i508 = $316;
            }
           }
          }
          $scevgep2$i$i$i = (($__p$0$ph$i$i$i) + ($301)|0);
          HEAP8[$scevgep2$i$i$i>>0] = 0;
          $318 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($3,0,1588)|0);
          ;HEAP32[$2>>2]=HEAP32[$318>>2]|0;HEAP32[$2+4>>2]=HEAP32[$318+4>>2]|0;HEAP32[$2+8>>2]=HEAP32[$318+8>>2]|0;
          HEAP32[$318>>2] = 0;
          $319 = ((($318)) + 4|0);
          HEAP32[$319>>2] = 0;
          $320 = ((($318)) + 8|0);
          HEAP32[$320>>2] = 0;
          $321 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($2,1595)|0);
          ;HEAP32[$1>>2]=HEAP32[$321>>2]|0;HEAP32[$1+4>>2]=HEAP32[$321+4>>2]|0;HEAP32[$1+8>>2]=HEAP32[$321+8>>2]|0;
          HEAP32[$321>>2] = 0;
          $322 = ((($321)) + 4|0);
          HEAP32[$322>>2] = 0;
          $323 = ((($321)) + 8|0);
          HEAP32[$323>>2] = 0;
          $324 = HEAP8[$1>>0]|0;
          $325 = $324 & 1;
          $326 = ($325<<24>>24)==(0);
          $327 = ((($1)) + 8|0);
          $328 = HEAP32[$327>>2]|0;
          $329 = ((($1)) + 1|0);
          $330 = $326 ? $329 : $328;
          $331 = ((($1)) + 4|0);
          $332 = HEAP32[$331>>2]|0;
          $333 = $324&255;
          $334 = $333 >>> 1;
          $335 = $326 ? $334 : $332;
          (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKcj($298,0,$330,$335)|0);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($1);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($2);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
          $$0$i = $255;
          break;
         }
         $336 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($200,$last,$db)|0);
         $337 = ($336|0)==($200|0);
         $338 = ($336|0)==($last|0);
         $or$cond10$i = $337 | $338;
         if ($or$cond10$i) {
          $$0$i = $first;
         } else {
          $339 = HEAP8[$336>>0]|0;
          $340 = ($339<<24>>24)==(95);
          if ($340) {
           $341 = ((($336)) + 1|0);
           $342 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($341,$last,$db)|0);
           $343 = ($342|0)==($341|0);
           if ($343) {
            $$0$i = $first;
           } else {
            $344 = ((($db)) + 4|0);
            $345 = HEAP32[$344>>2]|0;
            $346 = HEAP32[$db>>2]|0;
            $347 = $345;
            $348 = $346;
            $349 = (($347) - ($348))|0;
            $350 = (($349|0) / 24)&-1;
            $351 = ($350>>>0)<(2);
            if ($351) {
             $$0$i = $first;
            } else {
             $352 = ((($345)) + -24|0);
             __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($4,$352);
             $353 = HEAP32[$344>>2]|0;
             $354 = ((($353)) + -24|0);
             $356 = $353;
             while(1) {
              $355 = ((($356)) + -24|0);
              HEAP32[$344>>2] = $355;
              __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($355);
              $$pre$i$i200 = HEAP32[$344>>2]|0;
              $357 = ($$pre$i$i200|0)==($354|0);
              if ($357) {
               break;
              } else {
               $356 = $$pre$i$i200;
              }
             }
             $358 = ((($353)) + -48|0);
             __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($5,$358);
             $359 = HEAP32[$344>>2]|0;
             $360 = ((($359)) + -24|0);
             $361 = HEAP8[$360>>0]|0;
             $362 = $361 & 1;
             $363 = ($362<<24>>24)==(0);
             do {
              if ($363) {
               $364 = ((($360)) + 1|0);
               HEAP8[$364>>0] = 0;
               HEAP8[$360>>0] = 0;
              } else {
               $365 = ((($359)) + -16|0);
               $366 = HEAP32[$365>>2]|0;
               HEAP8[$366>>0] = 0;
               $367 = ((($359)) + -20|0);
               HEAP32[$367>>2] = 0;
               $$pre$i$i$i$i203 = HEAP8[$360>>0]|0;
               $368 = $$pre$i$i$i$i203 & 1;
               $369 = ($368<<24>>24)==(0);
               if ($369) {
                $374 = $$pre$i$i$i$i203;$383 = 10;
               } else {
                $370 = HEAP32[$360>>2]|0;
                $371 = $370 & -2;
                $phitmp$i$i$i$i$i$i$i205 = (($371) + -1)|0;
                $372 = $370&255;
                $374 = $372;$383 = $phitmp$i$i$i$i$i$i$i205;
               }
               $373 = $374 & 1;
               $375 = ($373<<24>>24)==(0);
               if ($375) {
                $376 = $374&255;
                $377 = $376 >>> 1;
                $378 = ($374&255)<(22);
                if ($378) {
                 $2567 = 1;$381 = 10;$402 = $377;
                } else {
                 $379 = (($377) + 16)|0;
                 $380 = $379 & 240;
                 $phitmp$i2$i$i$i$i$i$i208 = (($380) + -1)|0;
                 $2567 = 1;$381 = $phitmp$i2$i$i$i$i$i$i208;$402 = $377;
                }
               } else {
                $2567 = 0;$381 = 10;$402 = 0;
               }
               $382 = ($381|0)==($383|0);
               if (!($382)) {
                $384 = ($381|0)==(10);
                if ($384) {
                 $389 = ((($360)) + 1|0);
                 $390 = HEAP32[$365>>2]|0;
                 if ($2567) {
                  $391 = $374&255;
                  $392 = $391 >>> 1;
                  $393 = (($392) + 1)|0;
                  _memcpy(($389|0),($390|0),($393|0))|0;
                  _free($390);
                 } else {
                  $398 = HEAP8[$390>>0]|0;
                  HEAP8[$389>>0] = $398;
                  _free($390);
                 }
                 $403 = $402 << 1;
                 $404 = $403&255;
                 HEAP8[$360>>0] = $404;
                 break;
                }
                $385 = ($381>>>0)<=($383>>>0);
                $386 = (($381) + 1)|0;
                $387 = (_malloc($386)|0);
                $388 = ($387|0)==(0|0);
                $or$cond$i$i$i$i$i$i210 = $385 & $388;
                if (!($or$cond$i$i$i$i$i$i210)) {
                 if ($2567) {
                  $394 = ((($360)) + 1|0);
                  $395 = $374&255;
                  $396 = $395 >>> 1;
                  $397 = (($396) + 1)|0;
                  _memcpy(($387|0),($394|0),($397|0))|0;
                 } else {
                  $399 = HEAP32[$365>>2]|0;
                  $400 = HEAP8[$399>>0]|0;
                  HEAP8[$387>>0] = $400;
                  _free($399);
                 }
                 $401 = $386 | 1;
                 HEAP32[$360>>2] = $401;
                 HEAP32[$367>>2] = $402;
                 HEAP32[$365>>2] = $387;
                }
               }
              }
             } while(0);
             ;HEAP32[$360>>2]=HEAP32[$4>>2]|0;HEAP32[$360+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$360+8>>2]=HEAP32[$4+8>>2]|0;
             HEAP32[$4>>2] = 0;
             $405 = ((($4)) + 4|0);
             HEAP32[$405>>2] = 0;
             $406 = ((($4)) + 8|0);
             HEAP32[$406>>2] = 0;
             $407 = ((($4)) + 12|0);
             $408 = HEAP8[$407>>0]|0;
             $409 = $408 & 1;
             $410 = ($409<<24>>24)==(0);
             $411 = ((($4)) + 16|0);
             $412 = HEAP32[$411>>2]|0;
             $413 = $408&255;
             $414 = $413 >>> 1;
             $415 = $410 ? $414 : $412;
             $416 = ((($4)) + 20|0);
             $417 = HEAP32[$416>>2]|0;
             $418 = ((($407)) + 1|0);
             $419 = $410 ? $418 : $417;
             $420 = ($415>>>0)<(2);
             $421 = $420 ? $415 : 2;
             __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($6,$419,$421);
             $422 = HEAP8[$6>>0]|0;
             $423 = $422 & 1;
             $424 = ($423<<24>>24)==(0);
             $425 = ((($6)) + 4|0);
             $426 = HEAP32[$425>>2]|0;
             $427 = $422&255;
             $428 = $427 >>> 1;
             $429 = $424 ? $428 : $426;
             $430 = ((($6)) + 8|0);
             $431 = HEAP32[$430>>2]|0;
             $432 = ((($6)) + 1|0);
             $433 = $424 ? $432 : $431;
             $434 = ($429>>>0)>(2);
             $435 = $434 ? 2 : $429;
             $436 = (_memcmp($433,1588,$435)|0);
             $437 = ($436|0)==(0);
             $438 = ($429>>>0)<(2);
             $$$i$i$i21$i = $434&1;
             $$$$i$i$i22$i = $438 ? -1 : $$$i$i$i21$i;
             $439 = $437 ? $$$$i$i$i22$i : $436;
             $440 = ($439|0)==(0);
             __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
             if ($440) {
              __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE5eraseEjj($407);
             }
             $441 = HEAP32[$344>>2]|0;
             $442 = ((($441)) + -12|0);
             __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($9,$5);
             $443 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($9,0,1588)|0);
             ;HEAP32[$8>>2]=HEAP32[$443>>2]|0;HEAP32[$8+4>>2]=HEAP32[$443+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[$443+8>>2]|0;
             HEAP32[$443>>2] = 0;
             $444 = ((($443)) + 4|0);
             HEAP32[$444>>2] = 0;
             $445 = ((($443)) + 8|0);
             HEAP32[$445>>2] = 0;
             $446 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($8,1595)|0);
             ;HEAP32[$7>>2]=HEAP32[$446>>2]|0;HEAP32[$7+4>>2]=HEAP32[$446+4>>2]|0;HEAP32[$7+8>>2]=HEAP32[$446+8>>2]|0;
             HEAP32[$446>>2] = 0;
             $447 = ((($446)) + 4|0);
             HEAP32[$447>>2] = 0;
             $448 = ((($446)) + 8|0);
             HEAP32[$448>>2] = 0;
             $449 = HEAP8[$407>>0]|0;
             $450 = $449 & 1;
             $451 = ($450<<24>>24)==(0);
             $452 = HEAP32[$416>>2]|0;
             $453 = $451 ? $418 : $452;
             $454 = HEAP32[$411>>2]|0;
             $455 = $449&255;
             $456 = $455 >>> 1;
             $457 = $451 ? $456 : $454;
             $458 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($7,$453,$457)|0);
             ;HEAP32[$num1$i>>2]=HEAP32[$458>>2]|0;HEAP32[$num1$i+4>>2]=HEAP32[$458+4>>2]|0;HEAP32[$num1$i+8>>2]=HEAP32[$458+8>>2]|0;
             HEAP32[$458>>2] = 0;
             $459 = ((($458)) + 4|0);
             HEAP32[$459>>2] = 0;
             $460 = ((($458)) + 8|0);
             HEAP32[$460>>2] = 0;
             $461 = HEAP8[$442>>0]|0;
             $462 = $461 & 1;
             $463 = ($462<<24>>24)==(0);
             do {
              if ($463) {
               $464 = ((($442)) + 1|0);
               HEAP8[$464>>0] = 0;
               HEAP8[$442>>0] = 0;
              } else {
               $465 = ((($441)) + -4|0);
               $466 = HEAP32[$465>>2]|0;
               HEAP8[$466>>0] = 0;
               $467 = ((($441)) + -8|0);
               HEAP32[$467>>2] = 0;
               $$pre$i$i$i36$i = HEAP8[$442>>0]|0;
               $468 = $$pre$i$i$i36$i & 1;
               $469 = ($468<<24>>24)==(0);
               if ($469) {
                $474 = $$pre$i$i$i36$i;$483 = 10;
               } else {
                $470 = HEAP32[$442>>2]|0;
                $471 = $470 & -2;
                $phitmp$i$i$i$i$i$i38$i = (($471) + -1)|0;
                $472 = $470&255;
                $474 = $472;$483 = $phitmp$i$i$i$i$i$i38$i;
               }
               $473 = $474 & 1;
               $475 = ($473<<24>>24)==(0);
               do {
                if ($475) {
                 $476 = $474&255;
                 $477 = $476 >>> 1;
                 $478 = ($474&255)<(22);
                 if ($478) {
                  $2568 = 1;$481 = 10;$502 = $477;
                  break;
                 }
                 $479 = (($477) + 16)|0;
                 $480 = $479 & 240;
                 $phitmp$i2$i$i$i$i$i41$i = (($480) + -1)|0;
                 $2568 = 1;$481 = $phitmp$i2$i$i$i$i$i41$i;$502 = $477;
                } else {
                 $2568 = 0;$481 = 10;$502 = 0;
                }
               } while(0);
               $482 = ($481|0)==($483|0);
               if (!($482)) {
                $484 = ($481|0)==(10);
                if ($484) {
                 $489 = ((($442)) + 1|0);
                 $490 = HEAP32[$465>>2]|0;
                 if ($2568) {
                  $491 = $474&255;
                  $492 = $491 >>> 1;
                  $493 = (($492) + 1)|0;
                  _memcpy(($489|0),($490|0),($493|0))|0;
                  _free($490);
                 } else {
                  $498 = HEAP8[$490>>0]|0;
                  HEAP8[$489>>0] = $498;
                  _free($490);
                 }
                 $503 = $502 << 1;
                 $504 = $503&255;
                 HEAP8[$442>>0] = $504;
                 break;
                }
                $485 = ($481>>>0)<=($483>>>0);
                $486 = (($481) + 1)|0;
                $487 = (_malloc($486)|0);
                $488 = ($487|0)==(0|0);
                $or$cond$i$i$i$i$i43$i = $485 & $488;
                if ($or$cond$i$i$i$i$i43$i) {
                 break;
                }
                if ($2568) {
                 $494 = ((($442)) + 1|0);
                 $495 = $474&255;
                 $496 = $495 >>> 1;
                 $497 = (($496) + 1)|0;
                 _memcpy(($487|0),($494|0),($497|0))|0;
                } else {
                 $499 = HEAP32[$465>>2]|0;
                 $500 = HEAP8[$499>>0]|0;
                 HEAP8[$487>>0] = $500;
                 _free($499);
                }
                $501 = $486 | 1;
                HEAP32[$442>>2] = $501;
                HEAP32[$467>>2] = $502;
                HEAP32[$465>>2] = $487;
               }
              }
             } while(0);
             ;HEAP32[$442>>2]=HEAP32[$num1$i>>2]|0;HEAP32[$442+4>>2]=HEAP32[$num1$i+4>>2]|0;HEAP32[$442+8>>2]=HEAP32[$num1$i+8>>2]|0;
             HEAP32[$num1$i>>2] = 0;
             $505 = ((($num1$i)) + 4|0);
             HEAP32[$505>>2] = 0;
             $506 = ((($num1$i)) + 8|0);
             HEAP32[$506>>2] = 0;
             __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($num1$i);
             __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
             __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
             __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
             __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($5);
             __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($4);
             $$0$i = $342;
            }
           }
          } else {
           $$0$i = $first;
          }
         }
        }
       } else {
        $$0$i = $first;
       }
      } while(0);
      $507 = ($$0$i|0)==($first|0);
      if ($507) {
       $$0 = $first;
       break L1;
      }
      $508 = HEAP32[$db>>2]|0;
      $509 = ((($db)) + 4|0);
      $510 = HEAP32[$509>>2]|0;
      $511 = ($508|0)==($510|0);
      if ($511) {
       $$0 = $first;
       break L1;
      }
      $512 = ((($db)) + 16|0);
      $513 = ((($510)) + -24|0);
      $514 = ((($db)) + 12|0);
      $515 = HEAP32[$514>>2]|0;
      HEAP32[$11>>2] = $515;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($10,$513,$11);
      $516 = ((($db)) + 20|0);
      $517 = HEAP32[$516>>2]|0;
      $518 = ((($db)) + 24|0);
      $519 = HEAP32[$518>>2]|0;
      $520 = ($517>>>0)<($519>>>0);
      if ($520) {
       $521 = ((($10)) + 12|0);
       $522 = ((($517)) + 4|0);
       $523 = HEAP32[$521>>2]|0;
       $524 = ((($517)) + 12|0);
       HEAP32[$524>>2] = $523;
       $525 = HEAP32[$10>>2]|0;
       HEAP32[$517>>2] = $525;
       $526 = ((($10)) + 4|0);
       $527 = HEAP32[$526>>2]|0;
       HEAP32[$522>>2] = $527;
       $528 = ((($10)) + 8|0);
       $529 = HEAP32[$528>>2]|0;
       $530 = ((($517)) + 8|0);
       HEAP32[$530>>2] = $529;
       HEAP32[$528>>2] = 0;
       HEAP32[$526>>2] = 0;
       HEAP32[$10>>2] = 0;
       $531 = HEAP32[$516>>2]|0;
       $532 = ((($531)) + 16|0);
       HEAP32[$516>>2] = $532;
      } else {
       $533 = ((($db)) + 28|0);
       $534 = HEAP32[$512>>2]|0;
       $535 = $517;
       $536 = $534;
       $537 = (($535) - ($536))|0;
       $538 = $537 >> 4;
       $539 = (($538) + 1)|0;
       $540 = ($537|0)<(-16);
       if ($540) {
        __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($512);
        // unreachable;
       }
       $541 = $519;
       $542 = (($541) - ($536))|0;
       $543 = $542 >> 4;
       $544 = ($543>>>0)<(1073741823);
       if ($544) {
        $545 = $542 >> 3;
        $546 = ($545>>>0)<($539>>>0);
        $547 = $546 ? $539 : $545;
        $$0$i$i$i56 = $547;
       } else {
        $$0$i$i$i56 = 2147483647;
       }
       __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i$i,$$0$i$i$i56,$538,$533);
       $548 = ((($__v$i$i$i)) + 8|0);
       $549 = HEAP32[$548>>2]|0;
       $550 = ((($10)) + 12|0);
       $551 = ((($549)) + 4|0);
       $552 = HEAP32[$550>>2]|0;
       $553 = ((($549)) + 12|0);
       HEAP32[$553>>2] = $552;
       $554 = HEAP32[$10>>2]|0;
       HEAP32[$549>>2] = $554;
       $555 = ((($10)) + 4|0);
       $556 = HEAP32[$555>>2]|0;
       HEAP32[$551>>2] = $556;
       $557 = ((($10)) + 8|0);
       $558 = HEAP32[$557>>2]|0;
       $559 = ((($549)) + 8|0);
       HEAP32[$559>>2] = $558;
       HEAP32[$557>>2] = 0;
       HEAP32[$555>>2] = 0;
       HEAP32[$10>>2] = 0;
       $560 = ((($549)) + 16|0);
       HEAP32[$548>>2] = $560;
       __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($512,$__v$i$i$i);
       __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i$i);
      }
      __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($10);
      $$0 = $$0$i;
      break L1;
      break;
     }
     case 67:  {
      $561 = ((($first)) + 1|0);
      $562 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($561,$last,$db)|0);
      $563 = ($562|0)==($561|0);
      if ($563) {
       $$0 = $first;
       break L1;
      }
      $564 = HEAP32[$db>>2]|0;
      $565 = ((($db)) + 4|0);
      $566 = HEAP32[$565>>2]|0;
      $567 = ($564|0)==($566|0);
      if ($567) {
       $$0 = $first;
       break L1;
      }
      $568 = ((($566)) + -24|0);
      (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($568,1597)|0);
      $569 = ((($db)) + 16|0);
      $570 = HEAP32[$565>>2]|0;
      $571 = ((($570)) + -24|0);
      $572 = ((($db)) + 12|0);
      $573 = HEAP32[$572>>2]|0;
      HEAP32[$13>>2] = $573;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($12,$571,$13);
      $574 = ((($db)) + 20|0);
      $575 = HEAP32[$574>>2]|0;
      $576 = ((($db)) + 24|0);
      $577 = HEAP32[$576>>2]|0;
      $578 = ($575>>>0)<($577>>>0);
      if ($578) {
       $579 = ((($12)) + 12|0);
       $580 = ((($575)) + 4|0);
       $581 = HEAP32[$579>>2]|0;
       $582 = ((($575)) + 12|0);
       HEAP32[$582>>2] = $581;
       $583 = HEAP32[$12>>2]|0;
       HEAP32[$575>>2] = $583;
       $584 = ((($12)) + 4|0);
       $585 = HEAP32[$584>>2]|0;
       HEAP32[$580>>2] = $585;
       $586 = ((($12)) + 8|0);
       $587 = HEAP32[$586>>2]|0;
       $588 = ((($575)) + 8|0);
       HEAP32[$588>>2] = $587;
       HEAP32[$586>>2] = 0;
       HEAP32[$584>>2] = 0;
       HEAP32[$12>>2] = 0;
       $589 = HEAP32[$574>>2]|0;
       $590 = ((($589)) + 16|0);
       HEAP32[$574>>2] = $590;
      } else {
       $591 = ((($db)) + 28|0);
       $592 = HEAP32[$569>>2]|0;
       $593 = $575;
       $594 = $592;
       $595 = (($593) - ($594))|0;
       $596 = $595 >> 4;
       $597 = (($596) + 1)|0;
       $598 = ($595|0)<(-16);
       if ($598) {
        __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($569);
        // unreachable;
       }
       $599 = $577;
       $600 = (($599) - ($594))|0;
       $601 = $600 >> 4;
       $602 = ($601>>>0)<(1073741823);
       if ($602) {
        $603 = $600 >> 3;
        $604 = ($603>>>0)<($597>>>0);
        $605 = $604 ? $597 : $603;
        $$0$i$i$i61 = $605;
       } else {
        $$0$i$i$i61 = 2147483647;
       }
       __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i$i,$$0$i$i$i61,$596,$591);
       $606 = ((($__v$i$i$i)) + 8|0);
       $607 = HEAP32[$606>>2]|0;
       $608 = ((($12)) + 12|0);
       $609 = ((($607)) + 4|0);
       $610 = HEAP32[$608>>2]|0;
       $611 = ((($607)) + 12|0);
       HEAP32[$611>>2] = $610;
       $612 = HEAP32[$12>>2]|0;
       HEAP32[$607>>2] = $612;
       $613 = ((($12)) + 4|0);
       $614 = HEAP32[$613>>2]|0;
       HEAP32[$609>>2] = $614;
       $615 = ((($12)) + 8|0);
       $616 = HEAP32[$615>>2]|0;
       $617 = ((($607)) + 8|0);
       HEAP32[$617>>2] = $616;
       HEAP32[$615>>2] = 0;
       HEAP32[$613>>2] = 0;
       HEAP32[$12>>2] = 0;
       $618 = ((($607)) + 16|0);
       HEAP32[$606>>2] = $618;
       __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($569,$__v$i$i$i);
       __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i$i);
      }
      __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($12);
      $$0 = $562;
      break L1;
      break;
     }
     case 70:  {
      $619 = ($197<<24>>24)==(70);
      do {
       if ($619) {
        $620 = ((($first)) + 1|0);
        $621 = ($620|0)==($last|0);
        if (!($621)) {
         $622 = HEAP8[$620>>0]|0;
         $623 = ($622<<24>>24)==(89);
         if ($623) {
          $624 = ((($first)) + 2|0);
          $625 = ($624|0)==($last|0);
          if ($625) {
           break;
          } else {
           $t$0$i = $624;
          }
         } else {
          $t$0$i = $620;
         }
         $626 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($t$0$i,$last,$db)|0);
         $627 = ($626|0)==($t$0$i|0);
         if (!($627)) {
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($__v$i$i$i,1606,1);
          $628 = ((($db)) + 4|0);
          $629 = ((($__v$i$i$i)) + 4|0);
          $630 = ((($0)) + 8|0);
          $631 = ((($0)) + 1|0);
          $632 = ((($0)) + 4|0);
          $633 = ($626|0)==($last|0);
          L191: do {
           if ($633) {
            label = 144;
           } else {
            $ref_qual$0$i$ph521 = 0;$t$1$i$ph520 = $626;
            L192: while(1) {
             $t$1$i518 = $t$1$i$ph520;
             L194: while(1) {
              $640 = HEAP8[$t$1$i518>>0]|0;
              switch ($640<<24>>24) {
              case 69:  {
               $ref_qual$0$i$ph521$lcssa = $ref_qual$0$i$ph521;$t$1$i518$lcssa = $t$1$i518;
               break L192;
               break;
              }
              case 118:  {
               $642 = ((($t$1$i518)) + 1|0);
               $t$1$i$be = $642;
               break;
              }
              case 82:  {
               $644 = ((($t$1$i518)) + 1|0);
               $645 = ($644|0)==($last|0);
               if ($645) {
                label = 154;
               } else {
                $646 = HEAP8[$644>>0]|0;
                $647 = ($646<<24>>24)==(69);
                if ($647) {
                 $ref_qual$0$i$ph$ph = 1;$t$1$i$ph$ph = $644;
                 break L194;
                } else {
                 label = 154;
                }
               }
               break;
              }
              case 79:  {
               $648 = ((($t$1$i518)) + 1|0);
               $649 = ($648|0)==($last|0);
               if ($649) {
                label = 154;
               } else {
                $650 = HEAP8[$648>>0]|0;
                $651 = ($650<<24>>24)==(69);
                if ($651) {
                 $ref_qual$0$i$ph$ph = 2;$t$1$i$ph$ph = $648;
                 break L194;
                } else {
                 label = 154;
                }
               }
               break;
              }
              default: {
               label = 154;
              }
              }
              if ((label|0) == 154) {
               label = 0;
               $652 = HEAP32[$628>>2]|0;
               $653 = HEAP32[$db>>2]|0;
               $654 = $652;
               $655 = $653;
               $656 = (($654) - ($655))|0;
               $657 = (($656|0) / 24)&-1;
               $658 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($t$1$i518,$last,$db)|0);
               $659 = HEAP32[$628>>2]|0;
               $660 = HEAP32[$db>>2]|0;
               $661 = $659;
               $662 = $660;
               $663 = (($661) - ($662))|0;
               $664 = (($663|0) / 24)&-1;
               $665 = ($658|0)==($t$1$i518|0);
               $666 = ($658|0)==($last|0);
               $or$cond$i = $665 | $666;
               if ($or$cond$i) {
                break L191;
               }
               $667 = ($657>>>0)<($664>>>0);
               if ($667) {
                $k$0$i515 = $657;
                while(1) {
                 $669 = HEAP8[$__v$i$i$i>>0]|0;
                 $670 = $669 & 1;
                 $671 = ($670<<24>>24)==(0);
                 $672 = HEAP32[$629>>2]|0;
                 $673 = $669&255;
                 $674 = $673 >>> 1;
                 $675 = $671 ? $674 : $672;
                 $676 = ($675>>>0)>(1);
                 if ($676) {
                  (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($__v$i$i$i,1608)|0);
                 }
                 $677 = HEAP32[$db>>2]|0;
                 $678 = (($677) + (($k$0$i515*24)|0)|0);
                 __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($0,$678);
                 $679 = HEAP8[$0>>0]|0;
                 $680 = $679 & 1;
                 $681 = ($680<<24>>24)==(0);
                 $682 = HEAP32[$630>>2]|0;
                 $683 = $681 ? $631 : $682;
                 $684 = HEAP32[$632>>2]|0;
                 $685 = $679&255;
                 $686 = $685 >>> 1;
                 $687 = $681 ? $686 : $684;
                 (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($__v$i$i$i,$683,$687)|0);
                 __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($0);
                 $688 = (($k$0$i515) + 1)|0;
                 $689 = ($688>>>0)<($664>>>0);
                 if ($689) {
                  $k$0$i515 = $688;
                 } else {
                  break;
                 }
                }
               }
               $668 = ($657>>>0)<($664>>>0);
               if ($668) {
                $k2$0$i516 = $657;
                while(1) {
                 $690 = HEAP32[$628>>2]|0;
                 $691 = ((($690)) + -24|0);
                 $693 = $690;
                 while(1) {
                  $692 = ((($693)) + -24|0);
                  HEAP32[$628>>2] = $692;
                  __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($692);
                  $$pre$i7$i = HEAP32[$628>>2]|0;
                  $694 = ($$pre$i7$i|0)==($691|0);
                  if ($694) {
                   break;
                  } else {
                   $693 = $$pre$i7$i;
                  }
                 }
                 $695 = (($k2$0$i516) + 1)|0;
                 $696 = ($695>>>0)<($664>>>0);
                 if ($696) {
                  $k2$0$i516 = $695;
                 } else {
                  $t$1$i$be = $658;
                  break;
                 }
                }
               } else {
                $t$1$i$be = $658;
               }
              }
              $643 = ($t$1$i$be|0)==($last|0);
              if ($643) {
               label = 144;
               break L191;
              } else {
               $t$1$i518 = $t$1$i$be;
              }
             }
             $634 = ($t$1$i$ph$ph|0)==($last|0);
             if ($634) {
              label = 144;
              break L191;
             } else {
              $ref_qual$0$i$ph521 = $ref_qual$0$i$ph$ph;$t$1$i$ph520 = $t$1$i$ph$ph;
             }
            }
            $641 = ((($t$1$i518$lcssa)) + 1|0);
            (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($__v$i$i$i,1511)|0);
            switch ($ref_qual$0$i$ph521$lcssa|0) {
            case 1:  {
             (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($__v$i$i$i,1611)|0);
             break;
            }
            case 2:  {
             (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($__v$i$i$i,1614)|0);
             break;
            }
            default: {
            }
            }
            $697 = HEAP32[$db>>2]|0;
            $698 = HEAP32[$628>>2]|0;
            $699 = ($697|0)==($698|0);
            if (!($699)) {
             $700 = ((($698)) + -24|0);
             (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($700,1618)|0);
             $701 = HEAP32[$628>>2]|0;
             $702 = ((($701)) + -12|0);
             $703 = HEAP8[$__v$i$i$i>>0]|0;
             $704 = $703 & 1;
             $705 = ($704<<24>>24)==(0);
             $706 = ((($__v$i$i$i)) + 8|0);
             $707 = HEAP32[$706>>2]|0;
             $708 = ((($__v$i$i$i)) + 1|0);
             $709 = $705 ? $708 : $707;
             $710 = HEAP32[$629>>2]|0;
             $711 = $703&255;
             $712 = $711 >>> 1;
             $713 = $705 ? $712 : $710;
             (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKcj($702,0,$709,$713)|0);
             __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($__v$i$i$i);
             $714 = ($641|0)==($first|0);
             if ($714) {
              $$0 = $first;
              break L1;
             }
             $715 = HEAP32[$db>>2]|0;
             $716 = HEAP32[$628>>2]|0;
             $717 = ($715|0)==($716|0);
             if ($717) {
              $$0 = $first;
              break L1;
             }
             $718 = ((($db)) + 16|0);
             $719 = ((($716)) + -24|0);
             $720 = ((($db)) + 12|0);
             $721 = HEAP32[$720>>2]|0;
             HEAP32[$15>>2] = $721;
             __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($14,$719,$15);
             $722 = ((($db)) + 20|0);
             $723 = HEAP32[$722>>2]|0;
             $724 = ((($db)) + 24|0);
             $725 = HEAP32[$724>>2]|0;
             $726 = ($723>>>0)<($725>>>0);
             if ($726) {
              $727 = ((($14)) + 12|0);
              $728 = ((($723)) + 4|0);
              $729 = HEAP32[$727>>2]|0;
              $730 = ((($723)) + 12|0);
              HEAP32[$730>>2] = $729;
              $731 = HEAP32[$14>>2]|0;
              HEAP32[$723>>2] = $731;
              $732 = ((($14)) + 4|0);
              $733 = HEAP32[$732>>2]|0;
              HEAP32[$728>>2] = $733;
              $734 = ((($14)) + 8|0);
              $735 = HEAP32[$734>>2]|0;
              $736 = ((($723)) + 8|0);
              HEAP32[$736>>2] = $735;
              HEAP32[$734>>2] = 0;
              HEAP32[$732>>2] = 0;
              HEAP32[$14>>2] = 0;
              $737 = HEAP32[$722>>2]|0;
              $738 = ((($737)) + 16|0);
              HEAP32[$722>>2] = $738;
             } else {
              $739 = ((($db)) + 28|0);
              $740 = HEAP32[$718>>2]|0;
              $741 = $723;
              $742 = $740;
              $743 = (($741) - ($742))|0;
              $744 = $743 >> 4;
              $745 = (($744) + 1)|0;
              $746 = ($743|0)<(-16);
              if ($746) {
               __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($718);
               // unreachable;
              }
              $747 = $725;
              $748 = (($747) - ($742))|0;
              $749 = $748 >> 4;
              $750 = ($749>>>0)<(1073741823);
              if ($750) {
               $751 = $748 >> 3;
               $752 = ($751>>>0)<($745>>>0);
               $753 = $752 ? $745 : $751;
               $$0$i$i$i66 = $753;
              } else {
               $$0$i$i$i66 = 2147483647;
              }
              __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i$i,$$0$i$i$i66,$744,$739);
              $754 = ((($__v$i$i$i)) + 8|0);
              $755 = HEAP32[$754>>2]|0;
              $756 = ((($14)) + 12|0);
              $757 = ((($755)) + 4|0);
              $758 = HEAP32[$756>>2]|0;
              $759 = ((($755)) + 12|0);
              HEAP32[$759>>2] = $758;
              $760 = HEAP32[$14>>2]|0;
              HEAP32[$755>>2] = $760;
              $761 = ((($14)) + 4|0);
              $762 = HEAP32[$761>>2]|0;
              HEAP32[$757>>2] = $762;
              $763 = ((($14)) + 8|0);
              $764 = HEAP32[$763>>2]|0;
              $765 = ((($755)) + 8|0);
              HEAP32[$765>>2] = $764;
              HEAP32[$763>>2] = 0;
              HEAP32[$761>>2] = 0;
              HEAP32[$14>>2] = 0;
              $766 = ((($755)) + 16|0);
              HEAP32[$754>>2] = $766;
              __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($718,$__v$i$i$i);
              __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i$i);
             }
             __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($14);
             $$0 = $641;
             break L1;
            }
           }
          } while(0);
          if ((label|0) == 144) {
           $635 = HEAP32[$628>>2]|0;
           $636 = ((($635)) + -24|0);
           $638 = $635;
           while(1) {
            $637 = ((($638)) + -24|0);
            HEAP32[$628>>2] = $637;
            __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($637);
            $$pre$i$i183 = HEAP32[$628>>2]|0;
            $639 = ($$pre$i$i183|0)==($636|0);
            if ($639) {
             break;
            } else {
             $638 = $$pre$i$i183;
            }
           }
          }
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($__v$i$i$i);
         }
        }
       }
      } while(0);
      $$0 = $first;
      break L1;
      break;
     }
     case 71:  {
      $767 = ((($first)) + 1|0);
      $768 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($767,$last,$db)|0);
      $769 = ($768|0)==($767|0);
      if ($769) {
       $$0 = $first;
       break L1;
      }
      $770 = HEAP32[$db>>2]|0;
      $771 = ((($db)) + 4|0);
      $772 = HEAP32[$771>>2]|0;
      $773 = ($770|0)==($772|0);
      if ($773) {
       $$0 = $first;
       break L1;
      }
      $774 = ((($772)) + -24|0);
      (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($774,1620)|0);
      $775 = ((($db)) + 16|0);
      $776 = HEAP32[$771>>2]|0;
      $777 = ((($776)) + -24|0);
      $778 = ((($db)) + 12|0);
      $779 = HEAP32[$778>>2]|0;
      HEAP32[$17>>2] = $779;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($16,$777,$17);
      $780 = ((($db)) + 20|0);
      $781 = HEAP32[$780>>2]|0;
      $782 = ((($db)) + 24|0);
      $783 = HEAP32[$782>>2]|0;
      $784 = ($781>>>0)<($783>>>0);
      if ($784) {
       $785 = ((($16)) + 12|0);
       $786 = ((($781)) + 4|0);
       $787 = HEAP32[$785>>2]|0;
       $788 = ((($781)) + 12|0);
       HEAP32[$788>>2] = $787;
       $789 = HEAP32[$16>>2]|0;
       HEAP32[$781>>2] = $789;
       $790 = ((($16)) + 4|0);
       $791 = HEAP32[$790>>2]|0;
       HEAP32[$786>>2] = $791;
       $792 = ((($16)) + 8|0);
       $793 = HEAP32[$792>>2]|0;
       $794 = ((($781)) + 8|0);
       HEAP32[$794>>2] = $793;
       HEAP32[$792>>2] = 0;
       HEAP32[$790>>2] = 0;
       HEAP32[$16>>2] = 0;
       $795 = HEAP32[$780>>2]|0;
       $796 = ((($795)) + 16|0);
       HEAP32[$780>>2] = $796;
      } else {
       $797 = ((($db)) + 28|0);
       $798 = HEAP32[$775>>2]|0;
       $799 = $781;
       $800 = $798;
       $801 = (($799) - ($800))|0;
       $802 = $801 >> 4;
       $803 = (($802) + 1)|0;
       $804 = ($801|0)<(-16);
       if ($804) {
        __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($775);
        // unreachable;
       }
       $805 = $783;
       $806 = (($805) - ($800))|0;
       $807 = $806 >> 4;
       $808 = ($807>>>0)<(1073741823);
       if ($808) {
        $809 = $806 >> 3;
        $810 = ($809>>>0)<($803>>>0);
        $811 = $810 ? $803 : $809;
        $$0$i$i$i71 = $811;
       } else {
        $$0$i$i$i71 = 2147483647;
       }
       __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i$i,$$0$i$i$i71,$802,$797);
       $812 = ((($__v$i$i$i)) + 8|0);
       $813 = HEAP32[$812>>2]|0;
       $814 = ((($16)) + 12|0);
       $815 = ((($813)) + 4|0);
       $816 = HEAP32[$814>>2]|0;
       $817 = ((($813)) + 12|0);
       HEAP32[$817>>2] = $816;
       $818 = HEAP32[$16>>2]|0;
       HEAP32[$813>>2] = $818;
       $819 = ((($16)) + 4|0);
       $820 = HEAP32[$819>>2]|0;
       HEAP32[$815>>2] = $820;
       $821 = ((($16)) + 8|0);
       $822 = HEAP32[$821>>2]|0;
       $823 = ((($813)) + 8|0);
       HEAP32[$823>>2] = $822;
       HEAP32[$821>>2] = 0;
       HEAP32[$819>>2] = 0;
       HEAP32[$16>>2] = 0;
       $824 = ((($813)) + 16|0);
       HEAP32[$812>>2] = $824;
       __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($775,$__v$i$i$i);
       __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i$i);
      }
      __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($16);
      $$0 = $768;
      break L1;
      break;
     }
     case 77:  {
      $825 = ($197<<24>>24)==(77);
      if ($825) {
       $826 = ((($first)) + 1|0);
       $827 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($826,$last,$db)|0);
       $828 = ($827|0)==($826|0);
       if ($828) {
        $$08$i = $first;
       } else {
        $829 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($827,$last,$db)|0);
        $830 = ($829|0)==($827|0);
        if ($830) {
         $$08$i = $first;
        } else {
         $831 = ((($db)) + 4|0);
         $832 = HEAP32[$831>>2]|0;
         $833 = HEAP32[$db>>2]|0;
         $834 = $832;
         $835 = $833;
         $836 = (($834) - ($835))|0;
         $837 = (($836|0) / 24)&-1;
         $838 = ($837>>>0)<(2);
         if ($838) {
          $$08$i = $first;
         } else {
          $839 = ((($832)) + -24|0);
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($__v$i$i$i,$839);
          $840 = HEAP32[$831>>2]|0;
          $841 = ((($840)) + -24|0);
          $843 = $840;
          while(1) {
           $842 = ((($843)) + -24|0);
           HEAP32[$831>>2] = $842;
           __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($842);
           $$pre$i$i = HEAP32[$831>>2]|0;
           $844 = ($$pre$i$i|0)==($841|0);
           if ($844) {
            break;
           } else {
            $843 = $$pre$i$i;
           }
          }
          $845 = ((($840)) + -48|0);
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($0,$845);
          $846 = ((($__v$i$i$i)) + 12|0);
          $847 = HEAP8[$846>>0]|0;
          $848 = $847 & 1;
          $849 = ($848<<24>>24)==(0);
          $850 = ((($__v$i$i$i)) + 20|0);
          $851 = HEAP32[$850>>2]|0;
          $852 = ((($846)) + 1|0);
          $853 = $849 ? $852 : $851;
          $854 = HEAP8[$853>>0]|0;
          $855 = ($854<<24>>24)==(40);
          $856 = HEAP32[$831>>2]|0;
          $857 = ((($856)) + -24|0);
          if ($855) {
           $858 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($__v$i$i$i,1606)|0);
           ;HEAP32[$3>>2]=HEAP32[$858>>2]|0;HEAP32[$3+4>>2]=HEAP32[$858+4>>2]|0;HEAP32[$3+8>>2]=HEAP32[$858+8>>2]|0;
           HEAP32[$858>>2] = 0;
           $859 = ((($858)) + 4|0);
           HEAP32[$859>>2] = 0;
           $860 = ((($858)) + 8|0);
           HEAP32[$860>>2] = 0;
           __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($4,$0);
           $861 = HEAP8[$4>>0]|0;
           $862 = $861 & 1;
           $863 = ($862<<24>>24)==(0);
           $864 = ((($4)) + 8|0);
           $865 = HEAP32[$864>>2]|0;
           $866 = ((($4)) + 1|0);
           $867 = $863 ? $866 : $865;
           $868 = ((($4)) + 4|0);
           $869 = HEAP32[$868>>2]|0;
           $870 = $861&255;
           $871 = $870 >>> 1;
           $872 = $863 ? $871 : $869;
           $873 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($3,$867,$872)|0);
           ;HEAP32[$2>>2]=HEAP32[$873>>2]|0;HEAP32[$2+4>>2]=HEAP32[$873+4>>2]|0;HEAP32[$2+8>>2]=HEAP32[$873+8>>2]|0;
           HEAP32[$873>>2] = 0;
           $874 = ((($873)) + 4|0);
           HEAP32[$874>>2] = 0;
           $875 = ((($873)) + 8|0);
           HEAP32[$875>>2] = 0;
           $876 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($2,1631)|0);
           ;HEAP32[$1>>2]=HEAP32[$876>>2]|0;HEAP32[$1+4>>2]=HEAP32[$876+4>>2]|0;HEAP32[$1+8>>2]=HEAP32[$876+8>>2]|0;
           HEAP32[$876>>2] = 0;
           $877 = ((($876)) + 4|0);
           HEAP32[$877>>2] = 0;
           $878 = ((($876)) + 8|0);
           HEAP32[$878>>2] = 0;
           $879 = HEAP8[$857>>0]|0;
           $880 = $879 & 1;
           $881 = ($880<<24>>24)==(0);
           do {
            if ($881) {
             $882 = ((($857)) + 1|0);
             HEAP8[$882>>0] = 0;
             HEAP8[$857>>0] = 0;
            } else {
             $883 = ((($856)) + -16|0);
             $884 = HEAP32[$883>>2]|0;
             HEAP8[$884>>0] = 0;
             $885 = ((($856)) + -20|0);
             HEAP32[$885>>2] = 0;
             $$pre$i$i$i$i = HEAP8[$857>>0]|0;
             $886 = $$pre$i$i$i$i & 1;
             $887 = ($886<<24>>24)==(0);
             if ($887) {
              $892 = $$pre$i$i$i$i;$901 = 10;
             } else {
              $888 = HEAP32[$857>>2]|0;
              $889 = $888 & -2;
              $phitmp$i$i$i$i$i$i$i = (($889) + -1)|0;
              $890 = $888&255;
              $892 = $890;$901 = $phitmp$i$i$i$i$i$i$i;
             }
             $891 = $892 & 1;
             $893 = ($891<<24>>24)==(0);
             if ($893) {
              $894 = $892&255;
              $895 = $894 >>> 1;
              $896 = ($892&255)<(22);
              if ($896) {
               $2569 = 1;$899 = 10;$920 = $895;
              } else {
               $897 = (($895) + 16)|0;
               $898 = $897 & 240;
               $phitmp$i2$i$i$i$i$i$i = (($898) + -1)|0;
               $2569 = 1;$899 = $phitmp$i2$i$i$i$i$i$i;$920 = $895;
              }
             } else {
              $2569 = 0;$899 = 10;$920 = 0;
             }
             $900 = ($899|0)==($901|0);
             if (!($900)) {
              $902 = ($899|0)==(10);
              if ($902) {
               $907 = ((($857)) + 1|0);
               $908 = HEAP32[$883>>2]|0;
               if ($2569) {
                $909 = $892&255;
                $910 = $909 >>> 1;
                $911 = (($910) + 1)|0;
                _memcpy(($907|0),($908|0),($911|0))|0;
                _free($908);
               } else {
                $916 = HEAP8[$908>>0]|0;
                HEAP8[$907>>0] = $916;
                _free($908);
               }
               $921 = $920 << 1;
               $922 = $921&255;
               HEAP8[$857>>0] = $922;
               break;
              }
              $903 = ($899>>>0)<=($901>>>0);
              $904 = (($899) + 1)|0;
              $905 = (_malloc($904)|0);
              $906 = ($905|0)==(0|0);
              $or$cond$i$i$i$i$i$i = $903 & $906;
              if (!($or$cond$i$i$i$i$i$i)) {
               if ($2569) {
                $912 = ((($857)) + 1|0);
                $913 = $892&255;
                $914 = $913 >>> 1;
                $915 = (($914) + 1)|0;
                _memcpy(($905|0),($912|0),($915|0))|0;
               } else {
                $917 = HEAP32[$883>>2]|0;
                $918 = HEAP8[$917>>0]|0;
                HEAP8[$905>>0] = $918;
                _free($917);
               }
               $919 = $904 | 1;
               HEAP32[$857>>2] = $919;
               HEAP32[$885>>2] = $920;
               HEAP32[$883>>2] = $905;
              }
             }
            }
           } while(0);
           ;HEAP32[$857>>2]=HEAP32[$1>>2]|0;HEAP32[$857+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$857+8>>2]=HEAP32[$1+8>>2]|0;
           HEAP32[$1>>2] = 0;
           $923 = ((($1)) + 4|0);
           HEAP32[$923>>2] = 0;
           $924 = ((($1)) + 8|0);
           HEAP32[$924>>2] = 0;
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($1);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($2);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
           $925 = HEAP32[$831>>2]|0;
           $926 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($846,0,1511)|0);
           ;HEAP32[$5>>2]=HEAP32[$926>>2]|0;HEAP32[$5+4>>2]=HEAP32[$926+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$926+8>>2]|0;
           HEAP32[$926>>2] = 0;
           $927 = ((($926)) + 4|0);
           HEAP32[$927>>2] = 0;
           $928 = ((($926)) + 8|0);
           HEAP32[$928>>2] = 0;
           $929 = ((($925)) + -12|0);
           $930 = HEAP8[$929>>0]|0;
           $931 = $930 & 1;
           $932 = ($931<<24>>24)==(0);
           do {
            if ($932) {
             $933 = ((($929)) + 1|0);
             HEAP8[$933>>0] = 0;
             HEAP8[$929>>0] = 0;
            } else {
             $934 = ((($925)) + -4|0);
             $935 = HEAP32[$934>>2]|0;
             HEAP8[$935>>0] = 0;
             $936 = ((($925)) + -8|0);
             HEAP32[$936>>2] = 0;
             $$pre$i$i$i21$i = HEAP8[$929>>0]|0;
             $937 = $$pre$i$i$i21$i & 1;
             $938 = ($937<<24>>24)==(0);
             if ($938) {
              $943 = $$pre$i$i$i21$i;$952 = 10;
             } else {
              $939 = HEAP32[$929>>2]|0;
              $940 = $939 & -2;
              $phitmp$i$i$i$i$i$i23$i = (($940) + -1)|0;
              $941 = $939&255;
              $943 = $941;$952 = $phitmp$i$i$i$i$i$i23$i;
             }
             $942 = $943 & 1;
             $944 = ($942<<24>>24)==(0);
             if ($944) {
              $945 = $943&255;
              $946 = $945 >>> 1;
              $947 = ($943&255)<(22);
              if ($947) {
               $2570 = 1;$950 = 10;$971 = $946;
              } else {
               $948 = (($946) + 16)|0;
               $949 = $948 & 240;
               $phitmp$i2$i$i$i$i$i26$i = (($949) + -1)|0;
               $2570 = 1;$950 = $phitmp$i2$i$i$i$i$i26$i;$971 = $946;
              }
             } else {
              $2570 = 0;$950 = 10;$971 = 0;
             }
             $951 = ($950|0)==($952|0);
             if (!($951)) {
              $953 = ($950|0)==(10);
              if ($953) {
               $958 = ((($929)) + 1|0);
               $959 = HEAP32[$934>>2]|0;
               if ($2570) {
                $960 = $943&255;
                $961 = $960 >>> 1;
                $962 = (($961) + 1)|0;
                _memcpy(($958|0),($959|0),($962|0))|0;
                _free($959);
               } else {
                $967 = HEAP8[$959>>0]|0;
                HEAP8[$958>>0] = $967;
                _free($959);
               }
               $972 = $971 << 1;
               $973 = $972&255;
               HEAP8[$929>>0] = $973;
               break;
              }
              $954 = ($950>>>0)<=($952>>>0);
              $955 = (($950) + 1)|0;
              $956 = (_malloc($955)|0);
              $957 = ($956|0)==(0|0);
              $or$cond$i$i$i$i$i28$i = $954 & $957;
              if (!($or$cond$i$i$i$i$i28$i)) {
               if ($2570) {
                $963 = ((($929)) + 1|0);
                $964 = $943&255;
                $965 = $964 >>> 1;
                $966 = (($965) + 1)|0;
                _memcpy(($956|0),($963|0),($966|0))|0;
               } else {
                $968 = HEAP32[$934>>2]|0;
                $969 = HEAP8[$968>>0]|0;
                HEAP8[$956>>0] = $969;
                _free($968);
               }
               $970 = $955 | 1;
               HEAP32[$929>>2] = $970;
               HEAP32[$936>>2] = $971;
               HEAP32[$934>>2] = $956;
              }
             }
            }
           } while(0);
           ;HEAP32[$929>>2]=HEAP32[$5>>2]|0;HEAP32[$929+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$929+8>>2]=HEAP32[$5+8>>2]|0;
           HEAP32[$5>>2] = 0;
           $974 = ((($5)) + 4|0);
           HEAP32[$974>>2] = 0;
           $975 = ((($5)) + 8|0);
           HEAP32[$975>>2] = 0;
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
          } else {
           $976 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($__v$i$i$i,1618)|0);
           ;HEAP32[$7>>2]=HEAP32[$976>>2]|0;HEAP32[$7+4>>2]=HEAP32[$976+4>>2]|0;HEAP32[$7+8>>2]=HEAP32[$976+8>>2]|0;
           HEAP32[$976>>2] = 0;
           $977 = ((($976)) + 4|0);
           HEAP32[$977>>2] = 0;
           $978 = ((($976)) + 8|0);
           HEAP32[$978>>2] = 0;
           __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($8,$0);
           $979 = HEAP8[$8>>0]|0;
           $980 = $979 & 1;
           $981 = ($980<<24>>24)==(0);
           $982 = ((($8)) + 8|0);
           $983 = HEAP32[$982>>2]|0;
           $984 = ((($8)) + 1|0);
           $985 = $981 ? $984 : $983;
           $986 = ((($8)) + 4|0);
           $987 = HEAP32[$986>>2]|0;
           $988 = $979&255;
           $989 = $988 >>> 1;
           $990 = $981 ? $989 : $987;
           $991 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($7,$985,$990)|0);
           ;HEAP32[$num1$i>>2]=HEAP32[$991>>2]|0;HEAP32[$num1$i+4>>2]=HEAP32[$991+4>>2]|0;HEAP32[$num1$i+8>>2]=HEAP32[$991+8>>2]|0;
           HEAP32[$991>>2] = 0;
           $992 = ((($991)) + 4|0);
           HEAP32[$992>>2] = 0;
           $993 = ((($991)) + 8|0);
           HEAP32[$993>>2] = 0;
           $994 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($num1$i,1631)|0);
           ;HEAP32[$6>>2]=HEAP32[$994>>2]|0;HEAP32[$6+4>>2]=HEAP32[$994+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$994+8>>2]|0;
           HEAP32[$994>>2] = 0;
           $995 = ((($994)) + 4|0);
           HEAP32[$995>>2] = 0;
           $996 = ((($994)) + 8|0);
           HEAP32[$996>>2] = 0;
           $997 = HEAP8[$857>>0]|0;
           $998 = $997 & 1;
           $999 = ($998<<24>>24)==(0);
           do {
            if ($999) {
             $1000 = ((($857)) + 1|0);
             HEAP8[$1000>>0] = 0;
             HEAP8[$857>>0] = 0;
            } else {
             $1001 = ((($856)) + -16|0);
             $1002 = HEAP32[$1001>>2]|0;
             HEAP8[$1002>>0] = 0;
             $1003 = ((($856)) + -20|0);
             HEAP32[$1003>>2] = 0;
             $$pre$i$i$i52$i = HEAP8[$857>>0]|0;
             $1004 = $$pre$i$i$i52$i & 1;
             $1005 = ($1004<<24>>24)==(0);
             if ($1005) {
              $1010 = $$pre$i$i$i52$i;$1019 = 10;
             } else {
              $1006 = HEAP32[$857>>2]|0;
              $1007 = $1006 & -2;
              $phitmp$i$i$i$i$i$i54$i = (($1007) + -1)|0;
              $1008 = $1006&255;
              $1010 = $1008;$1019 = $phitmp$i$i$i$i$i$i54$i;
             }
             $1009 = $1010 & 1;
             $1011 = ($1009<<24>>24)==(0);
             if ($1011) {
              $1012 = $1010&255;
              $1013 = $1012 >>> 1;
              $1014 = ($1010&255)<(22);
              if ($1014) {
               $1017 = 10;$1038 = $1013;$2571 = 1;
              } else {
               $1015 = (($1013) + 16)|0;
               $1016 = $1015 & 240;
               $phitmp$i2$i$i$i$i$i57$i = (($1016) + -1)|0;
               $1017 = $phitmp$i2$i$i$i$i$i57$i;$1038 = $1013;$2571 = 1;
              }
             } else {
              $1017 = 10;$1038 = 0;$2571 = 0;
             }
             $1018 = ($1017|0)==($1019|0);
             if (!($1018)) {
              $1020 = ($1017|0)==(10);
              if ($1020) {
               $1025 = ((($857)) + 1|0);
               $1026 = HEAP32[$1001>>2]|0;
               if ($2571) {
                $1027 = $1010&255;
                $1028 = $1027 >>> 1;
                $1029 = (($1028) + 1)|0;
                _memcpy(($1025|0),($1026|0),($1029|0))|0;
                _free($1026);
               } else {
                $1034 = HEAP8[$1026>>0]|0;
                HEAP8[$1025>>0] = $1034;
                _free($1026);
               }
               $1039 = $1038 << 1;
               $1040 = $1039&255;
               HEAP8[$857>>0] = $1040;
               break;
              }
              $1021 = ($1017>>>0)<=($1019>>>0);
              $1022 = (($1017) + 1)|0;
              $1023 = (_malloc($1022)|0);
              $1024 = ($1023|0)==(0|0);
              $or$cond$i$i$i$i$i59$i = $1021 & $1024;
              if (!($or$cond$i$i$i$i$i59$i)) {
               if ($2571) {
                $1030 = ((($857)) + 1|0);
                $1031 = $1010&255;
                $1032 = $1031 >>> 1;
                $1033 = (($1032) + 1)|0;
                _memcpy(($1023|0),($1030|0),($1033|0))|0;
               } else {
                $1035 = HEAP32[$1001>>2]|0;
                $1036 = HEAP8[$1035>>0]|0;
                HEAP8[$1023>>0] = $1036;
                _free($1035);
               }
               $1037 = $1022 | 1;
               HEAP32[$857>>2] = $1037;
               HEAP32[$1003>>2] = $1038;
               HEAP32[$1001>>2] = $1023;
              }
             }
            }
           } while(0);
           ;HEAP32[$857>>2]=HEAP32[$6>>2]|0;HEAP32[$857+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$857+8>>2]=HEAP32[$6+8>>2]|0;
           HEAP32[$6>>2] = 0;
           $1041 = ((($6)) + 4|0);
           HEAP32[$1041>>2] = 0;
           $1042 = ((($6)) + 8|0);
           HEAP32[$1042>>2] = 0;
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($num1$i);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
           $1043 = HEAP32[$831>>2]|0;
           $1044 = ((($1043)) + -12|0);
           $1045 = HEAP8[$1044>>0]|0;
           $1046 = $1045 & 1;
           $1047 = ($1046<<24>>24)==(0);
           do {
            if ($1047) {
             $1048 = ((($1044)) + 1|0);
             HEAP8[$1048>>0] = 0;
             HEAP8[$1044>>0] = 0;
            } else {
             $1049 = ((($1043)) + -4|0);
             $1050 = HEAP32[$1049>>2]|0;
             HEAP8[$1050>>0] = 0;
             $1051 = ((($1043)) + -8|0);
             HEAP32[$1051>>2] = 0;
             $$pre$i$i$i71$i = HEAP8[$1044>>0]|0;
             $1052 = $$pre$i$i$i71$i & 1;
             $1053 = ($1052<<24>>24)==(0);
             if ($1053) {
              $1058 = $$pre$i$i$i71$i;$1067 = 10;
             } else {
              $1054 = HEAP32[$1044>>2]|0;
              $1055 = $1054 & -2;
              $phitmp$i$i$i$i$i$i73$i = (($1055) + -1)|0;
              $1056 = $1054&255;
              $1058 = $1056;$1067 = $phitmp$i$i$i$i$i$i73$i;
             }
             $1057 = $1058 & 1;
             $1059 = ($1057<<24>>24)==(0);
             if ($1059) {
              $1060 = $1058&255;
              $1061 = $1060 >>> 1;
              $1062 = ($1058&255)<(22);
              if ($1062) {
               $1065 = 10;$1086 = $1061;$2572 = 1;
              } else {
               $1063 = (($1061) + 16)|0;
               $1064 = $1063 & 240;
               $phitmp$i2$i$i$i$i$i76$i = (($1064) + -1)|0;
               $1065 = $phitmp$i2$i$i$i$i$i76$i;$1086 = $1061;$2572 = 1;
              }
             } else {
              $1065 = 10;$1086 = 0;$2572 = 0;
             }
             $1066 = ($1065|0)==($1067|0);
             if (!($1066)) {
              $1068 = ($1065|0)==(10);
              if ($1068) {
               $1073 = ((($1044)) + 1|0);
               $1074 = HEAP32[$1049>>2]|0;
               if ($2572) {
                $1075 = $1058&255;
                $1076 = $1075 >>> 1;
                $1077 = (($1076) + 1)|0;
                _memcpy(($1073|0),($1074|0),($1077|0))|0;
                _free($1074);
               } else {
                $1082 = HEAP8[$1074>>0]|0;
                HEAP8[$1073>>0] = $1082;
                _free($1074);
               }
               $1087 = $1086 << 1;
               $1088 = $1087&255;
               HEAP8[$1044>>0] = $1088;
               break;
              }
              $1069 = ($1065>>>0)<=($1067>>>0);
              $1070 = (($1065) + 1)|0;
              $1071 = (_malloc($1070)|0);
              $1072 = ($1071|0)==(0|0);
              $or$cond$i$i$i$i$i78$i = $1069 & $1072;
              if (!($or$cond$i$i$i$i$i78$i)) {
               if ($2572) {
                $1078 = ((($1044)) + 1|0);
                $1079 = $1058&255;
                $1080 = $1079 >>> 1;
                $1081 = (($1080) + 1)|0;
                _memcpy(($1071|0),($1078|0),($1081|0))|0;
               } else {
                $1083 = HEAP32[$1049>>2]|0;
                $1084 = HEAP8[$1083>>0]|0;
                HEAP8[$1071>>0] = $1084;
                _free($1083);
               }
               $1085 = $1070 | 1;
               HEAP32[$1044>>2] = $1085;
               HEAP32[$1051>>2] = $1086;
               HEAP32[$1049>>2] = $1071;
              }
             }
            }
           } while(0);
           ;HEAP32[$1044>>2]=HEAP32[$846>>2]|0;HEAP32[$1044+4>>2]=HEAP32[$846+4>>2]|0;HEAP32[$1044+8>>2]=HEAP32[$846+8>>2]|0;
           HEAP32[$846>>2] = 0;
           $1089 = ((($846)) + 4|0);
           HEAP32[$1089>>2] = 0;
           $1090 = ((($846)) + 8|0);
           HEAP32[$1090>>2] = 0;
          }
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($0);
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($__v$i$i$i);
          $$08$i = $829;
         }
        }
       }
      } else {
       $$08$i = $first;
      }
      $1091 = ($$08$i|0)==($first|0);
      if ($1091) {
       $$0 = $first;
       break L1;
      }
      $1092 = HEAP32[$db>>2]|0;
      $1093 = ((($db)) + 4|0);
      $1094 = HEAP32[$1093>>2]|0;
      $1095 = ($1092|0)==($1094|0);
      if ($1095) {
       $$0 = $first;
       break L1;
      }
      $1096 = ((($db)) + 16|0);
      $1097 = ((($1094)) + -24|0);
      $1098 = ((($db)) + 12|0);
      $1099 = HEAP32[$1098>>2]|0;
      HEAP32[$19>>2] = $1099;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($18,$1097,$19);
      $1100 = ((($db)) + 20|0);
      $1101 = HEAP32[$1100>>2]|0;
      $1102 = ((($db)) + 24|0);
      $1103 = HEAP32[$1102>>2]|0;
      $1104 = ($1101>>>0)<($1103>>>0);
      if ($1104) {
       $1105 = ((($18)) + 12|0);
       $1106 = ((($1101)) + 4|0);
       $1107 = HEAP32[$1105>>2]|0;
       $1108 = ((($1101)) + 12|0);
       HEAP32[$1108>>2] = $1107;
       $1109 = HEAP32[$18>>2]|0;
       HEAP32[$1101>>2] = $1109;
       $1110 = ((($18)) + 4|0);
       $1111 = HEAP32[$1110>>2]|0;
       HEAP32[$1106>>2] = $1111;
       $1112 = ((($18)) + 8|0);
       $1113 = HEAP32[$1112>>2]|0;
       $1114 = ((($1101)) + 8|0);
       HEAP32[$1114>>2] = $1113;
       HEAP32[$1112>>2] = 0;
       HEAP32[$1110>>2] = 0;
       HEAP32[$18>>2] = 0;
       $1115 = HEAP32[$1100>>2]|0;
       $1116 = ((($1115)) + 16|0);
       HEAP32[$1100>>2] = $1116;
      } else {
       $1117 = ((($db)) + 28|0);
       $1118 = HEAP32[$1096>>2]|0;
       $1119 = $1101;
       $1120 = $1118;
       $1121 = (($1119) - ($1120))|0;
       $1122 = $1121 >> 4;
       $1123 = (($1122) + 1)|0;
       $1124 = ($1121|0)<(-16);
       if ($1124) {
        __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($1096);
        // unreachable;
       }
       $1125 = $1103;
       $1126 = (($1125) - ($1120))|0;
       $1127 = $1126 >> 4;
       $1128 = ($1127>>>0)<(1073741823);
       if ($1128) {
        $1129 = $1126 >> 3;
        $1130 = ($1129>>>0)<($1123>>>0);
        $1131 = $1130 ? $1123 : $1129;
        $$0$i$i$i76 = $1131;
       } else {
        $$0$i$i$i76 = 2147483647;
       }
       __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i$i,$$0$i$i$i76,$1122,$1117);
       $1132 = ((($__v$i$i$i)) + 8|0);
       $1133 = HEAP32[$1132>>2]|0;
       $1134 = ((($18)) + 12|0);
       $1135 = ((($1133)) + 4|0);
       $1136 = HEAP32[$1134>>2]|0;
       $1137 = ((($1133)) + 12|0);
       HEAP32[$1137>>2] = $1136;
       $1138 = HEAP32[$18>>2]|0;
       HEAP32[$1133>>2] = $1138;
       $1139 = ((($18)) + 4|0);
       $1140 = HEAP32[$1139>>2]|0;
       HEAP32[$1135>>2] = $1140;
       $1141 = ((($18)) + 8|0);
       $1142 = HEAP32[$1141>>2]|0;
       $1143 = ((($1133)) + 8|0);
       HEAP32[$1143>>2] = $1142;
       HEAP32[$1141>>2] = 0;
       HEAP32[$1139>>2] = 0;
       HEAP32[$18>>2] = 0;
       $1144 = ((($1133)) + 16|0);
       HEAP32[$1132>>2] = $1144;
       __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($1096,$__v$i$i$i);
       __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i$i);
      }
      __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($18);
      $$0 = $$08$i;
      break L1;
      break;
     }
     case 79:  {
      $1145 = ((($db)) + 4|0);
      $1146 = HEAP32[$1145>>2]|0;
      $1147 = HEAP32[$db>>2]|0;
      $1148 = $1146;
      $1149 = $1147;
      $1150 = (($1148) - ($1149))|0;
      $1151 = (($1150|0) / 24)&-1;
      $1152 = ((($first)) + 1|0);
      $1153 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($1152,$last,$db)|0);
      $1154 = HEAP32[$1145>>2]|0;
      $1155 = HEAP32[$db>>2]|0;
      $1156 = $1154;
      $1157 = $1155;
      $1158 = (($1156) - ($1157))|0;
      $1159 = (($1158|0) / 24)&-1;
      $1160 = ($1153|0)==($1152|0);
      if ($1160) {
       $$0 = $first;
       break L1;
      }
      $1161 = ((($db)) + 16|0);
      $1162 = ((($db)) + 12|0);
      $1163 = HEAP32[$1162>>2]|0;
      $1164 = $1163;
      $1165 = ((($db)) + 20|0);
      $1166 = HEAP32[$1165>>2]|0;
      $1167 = ((($db)) + 24|0);
      $1168 = HEAP32[$1167>>2]|0;
      $1169 = ($1166>>>0)<($1168>>>0);
      if ($1169) {
       HEAP32[$1166>>2] = 0;
       $1170 = ((($1166)) + 4|0);
       HEAP32[$1170>>2] = 0;
       $1171 = ((($1166)) + 8|0);
       HEAP32[$1171>>2] = 0;
       $1172 = ((($1166)) + 12|0);
       HEAP32[$1172>>2] = $1164;
       $1173 = HEAP32[$1165>>2]|0;
       $1174 = ((($1173)) + 16|0);
       HEAP32[$1165>>2] = $1174;
      } else {
       $1175 = ((($db)) + 28|0);
       $1176 = HEAP32[$1161>>2]|0;
       $1177 = $1166;
       $1178 = $1176;
       $1179 = (($1177) - ($1178))|0;
       $1180 = $1179 >> 4;
       $1181 = (($1180) + 1)|0;
       $1182 = ($1179|0)<(-16);
       if ($1182) {
        __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($1161);
        // unreachable;
       }
       $1183 = $1168;
       $1184 = (($1183) - ($1178))|0;
       $1185 = $1184 >> 4;
       $1186 = ($1185>>>0)<(1073741823);
       if ($1186) {
        $1187 = $1184 >> 3;
        $1188 = ($1187>>>0)<($1181>>>0);
        $1189 = $1188 ? $1181 : $1187;
        $$0$i$i$i81 = $1189;
       } else {
        $$0$i$i$i81 = 2147483647;
       }
       __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i$i,$$0$i$i$i81,$1180,$1175);
       $1190 = ((($__v$i$i$i)) + 8|0);
       $1191 = HEAP32[$1190>>2]|0;
       HEAP32[$1191>>2] = 0;
       $1192 = ((($1191)) + 4|0);
       HEAP32[$1192>>2] = 0;
       $1193 = ((($1191)) + 8|0);
       HEAP32[$1193>>2] = 0;
       $1194 = ((($1191)) + 12|0);
       HEAP32[$1194>>2] = $1164;
       $1195 = ((($1191)) + 16|0);
       HEAP32[$1190>>2] = $1195;
       __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($1161,$__v$i$i$i);
       __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i$i);
      }
      $1196 = ((($20)) + 4|0);
      $1197 = ((($20)) + 8|0);
      $1198 = ((($20)) + 1|0);
      $1199 = ((($__v$i$i$i)) + 8|0);
      $1200 = ($1151>>>0)<($1159>>>0);
      if ($1200) {
       $k5$0533 = $1151;
      } else {
       $$0 = $1153;
       break L1;
      }
      while(1) {
       $1201 = HEAP32[$db>>2]|0;
       $1202 = (((($1201) + (($k5$0533*24)|0)|0)) + 12|0);
       $1203 = HEAP8[$1202>>0]|0;
       $1204 = $1203 & 1;
       $1205 = ($1204<<24>>24)==(0);
       $1206 = (((($1201) + (($k5$0533*24)|0)|0)) + 16|0);
       $1207 = HEAP32[$1206>>2]|0;
       $1208 = $1203&255;
       $1209 = $1208 >>> 1;
       $1210 = $1205 ? $1209 : $1207;
       $1211 = (((($1201) + (($k5$0533*24)|0)|0)) + 20|0);
       $1212 = HEAP32[$1211>>2]|0;
       $1213 = ((($1202)) + 1|0);
       $1214 = $1205 ? $1213 : $1212;
       $1215 = ($1210>>>0)<(2);
       $1216 = $1215 ? $1210 : 2;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($20,$1214,$1216);
       $1217 = HEAP8[$20>>0]|0;
       $1218 = $1217 & 1;
       $1219 = ($1218<<24>>24)==(0);
       $1220 = HEAP32[$1196>>2]|0;
       $1221 = $1217&255;
       $1222 = $1221 >>> 1;
       $1223 = $1219 ? $1222 : $1220;
       $1224 = HEAP32[$1197>>2]|0;
       $1225 = $1219 ? $1198 : $1224;
       $1226 = ($1223>>>0)>(2);
       $1227 = $1226 ? 2 : $1223;
       $1228 = (_memcmp($1225,1588,$1227)|0);
       $1229 = ($1228|0)==(0);
       $1230 = ($1223>>>0)<(2);
       $$$i$i$i = $1226&1;
       $$$$i$i$i = $1230 ? -1 : $$$i$i$i;
       $1231 = $1229 ? $$$$i$i$i : $1228;
       $1232 = ($1231|0)==(0);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($20);
       $1233 = HEAP32[$db>>2]|0;
       if ($1232) {
        $1234 = (($1233) + (($k5$0533*24)|0)|0);
        (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($1234,1508)|0);
        $1235 = HEAP32[$db>>2]|0;
        $1236 = (((($1235) + (($k5$0533*24)|0)|0)) + 12|0);
        (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($1236,0,1511)|0);
       } else {
        $1237 = (((($1233) + (($k5$0533*24)|0)|0)) + 12|0);
        $1238 = HEAP8[$1237>>0]|0;
        $1239 = $1238 & 1;
        $1240 = ($1239<<24>>24)==(0);
        if ($1240) {
         $1243 = ((($1237)) + 1|0);
         $1245 = $1243;
        } else {
         $1241 = (((($1233) + (($k5$0533*24)|0)|0)) + 20|0);
         $1242 = HEAP32[$1241>>2]|0;
         $1245 = $1242;
        }
        $1244 = HEAP8[$1245>>0]|0;
        $1246 = ($1244<<24>>24)==(40);
        if ($1246) {
         $1247 = (($1233) + (($k5$0533*24)|0)|0);
         (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($1247,1606)|0);
         $1248 = HEAP32[$db>>2]|0;
         $1249 = (((($1248) + (($k5$0533*24)|0)|0)) + 12|0);
         (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($1249,0,1511)|0);
        }
       }
       $1250 = HEAP32[$db>>2]|0;
       $1251 = (($1250) + (($k5$0533*24)|0)|0);
       (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($1251,1635)|0);
       $1252 = HEAP32[$1165>>2]|0;
       $1253 = ((($1252)) + -16|0);
       $1254 = HEAP32[$db>>2]|0;
       $1255 = (($1254) + (($k5$0533*24)|0)|0);
       $1256 = ((($1252)) + -12|0);
       $1257 = HEAP32[$1256>>2]|0;
       $1258 = ((($1252)) + -8|0);
       $1259 = HEAP32[$1258>>2]|0;
       $1260 = ($1257|0)==($1259|0);
       if ($1260) {
        $1265 = ((($1252)) + -4|0);
        $1266 = HEAP32[$1253>>2]|0;
        $1267 = $1257;
        $1268 = $1266;
        $1269 = (($1267) - ($1268))|0;
        $1270 = (($1269|0) / 24)&-1;
        $1271 = (($1270) + 1)|0;
        $1272 = ($1269|0)<(-24);
        if ($1272) {
         $$lcssa667 = $1253;
         break;
        }
        $1273 = ($1270>>>0)<(1073741823);
        if ($1273) {
         $1274 = $1270 << 1;
         $1275 = ($1274>>>0)<($1271>>>0);
         $1276 = $1275 ? $1271 : $1274;
         $$0$i$i$i87 = $1276;
        } else {
         $$0$i$i$i87 = 2147483647;
        }
        __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i$i,$$0$i$i$i87,$1270,$1265);
        $1277 = HEAP32[$1199>>2]|0;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($1277,$1255);
        $1278 = ((($1277)) + 12|0);
        $1279 = (((($1254) + (($k5$0533*24)|0)|0)) + 12|0);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($1278,$1279);
        $1280 = ((($1277)) + 24|0);
        HEAP32[$1199>>2] = $1280;
        __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($1253,$__v$i$i$i);
        __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i$i);
       } else {
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($1257,$1255);
        $1261 = ((($1257)) + 12|0);
        $1262 = (((($1254) + (($k5$0533*24)|0)|0)) + 12|0);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($1261,$1262);
        $1263 = HEAP32[$1256>>2]|0;
        $1264 = ((($1263)) + 24|0);
        HEAP32[$1256>>2] = $1264;
       }
       $1281 = (($k5$0533) + 1)|0;
       $1282 = ($1281>>>0)<($1159>>>0);
       if ($1282) {
        $k5$0533 = $1281;
       } else {
        $$0 = $1153;
        break L1;
       }
      }
      __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($$lcssa667);
      // unreachable;
      break;
     }
     case 80:  {
      $1283 = ((($db)) + 4|0);
      $1284 = HEAP32[$1283>>2]|0;
      $1285 = HEAP32[$db>>2]|0;
      $1286 = $1284;
      $1287 = $1285;
      $1288 = (($1286) - ($1287))|0;
      $1289 = (($1288|0) / 24)&-1;
      $1290 = ((($first)) + 1|0);
      $1291 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($1290,$last,$db)|0);
      $1292 = HEAP32[$1283>>2]|0;
      $1293 = HEAP32[$db>>2]|0;
      $1294 = $1292;
      $1295 = $1293;
      $1296 = (($1294) - ($1295))|0;
      $1297 = (($1296|0) / 24)&-1;
      $1298 = ($1291|0)==($1290|0);
      if ($1298) {
       $$0 = $first;
       break L1;
      }
      $1299 = ((($db)) + 16|0);
      $1300 = ((($db)) + 12|0);
      $1301 = HEAP32[$1300>>2]|0;
      $1302 = $1301;
      $1303 = ((($db)) + 20|0);
      $1304 = HEAP32[$1303>>2]|0;
      $1305 = ((($db)) + 24|0);
      $1306 = HEAP32[$1305>>2]|0;
      $1307 = ($1304>>>0)<($1306>>>0);
      if ($1307) {
       HEAP32[$1304>>2] = 0;
       $1308 = ((($1304)) + 4|0);
       HEAP32[$1308>>2] = 0;
       $1309 = ((($1304)) + 8|0);
       HEAP32[$1309>>2] = 0;
       $1310 = ((($1304)) + 12|0);
       HEAP32[$1310>>2] = $1302;
       $1311 = HEAP32[$1303>>2]|0;
       $1312 = ((($1311)) + 16|0);
       HEAP32[$1303>>2] = $1312;
      } else {
       $1313 = ((($db)) + 28|0);
       $1314 = HEAP32[$1299>>2]|0;
       $1315 = $1304;
       $1316 = $1314;
       $1317 = (($1315) - ($1316))|0;
       $1318 = $1317 >> 4;
       $1319 = (($1318) + 1)|0;
       $1320 = ($1317|0)<(-16);
       if ($1320) {
        __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($1299);
        // unreachable;
       }
       $1321 = $1306;
       $1322 = (($1321) - ($1316))|0;
       $1323 = $1322 >> 4;
       $1324 = ($1323>>>0)<(1073741823);
       if ($1324) {
        $1325 = $1322 >> 3;
        $1326 = ($1325>>>0)<($1319>>>0);
        $1327 = $1326 ? $1319 : $1325;
        $$0$i$i$i95 = $1327;
       } else {
        $$0$i$i$i95 = 2147483647;
       }
       __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i$i,$$0$i$i$i95,$1318,$1313);
       $1328 = ((($__v$i$i$i)) + 8|0);
       $1329 = HEAP32[$1328>>2]|0;
       HEAP32[$1329>>2] = 0;
       $1330 = ((($1329)) + 4|0);
       HEAP32[$1330>>2] = 0;
       $1331 = ((($1329)) + 8|0);
       HEAP32[$1331>>2] = 0;
       $1332 = ((($1329)) + 12|0);
       HEAP32[$1332>>2] = $1302;
       $1333 = ((($1329)) + 16|0);
       HEAP32[$1328>>2] = $1333;
       __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($1299,$__v$i$i$i);
       __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i$i);
      }
      $1334 = ((($21)) + 4|0);
      $1335 = ((($21)) + 8|0);
      $1336 = ((($21)) + 1|0);
      $1337 = ((($22)) + 4|0);
      $1338 = ((($22)) + 8|0);
      $1339 = ((($22)) + 1|0);
      $1340 = ((($__v$i$i$i)) + 8|0);
      $1341 = ($1289>>>0)<($1297>>>0);
      if ($1341) {
       $k8$0536 = $1289;
      } else {
       $$0 = $1291;
       break L1;
      }
      while(1) {
       $1342 = HEAP32[$db>>2]|0;
       $1343 = (((($1342) + (($k8$0536*24)|0)|0)) + 12|0);
       $1344 = HEAP8[$1343>>0]|0;
       $1345 = $1344 & 1;
       $1346 = ($1345<<24>>24)==(0);
       $1347 = (((($1342) + (($k8$0536*24)|0)|0)) + 16|0);
       $1348 = HEAP32[$1347>>2]|0;
       $1349 = $1344&255;
       $1350 = $1349 >>> 1;
       $1351 = $1346 ? $1350 : $1348;
       $1352 = (((($1342) + (($k8$0536*24)|0)|0)) + 20|0);
       $1353 = HEAP32[$1352>>2]|0;
       $1354 = ((($1343)) + 1|0);
       $1355 = $1346 ? $1354 : $1353;
       $1356 = ($1351>>>0)<(2);
       $1357 = $1356 ? $1351 : 2;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($21,$1355,$1357);
       $1358 = HEAP8[$21>>0]|0;
       $1359 = $1358 & 1;
       $1360 = ($1359<<24>>24)==(0);
       $1361 = HEAP32[$1334>>2]|0;
       $1362 = $1358&255;
       $1363 = $1362 >>> 1;
       $1364 = $1360 ? $1363 : $1361;
       $1365 = HEAP32[$1335>>2]|0;
       $1366 = $1360 ? $1336 : $1365;
       $1367 = ($1364>>>0)>(2);
       $1368 = $1367 ? 2 : $1364;
       $1369 = (_memcmp($1366,1588,$1368)|0);
       $1370 = ($1369|0)==(0);
       $1371 = ($1364>>>0)<(2);
       $$$i$i$i99 = $1367&1;
       $$$$i$i$i100 = $1371 ? -1 : $$$i$i$i99;
       $1372 = $1370 ? $$$$i$i$i100 : $1369;
       $1373 = ($1372|0)==(0);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($21);
       $1374 = HEAP32[$db>>2]|0;
       if ($1373) {
        $1375 = (($1374) + (($k8$0536*24)|0)|0);
        (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($1375,1508)|0);
        $1376 = HEAP32[$db>>2]|0;
        $1377 = (((($1376) + (($k8$0536*24)|0)|0)) + 12|0);
        (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($1377,0,1511)|0);
       } else {
        $1378 = (((($1374) + (($k8$0536*24)|0)|0)) + 12|0);
        $1379 = HEAP8[$1378>>0]|0;
        $1380 = $1379 & 1;
        $1381 = ($1380<<24>>24)==(0);
        if ($1381) {
         $1384 = ((($1378)) + 1|0);
         $1386 = $1384;
        } else {
         $1382 = (((($1374) + (($k8$0536*24)|0)|0)) + 20|0);
         $1383 = HEAP32[$1382>>2]|0;
         $1386 = $1383;
        }
        $1385 = HEAP8[$1386>>0]|0;
        $1387 = ($1385<<24>>24)==(40);
        if ($1387) {
         $1388 = (($1374) + (($k8$0536*24)|0)|0);
         (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($1388,1606)|0);
         $1389 = HEAP32[$db>>2]|0;
         $1390 = (((($1389) + (($k8$0536*24)|0)|0)) + 12|0);
         (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($1390,0,1511)|0);
        }
       }
       $1391 = HEAP8[$1290>>0]|0;
       $1392 = ($1391<<24>>24)==(85);
       $1393 = HEAP32[$db>>2]|0;
       $1394 = (($1393) + (($k8$0536*24)|0)|0);
       do {
        if ($1392) {
         $1395 = HEAP8[$1394>>0]|0;
         $1396 = $1395 & 1;
         $1397 = ($1396<<24>>24)==(0);
         $1398 = (((($1393) + (($k8$0536*24)|0)|0)) + 4|0);
         $1399 = HEAP32[$1398>>2]|0;
         $1400 = $1395&255;
         $1401 = $1400 >>> 1;
         $1402 = $1397 ? $1401 : $1399;
         $1403 = (((($1393) + (($k8$0536*24)|0)|0)) + 8|0);
         $1404 = HEAP32[$1403>>2]|0;
         $1405 = ((($1394)) + 1|0);
         $1406 = $1397 ? $1405 : $1404;
         $1407 = ($1402>>>0)<(12);
         $1408 = $1407 ? $1402 : 12;
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($22,$1406,$1408);
         $1409 = HEAP8[$22>>0]|0;
         $1410 = $1409 & 1;
         $1411 = ($1410<<24>>24)==(0);
         $1412 = HEAP32[$1337>>2]|0;
         $1413 = $1409&255;
         $1414 = $1413 >>> 1;
         $1415 = $1411 ? $1414 : $1412;
         $1416 = HEAP32[$1338>>2]|0;
         $1417 = $1411 ? $1339 : $1416;
         $1418 = ($1415>>>0)>(12);
         $1419 = $1418 ? 12 : $1415;
         $1420 = (_memcmp($1417,1638,$1419)|0);
         $1421 = ($1420|0)==(0);
         $1422 = ($1415>>>0)<(12);
         $$$i$i$i$i = $1418&1;
         $$$$i$i$i$i = $1422 ? -1 : $$$i$i$i$i;
         $1423 = $1421 ? $$$$i$i$i$i : $1420;
         $1424 = ($1423|0)==(0);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($22);
         $1425 = HEAP32[$db>>2]|0;
         $1426 = (($1425) + (($k8$0536*24)|0)|0);
         if ($1424) {
          $1428 = HEAP8[$1426>>0]|0;
          $1429 = $1428 & 1;
          $1430 = ($1429<<24>>24)==(0);
          if ($1430) {
           $1431 = $1428&255;
           $1432 = $1431 >>> 1;
           $1433 = ($1432>>>0)<(11);
           $1434 = $1433 ? $1432 : 11;
           $1443 = $1434;$1444 = $1432;$1446 = 10;$1449 = $1428;
          } else {
           $1435 = (((($1425) + (($k8$0536*24)|0)|0)) + 4|0);
           $1436 = HEAP32[$1435>>2]|0;
           $1437 = ($1436>>>0)<(11);
           $1438 = $1437 ? $1436 : 11;
           $1439 = HEAP32[$1426>>2]|0;
           $1440 = $1439 & -2;
           $phitmp$i$i$i = (($1440) + -1)|0;
           $1441 = $1439&255;
           $1443 = $1438;$1444 = $1436;$1446 = $phitmp$i$i$i;$1449 = $1441;
          }
          $1442 = (($1443) - ($1444))|0;
          $1445 = (($1442) + ($1446))|0;
          $1447 = ($1445>>>0)<(2);
          if ($1447) {
           $1483 = (2 - ($1443))|0;
           $1484 = (($1483) + ($1444))|0;
           $1485 = (($1484) - ($1446))|0;
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE21__grow_by_and_replaceEjjjjjjPKc($1426,$1446,$1485,$1444,0,$1443,2,1653);
           break;
          }
          $1448 = $1449 & 1;
          $1450 = ($1448<<24>>24)==(0);
          if ($1450) {
           $1453 = ((($1426)) + 1|0);
           $1458 = $1453;
          } else {
           $1451 = (((($1425) + (($k8$0536*24)|0)|0)) + 8|0);
           $1452 = HEAP32[$1451>>2]|0;
           $1458 = $1452;
          }
          $1454 = ($1443|0)==(2);
          do {
           if ($1454) {
            $$1$i$i = 0;$$12$i$i = 1653;$$14$i$i = 2;$2573 = 2;
            label = 339;
           } else {
            $1455 = (($1444) - ($1443))|0;
            $1456 = ($1444|0)==($1443|0);
            if ($1456) {
             $$1$i$i = 0;$$12$i$i = 1653;$$14$i$i = 2;$2573 = $1443;
             label = 339;
            } else {
             $1457 = ($1443>>>0)>(2);
             if ($1457) {
              HEAP8[$1458>>0]=25705&255;HEAP8[$1458+1>>0]=25705>>8;
              $1459 = ((($1458)) + 2|0);
              $1460 = (($1458) + ($1443)|0);
              _memmove(($1459|0),($1460|0),($1455|0))|0;
              $$2$i$i = 2;$1474 = $1443;
              break;
             }
             $1461 = ($1458>>>0)<(1653>>>0);
             $1462 = (($1458) + ($1444)|0);
             $1463 = ($1462>>>0)>(1653>>>0);
             $or$cond$i$i = $1461 & $1463;
             do {
              if ($or$cond$i$i) {
               $1464 = (($1458) + ($1443)|0);
               $1465 = ($1464>>>0)>(1653>>>0);
               if ($1465) {
                _memcpy(($1458|0),(1653|0),($1443|0))|0;
                $1468 = (2 - ($1443))|0;
                $$0$i$i = $1443;$$01$i$i = (1655);$$03$i$i = $1468;$1470 = 0;
                break;
               } else {
                $1466 = (2 - ($1443))|0;
                $1467 = (1653 + ($1466)|0);
                $$0$i$i = 0;$$01$i$i = $1467;$$03$i$i = 2;$1470 = $1443;
                break;
               }
              } else {
               $$0$i$i = 0;$$01$i$i = 1653;$$03$i$i = 2;$1470 = $1443;
              }
             } while(0);
             $$sum$i$i = (($$0$i$i) + ($$03$i$i))|0;
             $1469 = (($1458) + ($$sum$i$i)|0);
             $$sum1$i$i = (($$0$i$i) + ($1470))|0;
             $1471 = (($1458) + ($$sum1$i$i)|0);
             _memmove(($1469|0),($1471|0),($1455|0))|0;
             $$1$i$i = $$0$i$i;$$12$i$i = $$01$i$i;$$14$i$i = $$03$i$i;$2573 = $1470;
             label = 339;
            }
           }
          } while(0);
          if ((label|0) == 339) {
           label = 0;
           $1472 = (($1458) + ($$1$i$i)|0);
           _memmove(($1472|0),($$12$i$i|0),($$14$i$i|0))|0;
           $$2$i$i = $$14$i$i;$1474 = $2573;
          }
          $1473 = (($$2$i$i) - ($1474))|0;
          $1475 = (($1473) + ($1444))|0;
          $1476 = HEAP8[$1426>>0]|0;
          $1477 = $1476 & 1;
          $1478 = ($1477<<24>>24)==(0);
          if ($1478) {
           $1480 = $1475 << 1;
           $1481 = $1480&255;
           HEAP8[$1426>>0] = $1481;
          } else {
           $1479 = (((($1425) + (($k8$0536*24)|0)|0)) + 4|0);
           HEAP32[$1479>>2] = $1475;
          }
          $1482 = (($1458) + ($1475)|0);
          HEAP8[$1482>>0] = 0;
         } else {
          $1427 = $1426;
          label = 322;
         }
        } else {
         $1427 = $1394;
         label = 322;
        }
       } while(0);
       if ((label|0) == 322) {
        label = 0;
        (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($1427,1651)|0);
       }
       $1486 = HEAP32[$1303>>2]|0;
       $1487 = ((($1486)) + -16|0);
       $1488 = HEAP32[$db>>2]|0;
       $1489 = (($1488) + (($k8$0536*24)|0)|0);
       $1490 = ((($1486)) + -12|0);
       $1491 = HEAP32[$1490>>2]|0;
       $1492 = ((($1486)) + -8|0);
       $1493 = HEAP32[$1492>>2]|0;
       $1494 = ($1491|0)==($1493|0);
       if ($1494) {
        $1499 = ((($1486)) + -4|0);
        $1500 = HEAP32[$1487>>2]|0;
        $1501 = $1491;
        $1502 = $1500;
        $1503 = (($1501) - ($1502))|0;
        $1504 = (($1503|0) / 24)&-1;
        $1505 = (($1504) + 1)|0;
        $1506 = ($1503|0)<(-24);
        if ($1506) {
         $$lcssa674 = $1487;
         break;
        }
        $1507 = ($1504>>>0)<(1073741823);
        if ($1507) {
         $1508 = $1504 << 1;
         $1509 = ($1508>>>0)<($1505>>>0);
         $1510 = $1509 ? $1505 : $1508;
         $$0$i$i$i105 = $1510;
        } else {
         $$0$i$i$i105 = 2147483647;
        }
        __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i$i,$$0$i$i$i105,$1504,$1499);
        $1511 = HEAP32[$1340>>2]|0;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($1511,$1489);
        $1512 = ((($1511)) + 12|0);
        $1513 = (((($1488) + (($k8$0536*24)|0)|0)) + 12|0);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($1512,$1513);
        $1514 = ((($1511)) + 24|0);
        HEAP32[$1340>>2] = $1514;
        __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($1487,$__v$i$i$i);
        __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i$i);
       } else {
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($1491,$1489);
        $1495 = ((($1491)) + 12|0);
        $1496 = (((($1488) + (($k8$0536*24)|0)|0)) + 12|0);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($1495,$1496);
        $1497 = HEAP32[$1490>>2]|0;
        $1498 = ((($1497)) + 24|0);
        HEAP32[$1490>>2] = $1498;
       }
       $1515 = (($k8$0536) + 1)|0;
       $1516 = ($1515>>>0)<($1297>>>0);
       if ($1516) {
        $k8$0536 = $1515;
       } else {
        $$0 = $1291;
        break L1;
       }
      }
      __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($$lcssa674);
      // unreachable;
      break;
     }
     case 82:  {
      $1517 = ((($db)) + 4|0);
      $1518 = HEAP32[$1517>>2]|0;
      $1519 = HEAP32[$db>>2]|0;
      $1520 = $1518;
      $1521 = $1519;
      $1522 = (($1520) - ($1521))|0;
      $1523 = (($1522|0) / 24)&-1;
      $1524 = ((($first)) + 1|0);
      $1525 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($1524,$last,$db)|0);
      $1526 = HEAP32[$1517>>2]|0;
      $1527 = HEAP32[$db>>2]|0;
      $1528 = $1526;
      $1529 = $1527;
      $1530 = (($1528) - ($1529))|0;
      $1531 = (($1530|0) / 24)&-1;
      $1532 = ($1525|0)==($1524|0);
      if ($1532) {
       $$0 = $first;
       break L1;
      }
      $1533 = ((($db)) + 16|0);
      $1534 = ((($db)) + 12|0);
      $1535 = HEAP32[$1534>>2]|0;
      $1536 = $1535;
      $1537 = ((($db)) + 20|0);
      $1538 = HEAP32[$1537>>2]|0;
      $1539 = ((($db)) + 24|0);
      $1540 = HEAP32[$1539>>2]|0;
      $1541 = ($1538>>>0)<($1540>>>0);
      if ($1541) {
       HEAP32[$1538>>2] = 0;
       $1542 = ((($1538)) + 4|0);
       HEAP32[$1542>>2] = 0;
       $1543 = ((($1538)) + 8|0);
       HEAP32[$1543>>2] = 0;
       $1544 = ((($1538)) + 12|0);
       HEAP32[$1544>>2] = $1536;
       $1545 = HEAP32[$1537>>2]|0;
       $1546 = ((($1545)) + 16|0);
       HEAP32[$1537>>2] = $1546;
      } else {
       $1547 = ((($db)) + 28|0);
       $1548 = HEAP32[$1533>>2]|0;
       $1549 = $1538;
       $1550 = $1548;
       $1551 = (($1549) - ($1550))|0;
       $1552 = $1551 >> 4;
       $1553 = (($1552) + 1)|0;
       $1554 = ($1551|0)<(-16);
       if ($1554) {
        __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($1533);
        // unreachable;
       }
       $1555 = $1540;
       $1556 = (($1555) - ($1550))|0;
       $1557 = $1556 >> 4;
       $1558 = ($1557>>>0)<(1073741823);
       if ($1558) {
        $1559 = $1556 >> 3;
        $1560 = ($1559>>>0)<($1553>>>0);
        $1561 = $1560 ? $1553 : $1559;
        $$0$i$i$i113 = $1561;
       } else {
        $$0$i$i$i113 = 2147483647;
       }
       __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i$i,$$0$i$i$i113,$1552,$1547);
       $1562 = ((($__v$i$i$i)) + 8|0);
       $1563 = HEAP32[$1562>>2]|0;
       HEAP32[$1563>>2] = 0;
       $1564 = ((($1563)) + 4|0);
       HEAP32[$1564>>2] = 0;
       $1565 = ((($1563)) + 8|0);
       HEAP32[$1565>>2] = 0;
       $1566 = ((($1563)) + 12|0);
       HEAP32[$1566>>2] = $1536;
       $1567 = ((($1563)) + 16|0);
       HEAP32[$1562>>2] = $1567;
       __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($1533,$__v$i$i$i);
       __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i$i);
      }
      $1568 = ((($23)) + 4|0);
      $1569 = ((($23)) + 8|0);
      $1570 = ((($23)) + 1|0);
      $1571 = ((($__v$i$i$i)) + 8|0);
      $1572 = ($1523>>>0)<($1531>>>0);
      if ($1572) {
       $k11$0540 = $1523;
      } else {
       $$0 = $1525;
       break L1;
      }
      while(1) {
       $1573 = HEAP32[$db>>2]|0;
       $1574 = (((($1573) + (($k11$0540*24)|0)|0)) + 12|0);
       $1575 = HEAP8[$1574>>0]|0;
       $1576 = $1575 & 1;
       $1577 = ($1576<<24>>24)==(0);
       $1578 = (((($1573) + (($k11$0540*24)|0)|0)) + 16|0);
       $1579 = HEAP32[$1578>>2]|0;
       $1580 = $1575&255;
       $1581 = $1580 >>> 1;
       $1582 = $1577 ? $1581 : $1579;
       $1583 = (((($1573) + (($k11$0540*24)|0)|0)) + 20|0);
       $1584 = HEAP32[$1583>>2]|0;
       $1585 = ((($1574)) + 1|0);
       $1586 = $1577 ? $1585 : $1584;
       $1587 = ($1582>>>0)<(2);
       $1588 = $1587 ? $1582 : 2;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($23,$1586,$1588);
       $1589 = HEAP8[$23>>0]|0;
       $1590 = $1589 & 1;
       $1591 = ($1590<<24>>24)==(0);
       $1592 = HEAP32[$1568>>2]|0;
       $1593 = $1589&255;
       $1594 = $1593 >>> 1;
       $1595 = $1591 ? $1594 : $1592;
       $1596 = HEAP32[$1569>>2]|0;
       $1597 = $1591 ? $1570 : $1596;
       $1598 = ($1595>>>0)>(2);
       $1599 = $1598 ? 2 : $1595;
       $1600 = (_memcmp($1597,1588,$1599)|0);
       $1601 = ($1600|0)==(0);
       $1602 = ($1595>>>0)<(2);
       $$$i$i$i117 = $1598&1;
       $$$$i$i$i118 = $1602 ? -1 : $$$i$i$i117;
       $1603 = $1601 ? $$$$i$i$i118 : $1600;
       $1604 = ($1603|0)==(0);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($23);
       $1605 = HEAP32[$db>>2]|0;
       if ($1604) {
        $1606 = (($1605) + (($k11$0540*24)|0)|0);
        (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($1606,1508)|0);
        $1607 = HEAP32[$db>>2]|0;
        $1608 = (((($1607) + (($k11$0540*24)|0)|0)) + 12|0);
        (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($1608,0,1511)|0);
       } else {
        $1609 = (((($1605) + (($k11$0540*24)|0)|0)) + 12|0);
        $1610 = HEAP8[$1609>>0]|0;
        $1611 = $1610 & 1;
        $1612 = ($1611<<24>>24)==(0);
        if ($1612) {
         $1615 = ((($1609)) + 1|0);
         $1617 = $1615;
        } else {
         $1613 = (((($1605) + (($k11$0540*24)|0)|0)) + 20|0);
         $1614 = HEAP32[$1613>>2]|0;
         $1617 = $1614;
        }
        $1616 = HEAP8[$1617>>0]|0;
        $1618 = ($1616<<24>>24)==(40);
        if ($1618) {
         $1619 = (($1605) + (($k11$0540*24)|0)|0);
         (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($1619,1606)|0);
         $1620 = HEAP32[$db>>2]|0;
         $1621 = (((($1620) + (($k11$0540*24)|0)|0)) + 12|0);
         (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($1621,0,1511)|0);
        }
       }
       $1622 = HEAP32[$db>>2]|0;
       $1623 = (($1622) + (($k11$0540*24)|0)|0);
       (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($1623,1656)|0);
       $1624 = HEAP32[$1537>>2]|0;
       $1625 = ((($1624)) + -16|0);
       $1626 = HEAP32[$db>>2]|0;
       $1627 = (($1626) + (($k11$0540*24)|0)|0);
       $1628 = ((($1624)) + -12|0);
       $1629 = HEAP32[$1628>>2]|0;
       $1630 = ((($1624)) + -8|0);
       $1631 = HEAP32[$1630>>2]|0;
       $1632 = ($1629|0)==($1631|0);
       if ($1632) {
        $1637 = ((($1624)) + -4|0);
        $1638 = HEAP32[$1625>>2]|0;
        $1639 = $1629;
        $1640 = $1638;
        $1641 = (($1639) - ($1640))|0;
        $1642 = (($1641|0) / 24)&-1;
        $1643 = (($1642) + 1)|0;
        $1644 = ($1641|0)<(-24);
        if ($1644) {
         $$lcssa682 = $1625;
         break;
        }
        $1645 = ($1642>>>0)<(1073741823);
        if ($1645) {
         $1646 = $1642 << 1;
         $1647 = ($1646>>>0)<($1643>>>0);
         $1648 = $1647 ? $1643 : $1646;
         $$0$i$i$i123 = $1648;
        } else {
         $$0$i$i$i123 = 2147483647;
        }
        __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i$i,$$0$i$i$i123,$1642,$1637);
        $1649 = HEAP32[$1571>>2]|0;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($1649,$1627);
        $1650 = ((($1649)) + 12|0);
        $1651 = (((($1626) + (($k11$0540*24)|0)|0)) + 12|0);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($1650,$1651);
        $1652 = ((($1649)) + 24|0);
        HEAP32[$1571>>2] = $1652;
        __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($1625,$__v$i$i$i);
        __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i$i);
       } else {
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($1629,$1627);
        $1633 = ((($1629)) + 12|0);
        $1634 = (((($1626) + (($k11$0540*24)|0)|0)) + 12|0);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($1633,$1634);
        $1635 = HEAP32[$1628>>2]|0;
        $1636 = ((($1635)) + 24|0);
        HEAP32[$1628>>2] = $1636;
       }
       $1653 = (($k11$0540) + 1)|0;
       $1654 = ($1653>>>0)<($1531>>>0);
       if ($1654) {
        $k11$0540 = $1653;
       } else {
        $$0 = $1525;
        break L1;
       }
      }
      __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($$lcssa682);
      // unreachable;
      break;
     }
     case 84:  {
      $1655 = ((($db)) + 4|0);
      $1656 = HEAP32[$1655>>2]|0;
      $1657 = HEAP32[$db>>2]|0;
      $1658 = $1656;
      $1659 = $1657;
      $1660 = (($1658) - ($1659))|0;
      $1661 = (($1660|0) / 24)&-1;
      $1662 = (__ZN10__cxxabiv112_GLOBAL__N_120parse_template_paramINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db)|0);
      $1663 = HEAP32[$1655>>2]|0;
      $1664 = HEAP32[$db>>2]|0;
      $1665 = $1663;
      $1666 = $1664;
      $1667 = (($1665) - ($1666))|0;
      $1668 = (($1667|0) / 24)&-1;
      $1669 = ($1662|0)==($first|0);
      if ($1669) {
       $$0 = $first;
       break L1;
      }
      $1670 = ((($db)) + 16|0);
      $1671 = ((($db)) + 12|0);
      $1672 = HEAP32[$1671>>2]|0;
      $1673 = $1672;
      $1674 = ((($db)) + 20|0);
      $1675 = HEAP32[$1674>>2]|0;
      $1676 = ((($db)) + 24|0);
      $1677 = HEAP32[$1676>>2]|0;
      $1678 = ($1675>>>0)<($1677>>>0);
      if ($1678) {
       HEAP32[$1675>>2] = 0;
       $1679 = ((($1675)) + 4|0);
       HEAP32[$1679>>2] = 0;
       $1680 = ((($1675)) + 8|0);
       HEAP32[$1680>>2] = 0;
       $1681 = ((($1675)) + 12|0);
       HEAP32[$1681>>2] = $1673;
       $1682 = HEAP32[$1674>>2]|0;
       $1683 = ((($1682)) + 16|0);
       HEAP32[$1674>>2] = $1683;
      } else {
       $1684 = ((($db)) + 28|0);
       $1685 = HEAP32[$1670>>2]|0;
       $1686 = $1675;
       $1687 = $1685;
       $1688 = (($1686) - ($1687))|0;
       $1689 = $1688 >> 4;
       $1690 = (($1689) + 1)|0;
       $1691 = ($1688|0)<(-16);
       if ($1691) {
        __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($1670);
        // unreachable;
       }
       $1692 = $1677;
       $1693 = (($1692) - ($1687))|0;
       $1694 = $1693 >> 4;
       $1695 = ($1694>>>0)<(1073741823);
       if ($1695) {
        $1696 = $1693 >> 3;
        $1697 = ($1696>>>0)<($1690>>>0);
        $1698 = $1697 ? $1690 : $1696;
        $$0$i$i$i131 = $1698;
       } else {
        $$0$i$i$i131 = 2147483647;
       }
       __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i$i,$$0$i$i$i131,$1689,$1684);
       $1699 = ((($__v$i$i$i)) + 8|0);
       $1700 = HEAP32[$1699>>2]|0;
       HEAP32[$1700>>2] = 0;
       $1701 = ((($1700)) + 4|0);
       HEAP32[$1701>>2] = 0;
       $1702 = ((($1700)) + 8|0);
       HEAP32[$1702>>2] = 0;
       $1703 = ((($1700)) + 12|0);
       HEAP32[$1703>>2] = $1673;
       $1704 = ((($1700)) + 16|0);
       HEAP32[$1699>>2] = $1704;
       __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($1670,$__v$i$i$i);
       __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i$i);
      }
      $1705 = ((($__v$i$i$i)) + 8|0);
      $1706 = ($1661>>>0)<($1668>>>0);
      L522: do {
       if ($1706) {
        $k15$0543 = $1661;
        while(1) {
         $1707 = HEAP32[$1674>>2]|0;
         $1708 = ((($1707)) + -16|0);
         $1709 = HEAP32[$db>>2]|0;
         $1710 = (($1709) + (($k15$0543*24)|0)|0);
         $1711 = ((($1707)) + -12|0);
         $1712 = HEAP32[$1711>>2]|0;
         $1713 = ((($1707)) + -8|0);
         $1714 = HEAP32[$1713>>2]|0;
         $1715 = ($1712|0)==($1714|0);
         if ($1715) {
          $1720 = ((($1707)) + -4|0);
          $1721 = HEAP32[$1708>>2]|0;
          $1722 = $1712;
          $1723 = $1721;
          $1724 = (($1722) - ($1723))|0;
          $1725 = (($1724|0) / 24)&-1;
          $1726 = (($1725) + 1)|0;
          $1727 = ($1724|0)<(-24);
          if ($1727) {
           $$lcssa690 = $1708;
           break;
          }
          $1728 = ($1725>>>0)<(1073741823);
          if ($1728) {
           $1729 = $1725 << 1;
           $1730 = ($1729>>>0)<($1726>>>0);
           $1731 = $1730 ? $1726 : $1729;
           $$0$i$i$i136 = $1731;
          } else {
           $$0$i$i$i136 = 2147483647;
          }
          __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i$i,$$0$i$i$i136,$1725,$1720);
          $1732 = HEAP32[$1705>>2]|0;
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($1732,$1710);
          $1733 = ((($1732)) + 12|0);
          $1734 = (((($1709) + (($k15$0543*24)|0)|0)) + 12|0);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($1733,$1734);
          $1735 = ((($1732)) + 24|0);
          HEAP32[$1705>>2] = $1735;
          __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($1708,$__v$i$i$i);
          __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i$i);
         } else {
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($1712,$1710);
          $1716 = ((($1712)) + 12|0);
          $1717 = (((($1709) + (($k15$0543*24)|0)|0)) + 12|0);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($1716,$1717);
          $1718 = HEAP32[$1711>>2]|0;
          $1719 = ((($1718)) + 24|0);
          HEAP32[$1711>>2] = $1719;
         }
         $1736 = (($k15$0543) + 1)|0;
         $1737 = ($1736>>>0)<($1668>>>0);
         if ($1737) {
          $k15$0543 = $1736;
         } else {
          break L522;
         }
        }
        __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($$lcssa690);
        // unreachable;
       }
      } while(0);
      $1738 = ((($db)) + 63|0);
      $1739 = HEAP8[$1738>>0]|0;
      $1740 = ($1739<<24>>24)!=(0);
      $1741 = (($1661) + 1)|0;
      $1742 = ($1668|0)==($1741|0);
      $or$cond = $1742 & $1740;
      if (!($or$cond)) {
       $$0 = $1662;
       break L1;
      }
      $1743 = (__ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($1662,$last,$db)|0);
      $1744 = ($1743|0)==($1662|0);
      if ($1744) {
       $$0 = $1662;
       break L1;
      }
      $1745 = HEAP32[$1655>>2]|0;
      $1746 = ((($1745)) + -24|0);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($args,$1746);
      $1747 = HEAP32[$1655>>2]|0;
      $1748 = ((($1747)) + -24|0);
      $1750 = $1747;
      while(1) {
       $1749 = ((($1750)) + -24|0);
       HEAP32[$1655>>2] = $1749;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1749);
       $$pre$i143 = HEAP32[$1655>>2]|0;
       $1751 = ($$pre$i143|0)==($1748|0);
       if ($1751) {
        break;
       } else {
        $1750 = $$pre$i143;
       }
      }
      $1752 = ((($1747)) + -48|0);
      $1753 = HEAP8[$args>>0]|0;
      $1754 = $1753 & 1;
      $1755 = ($1754<<24>>24)==(0);
      $1756 = ((($args)) + 8|0);
      $1757 = HEAP32[$1756>>2]|0;
      $1758 = ((($args)) + 1|0);
      $1759 = $1755 ? $1758 : $1757;
      $1760 = ((($args)) + 4|0);
      $1761 = HEAP32[$1760>>2]|0;
      $1762 = $1753&255;
      $1763 = $1762 >>> 1;
      $1764 = $1755 ? $1763 : $1761;
      (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($1752,$1759,$1764)|0);
      $1765 = HEAP32[$1655>>2]|0;
      $1766 = ((($1765)) + -24|0);
      $1767 = HEAP32[$1671>>2]|0;
      HEAP32[$25>>2] = $1767;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($24,$1766,$25);
      $1768 = HEAP32[$1674>>2]|0;
      $1769 = HEAP32[$1676>>2]|0;
      $1770 = ($1768>>>0)<($1769>>>0);
      if ($1770) {
       $1771 = ((($24)) + 12|0);
       $1772 = ((($1768)) + 4|0);
       $1773 = HEAP32[$1771>>2]|0;
       $1774 = ((($1768)) + 12|0);
       HEAP32[$1774>>2] = $1773;
       $1775 = HEAP32[$24>>2]|0;
       HEAP32[$1768>>2] = $1775;
       $1776 = ((($24)) + 4|0);
       $1777 = HEAP32[$1776>>2]|0;
       HEAP32[$1772>>2] = $1777;
       $1778 = ((($24)) + 8|0);
       $1779 = HEAP32[$1778>>2]|0;
       $1780 = ((($1768)) + 8|0);
       HEAP32[$1780>>2] = $1779;
       HEAP32[$1778>>2] = 0;
       HEAP32[$1776>>2] = 0;
       HEAP32[$24>>2] = 0;
       $1781 = HEAP32[$1674>>2]|0;
       $1782 = ((($1781)) + 16|0);
       HEAP32[$1674>>2] = $1782;
      } else {
       $1783 = ((($db)) + 28|0);
       $1784 = HEAP32[$1670>>2]|0;
       $1785 = $1768;
       $1786 = $1784;
       $1787 = (($1785) - ($1786))|0;
       $1788 = $1787 >> 4;
       $1789 = (($1788) + 1)|0;
       $1790 = ($1787|0)<(-16);
       if ($1790) {
        __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($1670);
        // unreachable;
       }
       $1791 = $1769;
       $1792 = (($1791) - ($1786))|0;
       $1793 = $1792 >> 4;
       $1794 = ($1793>>>0)<(1073741823);
       if ($1794) {
        $1795 = $1792 >> 3;
        $1796 = ($1795>>>0)<($1789>>>0);
        $1797 = $1796 ? $1789 : $1795;
        $$0$i$i$i148 = $1797;
       } else {
        $$0$i$i$i148 = 2147483647;
       }
       __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i$i,$$0$i$i$i148,$1788,$1783);
       $1798 = ((($__v$i$i$i)) + 8|0);
       $1799 = HEAP32[$1798>>2]|0;
       $1800 = ((($24)) + 12|0);
       $1801 = ((($1799)) + 4|0);
       $1802 = HEAP32[$1800>>2]|0;
       $1803 = ((($1799)) + 12|0);
       HEAP32[$1803>>2] = $1802;
       $1804 = HEAP32[$24>>2]|0;
       HEAP32[$1799>>2] = $1804;
       $1805 = ((($24)) + 4|0);
       $1806 = HEAP32[$1805>>2]|0;
       HEAP32[$1801>>2] = $1806;
       $1807 = ((($24)) + 8|0);
       $1808 = HEAP32[$1807>>2]|0;
       $1809 = ((($1799)) + 8|0);
       HEAP32[$1809>>2] = $1808;
       HEAP32[$1807>>2] = 0;
       HEAP32[$1805>>2] = 0;
       HEAP32[$24>>2] = 0;
       $1810 = ((($1799)) + 16|0);
       HEAP32[$1798>>2] = $1810;
       __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($1670,$__v$i$i$i);
       __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i$i);
      }
      __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($24);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($args);
      $$0 = $1743;
      break L1;
      break;
     }
     case 85:  {
      $1811 = ((($first)) + 1|0);
      $1812 = ($1811|0)==($last|0);
      if ($1812) {
       $$0 = $first;
       break L1;
      }
      $1813 = (__ZN10__cxxabiv112_GLOBAL__N_117parse_source_nameINS0_2DbEEEPKcS4_S4_RT_($1811,$last,$db)|0);
      $1814 = ($1813|0)==($1811|0);
      if ($1814) {
       $$0 = $first;
       break L1;
      }
      $1815 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($1813,$last,$db)|0);
      $1816 = ($1815|0)==($1813|0);
      if ($1816) {
       $$0 = $first;
       break L1;
      }
      $1817 = ((($db)) + 4|0);
      $1818 = HEAP32[$1817>>2]|0;
      $1819 = HEAP32[$db>>2]|0;
      $1820 = $1818;
      $1821 = $1819;
      $1822 = (($1820) - ($1821))|0;
      $1823 = (($1822|0) / 24)&-1;
      $1824 = ($1823>>>0)<(2);
      if ($1824) {
       $$0 = $first;
       break L1;
      }
      $1825 = ((($1818)) + -24|0);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($type,$1825);
      $1826 = HEAP32[$1817>>2]|0;
      $1827 = ((($1826)) + -24|0);
      $1829 = $1826;
      while(1) {
       $1828 = ((($1829)) + -24|0);
       HEAP32[$1817>>2] = $1828;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1828);
       $$pre$i157 = HEAP32[$1817>>2]|0;
       $1830 = ($$pre$i157|0)==($1827|0);
       if ($1830) {
        break;
       } else {
        $1829 = $$pre$i157;
       }
      }
      $1831 = ((($1826)) + -48|0);
      $1832 = HEAP8[$1831>>0]|0;
      $1833 = $1832 & 1;
      $1834 = ($1833<<24>>24)==(0);
      $1835 = ((($1826)) + -44|0);
      $1836 = HEAP32[$1835>>2]|0;
      $1837 = $1832&255;
      $1838 = $1837 >>> 1;
      $1839 = $1834 ? $1838 : $1836;
      $1840 = ((($1826)) + -40|0);
      $1841 = HEAP32[$1840>>2]|0;
      $1842 = ((($1831)) + 1|0);
      $1843 = $1834 ? $1842 : $1841;
      $1844 = ($1839>>>0)<(9);
      $1845 = $1844 ? $1839 : 9;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($26,$1843,$1845);
      $1846 = HEAP8[$26>>0]|0;
      $1847 = $1846 & 1;
      $1848 = ($1847<<24>>24)==(0);
      $1849 = ((($26)) + 4|0);
      $1850 = HEAP32[$1849>>2]|0;
      $1851 = $1846&255;
      $1852 = $1851 >>> 1;
      $1853 = $1848 ? $1852 : $1850;
      $1854 = ((($26)) + 8|0);
      $1855 = HEAP32[$1854>>2]|0;
      $1856 = ((($26)) + 1|0);
      $1857 = $1848 ? $1856 : $1855;
      $1858 = ($1853>>>0)>(9);
      $1859 = $1858 ? 9 : $1853;
      $1860 = (_memcmp($1857,1658,$1859)|0);
      $1861 = ($1860|0)==(0);
      $1862 = ($1853>>>0)<(9);
      $$$i$i$i$i161 = $1858&1;
      $$$$i$i$i$i162 = $1862 ? -1 : $$$i$i$i$i161;
      $1863 = $1861 ? $$$$i$i$i$i162 : $1860;
      $1864 = ($1863|0)==(0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($26);
      $1865 = HEAP32[$1817>>2]|0;
      $1866 = ((($1865)) + -24|0);
      if ($1864) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($proto,$1866);
       $1884 = HEAP32[$1817>>2]|0;
       $1885 = ((($1884)) + -24|0);
       $1887 = $1884;
       while(1) {
        $1886 = ((($1887)) + -24|0);
        HEAP32[$1817>>2] = $1886;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1886);
        $$pre$i165 = HEAP32[$1817>>2]|0;
        $1888 = ($$pre$i165|0)==($1885|0);
        if ($1888) {
         break;
        } else {
         $1887 = $$pre$i165;
        }
       }
       $1889 = HEAP8[$proto>>0]|0;
       $1890 = $1889 & 1;
       $1891 = ($1890<<24>>24)==(0);
       $1892 = ((($proto)) + 8|0);
       $1893 = HEAP32[$1892>>2]|0;
       $1894 = ((($proto)) + 1|0);
       $1895 = $1891 ? $1894 : $1893;
       $1896 = ((($1895)) + 9|0);
       $1897 = ((($proto)) + 4|0);
       $1898 = HEAP32[$1897>>2]|0;
       $1899 = $1889&255;
       $1900 = $1899 >>> 1;
       $1901 = $1891 ? $1900 : $1898;
       $1902 = (($1895) + ($1901)|0);
       $1903 = (__ZN10__cxxabiv112_GLOBAL__N_117parse_source_nameINS0_2DbEEEPKcS4_S4_RT_($1896,$1902,$db)|0);
       $1904 = HEAP8[$proto>>0]|0;
       $1905 = $1904 & 1;
       $1906 = ($1905<<24>>24)==(0);
       $1907 = HEAP32[$1892>>2]|0;
       $1908 = $1906 ? $1894 : $1907;
       $1909 = ((($1908)) + 9|0);
       $1910 = ($1903|0)==($1909|0);
       if ($1910) {
        __ZNSt3__1plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EERKSB_PKS8_($38,$type,1618);
        $1933 = HEAP8[$proto>>0]|0;
        $1934 = $1933 & 1;
        $1935 = ($1934<<24>>24)==(0);
        $1936 = HEAP32[$1892>>2]|0;
        $1937 = $1935 ? $1894 : $1936;
        $1938 = HEAP32[$1897>>2]|0;
        $1939 = $1933&255;
        $1940 = $1939 >>> 1;
        $1941 = $1935 ? $1940 : $1938;
        $1942 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($38,$1937,$1941)|0);
        ;HEAP32[$37>>2]=HEAP32[$1942>>2]|0;HEAP32[$37+4>>2]=HEAP32[$1942+4>>2]|0;HEAP32[$37+8>>2]=HEAP32[$1942+8>>2]|0;
        HEAP32[$1942>>2] = 0;
        $1943 = ((($1942)) + 4|0);
        HEAP32[$1943>>2] = 0;
        $1944 = ((($1942)) + 8|0);
        HEAP32[$1944>>2] = 0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($36,$37);
        $1945 = HEAP32[$1817>>2]|0;
        $1946 = ((($db)) + 8|0);
        $1947 = HEAP32[$1946>>2]|0;
        $1948 = ($1945>>>0)<($1947>>>0);
        if ($1948) {
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($1945,$36);
         $1949 = HEAP32[$1817>>2]|0;
         $1950 = ((($1949)) + 24|0);
         HEAP32[$1817>>2] = $1950;
        } else {
         $1951 = ((($db)) + 12|0);
         $1952 = HEAP32[$db>>2]|0;
         $1953 = $1945;
         $1954 = $1952;
         $1955 = (($1953) - ($1954))|0;
         $1956 = (($1955|0) / 24)&-1;
         $1957 = (($1956) + 1)|0;
         $1958 = ($1955|0)<(-24);
         if ($1958) {
          __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
          // unreachable;
         }
         $1959 = $1947;
         $1960 = (($1959) - ($1954))|0;
         $1961 = (($1960|0) / 24)&-1;
         $1962 = ($1961>>>0)<(1073741823);
         if ($1962) {
          $1963 = $1961 << 1;
          $1964 = ($1963>>>0)<($1957>>>0);
          $1965 = $1964 ? $1957 : $1963;
          $$0$i$i$i181 = $1965;
         } else {
          $$0$i$i$i181 = 2147483647;
         }
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i$i,$$0$i$i$i181,$1956,$1951);
         $1966 = ((($__v$i$i$i)) + 8|0);
         $1967 = HEAP32[$1966>>2]|0;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($1967,$36);
         $1968 = ((($1967)) + 24|0);
         HEAP32[$1966>>2] = $1968;
         __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i$i);
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i$i);
        }
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($36);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($37);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($38);
       } else {
        $1911 = HEAP32[$1817>>2]|0;
        $1912 = ((($1911)) + -24|0);
        __ZNSt3__1plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EERKSB_PKS8_($34,$type,1668);
        $1913 = HEAP32[$1817>>2]|0;
        $1914 = ((($1913)) + -24|0);
        __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($35,$1914);
        $1915 = HEAP8[$35>>0]|0;
        $1916 = $1915 & 1;
        $1917 = ($1916<<24>>24)==(0);
        $1918 = ((($35)) + 8|0);
        $1919 = HEAP32[$1918>>2]|0;
        $1920 = ((($35)) + 1|0);
        $1921 = $1917 ? $1920 : $1919;
        $1922 = ((($35)) + 4|0);
        $1923 = HEAP32[$1922>>2]|0;
        $1924 = $1915&255;
        $1925 = $1924 >>> 1;
        $1926 = $1917 ? $1925 : $1923;
        $1927 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($34,$1921,$1926)|0);
        ;HEAP32[$33>>2]=HEAP32[$1927>>2]|0;HEAP32[$33+4>>2]=HEAP32[$1927+4>>2]|0;HEAP32[$33+8>>2]=HEAP32[$1927+8>>2]|0;
        HEAP32[$1927>>2] = 0;
        $1928 = ((($1927)) + 4|0);
        HEAP32[$1928>>2] = 0;
        $1929 = ((($1927)) + 8|0);
        HEAP32[$1929>>2] = 0;
        $1930 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($33,1670)|0);
        ;HEAP32[$32>>2]=HEAP32[$1930>>2]|0;HEAP32[$32+4>>2]=HEAP32[$1930+4>>2]|0;HEAP32[$32+8>>2]=HEAP32[$1930+8>>2]|0;
        HEAP32[$1930>>2] = 0;
        $1931 = ((($1930)) + 4|0);
        HEAP32[$1931>>2] = 0;
        $1932 = ((($1930)) + 8|0);
        HEAP32[$1932>>2] = 0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($31,$32);
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($1912,$31);
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($31);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($32);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($33);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($35);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($34);
       }
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($proto);
      } else {
       __ZNSt3__1plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EERKSB_PKS8_($29,$type,1618);
       $1867 = HEAP32[$1817>>2]|0;
       $1868 = ((($1867)) + -24|0);
       __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($30,$1868);
       $1869 = HEAP8[$30>>0]|0;
       $1870 = $1869 & 1;
       $1871 = ($1870<<24>>24)==(0);
       $1872 = ((($30)) + 8|0);
       $1873 = HEAP32[$1872>>2]|0;
       $1874 = ((($30)) + 1|0);
       $1875 = $1871 ? $1874 : $1873;
       $1876 = ((($30)) + 4|0);
       $1877 = HEAP32[$1876>>2]|0;
       $1878 = $1869&255;
       $1879 = $1878 >>> 1;
       $1880 = $1871 ? $1879 : $1877;
       $1881 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($29,$1875,$1880)|0);
       ;HEAP32[$28>>2]=HEAP32[$1881>>2]|0;HEAP32[$28+4>>2]=HEAP32[$1881+4>>2]|0;HEAP32[$28+8>>2]=HEAP32[$1881+8>>2]|0;
       HEAP32[$1881>>2] = 0;
       $1882 = ((($1881)) + 4|0);
       HEAP32[$1882>>2] = 0;
       $1883 = ((($1881)) + 8|0);
       HEAP32[$1883>>2] = 0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($27,$28);
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($1866,$27);
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($27);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($28);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($30);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($29);
      }
      $1969 = HEAP32[$1817>>2]|0;
      $1970 = ((($1969)) + -24|0);
      $1971 = ((($db)) + 12|0);
      $1972 = HEAP32[$1971>>2]|0;
      HEAP32[$40>>2] = $1972;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($39,$1970,$40);
      $1973 = ((($db)) + 16|0);
      $1974 = ((($db)) + 20|0);
      $1975 = HEAP32[$1974>>2]|0;
      $1976 = ((($db)) + 24|0);
      $1977 = HEAP32[$1976>>2]|0;
      $1978 = ($1975>>>0)<($1977>>>0);
      if ($1978) {
       $1979 = ((($39)) + 12|0);
       $1980 = ((($1975)) + 4|0);
       $1981 = HEAP32[$1979>>2]|0;
       $1982 = ((($1975)) + 12|0);
       HEAP32[$1982>>2] = $1981;
       $1983 = HEAP32[$39>>2]|0;
       HEAP32[$1975>>2] = $1983;
       $1984 = ((($39)) + 4|0);
       $1985 = HEAP32[$1984>>2]|0;
       HEAP32[$1980>>2] = $1985;
       $1986 = ((($39)) + 8|0);
       $1987 = HEAP32[$1986>>2]|0;
       $1988 = ((($1975)) + 8|0);
       HEAP32[$1988>>2] = $1987;
       HEAP32[$1986>>2] = 0;
       HEAP32[$1984>>2] = 0;
       HEAP32[$39>>2] = 0;
       $1989 = HEAP32[$1974>>2]|0;
       $1990 = ((($1989)) + 16|0);
       HEAP32[$1974>>2] = $1990;
      } else {
       $1991 = ((($db)) + 28|0);
       $1992 = HEAP32[$1973>>2]|0;
       $1993 = $1975;
       $1994 = $1992;
       $1995 = (($1993) - ($1994))|0;
       $1996 = $1995 >> 4;
       $1997 = (($1996) + 1)|0;
       $1998 = ($1995|0)<(-16);
       if ($1998) {
        __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($1973);
        // unreachable;
       }
       $1999 = $1977;
       $2000 = (($1999) - ($1994))|0;
       $2001 = $2000 >> 4;
       $2002 = ($2001>>>0)<(1073741823);
       if ($2002) {
        $2003 = $2000 >> 3;
        $2004 = ($2003>>>0)<($1997>>>0);
        $2005 = $2004 ? $1997 : $2003;
        $$0$i$i$i153 = $2005;
       } else {
        $$0$i$i$i153 = 2147483647;
       }
       __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i$i,$$0$i$i$i153,$1996,$1991);
       $2006 = ((($__v$i$i$i)) + 8|0);
       $2007 = HEAP32[$2006>>2]|0;
       $2008 = ((($39)) + 12|0);
       $2009 = ((($2007)) + 4|0);
       $2010 = HEAP32[$2008>>2]|0;
       $2011 = ((($2007)) + 12|0);
       HEAP32[$2011>>2] = $2010;
       $2012 = HEAP32[$39>>2]|0;
       HEAP32[$2007>>2] = $2012;
       $2013 = ((($39)) + 4|0);
       $2014 = HEAP32[$2013>>2]|0;
       HEAP32[$2009>>2] = $2014;
       $2015 = ((($39)) + 8|0);
       $2016 = HEAP32[$2015>>2]|0;
       $2017 = ((($2007)) + 8|0);
       HEAP32[$2017>>2] = $2016;
       HEAP32[$2015>>2] = 0;
       HEAP32[$2013>>2] = 0;
       HEAP32[$39>>2] = 0;
       $2018 = ((($2007)) + 16|0);
       HEAP32[$2006>>2] = $2018;
       __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($1973,$__v$i$i$i);
       __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i$i);
      }
      __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($39);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($type);
      $$0 = $1815;
      break L1;
      break;
     }
     case 83:  {
      $2019 = ((($first)) + 1|0);
      $2020 = ($2019|0)==($last|0);
      if (!($2020)) {
       $2021 = HEAP8[$2019>>0]|0;
       $2022 = ($2021<<24>>24)==(116);
       if ($2022) {
        $2023 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_nameINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db)|0);
        $2024 = ($2023|0)==($first|0);
        if ($2024) {
         $$0 = $first;
         break L1;
        }
        $2025 = HEAP32[$db>>2]|0;
        $2026 = ((($db)) + 4|0);
        $2027 = HEAP32[$2026>>2]|0;
        $2028 = ($2025|0)==($2027|0);
        if ($2028) {
         $$0 = $first;
         break L1;
        }
        $2029 = ((($db)) + 16|0);
        $2030 = ((($2027)) + -24|0);
        $2031 = ((($db)) + 12|0);
        $2032 = HEAP32[$2031>>2]|0;
        HEAP32[$42>>2] = $2032;
        __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($41,$2030,$42);
        $2033 = ((($db)) + 20|0);
        $2034 = HEAP32[$2033>>2]|0;
        $2035 = ((($db)) + 24|0);
        $2036 = HEAP32[$2035>>2]|0;
        $2037 = ($2034>>>0)<($2036>>>0);
        if ($2037) {
         $2038 = ((($41)) + 12|0);
         $2039 = ((($2034)) + 4|0);
         $2040 = HEAP32[$2038>>2]|0;
         $2041 = ((($2034)) + 12|0);
         HEAP32[$2041>>2] = $2040;
         $2042 = HEAP32[$41>>2]|0;
         HEAP32[$2034>>2] = $2042;
         $2043 = ((($41)) + 4|0);
         $2044 = HEAP32[$2043>>2]|0;
         HEAP32[$2039>>2] = $2044;
         $2045 = ((($41)) + 8|0);
         $2046 = HEAP32[$2045>>2]|0;
         $2047 = ((($2034)) + 8|0);
         HEAP32[$2047>>2] = $2046;
         HEAP32[$2045>>2] = 0;
         HEAP32[$2043>>2] = 0;
         HEAP32[$41>>2] = 0;
         $2048 = HEAP32[$2033>>2]|0;
         $2049 = ((($2048)) + 16|0);
         HEAP32[$2033>>2] = $2049;
        } else {
         $2050 = ((($db)) + 28|0);
         $2051 = HEAP32[$2029>>2]|0;
         $2052 = $2034;
         $2053 = $2051;
         $2054 = (($2052) - ($2053))|0;
         $2055 = $2054 >> 4;
         $2056 = (($2055) + 1)|0;
         $2057 = ($2054|0)<(-16);
         if ($2057) {
          __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($2029);
          // unreachable;
         }
         $2058 = $2036;
         $2059 = (($2058) - ($2053))|0;
         $2060 = $2059 >> 4;
         $2061 = ($2060>>>0)<(1073741823);
         if ($2061) {
          $2062 = $2059 >> 3;
          $2063 = ($2062>>>0)<($2056>>>0);
          $2064 = $2063 ? $2056 : $2062;
          $$0$i$i$i51 = $2064;
         } else {
          $$0$i$i$i51 = 2147483647;
         }
         __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i$i,$$0$i$i$i51,$2055,$2050);
         $2065 = ((($__v$i$i$i)) + 8|0);
         $2066 = HEAP32[$2065>>2]|0;
         $2067 = ((($41)) + 12|0);
         $2068 = ((($2066)) + 4|0);
         $2069 = HEAP32[$2067>>2]|0;
         $2070 = ((($2066)) + 12|0);
         HEAP32[$2070>>2] = $2069;
         $2071 = HEAP32[$41>>2]|0;
         HEAP32[$2066>>2] = $2071;
         $2072 = ((($41)) + 4|0);
         $2073 = HEAP32[$2072>>2]|0;
         HEAP32[$2068>>2] = $2073;
         $2074 = ((($41)) + 8|0);
         $2075 = HEAP32[$2074>>2]|0;
         $2076 = ((($2066)) + 8|0);
         HEAP32[$2076>>2] = $2075;
         HEAP32[$2074>>2] = 0;
         HEAP32[$2072>>2] = 0;
         HEAP32[$41>>2] = 0;
         $2077 = ((($2066)) + 16|0);
         HEAP32[$2065>>2] = $2077;
         __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($2029,$__v$i$i$i);
         __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i$i);
        }
        __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($41);
        $$0 = $2023;
        break L1;
       }
      }
      $2078 = (__ZN10__cxxabiv112_GLOBAL__N_118parse_substitutionINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db)|0);
      $2079 = ($2078|0)==($first|0);
      if ($2079) {
       $$0 = $first;
       break L1;
      }
      $2080 = (__ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($2078,$last,$db)|0);
      $2081 = ($2080|0)==($2078|0);
      if ($2081) {
       $$0 = $2078;
       break L1;
      }
      $2082 = ((($db)) + 4|0);
      $2083 = HEAP32[$2082>>2]|0;
      $2084 = HEAP32[$db>>2]|0;
      $2085 = $2083;
      $2086 = $2084;
      $2087 = (($2085) - ($2086))|0;
      $2088 = (($2087|0) / 24)&-1;
      $2089 = ($2088>>>0)<(2);
      if ($2089) {
       $$0 = $2078;
       break L1;
      }
      $2090 = ((($2083)) + -24|0);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($template_args,$2090);
      $2091 = HEAP32[$2082>>2]|0;
      $2092 = ((($2091)) + -24|0);
      $2094 = $2091;
      while(1) {
       $2093 = ((($2094)) + -24|0);
       HEAP32[$2082>>2] = $2093;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($2093);
       $$pre$i = HEAP32[$2082>>2]|0;
       $2095 = ($$pre$i|0)==($2092|0);
       if ($2095) {
        break;
       } else {
        $2094 = $$pre$i;
       }
      }
      $2096 = ((($2091)) + -48|0);
      $2097 = HEAP8[$template_args>>0]|0;
      $2098 = $2097 & 1;
      $2099 = ($2098<<24>>24)==(0);
      $2100 = ((($template_args)) + 8|0);
      $2101 = HEAP32[$2100>>2]|0;
      $2102 = ((($template_args)) + 1|0);
      $2103 = $2099 ? $2102 : $2101;
      $2104 = ((($template_args)) + 4|0);
      $2105 = HEAP32[$2104>>2]|0;
      $2106 = $2097&255;
      $2107 = $2106 >>> 1;
      $2108 = $2099 ? $2107 : $2105;
      (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($2096,$2103,$2108)|0);
      $2109 = HEAP32[$2082>>2]|0;
      $2110 = ((($2109)) + -24|0);
      $2111 = ((($db)) + 12|0);
      $2112 = HEAP32[$2111>>2]|0;
      HEAP32[$44>>2] = $2112;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($43,$2110,$44);
      $2113 = ((($db)) + 16|0);
      $2114 = ((($db)) + 20|0);
      $2115 = HEAP32[$2114>>2]|0;
      $2116 = ((($db)) + 24|0);
      $2117 = HEAP32[$2116>>2]|0;
      $2118 = ($2115>>>0)<($2117>>>0);
      if ($2118) {
       $2119 = ((($43)) + 12|0);
       $2120 = ((($2115)) + 4|0);
       $2121 = HEAP32[$2119>>2]|0;
       $2122 = ((($2115)) + 12|0);
       HEAP32[$2122>>2] = $2121;
       $2123 = HEAP32[$43>>2]|0;
       HEAP32[$2115>>2] = $2123;
       $2124 = ((($43)) + 4|0);
       $2125 = HEAP32[$2124>>2]|0;
       HEAP32[$2120>>2] = $2125;
       $2126 = ((($43)) + 8|0);
       $2127 = HEAP32[$2126>>2]|0;
       $2128 = ((($2115)) + 8|0);
       HEAP32[$2128>>2] = $2127;
       HEAP32[$2126>>2] = 0;
       HEAP32[$2124>>2] = 0;
       HEAP32[$43>>2] = 0;
       $2129 = HEAP32[$2114>>2]|0;
       $2130 = ((($2129)) + 16|0);
       HEAP32[$2114>>2] = $2130;
      } else {
       $2131 = ((($db)) + 28|0);
       $2132 = HEAP32[$2113>>2]|0;
       $2133 = $2115;
       $2134 = $2132;
       $2135 = (($2133) - ($2134))|0;
       $2136 = $2135 >> 4;
       $2137 = (($2136) + 1)|0;
       $2138 = ($2135|0)<(-16);
       if ($2138) {
        __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($2113);
        // unreachable;
       }
       $2139 = $2117;
       $2140 = (($2139) - ($2134))|0;
       $2141 = $2140 >> 4;
       $2142 = ($2141>>>0)<(1073741823);
       if ($2142) {
        $2143 = $2140 >> 3;
        $2144 = ($2143>>>0)<($2137>>>0);
        $2145 = $2144 ? $2137 : $2143;
        $$0$i$i$i31 = $2145;
       } else {
        $$0$i$i$i31 = 2147483647;
       }
       __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i$i,$$0$i$i$i31,$2136,$2131);
       $2146 = ((($__v$i$i$i)) + 8|0);
       $2147 = HEAP32[$2146>>2]|0;
       $2148 = ((($43)) + 12|0);
       $2149 = ((($2147)) + 4|0);
       $2150 = HEAP32[$2148>>2]|0;
       $2151 = ((($2147)) + 12|0);
       HEAP32[$2151>>2] = $2150;
       $2152 = HEAP32[$43>>2]|0;
       HEAP32[$2147>>2] = $2152;
       $2153 = ((($43)) + 4|0);
       $2154 = HEAP32[$2153>>2]|0;
       HEAP32[$2149>>2] = $2154;
       $2155 = ((($43)) + 8|0);
       $2156 = HEAP32[$2155>>2]|0;
       $2157 = ((($2147)) + 8|0);
       HEAP32[$2157>>2] = $2156;
       HEAP32[$2155>>2] = 0;
       HEAP32[$2153>>2] = 0;
       HEAP32[$43>>2] = 0;
       $2158 = ((($2147)) + 16|0);
       HEAP32[$2146>>2] = $2158;
       __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($2113,$__v$i$i$i);
       __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i$i);
      }
      __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($43);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($template_args);
      $$0 = $2080;
      break L1;
      break;
     }
     case 68:  {
      $2159 = ((($first)) + 1|0);
      $2160 = ($2159|0)==($last|0);
      if (!($2160)) {
       $2161 = HEAP8[$2159>>0]|0;
       $2162 = $2161 << 24 >> 24;
       switch ($2162|0) {
       case 112:  {
        $2163 = ((($db)) + 4|0);
        $2164 = HEAP32[$2163>>2]|0;
        $2165 = HEAP32[$db>>2]|0;
        $2166 = $2164;
        $2167 = $2165;
        $2168 = (($2166) - ($2167))|0;
        $2169 = (($2168|0) / 24)&-1;
        $2170 = ((($first)) + 2|0);
        $2171 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($2170,$last,$db)|0);
        $2172 = HEAP32[$2163>>2]|0;
        $2173 = HEAP32[$db>>2]|0;
        $2174 = $2172;
        $2175 = $2173;
        $2176 = (($2174) - ($2175))|0;
        $2177 = (($2176|0) / 24)&-1;
        $2178 = ($2171|0)==($2170|0);
        if ($2178) {
         break L65;
        }
        $2179 = ((($db)) + 16|0);
        $2180 = ((($db)) + 12|0);
        $2181 = HEAP32[$2180>>2]|0;
        $2182 = $2181;
        $2183 = ((($db)) + 20|0);
        $2184 = HEAP32[$2183>>2]|0;
        $2185 = ((($db)) + 24|0);
        $2186 = HEAP32[$2185>>2]|0;
        $2187 = ($2184>>>0)<($2186>>>0);
        if ($2187) {
         HEAP32[$2184>>2] = 0;
         $2188 = ((($2184)) + 4|0);
         HEAP32[$2188>>2] = 0;
         $2189 = ((($2184)) + 8|0);
         HEAP32[$2189>>2] = 0;
         $2190 = ((($2184)) + 12|0);
         HEAP32[$2190>>2] = $2182;
         $2191 = HEAP32[$2183>>2]|0;
         $2192 = ((($2191)) + 16|0);
         HEAP32[$2183>>2] = $2192;
        } else {
         $2193 = ((($db)) + 28|0);
         $2194 = HEAP32[$2179>>2]|0;
         $2195 = $2184;
         $2196 = $2194;
         $2197 = (($2195) - ($2196))|0;
         $2198 = $2197 >> 4;
         $2199 = (($2198) + 1)|0;
         $2200 = ($2197|0)<(-16);
         if ($2200) {
          __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($2179);
          // unreachable;
         }
         $2201 = $2186;
         $2202 = (($2201) - ($2196))|0;
         $2203 = $2202 >> 4;
         $2204 = ($2203>>>0)<(1073741823);
         if ($2204) {
          $2205 = $2202 >> 3;
          $2206 = ($2205>>>0)<($2199>>>0);
          $2207 = $2206 ? $2199 : $2205;
          $$0$i$i$i29 = $2207;
         } else {
          $$0$i$i$i29 = 2147483647;
         }
         __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i$i,$$0$i$i$i29,$2198,$2193);
         $2208 = ((($__v$i$i$i)) + 8|0);
         $2209 = HEAP32[$2208>>2]|0;
         HEAP32[$2209>>2] = 0;
         $2210 = ((($2209)) + 4|0);
         HEAP32[$2210>>2] = 0;
         $2211 = ((($2209)) + 8|0);
         HEAP32[$2211>>2] = 0;
         $2212 = ((($2209)) + 12|0);
         HEAP32[$2212>>2] = $2182;
         $2213 = ((($2209)) + 16|0);
         HEAP32[$2208>>2] = $2213;
         __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($2179,$__v$i$i$i);
         __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i$i);
        }
        $2214 = ((($__v$i$i$i)) + 8|0);
        $2215 = ($2169>>>0)<($2177>>>0);
        if ($2215) {
         $k20$0550 = $2169;
        } else {
         $$0 = $2171;
         break L1;
        }
        while(1) {
         $2216 = HEAP32[$2183>>2]|0;
         $2217 = ((($2216)) + -16|0);
         $2218 = HEAP32[$db>>2]|0;
         $2219 = (($2218) + (($k20$0550*24)|0)|0);
         $2220 = ((($2216)) + -12|0);
         $2221 = HEAP32[$2220>>2]|0;
         $2222 = ((($2216)) + -8|0);
         $2223 = HEAP32[$2222>>2]|0;
         $2224 = ($2221|0)==($2223|0);
         if ($2224) {
          $2229 = ((($2216)) + -4|0);
          $2230 = HEAP32[$2217>>2]|0;
          $2231 = $2221;
          $2232 = $2230;
          $2233 = (($2231) - ($2232))|0;
          $2234 = (($2233|0) / 24)&-1;
          $2235 = (($2234) + 1)|0;
          $2236 = ($2233|0)<(-24);
          if ($2236) {
           $$lcssa698 = $2217;
           break;
          }
          $2237 = ($2234>>>0)<(1073741823);
          if ($2237) {
           $2238 = $2234 << 1;
           $2239 = ($2238>>>0)<($2235>>>0);
           $2240 = $2239 ? $2235 : $2238;
           $$0$i$i$i27 = $2240;
          } else {
           $$0$i$i$i27 = 2147483647;
          }
          __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i$i,$$0$i$i$i27,$2234,$2229);
          $2241 = HEAP32[$2214>>2]|0;
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($2241,$2219);
          $2242 = ((($2241)) + 12|0);
          $2243 = (((($2218) + (($k20$0550*24)|0)|0)) + 12|0);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($2242,$2243);
          $2244 = ((($2241)) + 24|0);
          HEAP32[$2214>>2] = $2244;
          __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($2217,$__v$i$i$i);
          __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i$i);
         } else {
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($2221,$2219);
          $2225 = ((($2221)) + 12|0);
          $2226 = (((($2218) + (($k20$0550*24)|0)|0)) + 12|0);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($2225,$2226);
          $2227 = HEAP32[$2220>>2]|0;
          $2228 = ((($2227)) + 24|0);
          HEAP32[$2220>>2] = $2228;
         }
         $2245 = (($k20$0550) + 1)|0;
         $2246 = ($2245>>>0)<($2177>>>0);
         if ($2246) {
          $k20$0550 = $2245;
         } else {
          $$0 = $2171;
          break L1;
         }
        }
        __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($$lcssa698);
        // unreachable;
        break;
       }
       case 84: case 116:  {
        $2247 = (__ZN10__cxxabiv112_GLOBAL__N_114parse_decltypeINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db)|0);
        $2248 = ($2247|0)==($first|0);
        if ($2248) {
         break L65;
        }
        $2249 = HEAP32[$db>>2]|0;
        $2250 = ((($db)) + 4|0);
        $2251 = HEAP32[$2250>>2]|0;
        $2252 = ($2249|0)==($2251|0);
        if ($2252) {
         $$0 = $first;
         break L1;
        }
        $2253 = ((($db)) + 16|0);
        $2254 = ((($2251)) + -24|0);
        $2255 = ((($db)) + 12|0);
        $2256 = HEAP32[$2255>>2]|0;
        HEAP32[$46>>2] = $2256;
        __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($45,$2254,$46);
        $2257 = ((($db)) + 20|0);
        $2258 = HEAP32[$2257>>2]|0;
        $2259 = ((($db)) + 24|0);
        $2260 = HEAP32[$2259>>2]|0;
        $2261 = ($2258>>>0)<($2260>>>0);
        if ($2261) {
         $2262 = ((($45)) + 12|0);
         $2263 = ((($2258)) + 4|0);
         $2264 = HEAP32[$2262>>2]|0;
         $2265 = ((($2258)) + 12|0);
         HEAP32[$2265>>2] = $2264;
         $2266 = HEAP32[$45>>2]|0;
         HEAP32[$2258>>2] = $2266;
         $2267 = ((($45)) + 4|0);
         $2268 = HEAP32[$2267>>2]|0;
         HEAP32[$2263>>2] = $2268;
         $2269 = ((($45)) + 8|0);
         $2270 = HEAP32[$2269>>2]|0;
         $2271 = ((($2258)) + 8|0);
         HEAP32[$2271>>2] = $2270;
         HEAP32[$2269>>2] = 0;
         HEAP32[$2267>>2] = 0;
         HEAP32[$45>>2] = 0;
         $2272 = HEAP32[$2257>>2]|0;
         $2273 = ((($2272)) + 16|0);
         HEAP32[$2257>>2] = $2273;
        } else {
         $2274 = ((($db)) + 28|0);
         $2275 = HEAP32[$2253>>2]|0;
         $2276 = $2258;
         $2277 = $2275;
         $2278 = (($2276) - ($2277))|0;
         $2279 = $2278 >> 4;
         $2280 = (($2279) + 1)|0;
         $2281 = ($2278|0)<(-16);
         if ($2281) {
          __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($2253);
          // unreachable;
         }
         $2282 = $2260;
         $2283 = (($2282) - ($2277))|0;
         $2284 = $2283 >> 4;
         $2285 = ($2284>>>0)<(1073741823);
         if ($2285) {
          $2286 = $2283 >> 3;
          $2287 = ($2286>>>0)<($2280>>>0);
          $2288 = $2287 ? $2280 : $2286;
          $$0$i$i$i22 = $2288;
         } else {
          $$0$i$i$i22 = 2147483647;
         }
         __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i$i,$$0$i$i$i22,$2279,$2274);
         $2289 = ((($__v$i$i$i)) + 8|0);
         $2290 = HEAP32[$2289>>2]|0;
         $2291 = ((($45)) + 12|0);
         $2292 = ((($2290)) + 4|0);
         $2293 = HEAP32[$2291>>2]|0;
         $2294 = ((($2290)) + 12|0);
         HEAP32[$2294>>2] = $2293;
         $2295 = HEAP32[$45>>2]|0;
         HEAP32[$2290>>2] = $2295;
         $2296 = ((($45)) + 4|0);
         $2297 = HEAP32[$2296>>2]|0;
         HEAP32[$2292>>2] = $2297;
         $2298 = ((($45)) + 8|0);
         $2299 = HEAP32[$2298>>2]|0;
         $2300 = ((($2290)) + 8|0);
         HEAP32[$2300>>2] = $2299;
         HEAP32[$2298>>2] = 0;
         HEAP32[$2296>>2] = 0;
         HEAP32[$45>>2] = 0;
         $2301 = ((($2290)) + 16|0);
         HEAP32[$2289>>2] = $2301;
         __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($2253,$__v$i$i$i);
         __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i$i);
        }
        __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($45);
        $$0 = $2247;
        break L1;
        break;
       }
       case 118:  {
        $2302 = $last;
        $2303 = $first;
        $2304 = (($2302) - ($2303))|0;
        $2305 = ($2304|0)>(3);
        $2306 = ($197<<24>>24)==(68);
        $or$cond448 = $2305 & $2306;
        $2307 = ($2161<<24>>24)==(118);
        $or$cond449 = $or$cond448 & $2307;
        L662: do {
         if ($or$cond449) {
          $2308 = ((($first)) + 2|0);
          $2309 = HEAP8[$2308>>0]|0;
          $$off = (($2309) + -49)<<24>>24;
          $2310 = ($$off&255)<(9);
          if ($2310) {
           $2311 = (__ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($2308,$last)|0);
           $2312 = ($2311|0)==($last|0);
           if ($2312) {
            $$1$i263 = $first;
            break;
           }
           $2313 = HEAP8[$2311>>0]|0;
           $2314 = ($2313<<24>>24)==(95);
           if (!($2314)) {
            $$1$i263 = $first;
            break;
           }
           $2315 = $2311;
           $2316 = $2308;
           $2317 = (($2315) - ($2316))|0;
           $2318 = ((($2311)) + 1|0);
           $2319 = ($2318|0)==($last|0);
           if ($2319) {
            $$1$i263 = $first;
            break;
           }
           $2320 = HEAP8[$2318>>0]|0;
           $2321 = ($2320<<24>>24)==(112);
           if (!($2321)) {
            $2322 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($2318,$last,$db)|0);
            $2323 = ($2322|0)==($2318|0);
            if ($2323) {
             $$1$i263 = $first;
             break;
            }
            $2324 = HEAP32[$db>>2]|0;
            $2325 = ((($db)) + 4|0);
            $2326 = HEAP32[$2325>>2]|0;
            $2327 = ($2324|0)==($2326|0);
            if ($2327) {
             $$1$i263 = $first;
             break;
            }
            $2328 = ((($2326)) + -24|0);
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($2,$2308,$2317);
            $2329 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($2,0,1672)|0);
            ;HEAP32[$1>>2]=HEAP32[$2329>>2]|0;HEAP32[$1+4>>2]=HEAP32[$2329+4>>2]|0;HEAP32[$1+8>>2]=HEAP32[$2329+8>>2]|0;
            HEAP32[$2329>>2] = 0;
            $2330 = ((($2329)) + 4|0);
            HEAP32[$2330>>2] = 0;
            $2331 = ((($2329)) + 8|0);
            HEAP32[$2331>>2] = 0;
            $2332 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($1,1595)|0);
            ;HEAP32[$0>>2]=HEAP32[$2332>>2]|0;HEAP32[$0+4>>2]=HEAP32[$2332+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$2332+8>>2]|0;
            HEAP32[$2332>>2] = 0;
            $2333 = ((($2332)) + 4|0);
            HEAP32[$2333>>2] = 0;
            $2334 = ((($2332)) + 8|0);
            HEAP32[$2334>>2] = 0;
            $2335 = HEAP8[$0>>0]|0;
            $2336 = $2335 & 1;
            $2337 = ($2336<<24>>24)==(0);
            $2338 = ((($0)) + 8|0);
            $2339 = HEAP32[$2338>>2]|0;
            $2340 = ((($0)) + 1|0);
            $2341 = $2337 ? $2340 : $2339;
            $2342 = ((($0)) + 4|0);
            $2343 = HEAP32[$2342>>2]|0;
            $2344 = $2335&255;
            $2345 = $2344 >>> 1;
            $2346 = $2337 ? $2345 : $2343;
            (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($2328,$2341,$2346)|0);
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($0);
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($1);
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($2);
            $$1$i263 = $2322;
            break;
           }
           $2347 = ((($2311)) + 2|0);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($6,$2308,$2317);
           $2348 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($6,0,1681)|0);
           ;HEAP32[$5>>2]=HEAP32[$2348>>2]|0;HEAP32[$5+4>>2]=HEAP32[$2348+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$2348+8>>2]|0;
           HEAP32[$2348>>2] = 0;
           $2349 = ((($2348)) + 4|0);
           HEAP32[$2349>>2] = 0;
           $2350 = ((($2348)) + 8|0);
           HEAP32[$2350>>2] = 0;
           $2351 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($5,1595)|0);
           ;HEAP32[$4>>2]=HEAP32[$2351>>2]|0;HEAP32[$4+4>>2]=HEAP32[$2351+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[$2351+8>>2]|0;
           HEAP32[$2351>>2] = 0;
           $2352 = ((($2351)) + 4|0);
           HEAP32[$2352>>2] = 0;
           $2353 = ((($2351)) + 8|0);
           HEAP32[$2353>>2] = 0;
           __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($3,$4);
           $2354 = ((($db)) + 4|0);
           $2355 = HEAP32[$2354>>2]|0;
           $2356 = ((($db)) + 8|0);
           $2357 = HEAP32[$2356>>2]|0;
           $2358 = ($2355>>>0)<($2357>>>0);
           if ($2358) {
            __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($2355,$3);
            $2359 = HEAP32[$2354>>2]|0;
            $2360 = ((($2359)) + 24|0);
            HEAP32[$2354>>2] = $2360;
           } else {
            $2361 = ((($db)) + 12|0);
            $2362 = HEAP32[$db>>2]|0;
            $2363 = $2355;
            $2364 = $2362;
            $2365 = (($2363) - ($2364))|0;
            $2366 = (($2365|0) / 24)&-1;
            $2367 = (($2366) + 1)|0;
            $2368 = ($2365|0)<(-24);
            if ($2368) {
             __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
             // unreachable;
            }
            $2369 = $2357;
            $2370 = (($2369) - ($2364))|0;
            $2371 = (($2370|0) / 24)&-1;
            $2372 = ($2371>>>0)<(1073741823);
            if ($2372) {
             $2373 = $2371 << 1;
             $2374 = ($2373>>>0)<($2367>>>0);
             $2375 = $2374 ? $2367 : $2373;
             $$0$i$i$i$i = $2375;
            } else {
             $$0$i$i$i$i = 2147483647;
            }
            __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i$i,$$0$i$i$i$i,$2366,$2361);
            $2376 = ((($__v$i$i$i)) + 8|0);
            $2377 = HEAP32[$2376>>2]|0;
            __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($2377,$3);
            $2378 = ((($2377)) + 24|0);
            HEAP32[$2376>>2] = $2378;
            __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i$i);
            __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i$i);
           }
           __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
           $$1$i263 = $2347;
           break;
          }
          HEAP32[$num1$i>>2] = 0;
          $2379 = ((($num1$i)) + 4|0);
          HEAP32[$2379>>2] = 0;
          $2380 = ((($num1$i)) + 8|0);
          HEAP32[$2380>>2] = 0;
          $2381 = ($2309<<24>>24)==(95);
          if ($2381) {
           $t12$0$i = $2308;
           label = 521;
          } else {
           $2382 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($2308,$last,$db)|0);
           $2383 = ($2382|0)==($2308|0);
           if ($2383) {
            $t12$0$i = $2308;
            label = 521;
           } else {
            $2384 = HEAP32[$db>>2]|0;
            $2385 = ((($db)) + 4|0);
            $2386 = HEAP32[$2385>>2]|0;
            $2387 = ($2384|0)==($2386|0);
            if (!($2387)) {
             $2388 = ((($2386)) + -24|0);
             __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($7,$2388);
             $2389 = HEAP8[$num1$i>>0]|0;
             $2390 = $2389 & 1;
             $2391 = ($2390<<24>>24)==(0);
             L689: do {
              if ($2391) {
               $2392 = ((($num1$i)) + 1|0);
               HEAP8[$2392>>0] = 0;
               HEAP8[$num1$i>>0] = 0;
              } else {
               $2393 = ((($num1$i)) + 8|0);
               $2394 = HEAP32[$2393>>2]|0;
               HEAP8[$2394>>0] = 0;
               $2395 = ((($num1$i)) + 4|0);
               HEAP32[$2395>>2] = 0;
               $2396 = HEAP32[$num1$i>>2]|0;
               $2397 = $2396 & -2;
               $phitmp$i$i$i$i$i$i$i240 = (($2397) + -1)|0;
               $2398 = $2396&255;
               $2399 = $2398 & 1;
               $2400 = ($2399<<24>>24)==(0);
               do {
                if ($2400) {
                 $2401 = $2396 >>> 1;
                 $2402 = $2401 & 127;
                 $2403 = ($2398&255)<(22);
                 if ($2403) {
                  $2410 = ((($num1$i)) + 1|0);
                  $2411 = $2396 >>> 1;
                  $2412 = $2411 & 127;
                  $2413 = (($2412) + 1)|0;
                  _memcpy(($2410|0),($2394|0),($2413|0))|0;
                  _free($2394);
                  $$ph390 = $2402;
                  break;
                 }
                 $2404 = (($2402) + 16)|0;
                 $2405 = $2404 & 240;
                 $phitmp$i2$i$i$i$i$i$i243 = (($2405) + -1)|0;
                 $2406 = ($phitmp$i2$i$i$i$i$i$i243|0)==($phitmp$i$i$i$i$i$i$i240|0);
                 if ($2406) {
                  break L689;
                 }
                 $2407 = ($phitmp$i2$i$i$i$i$i$i243>>>0)<=($phitmp$i$i$i$i$i$i$i240>>>0);
                 $2408 = (_malloc($2405)|0);
                 $2409 = ($2408|0)==(0|0);
                 $or$cond$i$i$i$i$i$i245 = $2407 & $2409;
                 if ($or$cond$i$i$i$i$i$i245) {
                  break L689;
                 }
                 $2415 = ((($num1$i)) + 1|0);
                 $2416 = $2396 >>> 1;
                 $2417 = $2416 & 127;
                 $2418 = (($2417) + 1)|0;
                 _memcpy(($2408|0),($2415|0),($2418|0))|0;
                 $2419 = $2405 | 1;
                 HEAP32[$num1$i>>2] = $2419;
                 HEAP32[$2395>>2] = $2402;
                 HEAP32[$2393>>2] = $2408;
                 break L689;
                } else {
                 $2414 = ((($num1$i)) + 1|0);
                 HEAP8[$2414>>0] = 0;
                 _free($2394);
                 $$ph390 = 0;
                }
               } while(0);
               $2420 = $$ph390 << 1;
               $2421 = $2420&255;
               HEAP8[$num1$i>>0] = $2421;
              }
             } while(0);
             ;HEAP32[$num1$i>>2]=HEAP32[$7>>2]|0;HEAP32[$num1$i+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$num1$i+8>>2]=HEAP32[$7+8>>2]|0;
             HEAP32[$7>>2] = 0;
             $2422 = ((($7)) + 4|0);
             HEAP32[$2422>>2] = 0;
             $2423 = ((($7)) + 8|0);
             HEAP32[$2423>>2] = 0;
             __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
             $2424 = HEAP32[$2385>>2]|0;
             $2425 = ((($2424)) + -24|0);
             $2427 = $2424;
             while(1) {
              $2426 = ((($2427)) + -24|0);
              HEAP32[$2385>>2] = $2426;
              __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($2426);
              $$pre$i$i256 = HEAP32[$2385>>2]|0;
              $2428 = ($$pre$i$i256|0)==($2425|0);
              if ($2428) {
               $t12$0$i = $2382;
               label = 521;
               break;
              } else {
               $2427 = $$pre$i$i256;
              }
             }
            }
           }
          }
          do {
           if ((label|0) == 521) {
            $2429 = ($t12$0$i|0)==($last|0);
            if ($2429) {
             $$13$i259$ph = $first;
            } else {
             $2430 = HEAP8[$t12$0$i>>0]|0;
             $2431 = ($2430<<24>>24)==(95);
             if ($2431) {
              $2432 = ((($t12$0$i)) + 1|0);
              $2433 = ($2432|0)==($last|0);
              if ($2433) {
               $$13$i259$ph = $first;
              } else {
               $2434 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($2432,$last,$db)|0);
               $2435 = ($2434|0)==($2432|0);
               if ($2435) {
                $$13$i259$ph = $first;
               } else {
                $2436 = HEAP32[$db>>2]|0;
                $2437 = ((($db)) + 4|0);
                $2438 = HEAP32[$2437>>2]|0;
                $2439 = ($2436|0)==($2438|0);
                if ($2439) {
                 break;
                }
                $2440 = ((($2438)) + -24|0);
                __ZNSt3__1plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($9,1672,$num1$i);
                $2441 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($9,1595)|0);
                ;HEAP32[$8>>2]=HEAP32[$2441>>2]|0;HEAP32[$8+4>>2]=HEAP32[$2441+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[$2441+8>>2]|0;
                HEAP32[$2441>>2] = 0;
                $2442 = ((($2441)) + 4|0);
                HEAP32[$2442>>2] = 0;
                $2443 = ((($2441)) + 8|0);
                HEAP32[$2443>>2] = 0;
                $2444 = HEAP8[$8>>0]|0;
                $2445 = $2444 & 1;
                $2446 = ($2445<<24>>24)==(0);
                $2447 = ((($8)) + 8|0);
                $2448 = HEAP32[$2447>>2]|0;
                $2449 = ((($8)) + 1|0);
                $2450 = $2446 ? $2449 : $2448;
                $2451 = ((($8)) + 4|0);
                $2452 = HEAP32[$2451>>2]|0;
                $2453 = $2444&255;
                $2454 = $2453 >>> 1;
                $2455 = $2446 ? $2454 : $2452;
                (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($2440,$2450,$2455)|0);
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
                $$13$i259$ph = $2434;
               }
              }
             } else {
              $$13$i259$ph = $first;
             }
            }
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($num1$i);
            $$1$i263 = $$13$i259$ph;
            break L662;
           }
          } while(0);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($num1$i);
          $$1$i263 = $first;
         } else {
          $$1$i263 = $first;
         }
        } while(0);
        $2456 = ($$1$i263|0)==($first|0);
        if ($2456) {
         break L65;
        }
        $2457 = HEAP32[$db>>2]|0;
        $2458 = ((($db)) + 4|0);
        $2459 = HEAP32[$2458>>2]|0;
        $2460 = ($2457|0)==($2459|0);
        if ($2460) {
         $$0 = $first;
         break L1;
        }
        $2461 = ((($db)) + 16|0);
        $2462 = ((($2459)) + -24|0);
        $2463 = ((($db)) + 12|0);
        $2464 = HEAP32[$2463>>2]|0;
        HEAP32[$48>>2] = $2464;
        __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($47,$2462,$48);
        $2465 = ((($db)) + 20|0);
        $2466 = HEAP32[$2465>>2]|0;
        $2467 = ((($db)) + 24|0);
        $2468 = HEAP32[$2467>>2]|0;
        $2469 = ($2466>>>0)<($2468>>>0);
        if ($2469) {
         $2470 = ((($47)) + 12|0);
         $2471 = ((($2466)) + 4|0);
         $2472 = HEAP32[$2470>>2]|0;
         $2473 = ((($2466)) + 12|0);
         HEAP32[$2473>>2] = $2472;
         $2474 = HEAP32[$47>>2]|0;
         HEAP32[$2466>>2] = $2474;
         $2475 = ((($47)) + 4|0);
         $2476 = HEAP32[$2475>>2]|0;
         HEAP32[$2471>>2] = $2476;
         $2477 = ((($47)) + 8|0);
         $2478 = HEAP32[$2477>>2]|0;
         $2479 = ((($2466)) + 8|0);
         HEAP32[$2479>>2] = $2478;
         HEAP32[$2477>>2] = 0;
         HEAP32[$2475>>2] = 0;
         HEAP32[$47>>2] = 0;
         $2480 = HEAP32[$2465>>2]|0;
         $2481 = ((($2480)) + 16|0);
         HEAP32[$2465>>2] = $2481;
        } else {
         $2482 = ((($db)) + 28|0);
         $2483 = HEAP32[$2461>>2]|0;
         $2484 = $2466;
         $2485 = $2483;
         $2486 = (($2484) - ($2485))|0;
         $2487 = $2486 >> 4;
         $2488 = (($2487) + 1)|0;
         $2489 = ($2486|0)<(-16);
         if ($2489) {
          __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($2461);
          // unreachable;
         }
         $2490 = $2468;
         $2491 = (($2490) - ($2485))|0;
         $2492 = $2491 >> 4;
         $2493 = ($2492>>>0)<(1073741823);
         if ($2493) {
          $2494 = $2491 >> 3;
          $2495 = ($2494>>>0)<($2488>>>0);
          $2496 = $2495 ? $2488 : $2494;
          $$0$i$i$i17 = $2496;
         } else {
          $$0$i$i$i17 = 2147483647;
         }
         __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i$i,$$0$i$i$i17,$2487,$2482);
         $2497 = ((($__v$i$i$i)) + 8|0);
         $2498 = HEAP32[$2497>>2]|0;
         $2499 = ((($47)) + 12|0);
         $2500 = ((($2498)) + 4|0);
         $2501 = HEAP32[$2499>>2]|0;
         $2502 = ((($2498)) + 12|0);
         HEAP32[$2502>>2] = $2501;
         $2503 = HEAP32[$47>>2]|0;
         HEAP32[$2498>>2] = $2503;
         $2504 = ((($47)) + 4|0);
         $2505 = HEAP32[$2504>>2]|0;
         HEAP32[$2500>>2] = $2505;
         $2506 = ((($47)) + 8|0);
         $2507 = HEAP32[$2506>>2]|0;
         $2508 = ((($2498)) + 8|0);
         HEAP32[$2508>>2] = $2507;
         HEAP32[$2506>>2] = 0;
         HEAP32[$2504>>2] = 0;
         HEAP32[$47>>2] = 0;
         $2509 = ((($2498)) + 16|0);
         HEAP32[$2497>>2] = $2509;
         __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($2461,$__v$i$i$i);
         __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i$i);
        }
        __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($47);
        $$0 = $$1$i263;
        break L1;
        break;
       }
       default: {
        break L65;
       }
       }
      }
      break;
     }
     default: {
     }
     }
    } while(0);
    $2510 = (__ZN10__cxxabiv112_GLOBAL__N_118parse_builtin_typeINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db)|0);
    $2511 = ($2510|0)==($first|0);
    if ($2511) {
     $2512 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_nameINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db)|0);
     $2513 = ($2512|0)==($first|0);
     if ($2513) {
      $$0 = $first;
     } else {
      $2514 = HEAP32[$db>>2]|0;
      $2515 = ((($db)) + 4|0);
      $2516 = HEAP32[$2515>>2]|0;
      $2517 = ($2514|0)==($2516|0);
      if ($2517) {
       $$0 = $first;
      } else {
       $2518 = ((($db)) + 16|0);
       $2519 = ((($2516)) + -24|0);
       $2520 = ((($db)) + 12|0);
       $2521 = HEAP32[$2520>>2]|0;
       HEAP32[$50>>2] = $2521;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($49,$2519,$50);
       $2522 = ((($db)) + 20|0);
       $2523 = HEAP32[$2522>>2]|0;
       $2524 = ((($db)) + 24|0);
       $2525 = HEAP32[$2524>>2]|0;
       $2526 = ($2523>>>0)<($2525>>>0);
       if ($2526) {
        $2527 = ((($49)) + 12|0);
        $2528 = ((($2523)) + 4|0);
        $2529 = HEAP32[$2527>>2]|0;
        $2530 = ((($2523)) + 12|0);
        HEAP32[$2530>>2] = $2529;
        $2531 = HEAP32[$49>>2]|0;
        HEAP32[$2523>>2] = $2531;
        $2532 = ((($49)) + 4|0);
        $2533 = HEAP32[$2532>>2]|0;
        HEAP32[$2528>>2] = $2533;
        $2534 = ((($49)) + 8|0);
        $2535 = HEAP32[$2534>>2]|0;
        $2536 = ((($2523)) + 8|0);
        HEAP32[$2536>>2] = $2535;
        HEAP32[$2534>>2] = 0;
        HEAP32[$2532>>2] = 0;
        HEAP32[$49>>2] = 0;
        $2537 = HEAP32[$2522>>2]|0;
        $2538 = ((($2537)) + 16|0);
        HEAP32[$2522>>2] = $2538;
       } else {
        $2539 = ((($db)) + 28|0);
        $2540 = HEAP32[$2518>>2]|0;
        $2541 = $2523;
        $2542 = $2540;
        $2543 = (($2541) - ($2542))|0;
        $2544 = $2543 >> 4;
        $2545 = (($2544) + 1)|0;
        $2546 = ($2543|0)<(-16);
        if ($2546) {
         __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($2518);
         // unreachable;
        }
        $2547 = $2525;
        $2548 = (($2547) - ($2542))|0;
        $2549 = $2548 >> 4;
        $2550 = ($2549>>>0)<(1073741823);
        if ($2550) {
         $2551 = $2548 >> 3;
         $2552 = ($2551>>>0)<($2545>>>0);
         $2553 = $2552 ? $2545 : $2551;
         $$0$i$i$i = $2553;
        } else {
         $$0$i$i$i = 2147483647;
        }
        __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i$i,$$0$i$i$i,$2544,$2539);
        $2554 = ((($__v$i$i$i)) + 8|0);
        $2555 = HEAP32[$2554>>2]|0;
        $2556 = ((($49)) + 12|0);
        $2557 = ((($2555)) + 4|0);
        $2558 = HEAP32[$2556>>2]|0;
        $2559 = ((($2555)) + 12|0);
        HEAP32[$2559>>2] = $2558;
        $2560 = HEAP32[$49>>2]|0;
        HEAP32[$2555>>2] = $2560;
        $2561 = ((($49)) + 4|0);
        $2562 = HEAP32[$2561>>2]|0;
        HEAP32[$2557>>2] = $2562;
        $2563 = ((($49)) + 8|0);
        $2564 = HEAP32[$2563>>2]|0;
        $2565 = ((($2555)) + 8|0);
        HEAP32[$2565>>2] = $2564;
        HEAP32[$2563>>2] = 0;
        HEAP32[$2561>>2] = 0;
        HEAP32[$49>>2] = 0;
        $2566 = ((($2555)) + 16|0);
        HEAP32[$2554>>2] = $2566;
        __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($2518,$__v$i$i$i);
        __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i$i);
       }
       __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($49);
       $$0 = $2512;
      }
     }
    } else {
     $$0 = $2510;
    }
   } else {
    $$0 = $195;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_119parse_cv_qualifiersEPKcS2_Rj($first,$last,$cv) {
 $first = $first|0;
 $last = $last|0;
 $cv = $cv|0;
 var $$0 = 0, $$1 = 0, $$2 = 0, $$pre = 0, $$pre1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 HEAP32[$cv>>2] = 0;
 $0 = ($first|0)==($last|0);
 if ($0) {
  $$2 = $first;
 } else {
  $1 = HEAP8[$first>>0]|0;
  $2 = ($1<<24>>24)==(114);
  if ($2) {
   HEAP32[$cv>>2] = 4;
   $3 = ((($first)) + 1|0);
   $$pre = HEAP8[$3>>0]|0;
   $$0 = $3;$4 = $$pre;$7 = 4;
  } else {
   $$0 = $first;$4 = $1;$7 = 0;
  }
  $5 = ($4<<24>>24)==(86);
  if ($5) {
   $6 = $7 | 2;
   HEAP32[$cv>>2] = $6;
   $8 = ((($$0)) + 1|0);
   $$pre1 = HEAP8[$8>>0]|0;
   $$1 = $8;$12 = $6;$9 = $$pre1;
  } else {
   $$1 = $$0;$12 = $7;$9 = $4;
  }
  $10 = ($9<<24>>24)==(75);
  if ($10) {
   $11 = $12 | 1;
   HEAP32[$cv>>2] = $11;
   $13 = ((($$1)) + 1|0);
   $$2 = $13;
  } else {
   $$2 = $$1;
  }
 }
 return ($$2|0);
}
function __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___assert_fail((3288|0),(3311|0),303,(1487|0));
 // unreachable;
}
function __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 12|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($this)) + 16|0);
 HEAP32[$1>>2] = $__a;
 $2 = ($__cap|0)==(0);
 if ($2) {
  $6 = 0;
 } else {
  $3 = HEAP32[$__a>>2]|0;
  $4 = $__cap << 4;
  $5 = (__ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE8allocateEj($3,$4)|0);
  $6 = $5;
 }
 HEAP32[$this>>2] = $6;
 $7 = (($6) + ($__start<<4)|0);
 $8 = ((($this)) + 8|0);
 HEAP32[$8>>2] = $7;
 $9 = ((($this)) + 4|0);
 HEAP32[$9>>2] = $7;
 $10 = (($6) + ($__cap<<4)|0);
 $11 = ((($this)) + 12|0);
 HEAP32[$11>>2] = $10;
 return;
}
function __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $$0$i1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ((($this)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($__v)) + 4|0);
 $4 = ($2|0)==($0|0);
 if (!($4)) {
  $$0$i1 = $2;
  while(1) {
   $5 = HEAP32[$3>>2]|0;
   $6 = ((($5)) + -16|0);
   $7 = ((($$0$i1)) + -16|0);
   $8 = ((($$0$i1)) + -4|0);
   HEAP32[$6>>2] = 0;
   $9 = ((($5)) + -12|0);
   HEAP32[$9>>2] = 0;
   $10 = ((($5)) + -8|0);
   $11 = HEAP32[$8>>2]|0;
   HEAP32[$10>>2] = 0;
   $12 = ((($5)) + -4|0);
   HEAP32[$12>>2] = $11;
   $13 = HEAP32[$7>>2]|0;
   HEAP32[$6>>2] = $13;
   $14 = ((($$0$i1)) + -12|0);
   $15 = HEAP32[$14>>2]|0;
   HEAP32[$9>>2] = $15;
   $16 = ((($$0$i1)) + -8|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ((($5)) + -8|0);
   HEAP32[$18>>2] = $17;
   HEAP32[$16>>2] = 0;
   HEAP32[$14>>2] = 0;
   HEAP32[$7>>2] = 0;
   $19 = HEAP32[$3>>2]|0;
   $20 = ((($19)) + -16|0);
   HEAP32[$3>>2] = $20;
   $21 = ($7|0)==($0|0);
   if ($21) {
    break;
   } else {
    $$0$i1 = $7;
   }
  }
 }
 $22 = HEAP32[$this>>2]|0;
 $23 = HEAP32[$3>>2]|0;
 HEAP32[$this>>2] = $23;
 HEAP32[$3>>2] = $22;
 $24 = ((($__v)) + 8|0);
 $25 = HEAP32[$1>>2]|0;
 $26 = HEAP32[$24>>2]|0;
 HEAP32[$1>>2] = $26;
 HEAP32[$24>>2] = $25;
 $27 = ((($this)) + 8|0);
 $28 = ((($__v)) + 12|0);
 $29 = HEAP32[$27>>2]|0;
 $30 = HEAP32[$28>>2]|0;
 HEAP32[$27>>2] = $30;
 HEAP32[$28>>2] = $29;
 $31 = HEAP32[$3>>2]|0;
 HEAP32[$__v>>2] = $31;
 return;
}
function __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($this)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==($1|0);
 if (!($4)) {
  $6 = $3;
  while(1) {
   $5 = ((($6)) + -16|0);
   HEAP32[$2>>2] = $5;
   __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($5);
   $7 = HEAP32[$2>>2]|0;
   $8 = ($7|0)==($1|0);
   if ($8) {
    break;
   } else {
    $6 = $7;
   }
  }
 }
 $9 = HEAP32[$this>>2]|0;
 $10 = ($9|0)==(0|0);
 if (!($10)) {
  $11 = ((($this)) + 16|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ((($this)) + 12|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = $14;
  $16 = $9;
  $17 = (($15) - ($16))|0;
  $18 = HEAP32[$12>>2]|0;
  __ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE10deallocateEPcj($18,$9,$17);
 }
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($this,$__str) {
 $this = $this|0;
 $__str = $__str|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$__str>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  ;HEAP32[$this>>2]=HEAP32[$__str>>2]|0;HEAP32[$this+4>>2]=HEAP32[$__str+4>>2]|0;HEAP32[$this+8>>2]=HEAP32[$__str+8>>2]|0;
 } else {
  $3 = ((($__str)) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ((($__str)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($this,$4,$6);
 }
 return;
}
function __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 12|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($this)) + 16|0);
 HEAP32[$1>>2] = $__a;
 $2 = ($__cap|0)==(0);
 if ($2) {
  $6 = 0;
 } else {
  $3 = HEAP32[$__a>>2]|0;
  $4 = ($__cap*24)|0;
  $5 = (__ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE8allocateEj($3,$4)|0);
  $6 = $5;
 }
 HEAP32[$this>>2] = $6;
 $7 = (($6) + (($__start*24)|0)|0);
 $8 = ((($this)) + 8|0);
 HEAP32[$8>>2] = $7;
 $9 = ((($this)) + 4|0);
 HEAP32[$9>>2] = $7;
 $10 = (($6) + (($__cap*24)|0)|0);
 $11 = ((($this)) + 12|0);
 HEAP32[$11>>2] = $10;
 return;
}
function __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($this)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==($1|0);
 if (!($4)) {
  $6 = $3;
  while(1) {
   $5 = ((($6)) + -24|0);
   HEAP32[$2>>2] = $5;
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($5);
   $7 = HEAP32[$2>>2]|0;
   $8 = ($7|0)==($1|0);
   if ($8) {
    break;
   } else {
    $6 = $7;
   }
  }
 }
 $9 = HEAP32[$this>>2]|0;
 $10 = ($9|0)==(0|0);
 if (!($10)) {
  $11 = ((($this)) + 16|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ((($this)) + 12|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = $14;
  $16 = $9;
  $17 = (($15) - ($16))|0;
  $18 = HEAP32[$12>>2]|0;
  __ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE10deallocateEPcj($18,$9,$17);
 }
 return;
}
function __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $$0$i1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ((($this)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($__v)) + 4|0);
 $4 = ($2|0)==($0|0);
 if (!($4)) {
  $$0$i1 = $2;
  while(1) {
   $5 = HEAP32[$3>>2]|0;
   $6 = ((($5)) + -24|0);
   $7 = ((($$0$i1)) + -24|0);
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($6,$7);
   $8 = HEAP32[$3>>2]|0;
   $9 = ((($8)) + -24|0);
   HEAP32[$3>>2] = $9;
   $10 = ($7|0)==($0|0);
   if ($10) {
    break;
   } else {
    $$0$i1 = $7;
   }
  }
 }
 $11 = HEAP32[$this>>2]|0;
 $12 = HEAP32[$3>>2]|0;
 HEAP32[$this>>2] = $12;
 HEAP32[$3>>2] = $11;
 $13 = ((($__v)) + 8|0);
 $14 = HEAP32[$1>>2]|0;
 $15 = HEAP32[$13>>2]|0;
 HEAP32[$1>>2] = $15;
 HEAP32[$13>>2] = $14;
 $16 = ((($this)) + 8|0);
 $17 = ((($__v)) + 12|0);
 $18 = HEAP32[$16>>2]|0;
 $19 = HEAP32[$17>>2]|0;
 HEAP32[$16>>2] = $19;
 HEAP32[$17>>2] = $18;
 $20 = HEAP32[$3>>2]|0;
 HEAP32[$__v>>2] = $20;
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_118parse_builtin_typeINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db) {
 $first = $first|0;
 $last = $last|0;
 $db = $db|0;
 var $$0 = 0, $$0$i$i$i = 0, $$0$i$i$i103 = 0, $$0$i$i$i108 = 0, $$0$i$i$i113 = 0, $$0$i$i$i118 = 0, $$0$i$i$i123 = 0, $$0$i$i$i128 = 0, $$0$i$i$i133 = 0, $$0$i$i$i138 = 0, $$0$i$i$i14 = 0, $$0$i$i$i143 = 0, $$0$i$i$i19 = 0, $$0$i$i$i24 = 0, $$0$i$i$i29 = 0, $$0$i$i$i34 = 0, $$0$i$i$i39 = 0, $$0$i$i$i4 = 0, $$0$i$i$i44 = 0, $$0$i$i$i49 = 0;
 var $$0$i$i$i54 = 0, $$0$i$i$i59 = 0, $$0$i$i$i66 = 0, $$0$i$i$i71 = 0, $$0$i$i$i76 = 0, $$0$i$i$i81 = 0, $$0$i$i$i88 = 0, $$0$i$i$i9 = 0, $$0$i$i$i93 = 0, $$0$i$i$i98 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
 var $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
 var $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
 var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0;
 var $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0;
 var $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0;
 var $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0;
 var $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0;
 var $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0;
 var $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0;
 var $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0;
 var $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0;
 var $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0;
 var $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0;
 var $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0;
 var $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0;
 var $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0;
 var $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0;
 var $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0;
 var $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0;
 var $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0;
 var $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0;
 var $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0;
 var $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0;
 var $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0;
 var $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0;
 var $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0;
 var $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0;
 var $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0;
 var $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0;
 var $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0;
 var $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0;
 var $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0;
 var $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0;
 var $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $__v$i$i142 = 0, $first$ = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 720|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__v$i$i142 = sp + 696|0;
 $0 = sp + 672|0;
 $1 = sp + 648|0;
 $2 = sp + 624|0;
 $3 = sp + 600|0;
 $4 = sp + 576|0;
 $5 = sp + 552|0;
 $6 = sp + 528|0;
 $7 = sp + 504|0;
 $8 = sp + 480|0;
 $9 = sp + 456|0;
 $10 = sp + 432|0;
 $11 = sp + 408|0;
 $12 = sp + 384|0;
 $13 = sp + 360|0;
 $14 = sp + 336|0;
 $15 = sp + 120|0;
 $16 = sp;
 $17 = sp + 24|0;
 $18 = sp + 48|0;
 $19 = sp + 72|0;
 $20 = sp + 96|0;
 $21 = sp + 144|0;
 $22 = sp + 168|0;
 $23 = sp + 192|0;
 $24 = sp + 216|0;
 $25 = sp + 240|0;
 $26 = sp + 264|0;
 $27 = sp + 288|0;
 $28 = sp + 312|0;
 $29 = ($first|0)==($last|0);
 L1: do {
  if ($29) {
   $$0 = $first;
  } else {
   $30 = HEAP8[$first>>0]|0;
   $31 = $30 << 24 >> 24;
   do {
    switch ($31|0) {
    case 118:  {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj5EEERAT__Kc($0,3094);
     $32 = ((($db)) + 4|0);
     $33 = HEAP32[$32>>2]|0;
     $34 = ((($db)) + 8|0);
     $35 = HEAP32[$34>>2]|0;
     $36 = ($33>>>0)<($35>>>0);
     if ($36) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($33,$0);
      $37 = HEAP32[$32>>2]|0;
      $38 = ((($37)) + 24|0);
      HEAP32[$32>>2] = $38;
     } else {
      $39 = ((($db)) + 12|0);
      $40 = HEAP32[$db>>2]|0;
      $41 = $33;
      $42 = $40;
      $43 = (($41) - ($42))|0;
      $44 = (($43|0) / 24)&-1;
      $45 = (($44) + 1)|0;
      $46 = ($43|0)<(-24);
      if ($46) {
       __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
       // unreachable;
      }
      $47 = $35;
      $48 = (($47) - ($42))|0;
      $49 = (($48|0) / 24)&-1;
      $50 = ($49>>>0)<(1073741823);
      if ($50) {
       $51 = $49 << 1;
       $52 = ($51>>>0)<($45>>>0);
       $53 = $52 ? $45 : $51;
       $$0$i$i$i = $53;
      } else {
       $$0$i$i$i = 2147483647;
      }
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i142,$$0$i$i$i,$44,$39);
      $54 = ((($__v$i$i142)) + 8|0);
      $55 = HEAP32[$54>>2]|0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($55,$0);
      $56 = ((($55)) + 24|0);
      HEAP32[$54>>2] = $56;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i142);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i142);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($0);
     $57 = ((($first)) + 1|0);
     $$0 = $57;
     break L1;
     break;
    }
    case 119:  {
     HEAP8[$1>>0] = 14;
     $58 = ((($1)) + 1|0);
     ;HEAP8[$58>>0]=HEAP8[2656>>0]|0;HEAP8[$58+1>>0]=HEAP8[2656+1>>0]|0;HEAP8[$58+2>>0]=HEAP8[2656+2>>0]|0;HEAP8[$58+3>>0]=HEAP8[2656+3>>0]|0;HEAP8[$58+4>>0]=HEAP8[2656+4>>0]|0;HEAP8[$58+5>>0]=HEAP8[2656+5>>0]|0;HEAP8[$58+6>>0]=HEAP8[2656+6>>0]|0;
     $59 = ((($1)) + 8|0);
     HEAP8[$59>>0] = 0;
     $60 = ((($1)) + 12|0);
     HEAP32[$60>>2] = 0;
     $61 = ((($60)) + 4|0);
     HEAP32[$61>>2] = 0;
     $62 = ((($60)) + 8|0);
     HEAP32[$62>>2] = 0;
     $63 = ((($db)) + 4|0);
     $64 = HEAP32[$63>>2]|0;
     $65 = ((($db)) + 8|0);
     $66 = HEAP32[$65>>2]|0;
     $67 = ($64>>>0)<($66>>>0);
     if ($67) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($64,$1);
      $68 = HEAP32[$63>>2]|0;
      $69 = ((($68)) + 24|0);
      HEAP32[$63>>2] = $69;
     } else {
      $70 = ((($db)) + 12|0);
      $71 = HEAP32[$db>>2]|0;
      $72 = $64;
      $73 = $71;
      $74 = (($72) - ($73))|0;
      $75 = (($74|0) / 24)&-1;
      $76 = (($75) + 1)|0;
      $77 = ($74|0)<(-24);
      if ($77) {
       __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
       // unreachable;
      }
      $78 = $66;
      $79 = (($78) - ($73))|0;
      $80 = (($79|0) / 24)&-1;
      $81 = ($80>>>0)<(1073741823);
      if ($81) {
       $82 = $80 << 1;
       $83 = ($82>>>0)<($76>>>0);
       $84 = $83 ? $76 : $82;
       $$0$i$i$i4 = $84;
      } else {
       $$0$i$i$i4 = 2147483647;
      }
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i142,$$0$i$i$i4,$75,$70);
      $85 = ((($__v$i$i142)) + 8|0);
      $86 = HEAP32[$85>>2]|0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($86,$1);
      $87 = ((($86)) + 24|0);
      HEAP32[$85>>2] = $87;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i142);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i142);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1);
     $88 = ((($first)) + 1|0);
     $$0 = $88;
     break L1;
     break;
    }
    case 98:  {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj5EEERAT__Kc($2,3099);
     $89 = ((($db)) + 4|0);
     $90 = HEAP32[$89>>2]|0;
     $91 = ((($db)) + 8|0);
     $92 = HEAP32[$91>>2]|0;
     $93 = ($90>>>0)<($92>>>0);
     if ($93) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($90,$2);
      $94 = HEAP32[$89>>2]|0;
      $95 = ((($94)) + 24|0);
      HEAP32[$89>>2] = $95;
     } else {
      $96 = ((($db)) + 12|0);
      $97 = HEAP32[$db>>2]|0;
      $98 = $90;
      $99 = $97;
      $100 = (($98) - ($99))|0;
      $101 = (($100|0) / 24)&-1;
      $102 = (($101) + 1)|0;
      $103 = ($100|0)<(-24);
      if ($103) {
       __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
       // unreachable;
      }
      $104 = $92;
      $105 = (($104) - ($99))|0;
      $106 = (($105|0) / 24)&-1;
      $107 = ($106>>>0)<(1073741823);
      if ($107) {
       $108 = $106 << 1;
       $109 = ($108>>>0)<($102>>>0);
       $110 = $109 ? $102 : $108;
       $$0$i$i$i9 = $110;
      } else {
       $$0$i$i$i9 = 2147483647;
      }
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i142,$$0$i$i$i9,$101,$96);
      $111 = ((($__v$i$i142)) + 8|0);
      $112 = HEAP32[$111>>2]|0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($112,$2);
      $113 = ((($112)) + 24|0);
      HEAP32[$111>>2] = $113;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i142);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i142);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($2);
     $114 = ((($first)) + 1|0);
     $$0 = $114;
     break L1;
     break;
    }
    case 99:  {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj5EEERAT__Kc($3,2675);
     $115 = ((($db)) + 4|0);
     $116 = HEAP32[$115>>2]|0;
     $117 = ((($db)) + 8|0);
     $118 = HEAP32[$117>>2]|0;
     $119 = ($116>>>0)<($118>>>0);
     if ($119) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($116,$3);
      $120 = HEAP32[$115>>2]|0;
      $121 = ((($120)) + 24|0);
      HEAP32[$115>>2] = $121;
     } else {
      $122 = ((($db)) + 12|0);
      $123 = HEAP32[$db>>2]|0;
      $124 = $116;
      $125 = $123;
      $126 = (($124) - ($125))|0;
      $127 = (($126|0) / 24)&-1;
      $128 = (($127) + 1)|0;
      $129 = ($126|0)<(-24);
      if ($129) {
       __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
       // unreachable;
      }
      $130 = $118;
      $131 = (($130) - ($125))|0;
      $132 = (($131|0) / 24)&-1;
      $133 = ($132>>>0)<(1073741823);
      if ($133) {
       $134 = $132 << 1;
       $135 = ($134>>>0)<($128>>>0);
       $136 = $135 ? $128 : $134;
       $$0$i$i$i14 = $136;
      } else {
       $$0$i$i$i14 = 2147483647;
      }
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i142,$$0$i$i$i14,$127,$122);
      $137 = ((($__v$i$i142)) + 8|0);
      $138 = HEAP32[$137>>2]|0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($138,$3);
      $139 = ((($138)) + 24|0);
      HEAP32[$137>>2] = $139;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i142);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i142);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $140 = ((($first)) + 1|0);
     $$0 = $140;
     break L1;
     break;
    }
    case 97:  {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj12EEERAT__Kc($4,2680);
     $141 = ((($db)) + 4|0);
     $142 = HEAP32[$141>>2]|0;
     $143 = ((($db)) + 8|0);
     $144 = HEAP32[$143>>2]|0;
     $145 = ($142>>>0)<($144>>>0);
     if ($145) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($142,$4);
      $146 = HEAP32[$141>>2]|0;
      $147 = ((($146)) + 24|0);
      HEAP32[$141>>2] = $147;
     } else {
      $148 = ((($db)) + 12|0);
      $149 = HEAP32[$db>>2]|0;
      $150 = $142;
      $151 = $149;
      $152 = (($150) - ($151))|0;
      $153 = (($152|0) / 24)&-1;
      $154 = (($153) + 1)|0;
      $155 = ($152|0)<(-24);
      if ($155) {
       __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
       // unreachable;
      }
      $156 = $144;
      $157 = (($156) - ($151))|0;
      $158 = (($157|0) / 24)&-1;
      $159 = ($158>>>0)<(1073741823);
      if ($159) {
       $160 = $158 << 1;
       $161 = ($160>>>0)<($154>>>0);
       $162 = $161 ? $154 : $160;
       $$0$i$i$i19 = $162;
      } else {
       $$0$i$i$i19 = 2147483647;
      }
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i142,$$0$i$i$i19,$153,$148);
      $163 = ((($__v$i$i142)) + 8|0);
      $164 = HEAP32[$163>>2]|0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($164,$4);
      $165 = ((($164)) + 24|0);
      HEAP32[$163>>2] = $165;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i142);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i142);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($4);
     $166 = ((($first)) + 1|0);
     $$0 = $166;
     break L1;
     break;
    }
    case 104:  {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj14EEERAT__Kc($5,2692);
     $167 = ((($db)) + 4|0);
     $168 = HEAP32[$167>>2]|0;
     $169 = ((($db)) + 8|0);
     $170 = HEAP32[$169>>2]|0;
     $171 = ($168>>>0)<($170>>>0);
     if ($171) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($168,$5);
      $172 = HEAP32[$167>>2]|0;
      $173 = ((($172)) + 24|0);
      HEAP32[$167>>2] = $173;
     } else {
      $174 = ((($db)) + 12|0);
      $175 = HEAP32[$db>>2]|0;
      $176 = $168;
      $177 = $175;
      $178 = (($176) - ($177))|0;
      $179 = (($178|0) / 24)&-1;
      $180 = (($179) + 1)|0;
      $181 = ($178|0)<(-24);
      if ($181) {
       __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
       // unreachable;
      }
      $182 = $170;
      $183 = (($182) - ($177))|0;
      $184 = (($183|0) / 24)&-1;
      $185 = ($184>>>0)<(1073741823);
      if ($185) {
       $186 = $184 << 1;
       $187 = ($186>>>0)<($180>>>0);
       $188 = $187 ? $180 : $186;
       $$0$i$i$i24 = $188;
      } else {
       $$0$i$i$i24 = 2147483647;
      }
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i142,$$0$i$i$i24,$179,$174);
      $189 = ((($__v$i$i142)) + 8|0);
      $190 = HEAP32[$189>>2]|0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($190,$5);
      $191 = ((($190)) + 24|0);
      HEAP32[$189>>2] = $191;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i142);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i142);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($5);
     $192 = ((($first)) + 1|0);
     $$0 = $192;
     break L1;
     break;
    }
    case 115:  {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj6EEERAT__Kc($6,2706);
     $193 = ((($db)) + 4|0);
     $194 = HEAP32[$193>>2]|0;
     $195 = ((($db)) + 8|0);
     $196 = HEAP32[$195>>2]|0;
     $197 = ($194>>>0)<($196>>>0);
     if ($197) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($194,$6);
      $198 = HEAP32[$193>>2]|0;
      $199 = ((($198)) + 24|0);
      HEAP32[$193>>2] = $199;
     } else {
      $200 = ((($db)) + 12|0);
      $201 = HEAP32[$db>>2]|0;
      $202 = $194;
      $203 = $201;
      $204 = (($202) - ($203))|0;
      $205 = (($204|0) / 24)&-1;
      $206 = (($205) + 1)|0;
      $207 = ($204|0)<(-24);
      if ($207) {
       __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
       // unreachable;
      }
      $208 = $196;
      $209 = (($208) - ($203))|0;
      $210 = (($209|0) / 24)&-1;
      $211 = ($210>>>0)<(1073741823);
      if ($211) {
       $212 = $210 << 1;
       $213 = ($212>>>0)<($206>>>0);
       $214 = $213 ? $206 : $212;
       $$0$i$i$i29 = $214;
      } else {
       $$0$i$i$i29 = 2147483647;
      }
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i142,$$0$i$i$i29,$205,$200);
      $215 = ((($__v$i$i142)) + 8|0);
      $216 = HEAP32[$215>>2]|0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($216,$6);
      $217 = ((($216)) + 24|0);
      HEAP32[$215>>2] = $217;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i142);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i142);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($6);
     $218 = ((($first)) + 1|0);
     $$0 = $218;
     break L1;
     break;
    }
    case 116:  {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj15EEERAT__Kc($7,2712);
     $219 = ((($db)) + 4|0);
     $220 = HEAP32[$219>>2]|0;
     $221 = ((($db)) + 8|0);
     $222 = HEAP32[$221>>2]|0;
     $223 = ($220>>>0)<($222>>>0);
     if ($223) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($220,$7);
      $224 = HEAP32[$219>>2]|0;
      $225 = ((($224)) + 24|0);
      HEAP32[$219>>2] = $225;
     } else {
      $226 = ((($db)) + 12|0);
      $227 = HEAP32[$db>>2]|0;
      $228 = $220;
      $229 = $227;
      $230 = (($228) - ($229))|0;
      $231 = (($230|0) / 24)&-1;
      $232 = (($231) + 1)|0;
      $233 = ($230|0)<(-24);
      if ($233) {
       __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
       // unreachable;
      }
      $234 = $222;
      $235 = (($234) - ($229))|0;
      $236 = (($235|0) / 24)&-1;
      $237 = ($236>>>0)<(1073741823);
      if ($237) {
       $238 = $236 << 1;
       $239 = ($238>>>0)<($232>>>0);
       $240 = $239 ? $232 : $238;
       $$0$i$i$i34 = $240;
      } else {
       $$0$i$i$i34 = 2147483647;
      }
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i142,$$0$i$i$i34,$231,$226);
      $241 = ((($__v$i$i142)) + 8|0);
      $242 = HEAP32[$241>>2]|0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($242,$7);
      $243 = ((($242)) + 24|0);
      HEAP32[$241>>2] = $243;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i142);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i142);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($7);
     $244 = ((($first)) + 1|0);
     $$0 = $244;
     break L1;
     break;
    }
    case 105:  {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj4EEERAT__Kc($8,3104);
     $245 = ((($db)) + 4|0);
     $246 = HEAP32[$245>>2]|0;
     $247 = ((($db)) + 8|0);
     $248 = HEAP32[$247>>2]|0;
     $249 = ($246>>>0)<($248>>>0);
     if ($249) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($246,$8);
      $250 = HEAP32[$245>>2]|0;
      $251 = ((($250)) + 24|0);
      HEAP32[$245>>2] = $251;
     } else {
      $252 = ((($db)) + 12|0);
      $253 = HEAP32[$db>>2]|0;
      $254 = $246;
      $255 = $253;
      $256 = (($254) - ($255))|0;
      $257 = (($256|0) / 24)&-1;
      $258 = (($257) + 1)|0;
      $259 = ($256|0)<(-24);
      if ($259) {
       __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
       // unreachable;
      }
      $260 = $248;
      $261 = (($260) - ($255))|0;
      $262 = (($261|0) / 24)&-1;
      $263 = ($262>>>0)<(1073741823);
      if ($263) {
       $264 = $262 << 1;
       $265 = ($264>>>0)<($258>>>0);
       $266 = $265 ? $258 : $264;
       $$0$i$i$i39 = $266;
      } else {
       $$0$i$i$i39 = 2147483647;
      }
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i142,$$0$i$i$i39,$257,$252);
      $267 = ((($__v$i$i142)) + 8|0);
      $268 = HEAP32[$267>>2]|0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($268,$8);
      $269 = ((($268)) + 24|0);
      HEAP32[$267>>2] = $269;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i142);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i142);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($8);
     $270 = ((($first)) + 1|0);
     $$0 = $270;
     break L1;
     break;
    }
    case 106:  {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj13EEERAT__Kc($9,3108);
     $271 = ((($db)) + 4|0);
     $272 = HEAP32[$271>>2]|0;
     $273 = ((($db)) + 8|0);
     $274 = HEAP32[$273>>2]|0;
     $275 = ($272>>>0)<($274>>>0);
     if ($275) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($272,$9);
      $276 = HEAP32[$271>>2]|0;
      $277 = ((($276)) + 24|0);
      HEAP32[$271>>2] = $277;
     } else {
      $278 = ((($db)) + 12|0);
      $279 = HEAP32[$db>>2]|0;
      $280 = $272;
      $281 = $279;
      $282 = (($280) - ($281))|0;
      $283 = (($282|0) / 24)&-1;
      $284 = (($283) + 1)|0;
      $285 = ($282|0)<(-24);
      if ($285) {
       __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
       // unreachable;
      }
      $286 = $274;
      $287 = (($286) - ($281))|0;
      $288 = (($287|0) / 24)&-1;
      $289 = ($288>>>0)<(1073741823);
      if ($289) {
       $290 = $288 << 1;
       $291 = ($290>>>0)<($284>>>0);
       $292 = $291 ? $284 : $290;
       $$0$i$i$i44 = $292;
      } else {
       $$0$i$i$i44 = 2147483647;
      }
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i142,$$0$i$i$i44,$283,$278);
      $293 = ((($__v$i$i142)) + 8|0);
      $294 = HEAP32[$293>>2]|0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($294,$9);
      $295 = ((($294)) + 24|0);
      HEAP32[$293>>2] = $295;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i142);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i142);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($9);
     $296 = ((($first)) + 1|0);
     $$0 = $296;
     break L1;
     break;
    }
    case 108:  {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj5EEERAT__Kc($10,3121);
     $297 = ((($db)) + 4|0);
     $298 = HEAP32[$297>>2]|0;
     $299 = ((($db)) + 8|0);
     $300 = HEAP32[$299>>2]|0;
     $301 = ($298>>>0)<($300>>>0);
     if ($301) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($298,$10);
      $302 = HEAP32[$297>>2]|0;
      $303 = ((($302)) + 24|0);
      HEAP32[$297>>2] = $303;
     } else {
      $304 = ((($db)) + 12|0);
      $305 = HEAP32[$db>>2]|0;
      $306 = $298;
      $307 = $305;
      $308 = (($306) - ($307))|0;
      $309 = (($308|0) / 24)&-1;
      $310 = (($309) + 1)|0;
      $311 = ($308|0)<(-24);
      if ($311) {
       __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
       // unreachable;
      }
      $312 = $300;
      $313 = (($312) - ($307))|0;
      $314 = (($313|0) / 24)&-1;
      $315 = ($314>>>0)<(1073741823);
      if ($315) {
       $316 = $314 << 1;
       $317 = ($316>>>0)<($310>>>0);
       $318 = $317 ? $310 : $316;
       $$0$i$i$i49 = $318;
      } else {
       $$0$i$i$i49 = 2147483647;
      }
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i142,$$0$i$i$i49,$309,$304);
      $319 = ((($__v$i$i142)) + 8|0);
      $320 = HEAP32[$319>>2]|0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($320,$10);
      $321 = ((($320)) + 24|0);
      HEAP32[$319>>2] = $321;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i142);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i142);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($10);
     $322 = ((($first)) + 1|0);
     $$0 = $322;
     break L1;
     break;
    }
    case 109:  {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj14EEERAT__Kc($11,3126);
     $323 = ((($db)) + 4|0);
     $324 = HEAP32[$323>>2]|0;
     $325 = ((($db)) + 8|0);
     $326 = HEAP32[$325>>2]|0;
     $327 = ($324>>>0)<($326>>>0);
     if ($327) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($324,$11);
      $328 = HEAP32[$323>>2]|0;
      $329 = ((($328)) + 24|0);
      HEAP32[$323>>2] = $329;
     } else {
      $330 = ((($db)) + 12|0);
      $331 = HEAP32[$db>>2]|0;
      $332 = $324;
      $333 = $331;
      $334 = (($332) - ($333))|0;
      $335 = (($334|0) / 24)&-1;
      $336 = (($335) + 1)|0;
      $337 = ($334|0)<(-24);
      if ($337) {
       __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
       // unreachable;
      }
      $338 = $326;
      $339 = (($338) - ($333))|0;
      $340 = (($339|0) / 24)&-1;
      $341 = ($340>>>0)<(1073741823);
      if ($341) {
       $342 = $340 << 1;
       $343 = ($342>>>0)<($336>>>0);
       $344 = $343 ? $336 : $342;
       $$0$i$i$i54 = $344;
      } else {
       $$0$i$i$i54 = 2147483647;
      }
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i142,$$0$i$i$i54,$335,$330);
      $345 = ((($__v$i$i142)) + 8|0);
      $346 = HEAP32[$345>>2]|0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($346,$11);
      $347 = ((($346)) + 24|0);
      HEAP32[$345>>2] = $347;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i142);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i142);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($11);
     $348 = ((($first)) + 1|0);
     $$0 = $348;
     break L1;
     break;
    }
    case 120:  {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($12,3140);
     $349 = ((($db)) + 4|0);
     $350 = HEAP32[$349>>2]|0;
     $351 = ((($db)) + 8|0);
     $352 = HEAP32[$351>>2]|0;
     $353 = ($350>>>0)<($352>>>0);
     if ($353) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($350,$12);
      $354 = HEAP32[$349>>2]|0;
      $355 = ((($354)) + 24|0);
      HEAP32[$349>>2] = $355;
     } else {
      $356 = ((($db)) + 12|0);
      $357 = HEAP32[$db>>2]|0;
      $358 = $350;
      $359 = $357;
      $360 = (($358) - ($359))|0;
      $361 = (($360|0) / 24)&-1;
      $362 = (($361) + 1)|0;
      $363 = ($360|0)<(-24);
      if ($363) {
       __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
       // unreachable;
      }
      $364 = $352;
      $365 = (($364) - ($359))|0;
      $366 = (($365|0) / 24)&-1;
      $367 = ($366>>>0)<(1073741823);
      if ($367) {
       $368 = $366 << 1;
       $369 = ($368>>>0)<($362>>>0);
       $370 = $369 ? $362 : $368;
       $$0$i$i$i59 = $370;
      } else {
       $$0$i$i$i59 = 2147483647;
      }
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i142,$$0$i$i$i59,$361,$356);
      $371 = ((($__v$i$i142)) + 8|0);
      $372 = HEAP32[$371>>2]|0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($372,$12);
      $373 = ((($372)) + 24|0);
      HEAP32[$371>>2] = $373;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i142);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i142);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($12);
     $374 = ((($first)) + 1|0);
     $$0 = $374;
     break L1;
     break;
    }
    case 121:  {
     $375 = (_malloc(32)|0);
     $376 = ((($13)) + 8|0);
     HEAP32[$376>>2] = $375;
     HEAP32[$13>>2] = 33;
     $377 = ((($13)) + 4|0);
     HEAP32[$377>>2] = 18;
     dest=$375; src=3150; stop=dest+18|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
     $378 = ((($375)) + 18|0);
     HEAP8[$378>>0] = 0;
     $379 = ((($13)) + 12|0);
     HEAP32[$379>>2] = 0;
     $380 = ((($379)) + 4|0);
     HEAP32[$380>>2] = 0;
     $381 = ((($379)) + 8|0);
     HEAP32[$381>>2] = 0;
     $382 = ((($db)) + 4|0);
     $383 = HEAP32[$382>>2]|0;
     $384 = ((($db)) + 8|0);
     $385 = HEAP32[$384>>2]|0;
     $386 = ($383>>>0)<($385>>>0);
     if ($386) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($383,$13);
      $387 = HEAP32[$382>>2]|0;
      $388 = ((($387)) + 24|0);
      HEAP32[$382>>2] = $388;
     } else {
      $389 = ((($db)) + 12|0);
      $390 = HEAP32[$db>>2]|0;
      $391 = $383;
      $392 = $390;
      $393 = (($391) - ($392))|0;
      $394 = (($393|0) / 24)&-1;
      $395 = (($394) + 1)|0;
      $396 = ($393|0)<(-24);
      if ($396) {
       __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
       // unreachable;
      }
      $397 = $385;
      $398 = (($397) - ($392))|0;
      $399 = (($398|0) / 24)&-1;
      $400 = ($399>>>0)<(1073741823);
      if ($400) {
       $401 = $399 << 1;
       $402 = ($401>>>0)<($395>>>0);
       $403 = $402 ? $395 : $401;
       $$0$i$i$i66 = $403;
      } else {
       $$0$i$i$i66 = 2147483647;
      }
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i142,$$0$i$i$i66,$394,$389);
      $404 = ((($__v$i$i142)) + 8|0);
      $405 = HEAP32[$404>>2]|0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($405,$13);
      $406 = ((($405)) + 24|0);
      HEAP32[$404>>2] = $406;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i142);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i142);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($13);
     $407 = ((($first)) + 1|0);
     $$0 = $407;
     break L1;
     break;
    }
    case 110:  {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj9EEERAT__Kc($14,2742);
     $408 = ((($db)) + 4|0);
     $409 = HEAP32[$408>>2]|0;
     $410 = ((($db)) + 8|0);
     $411 = HEAP32[$410>>2]|0;
     $412 = ($409>>>0)<($411>>>0);
     if ($412) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($409,$14);
      $413 = HEAP32[$408>>2]|0;
      $414 = ((($413)) + 24|0);
      HEAP32[$408>>2] = $414;
     } else {
      $415 = ((($db)) + 12|0);
      $416 = HEAP32[$db>>2]|0;
      $417 = $409;
      $418 = $416;
      $419 = (($417) - ($418))|0;
      $420 = (($419|0) / 24)&-1;
      $421 = (($420) + 1)|0;
      $422 = ($419|0)<(-24);
      if ($422) {
       __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
       // unreachable;
      }
      $423 = $411;
      $424 = (($423) - ($418))|0;
      $425 = (($424|0) / 24)&-1;
      $426 = ($425>>>0)<(1073741823);
      if ($426) {
       $427 = $425 << 1;
       $428 = ($427>>>0)<($421>>>0);
       $429 = $428 ? $421 : $427;
       $$0$i$i$i71 = $429;
      } else {
       $$0$i$i$i71 = 2147483647;
      }
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i142,$$0$i$i$i71,$420,$415);
      $430 = ((($__v$i$i142)) + 8|0);
      $431 = HEAP32[$430>>2]|0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($431,$14);
      $432 = ((($431)) + 24|0);
      HEAP32[$430>>2] = $432;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i142);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i142);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($14);
     $433 = ((($first)) + 1|0);
     $$0 = $433;
     break L1;
     break;
    }
    case 111:  {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj18EEERAT__Kc($15,2751);
     $434 = ((($db)) + 4|0);
     $435 = HEAP32[$434>>2]|0;
     $436 = ((($db)) + 8|0);
     $437 = HEAP32[$436>>2]|0;
     $438 = ($435>>>0)<($437>>>0);
     if ($438) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($435,$15);
      $439 = HEAP32[$434>>2]|0;
      $440 = ((($439)) + 24|0);
      HEAP32[$434>>2] = $440;
     } else {
      $441 = ((($db)) + 12|0);
      $442 = HEAP32[$db>>2]|0;
      $443 = $435;
      $444 = $442;
      $445 = (($443) - ($444))|0;
      $446 = (($445|0) / 24)&-1;
      $447 = (($446) + 1)|0;
      $448 = ($445|0)<(-24);
      if ($448) {
       __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
       // unreachable;
      }
      $449 = $437;
      $450 = (($449) - ($444))|0;
      $451 = (($450|0) / 24)&-1;
      $452 = ($451>>>0)<(1073741823);
      if ($452) {
       $453 = $451 << 1;
       $454 = ($453>>>0)<($447>>>0);
       $455 = $454 ? $447 : $453;
       $$0$i$i$i76 = $455;
      } else {
       $$0$i$i$i76 = 2147483647;
      }
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i142,$$0$i$i$i76,$446,$441);
      $456 = ((($__v$i$i142)) + 8|0);
      $457 = HEAP32[$456>>2]|0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($457,$15);
      $458 = ((($457)) + 24|0);
      HEAP32[$456>>2] = $458;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i142);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i142);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($15);
     $459 = ((($first)) + 1|0);
     $$0 = $459;
     break L1;
     break;
    }
    case 102:  {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj6EEERAT__Kc($16,3169);
     $460 = ((($db)) + 4|0);
     $461 = HEAP32[$460>>2]|0;
     $462 = ((($db)) + 8|0);
     $463 = HEAP32[$462>>2]|0;
     $464 = ($461>>>0)<($463>>>0);
     if ($464) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($461,$16);
      $465 = HEAP32[$460>>2]|0;
      $466 = ((($465)) + 24|0);
      HEAP32[$460>>2] = $466;
     } else {
      $467 = ((($db)) + 12|0);
      $468 = HEAP32[$db>>2]|0;
      $469 = $461;
      $470 = $468;
      $471 = (($469) - ($470))|0;
      $472 = (($471|0) / 24)&-1;
      $473 = (($472) + 1)|0;
      $474 = ($471|0)<(-24);
      if ($474) {
       __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
       // unreachable;
      }
      $475 = $463;
      $476 = (($475) - ($470))|0;
      $477 = (($476|0) / 24)&-1;
      $478 = ($477>>>0)<(1073741823);
      if ($478) {
       $479 = $477 << 1;
       $480 = ($479>>>0)<($473>>>0);
       $481 = $480 ? $473 : $479;
       $$0$i$i$i81 = $481;
      } else {
       $$0$i$i$i81 = 2147483647;
      }
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i142,$$0$i$i$i81,$472,$467);
      $482 = ((($__v$i$i142)) + 8|0);
      $483 = HEAP32[$482>>2]|0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($483,$16);
      $484 = ((($483)) + 24|0);
      HEAP32[$482>>2] = $484;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i142);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i142);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($16);
     $485 = ((($first)) + 1|0);
     $$0 = $485;
     break L1;
     break;
    }
    case 100:  {
     HEAP8[$17>>0] = 12;
     $486 = ((($17)) + 1|0);
     ;HEAP8[$486>>0]=HEAP8[3175>>0]|0;HEAP8[$486+1>>0]=HEAP8[3175+1>>0]|0;HEAP8[$486+2>>0]=HEAP8[3175+2>>0]|0;HEAP8[$486+3>>0]=HEAP8[3175+3>>0]|0;HEAP8[$486+4>>0]=HEAP8[3175+4>>0]|0;HEAP8[$486+5>>0]=HEAP8[3175+5>>0]|0;
     $487 = ((($17)) + 7|0);
     HEAP8[$487>>0] = 0;
     $488 = ((($17)) + 12|0);
     HEAP32[$488>>2] = 0;
     $489 = ((($488)) + 4|0);
     HEAP32[$489>>2] = 0;
     $490 = ((($488)) + 8|0);
     HEAP32[$490>>2] = 0;
     $491 = ((($db)) + 4|0);
     $492 = HEAP32[$491>>2]|0;
     $493 = ((($db)) + 8|0);
     $494 = HEAP32[$493>>2]|0;
     $495 = ($492>>>0)<($494>>>0);
     if ($495) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($492,$17);
      $496 = HEAP32[$491>>2]|0;
      $497 = ((($496)) + 24|0);
      HEAP32[$491>>2] = $497;
     } else {
      $498 = ((($db)) + 12|0);
      $499 = HEAP32[$db>>2]|0;
      $500 = $492;
      $501 = $499;
      $502 = (($500) - ($501))|0;
      $503 = (($502|0) / 24)&-1;
      $504 = (($503) + 1)|0;
      $505 = ($502|0)<(-24);
      if ($505) {
       __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
       // unreachable;
      }
      $506 = $494;
      $507 = (($506) - ($501))|0;
      $508 = (($507|0) / 24)&-1;
      $509 = ($508>>>0)<(1073741823);
      if ($509) {
       $510 = $508 << 1;
       $511 = ($510>>>0)<($504>>>0);
       $512 = $511 ? $504 : $510;
       $$0$i$i$i88 = $512;
      } else {
       $$0$i$i$i88 = 2147483647;
      }
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i142,$$0$i$i$i88,$503,$498);
      $513 = ((($__v$i$i142)) + 8|0);
      $514 = HEAP32[$513>>2]|0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($514,$17);
      $515 = ((($514)) + 24|0);
      HEAP32[$513>>2] = $515;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i142);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i142);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($17);
     $516 = ((($first)) + 1|0);
     $$0 = $516;
     break L1;
     break;
    }
    case 101:  {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj12EEERAT__Kc($18,3182);
     $517 = ((($db)) + 4|0);
     $518 = HEAP32[$517>>2]|0;
     $519 = ((($db)) + 8|0);
     $520 = HEAP32[$519>>2]|0;
     $521 = ($518>>>0)<($520>>>0);
     if ($521) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($518,$18);
      $522 = HEAP32[$517>>2]|0;
      $523 = ((($522)) + 24|0);
      HEAP32[$517>>2] = $523;
     } else {
      $524 = ((($db)) + 12|0);
      $525 = HEAP32[$db>>2]|0;
      $526 = $518;
      $527 = $525;
      $528 = (($526) - ($527))|0;
      $529 = (($528|0) / 24)&-1;
      $530 = (($529) + 1)|0;
      $531 = ($528|0)<(-24);
      if ($531) {
       __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
       // unreachable;
      }
      $532 = $520;
      $533 = (($532) - ($527))|0;
      $534 = (($533|0) / 24)&-1;
      $535 = ($534>>>0)<(1073741823);
      if ($535) {
       $536 = $534 << 1;
       $537 = ($536>>>0)<($530>>>0);
       $538 = $537 ? $530 : $536;
       $$0$i$i$i93 = $538;
      } else {
       $$0$i$i$i93 = 2147483647;
      }
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i142,$$0$i$i$i93,$529,$524);
      $539 = ((($__v$i$i142)) + 8|0);
      $540 = HEAP32[$539>>2]|0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($540,$18);
      $541 = ((($540)) + 24|0);
      HEAP32[$539>>2] = $541;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i142);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i142);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($18);
     $542 = ((($first)) + 1|0);
     $$0 = $542;
     break L1;
     break;
    }
    case 103:  {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($19,3194);
     $543 = ((($db)) + 4|0);
     $544 = HEAP32[$543>>2]|0;
     $545 = ((($db)) + 8|0);
     $546 = HEAP32[$545>>2]|0;
     $547 = ($544>>>0)<($546>>>0);
     if ($547) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($544,$19);
      $548 = HEAP32[$543>>2]|0;
      $549 = ((($548)) + 24|0);
      HEAP32[$543>>2] = $549;
     } else {
      $550 = ((($db)) + 12|0);
      $551 = HEAP32[$db>>2]|0;
      $552 = $544;
      $553 = $551;
      $554 = (($552) - ($553))|0;
      $555 = (($554|0) / 24)&-1;
      $556 = (($555) + 1)|0;
      $557 = ($554|0)<(-24);
      if ($557) {
       __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
       // unreachable;
      }
      $558 = $546;
      $559 = (($558) - ($553))|0;
      $560 = (($559|0) / 24)&-1;
      $561 = ($560>>>0)<(1073741823);
      if ($561) {
       $562 = $560 << 1;
       $563 = ($562>>>0)<($556>>>0);
       $564 = $563 ? $556 : $562;
       $$0$i$i$i98 = $564;
      } else {
       $$0$i$i$i98 = 2147483647;
      }
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i142,$$0$i$i$i98,$555,$550);
      $565 = ((($__v$i$i142)) + 8|0);
      $566 = HEAP32[$565>>2]|0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($566,$19);
      $567 = ((($566)) + 24|0);
      HEAP32[$565>>2] = $567;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i142);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i142);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($19);
     $568 = ((($first)) + 1|0);
     $$0 = $568;
     break L1;
     break;
    }
    case 122:  {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj4EEERAT__Kc($20,3205);
     $569 = ((($db)) + 4|0);
     $570 = HEAP32[$569>>2]|0;
     $571 = ((($db)) + 8|0);
     $572 = HEAP32[$571>>2]|0;
     $573 = ($570>>>0)<($572>>>0);
     if ($573) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($570,$20);
      $574 = HEAP32[$569>>2]|0;
      $575 = ((($574)) + 24|0);
      HEAP32[$569>>2] = $575;
     } else {
      $576 = ((($db)) + 12|0);
      $577 = HEAP32[$db>>2]|0;
      $578 = $570;
      $579 = $577;
      $580 = (($578) - ($579))|0;
      $581 = (($580|0) / 24)&-1;
      $582 = (($581) + 1)|0;
      $583 = ($580|0)<(-24);
      if ($583) {
       __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
       // unreachable;
      }
      $584 = $572;
      $585 = (($584) - ($579))|0;
      $586 = (($585|0) / 24)&-1;
      $587 = ($586>>>0)<(1073741823);
      if ($587) {
       $588 = $586 << 1;
       $589 = ($588>>>0)<($582>>>0);
       $590 = $589 ? $582 : $588;
       $$0$i$i$i103 = $590;
      } else {
       $$0$i$i$i103 = 2147483647;
      }
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i142,$$0$i$i$i103,$581,$576);
      $591 = ((($__v$i$i142)) + 8|0);
      $592 = HEAP32[$591>>2]|0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($592,$20);
      $593 = ((($592)) + 24|0);
      HEAP32[$591>>2] = $593;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i142);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i142);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($20);
     $594 = ((($first)) + 1|0);
     $$0 = $594;
     break L1;
     break;
    }
    case 117:  {
     $595 = ((($first)) + 1|0);
     $596 = (__ZN10__cxxabiv112_GLOBAL__N_117parse_source_nameINS0_2DbEEEPKcS4_S4_RT_($595,$last,$db)|0);
     $597 = ($596|0)==($595|0);
     $first$ = $597 ? $first : $596;
     STACKTOP = sp;return ($first$|0);
     break;
    }
    case 68:  {
     $598 = ((($first)) + 1|0);
     $599 = ($598|0)==($last|0);
     if ($599) {
      $$0 = $first;
      break L1;
     }
     $600 = HEAP8[$598>>0]|0;
     $601 = $600 << 24 >> 24;
     switch ($601|0) {
     case 100:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($21,3209);
      $602 = ((($db)) + 4|0);
      $603 = HEAP32[$602>>2]|0;
      $604 = ((($db)) + 8|0);
      $605 = HEAP32[$604>>2]|0;
      $606 = ($603>>>0)<($605>>>0);
      if ($606) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($603,$21);
       $607 = HEAP32[$602>>2]|0;
       $608 = ((($607)) + 24|0);
       HEAP32[$602>>2] = $608;
      } else {
       $609 = ((($db)) + 12|0);
       $610 = HEAP32[$db>>2]|0;
       $611 = $603;
       $612 = $610;
       $613 = (($611) - ($612))|0;
       $614 = (($613|0) / 24)&-1;
       $615 = (($614) + 1)|0;
       $616 = ($613|0)<(-24);
       if ($616) {
        __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
        // unreachable;
       }
       $617 = $605;
       $618 = (($617) - ($612))|0;
       $619 = (($618|0) / 24)&-1;
       $620 = ($619>>>0)<(1073741823);
       if ($620) {
        $621 = $619 << 1;
        $622 = ($621>>>0)<($615>>>0);
        $623 = $622 ? $615 : $621;
        $$0$i$i$i108 = $623;
       } else {
        $$0$i$i$i108 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i142,$$0$i$i$i108,$614,$609);
       $624 = ((($__v$i$i142)) + 8|0);
       $625 = HEAP32[$624>>2]|0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($625,$21);
       $626 = ((($625)) + 24|0);
       HEAP32[$624>>2] = $626;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i142);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i142);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($21);
      $627 = ((($first)) + 2|0);
      $$0 = $627;
      break L1;
      break;
     }
     case 101:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($22,3219);
      $628 = ((($db)) + 4|0);
      $629 = HEAP32[$628>>2]|0;
      $630 = ((($db)) + 8|0);
      $631 = HEAP32[$630>>2]|0;
      $632 = ($629>>>0)<($631>>>0);
      if ($632) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($629,$22);
       $633 = HEAP32[$628>>2]|0;
       $634 = ((($633)) + 24|0);
       HEAP32[$628>>2] = $634;
      } else {
       $635 = ((($db)) + 12|0);
       $636 = HEAP32[$db>>2]|0;
       $637 = $629;
       $638 = $636;
       $639 = (($637) - ($638))|0;
       $640 = (($639|0) / 24)&-1;
       $641 = (($640) + 1)|0;
       $642 = ($639|0)<(-24);
       if ($642) {
        __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
        // unreachable;
       }
       $643 = $631;
       $644 = (($643) - ($638))|0;
       $645 = (($644|0) / 24)&-1;
       $646 = ($645>>>0)<(1073741823);
       if ($646) {
        $647 = $645 << 1;
        $648 = ($647>>>0)<($641>>>0);
        $649 = $648 ? $641 : $647;
        $$0$i$i$i113 = $649;
       } else {
        $$0$i$i$i113 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i142,$$0$i$i$i113,$640,$635);
       $650 = ((($__v$i$i142)) + 8|0);
       $651 = HEAP32[$650>>2]|0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($651,$22);
       $652 = ((($651)) + 24|0);
       HEAP32[$650>>2] = $652;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i142);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i142);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($22);
      $653 = ((($first)) + 2|0);
      $$0 = $653;
      break L1;
      break;
     }
     case 102:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($23,3230);
      $654 = ((($db)) + 4|0);
      $655 = HEAP32[$654>>2]|0;
      $656 = ((($db)) + 8|0);
      $657 = HEAP32[$656>>2]|0;
      $658 = ($655>>>0)<($657>>>0);
      if ($658) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($655,$23);
       $659 = HEAP32[$654>>2]|0;
       $660 = ((($659)) + 24|0);
       HEAP32[$654>>2] = $660;
      } else {
       $661 = ((($db)) + 12|0);
       $662 = HEAP32[$db>>2]|0;
       $663 = $655;
       $664 = $662;
       $665 = (($663) - ($664))|0;
       $666 = (($665|0) / 24)&-1;
       $667 = (($666) + 1)|0;
       $668 = ($665|0)<(-24);
       if ($668) {
        __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
        // unreachable;
       }
       $669 = $657;
       $670 = (($669) - ($664))|0;
       $671 = (($670|0) / 24)&-1;
       $672 = ($671>>>0)<(1073741823);
       if ($672) {
        $673 = $671 << 1;
        $674 = ($673>>>0)<($667>>>0);
        $675 = $674 ? $667 : $673;
        $$0$i$i$i118 = $675;
       } else {
        $$0$i$i$i118 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i142,$$0$i$i$i118,$666,$661);
       $676 = ((($__v$i$i142)) + 8|0);
       $677 = HEAP32[$676>>2]|0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($677,$23);
       $678 = ((($677)) + 24|0);
       HEAP32[$676>>2] = $678;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i142);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i142);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($23);
      $679 = ((($first)) + 2|0);
      $$0 = $679;
      break L1;
      break;
     }
     case 104:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($24,3240);
      $680 = ((($db)) + 4|0);
      $681 = HEAP32[$680>>2]|0;
      $682 = ((($db)) + 8|0);
      $683 = HEAP32[$682>>2]|0;
      $684 = ($681>>>0)<($683>>>0);
      if ($684) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($681,$24);
       $685 = HEAP32[$680>>2]|0;
       $686 = ((($685)) + 24|0);
       HEAP32[$680>>2] = $686;
      } else {
       $687 = ((($db)) + 12|0);
       $688 = HEAP32[$db>>2]|0;
       $689 = $681;
       $690 = $688;
       $691 = (($689) - ($690))|0;
       $692 = (($691|0) / 24)&-1;
       $693 = (($692) + 1)|0;
       $694 = ($691|0)<(-24);
       if ($694) {
        __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
        // unreachable;
       }
       $695 = $683;
       $696 = (($695) - ($690))|0;
       $697 = (($696|0) / 24)&-1;
       $698 = ($697>>>0)<(1073741823);
       if ($698) {
        $699 = $697 << 1;
        $700 = ($699>>>0)<($693>>>0);
        $701 = $700 ? $693 : $699;
        $$0$i$i$i123 = $701;
       } else {
        $$0$i$i$i123 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i142,$$0$i$i$i123,$692,$687);
       $702 = ((($__v$i$i142)) + 8|0);
       $703 = HEAP32[$702>>2]|0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($703,$24);
       $704 = ((($703)) + 24|0);
       HEAP32[$702>>2] = $704;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i142);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i142);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($24);
      $705 = ((($first)) + 2|0);
      $$0 = $705;
      break L1;
      break;
     }
     case 105:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj9EEERAT__Kc($25,3250);
      $706 = ((($db)) + 4|0);
      $707 = HEAP32[$706>>2]|0;
      $708 = ((($db)) + 8|0);
      $709 = HEAP32[$708>>2]|0;
      $710 = ($707>>>0)<($709>>>0);
      if ($710) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($707,$25);
       $711 = HEAP32[$706>>2]|0;
       $712 = ((($711)) + 24|0);
       HEAP32[$706>>2] = $712;
      } else {
       $713 = ((($db)) + 12|0);
       $714 = HEAP32[$db>>2]|0;
       $715 = $707;
       $716 = $714;
       $717 = (($715) - ($716))|0;
       $718 = (($717|0) / 24)&-1;
       $719 = (($718) + 1)|0;
       $720 = ($717|0)<(-24);
       if ($720) {
        __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
        // unreachable;
       }
       $721 = $709;
       $722 = (($721) - ($716))|0;
       $723 = (($722|0) / 24)&-1;
       $724 = ($723>>>0)<(1073741823);
       if ($724) {
        $725 = $723 << 1;
        $726 = ($725>>>0)<($719>>>0);
        $727 = $726 ? $719 : $725;
        $$0$i$i$i128 = $727;
       } else {
        $$0$i$i$i128 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i142,$$0$i$i$i128,$718,$713);
       $728 = ((($__v$i$i142)) + 8|0);
       $729 = HEAP32[$728>>2]|0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($729,$25);
       $730 = ((($729)) + 24|0);
       HEAP32[$728>>2] = $730;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i142);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i142);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($25);
      $731 = ((($first)) + 2|0);
      $$0 = $731;
      break L1;
      break;
     }
     case 115:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj9EEERAT__Kc($26,3259);
      $732 = ((($db)) + 4|0);
      $733 = HEAP32[$732>>2]|0;
      $734 = ((($db)) + 8|0);
      $735 = HEAP32[$734>>2]|0;
      $736 = ($733>>>0)<($735>>>0);
      if ($736) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($733,$26);
       $737 = HEAP32[$732>>2]|0;
       $738 = ((($737)) + 24|0);
       HEAP32[$732>>2] = $738;
      } else {
       $739 = ((($db)) + 12|0);
       $740 = HEAP32[$db>>2]|0;
       $741 = $733;
       $742 = $740;
       $743 = (($741) - ($742))|0;
       $744 = (($743|0) / 24)&-1;
       $745 = (($744) + 1)|0;
       $746 = ($743|0)<(-24);
       if ($746) {
        __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
        // unreachable;
       }
       $747 = $735;
       $748 = (($747) - ($742))|0;
       $749 = (($748|0) / 24)&-1;
       $750 = ($749>>>0)<(1073741823);
       if ($750) {
        $751 = $749 << 1;
        $752 = ($751>>>0)<($745>>>0);
        $753 = $752 ? $745 : $751;
        $$0$i$i$i133 = $753;
       } else {
        $$0$i$i$i133 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i142,$$0$i$i$i133,$744,$739);
       $754 = ((($__v$i$i142)) + 8|0);
       $755 = HEAP32[$754>>2]|0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($755,$26);
       $756 = ((($755)) + 24|0);
       HEAP32[$754>>2] = $756;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i142);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i142);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($26);
      $757 = ((($first)) + 2|0);
      $$0 = $757;
      break L1;
      break;
     }
     case 97:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj5EEERAT__Kc($27,3268);
      $758 = ((($db)) + 4|0);
      $759 = HEAP32[$758>>2]|0;
      $760 = ((($db)) + 8|0);
      $761 = HEAP32[$760>>2]|0;
      $762 = ($759>>>0)<($761>>>0);
      if ($762) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($759,$27);
       $763 = HEAP32[$758>>2]|0;
       $764 = ((($763)) + 24|0);
       HEAP32[$758>>2] = $764;
      } else {
       $765 = ((($db)) + 12|0);
       $766 = HEAP32[$db>>2]|0;
       $767 = $759;
       $768 = $766;
       $769 = (($767) - ($768))|0;
       $770 = (($769|0) / 24)&-1;
       $771 = (($770) + 1)|0;
       $772 = ($769|0)<(-24);
       if ($772) {
        __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
        // unreachable;
       }
       $773 = $761;
       $774 = (($773) - ($768))|0;
       $775 = (($774|0) / 24)&-1;
       $776 = ($775>>>0)<(1073741823);
       if ($776) {
        $777 = $775 << 1;
        $778 = ($777>>>0)<($771>>>0);
        $779 = $778 ? $771 : $777;
        $$0$i$i$i138 = $779;
       } else {
        $$0$i$i$i138 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i142,$$0$i$i$i138,$770,$765);
       $780 = ((($__v$i$i142)) + 8|0);
       $781 = HEAP32[$780>>2]|0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($781,$27);
       $782 = ((($781)) + 24|0);
       HEAP32[$780>>2] = $782;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i142);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i142);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($27);
      $783 = ((($first)) + 2|0);
      $$0 = $783;
      break L1;
      break;
     }
     case 110:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj15EEERAT__Kc($28,3273);
      $784 = ((($db)) + 4|0);
      $785 = HEAP32[$784>>2]|0;
      $786 = ((($db)) + 8|0);
      $787 = HEAP32[$786>>2]|0;
      $788 = ($785>>>0)<($787>>>0);
      if ($788) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($785,$28);
       $789 = HEAP32[$784>>2]|0;
       $790 = ((($789)) + 24|0);
       HEAP32[$784>>2] = $790;
      } else {
       $791 = ((($db)) + 12|0);
       $792 = HEAP32[$db>>2]|0;
       $793 = $785;
       $794 = $792;
       $795 = (($793) - ($794))|0;
       $796 = (($795|0) / 24)&-1;
       $797 = (($796) + 1)|0;
       $798 = ($795|0)<(-24);
       if ($798) {
        __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
        // unreachable;
       }
       $799 = $787;
       $800 = (($799) - ($794))|0;
       $801 = (($800|0) / 24)&-1;
       $802 = ($801>>>0)<(1073741823);
       if ($802) {
        $803 = $801 << 1;
        $804 = ($803>>>0)<($797>>>0);
        $805 = $804 ? $797 : $803;
        $$0$i$i$i143 = $805;
       } else {
        $$0$i$i$i143 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i142,$$0$i$i$i143,$796,$791);
       $806 = ((($__v$i$i142)) + 8|0);
       $807 = HEAP32[$806>>2]|0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($807,$28);
       $808 = ((($807)) + 24|0);
       HEAP32[$806>>2] = $808;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i142);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i142);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($28);
      $809 = ((($first)) + 2|0);
      $$0 = $809;
      break L1;
      break;
     }
     default: {
      $$0 = $first;
      break L1;
     }
     }
     break;
    }
    default: {
     $$0 = $first;
     break L1;
    }
    }
   } while(0);
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($this,$__s,$__sz) {
 $this = $this|0;
 $__s = $__s|0;
 $__sz = $__sz|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__sz>>>0)>(4294967279);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $1 = ($__sz>>>0)<(11);
 if ($1) {
  $2 = $__sz << 1;
  $3 = $2&255;
  HEAP8[$this>>0] = $3;
  $4 = ((($this)) + 1|0);
  $__p$0 = $4;
 } else {
  $5 = (($__sz) + 16)|0;
  $6 = $5 & -16;
  $7 = (_malloc($6)|0);
  $8 = ((($this)) + 8|0);
  HEAP32[$8>>2] = $7;
  $9 = $6 | 1;
  HEAP32[$this>>2] = $9;
  $10 = ((($this)) + 4|0);
  HEAP32[$10>>2] = $__sz;
  $__p$0 = $7;
 }
 _memcpy(($__p$0|0),($__s|0),($__sz|0))|0;
 $11 = (($__p$0) + ($__sz)|0);
 HEAP8[$11>>0] = 0;
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE5eraseEjj($this) {
 $this = $this|0;
 var $$pre = 0, $$pre1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $7 = $0&255;
  $8 = $7 >>> 1;
  $9 = ((($this)) + 1|0);
  $10 = $8;$14 = $9;
 } else {
  $3 = ((($this)) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ((($this)) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $10 = $4;$14 = $6;
 }
 $not$ = ($10|0)!=(0);
 $11 = $not$&1;
 $12 = ($10|0)==($11|0);
 $$pre1 = (($10) - ($11))|0;
 if ($12) {
  $16 = $0;
 } else {
  $13 = (($14) + ($11)|0);
  _memmove(($14|0),($13|0),($$pre1|0))|0;
  $$pre = HEAP8[$this>>0]|0;
  $16 = $$pre;
 }
 $15 = $16 & 1;
 $17 = ($15<<24>>24)==(0);
 if ($17) {
  $19 = $$pre1 << 1;
  $20 = $19&255;
  HEAP8[$this>>0] = $20;
 } else {
  $18 = ((($this)) + 4|0);
  HEAP32[$18>>2] = $$pre1;
 }
 $21 = (($14) + ($$pre1)|0);
 HEAP8[$21>>0] = 0;
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($first,$last) {
 $first = $first|0;
 $last = $last|0;
 var $$0 = 0, $$1 = 0, $$first = 0, $$off = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isdigit = 0, $isdigittmp = 0, $t$0$pn = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ($first|0)==($last|0);
 L1: do {
  if ($0) {
   $$1 = $first;
  } else {
   $1 = HEAP8[$first>>0]|0;
   $2 = ($1<<24>>24)==(110);
   $3 = ((($first)) + 1|0);
   $$first = $2 ? $3 : $first;
   $4 = ($$first|0)==($last|0);
   if ($4) {
    $$1 = $first;
   } else {
    $5 = HEAP8[$$first>>0]|0;
    $6 = ($5<<24>>24)==(48);
    if ($6) {
     $7 = ((($$first)) + 1|0);
     $$1 = $7;
     break;
    }
    $$off = (($5) + -49)<<24>>24;
    $8 = ($$off&255)<(9);
    if ($8) {
     $t$0$pn = $$first;
     while(1) {
      $$0 = ((($t$0$pn)) + 1|0);
      $9 = ($$0|0)==($last|0);
      if ($9) {
       $$1 = $last;
       break L1;
      }
      $10 = HEAP8[$$0>>0]|0;
      $11 = $10 << 24 >> 24;
      $isdigittmp = (($11) + -48)|0;
      $isdigit = ($isdigittmp>>>0)<(10);
      if ($isdigit) {
       $t$0$pn = $$0;
      } else {
       $$1 = $$0;
       break;
      }
     }
    } else {
     $$1 = $first;
    }
   }
  }
 } while(0);
 return ($$1|0);
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKcj($this,$__pos,$__s,$__n) {
 $this = $this|0;
 $__pos = $__pos|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $$0 = 0, $$1 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $5 = $0&255;
  $6 = $5 >>> 1;
  $7 = $6;
 } else {
  $3 = ((($this)) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $7 = $4;
 }
 $8 = ($7>>>0)<($__pos>>>0);
 if ($8) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_out_of_rangeEv($this);
  // unreachable;
 }
 if ($2) {
  $13 = 10;$17 = $0;
 } else {
  $9 = HEAP32[$this>>2]|0;
  $10 = $9 & -2;
  $phitmp$i = (($10) + -1)|0;
  $11 = $9&255;
  $13 = $phitmp$i;$17 = $11;
 }
 $12 = (($13) - ($7))|0;
 $14 = ($12>>>0)<($__n>>>0);
 if ($14) {
  $39 = (($7) + ($__n))|0;
  $40 = (($39) - ($13))|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$13,$40,$7,$__pos,0,$__n,$__s);
 } else {
  $15 = ($__n|0)==(0);
  if (!($15)) {
   $16 = $17 & 1;
   $18 = ($16<<24>>24)==(0);
   if ($18) {
    $21 = ((($this)) + 1|0);
    $23 = $21;
   } else {
    $19 = ((($this)) + 8|0);
    $20 = HEAP32[$19>>2]|0;
    $23 = $20;
   }
   $22 = ($7|0)==($__pos|0);
   if ($22) {
    $$pre = (($23) + ($__pos)|0);
    $$1 = $__s;$$pre$phiZ2D = $$pre;
   } else {
    $24 = (($7) - ($__pos))|0;
    $25 = (($23) + ($__pos)|0);
    $26 = ($25>>>0)<=($__s>>>0);
    $27 = (($23) + ($7)|0);
    $28 = ($27>>>0)>($__s>>>0);
    $or$cond = $26 & $28;
    $29 = (($__s) + ($__n)|0);
    $$0 = $or$cond ? $29 : $__s;
    $$sum = (($__n) + ($__pos))|0;
    $30 = (($23) + ($$sum)|0);
    _memmove(($30|0),($25|0),($24|0))|0;
    $$1 = $$0;$$pre$phiZ2D = $25;
   }
   _memmove(($$pre$phiZ2D|0),($$1|0),($__n|0))|0;
   $31 = (($7) + ($__n))|0;
   $32 = HEAP8[$this>>0]|0;
   $33 = $32 & 1;
   $34 = ($33<<24>>24)==(0);
   if ($34) {
    $36 = $31 << 1;
    $37 = $36&255;
    HEAP8[$this>>0] = $37;
   } else {
    $35 = ((($this)) + 4|0);
    HEAP32[$35>>2] = $31;
   }
   $38 = (($23) + ($31)|0);
   HEAP8[$38>>0] = 0;
  }
 }
 return ($this|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db) {
 $first = $first|0;
 $last = $last|0;
 $db = $db|0;
 var $$0 = 0, $$0$i$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i299 = 0, $$0$i$i$i$i348 = 0, $$0$i254 = 0, $$019$i = 0, $$02$i = 0, $$02$i310 = 0, $$02$i317 = 0, $$03$i = 0, $$03$i174 = 0, $$03$i189 = 0, $$03$i200 = 0, $$03$i211 = 0, $$03$i265 = 0, $$03$i456 = 0, $$03$i486 = 0, $$06$i = 0, $$06$i248 = 0;
 var $$06$i345 = 0, $$06$i426 = 0, $$2$i302 = 0, $$2$i398 = 0, $$221$i = 0, $$311$i = 0, $$9$i = 0, $$first = 0, $$first$i = 0, $$ph518 = 0, $$ph520524 = 0, $$phi$trans$insert = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i$i = 0, $$pre$i$i$i$i372 = 0, $$pre$i$i$i$i436 = 0, $$pre$i$i$i$i466 = 0;
 var $$pre$i$i$i87 = 0, $$pre$i$i212 = 0, $$pre$i$i222 = 0, $$pre$i$i250 = 0, $$pre$i$i289 = 0, $$pre$i$i305 = 0, $$pre$i$i312 = 0, $$pre$i$i319 = 0, $$pre$i$i352 = 0, $$pre$i$i393 = 0, $$pre$i$i400 = 0, $$pre$i116 = 0, $$pre$i133 = 0, $$pre$i135 = 0, $$pre$i157 = 0, $$pre$i159 = 0, $$pre$i161 = 0, $$pre$i24$i = 0, $$pre$i48$i = 0, $$pre$phi511Z2D = 0;
 var $$pre$phiZ2D = 0, $$pre507 = 0, $$pre509 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0;
 var $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0;
 var $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0;
 var $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0;
 var $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0;
 var $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0;
 var $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0;
 var $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0;
 var $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0;
 var $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0;
 var $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0;
 var $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0;
 var $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0;
 var $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0;
 var $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0;
 var $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0;
 var $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0;
 var $1300 = 0, $1301 = 0, $1302 = 0, $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0;
 var $1319 = 0, $132 = 0, $1320 = 0, $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0;
 var $1337 = 0, $1338 = 0, $1339 = 0, $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0;
 var $1355 = 0, $1356 = 0, $1357 = 0, $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0;
 var $1373 = 0, $1374 = 0, $1375 = 0, $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0;
 var $1391 = 0, $1392 = 0, $1393 = 0, $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0;
 var $1409 = 0, $141 = 0, $1410 = 0, $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0;
 var $1427 = 0, $1428 = 0, $1429 = 0, $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0;
 var $1445 = 0, $1446 = 0, $1447 = 0, $1448 = 0, $1449 = 0, $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0;
 var $1463 = 0, $1464 = 0, $1465 = 0, $1466 = 0, $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0;
 var $1481 = 0, $1482 = 0, $1483 = 0, $1484 = 0, $1485 = 0, $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0;
 var $15 = 0, $150 = 0, $1500 = 0, $1501 = 0, $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0;
 var $1517 = 0, $1518 = 0, $1519 = 0, $152 = 0, $1520 = 0, $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0;
 var $1535 = 0, $1536 = 0, $1537 = 0, $1538 = 0, $1539 = 0, $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0;
 var $1553 = 0, $1554 = 0, $1555 = 0, $1556 = 0, $1557 = 0, $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0;
 var $1571 = 0, $1572 = 0, $1573 = 0, $1574 = 0, $1575 = 0, $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0;
 var $159 = 0, $1590 = 0, $1591 = 0, $1592 = 0, $1593 = 0, $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0, $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0;
 var $1607 = 0, $1608 = 0, $1609 = 0, $161 = 0, $1610 = 0, $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0;
 var $1625 = 0, $1626 = 0, $1627 = 0, $1628 = 0, $1629 = 0, $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0;
 var $1643 = 0, $1644 = 0, $1645 = 0, $1646 = 0, $1647 = 0, $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0;
 var $1661 = 0, $1662 = 0, $1663 = 0, $1664 = 0, $1665 = 0, $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0, $1672 = 0, $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0;
 var $168 = 0, $1680 = 0, $1681 = 0, $1682 = 0, $1683 = 0, $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0, $1689 = 0, $169 = 0, $1690 = 0, $1691 = 0, $1692 = 0, $1693 = 0, $1694 = 0, $1695 = 0, $1696 = 0, $1697 = 0;
 var $1698 = 0, $1699 = 0, $17 = 0, $170 = 0, $1700 = 0, $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0, $1705 = 0, $1706 = 0, $1707 = 0, $1708 = 0, $1709 = 0, $171 = 0, $1710 = 0, $1711 = 0, $1712 = 0, $1713 = 0, $1714 = 0;
 var $1715 = 0, $1716 = 0, $1717 = 0, $1718 = 0, $1719 = 0, $172 = 0, $1720 = 0, $1721 = 0, $1722 = 0, $1723 = 0, $1724 = 0, $1725 = 0, $1726 = 0, $1727 = 0, $1728 = 0, $1729 = 0, $173 = 0, $1730 = 0, $1731 = 0, $1732 = 0;
 var $1733 = 0, $1734 = 0, $1735 = 0, $1736 = 0, $1737 = 0, $1738 = 0, $1739 = 0, $174 = 0, $1740 = 0, $1741 = 0, $1742 = 0, $1743 = 0, $1744 = 0, $1745 = 0, $1746 = 0, $1747 = 0, $1748 = 0, $1749 = 0, $175 = 0, $1750 = 0;
 var $1751 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0;
 var $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
 var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0;
 var $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0;
 var $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0;
 var $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0;
 var $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0;
 var $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0;
 var $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0;
 var $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0;
 var $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0;
 var $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0;
 var $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0;
 var $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0;
 var $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0;
 var $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0;
 var $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0;
 var $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0;
 var $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0;
 var $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0;
 var $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0;
 var $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0;
 var $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0;
 var $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0;
 var $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0;
 var $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0;
 var $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0;
 var $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0;
 var $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0;
 var $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0;
 var $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0;
 var $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0;
 var $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0;
 var $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0;
 var $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0;
 var $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0;
 var $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0;
 var $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0;
 var $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0;
 var $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0;
 var $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0;
 var $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $first$ = 0, $first$$i = 0, $first$33 = 0, $first$34 = 0, $first$35 = 0;
 var $first$36 = 0, $first$37 = 0, $first$38 = 0, $first$39 = 0, $first$40 = 0, $first$41 = 0, $first$42 = 0, $first$43 = 0, $first$44 = 0, $first$45 = 0, $first$46 = 0, $first$47 = 0, $first$48 = 0, $first$49 = 0, $first$50 = 0, $first$51 = 0, $first$52 = 0, $first$53 = 0, $first$54 = 0, $first$55 = 0;
 var $first$56 = 0, $first$57 = 0, $first$58 = 0, $first$59 = 0, $first$60 = 0, $first$61 = 0, $first$62 = 0, $first$63 = 0, $first$64 = 0, $first$65 = 0, $first$66 = 0, $first$67 = 0, $first$68 = 0, $first$69 = 0, $first$70 = 0, $first$71 = 0, $has_expr_list$0$off0$i = 0, $has_expr_list$0$off0$i$lcssa = 0, $has_init$0$off0$i513 = 0, $k$0$i = 0;
 var $k$0$i621 = 0, $k$0$i622 = 0, $k1$0$i618 = 0, $op1 = 0, $op18 = 0, $op2 = 0, $op27 = 0, $op3 = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i$i$i$i$i = 0, $or$cond$i$i$i$i$i$i = 0, $or$cond$i$i$i$i$i$i278 = 0, $or$cond$i$i$i$i$i$i379 = 0, $or$cond$i$i$i$i$i$i443 = 0, $or$cond$i$i$i$i$i$i473 = 0, $or$cond$i$i$i$i$i37$i = 0, $or$cond$i$i$i$i$i94 = 0, $or$cond$i347 = 0, $or$cond$i392 = 0;
 var $or$cond13$i = 0, $or$cond22$i = 0, $or$cond23$i = 0, $or$cond5$i = 0, $parsed_gs$0$off0 = 0, $parsed_gs$0$off0$i = 0, $phitmp$i$i$i$i$i$i = 0, $phitmp$i$i$i$i$i$i$i = 0, $phitmp$i$i$i$i$i$i$i273 = 0, $phitmp$i$i$i$i$i$i$i374 = 0, $phitmp$i$i$i$i$i$i$i438 = 0, $phitmp$i$i$i$i$i$i$i468 = 0, $phitmp$i$i$i$i$i$i32$i = 0, $phitmp$i$i$i$i$i$i89 = 0, $phitmp$i2$i$i$i$i$i = 0, $phitmp$i2$i$i$i$i$i$i = 0, $phitmp$i2$i$i$i$i$i$i276 = 0, $phitmp$i2$i$i$i$i$i$i377 = 0, $phitmp$i2$i$i$i$i$i$i441 = 0, $phitmp$i2$i$i$i$i$i$i471 = 0;
 var $phitmp$i2$i$i$i$i$i35$i = 0, $phitmp$i2$i$i$i$i$i92 = 0, $t$0 = 0, $t$0$i = 0, $t$0$i267 = 0, $t$0$i349567 = 0, $t$0$i390$lcssa = 0, $t$0$i390556 = 0, $t$1$i = 0, $t$1$i$lcssa = 0, $t$1$i350 = 0, $t$2$i = 0, $t$2$i351 = 0, $t$3$i512 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1168|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 1144|0;
 $1 = sp + 1120|0;
 $2 = sp + 1096|0;
 $3 = sp + 1084|0;
 $4 = sp + 1072|0;
 $5 = sp + 1048|0;
 $6 = sp + 1032|0;
 $7 = sp + 1020|0;
 $8 = sp + 1008|0;
 $9 = sp + 996|0;
 $10 = sp + 984|0;
 $11 = sp + 960|0;
 $12 = sp + 948|0;
 $13 = sp + 936|0;
 $14 = sp + 924|0;
 $15 = sp + 912|0;
 $16 = sp + 900|0;
 $17 = sp + 888|0;
 $18 = sp + 876|0;
 $19 = sp + 864|0;
 $20 = sp + 852|0;
 $21 = sp + 840|0;
 $22 = sp + 828|0;
 $23 = sp + 816|0;
 $24 = sp + 804|0;
 $25 = sp + 792|0;
 $26 = sp + 780|0;
 $27 = sp + 768|0;
 $28 = sp + 756|0;
 $29 = sp + 744|0;
 $30 = sp + 732|0;
 $31 = sp + 720|0;
 $32 = sp + 708|0;
 $33 = sp + 696|0;
 $34 = sp + 684|0;
 $35 = sp + 672|0;
 $op2 = sp + 660|0;
 $op1 = sp + 648|0;
 $36 = sp + 624|0;
 $37 = sp + 608|0;
 $38 = sp + 596|0;
 $39 = sp + 584|0;
 $40 = sp + 572|0;
 $41 = sp + 560|0;
 $42 = sp + 244|0;
 $43 = sp + 232|0;
 $44 = sp + 220|0;
 $45 = sp + 208|0;
 $46 = sp + 196|0;
 $47 = sp + 184|0;
 $48 = sp + 172|0;
 $49 = sp + 160|0;
 $50 = sp + 136|0;
 $51 = sp + 120|0;
 $52 = sp + 108|0;
 $53 = sp + 36|0;
 $54 = sp;
 $55 = sp + 12|0;
 $56 = sp + 24|0;
 $57 = sp + 48|0;
 $58 = sp + 60|0;
 $59 = sp + 72|0;
 $60 = sp + 84|0;
 $61 = sp + 96|0;
 $62 = sp + 256|0;
 $63 = sp + 268|0;
 $64 = sp + 280|0;
 $65 = sp + 304|0;
 $66 = sp + 316|0;
 $67 = sp + 328|0;
 $68 = sp + 340|0;
 $op3 = sp + 352|0;
 $op27 = sp + 364|0;
 $op18 = sp + 376|0;
 $69 = sp + 392|0;
 $70 = sp + 416|0;
 $71 = sp + 428|0;
 $72 = sp + 440|0;
 $73 = sp + 452|0;
 $74 = sp + 464|0;
 $75 = sp + 476|0;
 $76 = sp + 488|0;
 $77 = sp + 500|0;
 $78 = sp + 512|0;
 $79 = sp + 524|0;
 $80 = sp + 536|0;
 $81 = $last;
 $82 = $first;
 $83 = (($81) - ($82))|0;
 $84 = ($83|0)>(1);
 L1: do {
  if ($84) {
   $85 = ($83|0)>(3);
   if ($85) {
    $86 = HEAP8[$first>>0]|0;
    $87 = ($86<<24>>24)==(103);
    if ($87) {
     $88 = ((($first)) + 1|0);
     $89 = HEAP8[$88>>0]|0;
     $90 = ($89<<24>>24)==(115);
     $91 = ((($first)) + 2|0);
     $$first = $90 ? $91 : $first;
     $parsed_gs$0$off0 = $90;$t$0 = $$first;
    } else {
     $parsed_gs$0$off0 = 0;$t$0 = $first;
    }
   } else {
    $parsed_gs$0$off0 = 0;$t$0 = $first;
   }
   $92 = HEAP8[$t$0>>0]|0;
   $93 = $92 << 24 >> 24;
   do {
    switch ($93|0) {
    case 76:  {
     $94 = (__ZN10__cxxabiv112_GLOBAL__N_118parse_expr_primaryINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db)|0);
     $$0 = $94;
     break L1;
     break;
    }
    case 84:  {
     $95 = (__ZN10__cxxabiv112_GLOBAL__N_120parse_template_paramINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db)|0);
     $$0 = $95;
     break L1;
     break;
    }
    case 102:  {
     $96 = (__ZN10__cxxabiv112_GLOBAL__N_120parse_function_paramINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db)|0);
     $$0 = $96;
     break L1;
     break;
    }
    case 97:  {
     $97 = ((($t$0)) + 1|0);
     $98 = HEAP8[$97>>0]|0;
     $99 = $98 << 24 >> 24;
     switch ($99|0) {
     case 97:  {
      $100 = ((($first)) + 2|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($13,1635,2);
      $101 = (__ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($100,$last,$13,$db)|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($13);
      $102 = ($101|0)==($100|0);
      $first$ = $102 ? $first : $101;
      $$0 = $first$;
      break L1;
      break;
     }
     case 100:  {
      $103 = ((($first)) + 2|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($14,1656,1);
      $104 = (__ZN10__cxxabiv112_GLOBAL__N_123parse_prefix_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($103,$last,$14,$db)|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($14);
      $105 = ($104|0)==($103|0);
      $first$33 = $105 ? $first : $104;
      $$0 = $first$33;
      break L1;
      break;
     }
     case 110:  {
      $106 = ((($first)) + 2|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($15,1656,1);
      $107 = (__ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($106,$last,$15,$db)|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($15);
      $108 = ($107|0)==($106|0);
      $first$34 = $108 ? $first : $107;
      $$0 = $first$34;
      break L1;
      break;
     }
     case 78:  {
      $109 = ((($first)) + 2|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($16,2781,2);
      $110 = (__ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($109,$last,$16,$db)|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($16);
      $111 = ($110|0)==($109|0);
      $first$35 = $111 ? $first : $110;
      $$0 = $first$35;
      break L1;
      break;
     }
     case 83:  {
      $112 = ((($first)) + 2|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($17,2784,1);
      $113 = (__ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($112,$last,$17,$db)|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($17);
      $114 = ($113|0)==($112|0);
      $first$36 = $114 ? $first : $113;
      $$0 = $first$36;
      break L1;
      break;
     }
     case 116:  {
      $115 = ($83|0)>(2);
      if ($115) {
       $116 = HEAP8[$first>>0]|0;
       $117 = ($116<<24>>24)==(97);
       if ($117) {
        $118 = ((($first)) + 1|0);
        $119 = HEAP8[$118>>0]|0;
        $120 = ($119<<24>>24)==(116);
        if ($120) {
         $121 = ((($first)) + 2|0);
         $122 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($121,$last,$db)|0);
         $123 = ($122|0)==($121|0);
         if ($123) {
          $$03$i486 = $first;
         } else {
          $124 = HEAP32[$db>>2]|0;
          $125 = ((($db)) + 4|0);
          $126 = HEAP32[$125>>2]|0;
          $127 = ($124|0)==($126|0);
          if ($127) {
           $$03$i486 = $first;
          } else {
           $128 = ((($126)) + -24|0);
           __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($2,$128);
           $129 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($2,0,2786)|0);
           ;HEAP32[$1>>2]=HEAP32[$129>>2]|0;HEAP32[$1+4>>2]=HEAP32[$129+4>>2]|0;HEAP32[$1+8>>2]=HEAP32[$129+8>>2]|0;
           HEAP32[$129>>2] = 0;
           $130 = ((($129)) + 4|0);
           HEAP32[$130>>2] = 0;
           $131 = ((($129)) + 8|0);
           HEAP32[$131>>2] = 0;
           $132 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($1,1511)|0);
           ;HEAP32[$0>>2]=HEAP32[$132>>2]|0;HEAP32[$0+4>>2]=HEAP32[$132+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$132+8>>2]|0;
           HEAP32[$132>>2] = 0;
           $133 = ((($132)) + 4|0);
           HEAP32[$133>>2] = 0;
           $134 = ((($132)) + 8|0);
           HEAP32[$134>>2] = 0;
           $135 = HEAP8[$128>>0]|0;
           $136 = $135 & 1;
           $137 = ($136<<24>>24)==(0);
           do {
            if ($137) {
             $138 = ((($128)) + 1|0);
             HEAP8[$138>>0] = 0;
             HEAP8[$128>>0] = 0;
            } else {
             $139 = ((($126)) + -16|0);
             $140 = HEAP32[$139>>2]|0;
             HEAP8[$140>>0] = 0;
             $141 = ((($126)) + -20|0);
             HEAP32[$141>>2] = 0;
             $$pre$i$i$i$i466 = HEAP8[$128>>0]|0;
             $142 = $$pre$i$i$i$i466 & 1;
             $143 = ($142<<24>>24)==(0);
             if ($143) {
              $148 = $$pre$i$i$i$i466;$157 = 10;
             } else {
              $144 = HEAP32[$128>>2]|0;
              $145 = $144 & -2;
              $phitmp$i$i$i$i$i$i$i468 = (($145) + -1)|0;
              $146 = $144&255;
              $148 = $146;$157 = $phitmp$i$i$i$i$i$i$i468;
             }
             $147 = $148 & 1;
             $149 = ($147<<24>>24)==(0);
             if ($149) {
              $150 = $148&255;
              $151 = $150 >>> 1;
              $152 = ($148&255)<(22);
              if ($152) {
               $155 = 10;$1746 = 1;$176 = $151;
              } else {
               $153 = (($151) + 16)|0;
               $154 = $153 & 240;
               $phitmp$i2$i$i$i$i$i$i471 = (($154) + -1)|0;
               $155 = $phitmp$i2$i$i$i$i$i$i471;$1746 = 1;$176 = $151;
              }
             } else {
              $155 = 10;$1746 = 0;$176 = 0;
             }
             $156 = ($155|0)==($157|0);
             if (!($156)) {
              $158 = ($155|0)==(10);
              if ($158) {
               $163 = ((($128)) + 1|0);
               $164 = HEAP32[$139>>2]|0;
               if ($1746) {
                $165 = $148&255;
                $166 = $165 >>> 1;
                $167 = (($166) + 1)|0;
                _memcpy(($163|0),($164|0),($167|0))|0;
                _free($164);
               } else {
                $172 = HEAP8[$164>>0]|0;
                HEAP8[$163>>0] = $172;
                _free($164);
               }
               $177 = $176 << 1;
               $178 = $177&255;
               HEAP8[$128>>0] = $178;
               break;
              }
              $159 = ($155>>>0)<=($157>>>0);
              $160 = (($155) + 1)|0;
              $161 = (_malloc($160)|0);
              $162 = ($161|0)==(0|0);
              $or$cond$i$i$i$i$i$i473 = $159 & $162;
              if (!($or$cond$i$i$i$i$i$i473)) {
               if ($1746) {
                $168 = ((($128)) + 1|0);
                $169 = $148&255;
                $170 = $169 >>> 1;
                $171 = (($170) + 1)|0;
                _memcpy(($161|0),($168|0),($171|0))|0;
               } else {
                $173 = HEAP32[$139>>2]|0;
                $174 = HEAP8[$173>>0]|0;
                HEAP8[$161>>0] = $174;
                _free($173);
               }
               $175 = $160 | 1;
               HEAP32[$128>>2] = $175;
               HEAP32[$141>>2] = $176;
               HEAP32[$139>>2] = $161;
              }
             }
            }
           } while(0);
           ;HEAP32[$128>>2]=HEAP32[$0>>2]|0;HEAP32[$128+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$128+8>>2]=HEAP32[$0+8>>2]|0;
           HEAP32[$0>>2] = 0;
           $179 = ((($0)) + 4|0);
           HEAP32[$179>>2] = 0;
           $180 = ((($0)) + 8|0);
           HEAP32[$180>>2] = 0;
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($0);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($1);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($2);
           $$03$i486 = $122;
          }
         }
        } else {
         $$03$i486 = $first;
        }
       } else {
        $$03$i486 = $first;
       }
      } else {
       $$03$i486 = $first;
      }
      $$0 = $$03$i486;
      break L1;
      break;
     }
     case 122:  {
      $181 = ($83|0)>(2);
      if ($181) {
       $182 = HEAP8[$first>>0]|0;
       $183 = ($182<<24>>24)==(97);
       if ($183) {
        $184 = ((($first)) + 1|0);
        $185 = HEAP8[$184>>0]|0;
        $186 = ($185<<24>>24)==(122);
        if ($186) {
         $187 = ((($first)) + 2|0);
         $188 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($187,$last,$db)|0);
         $189 = ($188|0)==($187|0);
         if ($189) {
          $$03$i456 = $first;
         } else {
          $190 = HEAP32[$db>>2]|0;
          $191 = ((($db)) + 4|0);
          $192 = HEAP32[$191>>2]|0;
          $193 = ($190|0)==($192|0);
          if ($193) {
           $$03$i456 = $first;
          } else {
           $194 = ((($192)) + -24|0);
           __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($2,$194);
           $195 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($2,0,2786)|0);
           ;HEAP32[$1>>2]=HEAP32[$195>>2]|0;HEAP32[$1+4>>2]=HEAP32[$195+4>>2]|0;HEAP32[$1+8>>2]=HEAP32[$195+8>>2]|0;
           HEAP32[$195>>2] = 0;
           $196 = ((($195)) + 4|0);
           HEAP32[$196>>2] = 0;
           $197 = ((($195)) + 8|0);
           HEAP32[$197>>2] = 0;
           $198 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($1,1511)|0);
           ;HEAP32[$0>>2]=HEAP32[$198>>2]|0;HEAP32[$0+4>>2]=HEAP32[$198+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$198+8>>2]|0;
           HEAP32[$198>>2] = 0;
           $199 = ((($198)) + 4|0);
           HEAP32[$199>>2] = 0;
           $200 = ((($198)) + 8|0);
           HEAP32[$200>>2] = 0;
           $201 = HEAP8[$194>>0]|0;
           $202 = $201 & 1;
           $203 = ($202<<24>>24)==(0);
           do {
            if ($203) {
             $204 = ((($194)) + 1|0);
             HEAP8[$204>>0] = 0;
             HEAP8[$194>>0] = 0;
            } else {
             $205 = ((($192)) + -16|0);
             $206 = HEAP32[$205>>2]|0;
             HEAP8[$206>>0] = 0;
             $207 = ((($192)) + -20|0);
             HEAP32[$207>>2] = 0;
             $$pre$i$i$i$i436 = HEAP8[$194>>0]|0;
             $208 = $$pre$i$i$i$i436 & 1;
             $209 = ($208<<24>>24)==(0);
             if ($209) {
              $214 = $$pre$i$i$i$i436;$223 = 10;
             } else {
              $210 = HEAP32[$194>>2]|0;
              $211 = $210 & -2;
              $phitmp$i$i$i$i$i$i$i438 = (($211) + -1)|0;
              $212 = $210&255;
              $214 = $212;$223 = $phitmp$i$i$i$i$i$i$i438;
             }
             $213 = $214 & 1;
             $215 = ($213<<24>>24)==(0);
             if ($215) {
              $216 = $214&255;
              $217 = $216 >>> 1;
              $218 = ($214&255)<(22);
              if ($218) {
               $1747 = 1;$221 = 10;$242 = $217;
              } else {
               $219 = (($217) + 16)|0;
               $220 = $219 & 240;
               $phitmp$i2$i$i$i$i$i$i441 = (($220) + -1)|0;
               $1747 = 1;$221 = $phitmp$i2$i$i$i$i$i$i441;$242 = $217;
              }
             } else {
              $1747 = 0;$221 = 10;$242 = 0;
             }
             $222 = ($221|0)==($223|0);
             if (!($222)) {
              $224 = ($221|0)==(10);
              if ($224) {
               $229 = ((($194)) + 1|0);
               $230 = HEAP32[$205>>2]|0;
               if ($1747) {
                $231 = $214&255;
                $232 = $231 >>> 1;
                $233 = (($232) + 1)|0;
                _memcpy(($229|0),($230|0),($233|0))|0;
                _free($230);
               } else {
                $238 = HEAP8[$230>>0]|0;
                HEAP8[$229>>0] = $238;
                _free($230);
               }
               $243 = $242 << 1;
               $244 = $243&255;
               HEAP8[$194>>0] = $244;
               break;
              }
              $225 = ($221>>>0)<=($223>>>0);
              $226 = (($221) + 1)|0;
              $227 = (_malloc($226)|0);
              $228 = ($227|0)==(0|0);
              $or$cond$i$i$i$i$i$i443 = $225 & $228;
              if (!($or$cond$i$i$i$i$i$i443)) {
               if ($1747) {
                $234 = ((($194)) + 1|0);
                $235 = $214&255;
                $236 = $235 >>> 1;
                $237 = (($236) + 1)|0;
                _memcpy(($227|0),($234|0),($237|0))|0;
               } else {
                $239 = HEAP32[$205>>2]|0;
                $240 = HEAP8[$239>>0]|0;
                HEAP8[$227>>0] = $240;
                _free($239);
               }
               $241 = $226 | 1;
               HEAP32[$194>>2] = $241;
               HEAP32[$207>>2] = $242;
               HEAP32[$205>>2] = $227;
              }
             }
            }
           } while(0);
           ;HEAP32[$194>>2]=HEAP32[$0>>2]|0;HEAP32[$194+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$194+8>>2]=HEAP32[$0+8>>2]|0;
           HEAP32[$0>>2] = 0;
           $245 = ((($0)) + 4|0);
           HEAP32[$245>>2] = 0;
           $246 = ((($0)) + 8|0);
           HEAP32[$246>>2] = 0;
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($0);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($1);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($2);
           $$03$i456 = $188;
          }
         }
        } else {
         $$03$i456 = $first;
        }
       } else {
        $$03$i456 = $first;
       }
      } else {
       $$03$i456 = $first;
      }
      $$0 = $$03$i456;
      break L1;
      break;
     }
     default: {
      $$0 = $first;
      break L1;
     }
     }
     break;
    }
    case 99:  {
     $247 = ((($t$0)) + 1|0);
     $248 = HEAP8[$247>>0]|0;
     $249 = $248 << 24 >> 24;
     switch ($249|0) {
     case 99:  {
      $250 = ($83|0)>(2);
      if ($250) {
       $251 = HEAP8[$first>>0]|0;
       $252 = ($251<<24>>24)==(99);
       if ($252) {
        $253 = ((($first)) + 1|0);
        $254 = HEAP8[$253>>0]|0;
        $255 = ($254<<24>>24)==(99);
        if ($255) {
         $256 = ((($first)) + 2|0);
         $257 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($256,$last,$db)|0);
         $258 = ($257|0)==($256|0);
         if ($258) {
          $$06$i426 = $first;
         } else {
          $259 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($257,$last,$db)|0);
          $260 = ($259|0)==($257|0);
          if ($260) {
           $$06$i426 = $first;
          } else {
           $261 = ((($db)) + 4|0);
           $262 = HEAP32[$261>>2]|0;
           $263 = HEAP32[$db>>2]|0;
           $264 = $262;
           $265 = $263;
           $266 = (($264) - ($265))|0;
           $267 = (($266|0) / 24)&-1;
           $268 = ($267>>>0)<(2);
           if ($268) {
            $$06$i426 = $first;
           } else {
            $269 = ((($262)) + -24|0);
            __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($0,$269);
            $270 = HEAP32[$261>>2]|0;
            $271 = ((($270)) + -24|0);
            $273 = $270;
            while(1) {
             $272 = ((($273)) + -24|0);
             HEAP32[$261>>2] = $272;
             __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($272);
             $$pre$i$i400 = HEAP32[$261>>2]|0;
             $274 = ($$pre$i$i400|0)==($271|0);
             if ($274) {
              break;
             } else {
              $273 = $$pre$i$i400;
             }
            }
            $275 = ((($270)) + -48|0);
            __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($6,$275);
            $276 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($6,0,2796)|0);
            ;HEAP32[$5>>2]=HEAP32[$276>>2]|0;HEAP32[$5+4>>2]=HEAP32[$276+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$276+8>>2]|0;
            HEAP32[$276>>2] = 0;
            $277 = ((($276)) + 4|0);
            HEAP32[$277>>2] = 0;
            $278 = ((($276)) + 8|0);
            HEAP32[$278>>2] = 0;
            $279 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($5,2808)|0);
            ;HEAP32[$4>>2]=HEAP32[$279>>2]|0;HEAP32[$4+4>>2]=HEAP32[$279+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[$279+8>>2]|0;
            HEAP32[$279>>2] = 0;
            $280 = ((($279)) + 4|0);
            HEAP32[$280>>2] = 0;
            $281 = ((($279)) + 8|0);
            HEAP32[$281>>2] = 0;
            $282 = HEAP8[$0>>0]|0;
            $283 = $282 & 1;
            $284 = ($283<<24>>24)==(0);
            $285 = ((($0)) + 8|0);
            $286 = HEAP32[$285>>2]|0;
            $287 = ((($0)) + 1|0);
            $288 = $284 ? $287 : $286;
            $289 = ((($0)) + 4|0);
            $290 = HEAP32[$289>>2]|0;
            $291 = $282&255;
            $292 = $291 >>> 1;
            $293 = $284 ? $292 : $290;
            $294 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($4,$288,$293)|0);
            ;HEAP32[$3>>2]=HEAP32[$294>>2]|0;HEAP32[$3+4>>2]=HEAP32[$294+4>>2]|0;HEAP32[$3+8>>2]=HEAP32[$294+8>>2]|0;
            HEAP32[$294>>2] = 0;
            $295 = ((($294)) + 4|0);
            HEAP32[$295>>2] = 0;
            $296 = ((($294)) + 8|0);
            HEAP32[$296>>2] = 0;
            $297 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($3,1511)|0);
            ;HEAP32[$2>>2]=HEAP32[$297>>2]|0;HEAP32[$2+4>>2]=HEAP32[$297+4>>2]|0;HEAP32[$2+8>>2]=HEAP32[$297+8>>2]|0;
            HEAP32[$297>>2] = 0;
            $298 = ((($297)) + 4|0);
            HEAP32[$298>>2] = 0;
            $299 = ((($297)) + 8|0);
            HEAP32[$299>>2] = 0;
            __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($1,$2);
            __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($275,$1);
            __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1);
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($2);
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($0);
            $$06$i426 = $259;
           }
          }
         }
        } else {
         $$06$i426 = $first;
        }
       } else {
        $$06$i426 = $first;
       }
      } else {
       $$06$i426 = $first;
      }
      $$0 = $$06$i426;
      break L1;
      break;
     }
     case 108:  {
      L97: do {
       if ($85) {
        $300 = HEAP8[$first>>0]|0;
        $301 = ($300<<24>>24)==(99);
        if ($301) {
         $302 = ((($first)) + 1|0);
         $303 = HEAP8[$302>>0]|0;
         $304 = ($303<<24>>24)==(108);
         if ($304) {
          $305 = ((($first)) + 2|0);
          $306 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($305,$last,$db)|0);
          $307 = ($306|0)==($305|0);
          $308 = ($306|0)==($last|0);
          $or$cond5$i = $307 | $308;
          if ($or$cond5$i) {
           $$2$i398 = $first;
          } else {
           $309 = HEAP32[$db>>2]|0;
           $310 = ((($db)) + 4|0);
           $311 = HEAP32[$310>>2]|0;
           $312 = ($309|0)==($311|0);
           if ($312) {
            $$2$i398 = $first;
           } else {
            $313 = ((($311)) + -24|0);
            $314 = ((($311)) + -12|0);
            $315 = HEAP8[$314>>0]|0;
            $316 = $315 & 1;
            $317 = ($316<<24>>24)==(0);
            $318 = ((($311)) + -4|0);
            $319 = HEAP32[$318>>2]|0;
            $320 = ((($314)) + 1|0);
            $321 = $317 ? $320 : $319;
            $322 = ((($311)) + -8|0);
            $323 = HEAP32[$322>>2]|0;
            $324 = $315&255;
            $325 = $324 >>> 1;
            $326 = $317 ? $325 : $323;
            (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($313,$321,$326)|0);
            $327 = HEAP32[$310>>2]|0;
            HEAP32[$0>>2] = 0;
            $328 = ((($0)) + 4|0);
            HEAP32[$328>>2] = 0;
            $329 = ((($0)) + 8|0);
            HEAP32[$329>>2] = 0;
            $330 = ((($327)) + -12|0);
            $331 = HEAP8[$330>>0]|0;
            $332 = $331 & 1;
            $333 = ($332<<24>>24)==(0);
            do {
             if ($333) {
              $334 = ((($330)) + 1|0);
              HEAP8[$334>>0] = 0;
              HEAP8[$330>>0] = 0;
             } else {
              $335 = ((($327)) + -4|0);
              $336 = HEAP32[$335>>2]|0;
              HEAP8[$336>>0] = 0;
              $337 = ((($327)) + -8|0);
              HEAP32[$337>>2] = 0;
              $$pre$i$i$i$i372 = HEAP8[$330>>0]|0;
              $338 = $$pre$i$i$i$i372 & 1;
              $339 = ($338<<24>>24)==(0);
              if ($339) {
               $344 = $$pre$i$i$i$i372;$353 = 10;
              } else {
               $340 = HEAP32[$330>>2]|0;
               $341 = $340 & -2;
               $phitmp$i$i$i$i$i$i$i374 = (($341) + -1)|0;
               $342 = $340&255;
               $344 = $342;$353 = $phitmp$i$i$i$i$i$i$i374;
              }
              $343 = $344 & 1;
              $345 = ($343<<24>>24)==(0);
              if ($345) {
               $346 = $344&255;
               $347 = $346 >>> 1;
               $348 = ($344&255)<(22);
               if ($348) {
                $1748 = 1;$351 = 10;$372 = $347;
               } else {
                $349 = (($347) + 16)|0;
                $350 = $349 & 240;
                $phitmp$i2$i$i$i$i$i$i377 = (($350) + -1)|0;
                $1748 = 1;$351 = $phitmp$i2$i$i$i$i$i$i377;$372 = $347;
               }
              } else {
               $1748 = 0;$351 = 10;$372 = 0;
              }
              $352 = ($351|0)==($353|0);
              if (!($352)) {
               $354 = ($351|0)==(10);
               if ($354) {
                $359 = ((($330)) + 1|0);
                $360 = HEAP32[$335>>2]|0;
                if ($1748) {
                 $361 = $344&255;
                 $362 = $361 >>> 1;
                 $363 = (($362) + 1)|0;
                 _memcpy(($359|0),($360|0),($363|0))|0;
                 _free($360);
                } else {
                 $368 = HEAP8[$360>>0]|0;
                 HEAP8[$359>>0] = $368;
                 _free($360);
                }
                $373 = $372 << 1;
                $374 = $373&255;
                HEAP8[$330>>0] = $374;
                break;
               }
               $355 = ($351>>>0)<=($353>>>0);
               $356 = (($351) + 1)|0;
               $357 = (_malloc($356)|0);
               $358 = ($357|0)==(0|0);
               $or$cond$i$i$i$i$i$i379 = $355 & $358;
               if (!($or$cond$i$i$i$i$i$i379)) {
                if ($1748) {
                 $364 = ((($330)) + 1|0);
                 $365 = $344&255;
                 $366 = $365 >>> 1;
                 $367 = (($366) + 1)|0;
                 _memcpy(($357|0),($364|0),($367|0))|0;
                } else {
                 $369 = HEAP32[$335>>2]|0;
                 $370 = HEAP8[$369>>0]|0;
                 HEAP8[$357>>0] = $370;
                 _free($369);
                }
                $371 = $356 | 1;
                HEAP32[$330>>2] = $371;
                HEAP32[$337>>2] = $372;
                HEAP32[$335>>2] = $357;
               }
              }
             }
            } while(0);
            ;HEAP32[$330>>2]=HEAP32[$0>>2]|0;HEAP32[$330+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$330+8>>2]=HEAP32[$0+8>>2]|0;
            HEAP32[$0>>2] = 0;
            $375 = ((($0)) + 4|0);
            HEAP32[$375>>2] = 0;
            $376 = ((($0)) + 8|0);
            HEAP32[$376>>2] = 0;
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($0);
            $377 = HEAP32[$310>>2]|0;
            $378 = ((($377)) + -24|0);
            (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($378,1606)|0);
            $379 = ((($1)) + 4|0);
            $380 = ((($1)) + 8|0);
            $381 = ((($1)) + 1|0);
            $382 = HEAP8[$306>>0]|0;
            $383 = ($382<<24>>24)==(69);
            L127: do {
             if ($383) {
              $t$0$i390$lcssa = $306;
             } else {
              $t$0$i390556 = $306;
              while(1) {
               $384 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($t$0$i390556,$last,$db)|0);
               $385 = ($384|0)==($t$0$i390556|0);
               $386 = ($384|0)==($last|0);
               $or$cond$i392 = $385 | $386;
               if ($or$cond$i392) {
                $$2$i398 = $first;
                break L97;
               }
               $387 = HEAP32[$db>>2]|0;
               $388 = HEAP32[$310>>2]|0;
               $389 = ($387|0)==($388|0);
               if ($389) {
                $$2$i398 = $first;
                break L97;
               }
               $390 = ((($388)) + -24|0);
               __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($1,$390);
               $391 = HEAP32[$310>>2]|0;
               $392 = ((($391)) + -24|0);
               $394 = $391;
               while(1) {
                $393 = ((($394)) + -24|0);
                HEAP32[$310>>2] = $393;
                __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($393);
                $$pre$i$i393 = HEAP32[$310>>2]|0;
                $395 = ($$pre$i$i393|0)==($392|0);
                if ($395) {
                 break;
                } else {
                 $394 = $$pre$i$i393;
                }
               }
               $396 = HEAP8[$1>>0]|0;
               $397 = $396 & 1;
               $398 = ($397<<24>>24)==(0);
               $399 = HEAP32[$379>>2]|0;
               $400 = $396&255;
               $401 = $400 >>> 1;
               $402 = $398 ? $401 : $399;
               $403 = ($402|0)==(0);
               if (!($403)) {
                $404 = HEAP32[$db>>2]|0;
                $405 = ($404|0)==($392|0);
                if ($405) {
                 break;
                }
                $406 = ((($391)) + -48|0);
                $407 = HEAP32[$380>>2]|0;
                $408 = $398 ? $381 : $407;
                (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($406,$408,$402)|0);
               }
               __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($1);
               $409 = HEAP8[$384>>0]|0;
               $410 = ($409<<24>>24)==(69);
               if ($410) {
                $t$0$i390$lcssa = $384;
                break L127;
               } else {
                $t$0$i390556 = $384;
               }
              }
              __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($1);
              $$2$i398 = $first;
              break L97;
             }
            } while(0);
            $411 = HEAP32[$db>>2]|0;
            $412 = HEAP32[$310>>2]|0;
            $413 = ($411|0)==($412|0);
            if ($413) {
             $$2$i398 = $first;
            } else {
             $414 = ((($t$0$i390$lcssa)) + 1|0);
             $415 = ((($412)) + -24|0);
             (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($415,1511)|0);
             $$2$i398 = $414;
            }
           }
          }
         } else {
          $$2$i398 = $first;
         }
        } else {
         $$2$i398 = $first;
        }
       } else {
        $$2$i398 = $first;
       }
      } while(0);
      $$0 = $$2$i398;
      break L1;
      break;
     }
     case 109:  {
      $416 = ((($first)) + 2|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($18,2811,1);
      $417 = (__ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($416,$last,$18,$db)|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($18);
      $418 = ($417|0)==($416|0);
      $first$37 = $418 ? $first : $417;
      $$0 = $first$37;
      break L1;
      break;
     }
     case 111:  {
      $419 = ((($first)) + 2|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($19,1820,1);
      $420 = (__ZN10__cxxabiv112_GLOBAL__N_123parse_prefix_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($419,$last,$19,$db)|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($19);
      $421 = ($420|0)==($419|0);
      $first$38 = $421 ? $first : $420;
      $$0 = $first$38;
      break L1;
      break;
     }
     case 118:  {
      $422 = ($83|0)>(2);
      L146: do {
       if ($422) {
        $423 = HEAP8[$first>>0]|0;
        $424 = ($423<<24>>24)==(99);
        if ($424) {
         $425 = ((($first)) + 1|0);
         $426 = HEAP8[$425>>0]|0;
         $427 = ($426<<24>>24)==(118);
         if ($427) {
          $428 = ((($db)) + 63|0);
          $429 = HEAP8[$428>>0]|0;
          HEAP8[$428>>0] = 0;
          $430 = ((($first)) + 2|0);
          $431 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($430,$last,$db)|0);
          HEAP8[$428>>0] = $429;
          $432 = ($431|0)==($430|0);
          $433 = ($431|0)==($last|0);
          $or$cond$i347 = $432 | $433;
          if ($or$cond$i347) {
           $$311$i = $first;
          } else {
           $434 = HEAP8[$431>>0]|0;
           $435 = ($434<<24>>24)==(95);
           if ($435) {
            $438 = ((($431)) + 1|0);
            $439 = ($438|0)==($last|0);
            if ($439) {
             $$311$i = $first;
             break;
            }
            $440 = HEAP8[$438>>0]|0;
            $441 = ($440<<24>>24)==(69);
            do {
             if ($441) {
              $442 = ((($db)) + 4|0);
              $443 = HEAP32[$442>>2]|0;
              $444 = ((($db)) + 8|0);
              $445 = HEAP32[$444>>2]|0;
              $446 = ($443>>>0)<($445>>>0);
              if ($446) {
               ;HEAP32[$443>>2]=0|0;HEAP32[$443+4>>2]=0|0;HEAP32[$443+8>>2]=0|0;HEAP32[$443+12>>2]=0|0;HEAP32[$443+16>>2]=0|0;HEAP32[$443+20>>2]=0|0;
               HEAP32[$443>>2] = 0;
               $447 = ((($443)) + 4|0);
               HEAP32[$447>>2] = 0;
               $448 = ((($443)) + 8|0);
               HEAP32[$448>>2] = 0;
               $449 = ((($443)) + 12|0);
               HEAP32[$449>>2] = 0;
               $450 = ((($449)) + 4|0);
               HEAP32[$450>>2] = 0;
               $451 = ((($449)) + 8|0);
               HEAP32[$451>>2] = 0;
               $452 = HEAP32[$442>>2]|0;
               $453 = ((($452)) + 24|0);
               HEAP32[$442>>2] = $453;
               $t$1$i350 = $438;
               break;
              }
              $454 = ((($db)) + 12|0);
              $455 = HEAP32[$db>>2]|0;
              $456 = $443;
              $457 = $455;
              $458 = (($456) - ($457))|0;
              $459 = (($458|0) / 24)&-1;
              $460 = (($459) + 1)|0;
              $461 = ($458|0)<(-24);
              if ($461) {
               __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
               // unreachable;
              }
              $462 = $445;
              $463 = (($462) - ($457))|0;
              $464 = (($463|0) / 24)&-1;
              $465 = ($464>>>0)<(1073741823);
              if ($465) {
               $466 = $464 << 1;
               $467 = ($466>>>0)<($460>>>0);
               $468 = $467 ? $460 : $466;
               $$0$i$i$i$i348 = $468;
              } else {
               $$0$i$i$i$i348 = 2147483647;
              }
              __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($0,$$0$i$i$i$i348,$459,$454);
              $469 = ((($0)) + 8|0);
              $470 = HEAP32[$469>>2]|0;
              ;HEAP32[$470>>2]=0|0;HEAP32[$470+4>>2]=0|0;HEAP32[$470+8>>2]=0|0;HEAP32[$470+12>>2]=0|0;HEAP32[$470+16>>2]=0|0;HEAP32[$470+20>>2]=0|0;
              HEAP32[$470>>2] = 0;
              $471 = ((($470)) + 4|0);
              HEAP32[$471>>2] = 0;
              $472 = ((($470)) + 8|0);
              HEAP32[$472>>2] = 0;
              $473 = ((($470)) + 12|0);
              HEAP32[$473>>2] = 0;
              $474 = ((($473)) + 4|0);
              HEAP32[$474>>2] = 0;
              $475 = ((($473)) + 8|0);
              HEAP32[$475>>2] = 0;
              $476 = ((($470)) + 24|0);
              HEAP32[$469>>2] = $476;
              __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$0);
              __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($0);
              $t$1$i350 = $438;
             } else {
              $t$0$i349567 = $438;
              while(1) {
               $477 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($t$0$i349567,$last,$db)|0);
               $478 = ($477|0)==($t$0$i349567|0);
               $479 = ($477|0)==($last|0);
               $or$cond13$i = $478 | $479;
               if ($or$cond13$i) {
                $$311$i = $first;
                break L146;
               }
               $$pre509 = HEAP8[$477>>0]|0;
               $480 = ($$pre509<<24>>24)==(69);
               if ($480) {
                $t$1$i350 = $477;
                break;
               } else {
                $t$0$i349567 = $477;
               }
              }
             }
            } while(0);
            $481 = ((($t$1$i350)) + 1|0);
            $t$2$i351 = $481;
           } else {
            $436 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($431,$last,$db)|0);
            $437 = ($436|0)==($431|0);
            if ($437) {
             $$311$i = $first;
             break;
            } else {
             $t$2$i351 = $436;
            }
           }
           $482 = ((($db)) + 4|0);
           $483 = HEAP32[$482>>2]|0;
           $484 = HEAP32[$db>>2]|0;
           $485 = $483;
           $486 = $484;
           $487 = (($485) - ($486))|0;
           $488 = (($487|0) / 24)&-1;
           $489 = ($488>>>0)<(2);
           if ($489) {
            $$311$i = $first;
           } else {
            $490 = ((($483)) + -24|0);
            __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($1,$490);
            $491 = HEAP32[$482>>2]|0;
            $492 = ((($491)) + -24|0);
            $494 = $491;
            while(1) {
             $493 = ((($494)) + -24|0);
             HEAP32[$482>>2] = $493;
             __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($493);
             $$pre$i$i352 = HEAP32[$482>>2]|0;
             $495 = ($$pre$i$i352|0)==($492|0);
             if ($495) {
              break;
             } else {
              $494 = $$pre$i$i352;
             }
            }
            $496 = ((($491)) + -48|0);
            __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($7,$496);
            $497 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($7,0,1606)|0);
            ;HEAP32[$6>>2]=HEAP32[$497>>2]|0;HEAP32[$6+4>>2]=HEAP32[$497+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$497+8>>2]|0;
            HEAP32[$497>>2] = 0;
            $498 = ((($497)) + 4|0);
            HEAP32[$498>>2] = 0;
            $499 = ((($497)) + 8|0);
            HEAP32[$499>>2] = 0;
            $500 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($6,2813)|0);
            ;HEAP32[$5>>2]=HEAP32[$500>>2]|0;HEAP32[$5+4>>2]=HEAP32[$500+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$500+8>>2]|0;
            HEAP32[$500>>2] = 0;
            $501 = ((($500)) + 4|0);
            HEAP32[$501>>2] = 0;
            $502 = ((($500)) + 8|0);
            HEAP32[$502>>2] = 0;
            $503 = HEAP8[$1>>0]|0;
            $504 = $503 & 1;
            $505 = ($504<<24>>24)==(0);
            $506 = ((($1)) + 8|0);
            $507 = HEAP32[$506>>2]|0;
            $508 = ((($1)) + 1|0);
            $509 = $505 ? $508 : $507;
            $510 = ((($1)) + 4|0);
            $511 = HEAP32[$510>>2]|0;
            $512 = $503&255;
            $513 = $512 >>> 1;
            $514 = $505 ? $513 : $511;
            $515 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($5,$509,$514)|0);
            ;HEAP32[$4>>2]=HEAP32[$515>>2]|0;HEAP32[$4+4>>2]=HEAP32[$515+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[$515+8>>2]|0;
            HEAP32[$515>>2] = 0;
            $516 = ((($515)) + 4|0);
            HEAP32[$516>>2] = 0;
            $517 = ((($515)) + 8|0);
            HEAP32[$517>>2] = 0;
            $518 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($4,1511)|0);
            ;HEAP32[$3>>2]=HEAP32[$518>>2]|0;HEAP32[$3+4>>2]=HEAP32[$518+4>>2]|0;HEAP32[$3+8>>2]=HEAP32[$518+8>>2]|0;
            HEAP32[$518>>2] = 0;
            $519 = ((($518)) + 4|0);
            HEAP32[$519>>2] = 0;
            $520 = ((($518)) + 8|0);
            HEAP32[$520>>2] = 0;
            __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($2,$3);
            __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($496,$2);
            __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($2);
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($1);
            $$311$i = $t$2$i351;
           }
          }
         } else {
          $$311$i = $first;
         }
        } else {
         $$311$i = $first;
        }
       } else {
        $$311$i = $first;
       }
      } while(0);
      $$0 = $$311$i;
      break L1;
      break;
     }
     default: {
      $$0 = $first;
      break L1;
     }
     }
     break;
    }
    case 100:  {
     $521 = ((($t$0)) + 1|0);
     $522 = HEAP8[$521>>0]|0;
     $523 = $522 << 24 >> 24;
     switch ($523|0) {
     case 97:  {
      $524 = ((($t$0)) + 2|0);
      $525 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($524,$last,$db)|0);
      $526 = ($525|0)==($524|0);
      if ($526) {
       $$0 = $first;
       break L1;
      }
      $527 = HEAP32[$db>>2]|0;
      $528 = ((($db)) + 4|0);
      $529 = HEAP32[$528>>2]|0;
      $530 = ($527|0)==($529|0);
      if ($530) {
       $$0 = $first;
       break L1;
      }
      $531 = ((($529)) + -24|0);
      if ($parsed_gs$0$off0) {
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($22,1794,2);
      } else {
       HEAP32[$22>>2] = 0;
       $532 = ((($22)) + 4|0);
       HEAP32[$532>>2] = 0;
       $533 = ((($22)) + 8|0);
       HEAP32[$533>>2] = 0;
      }
      $534 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($22,2816)|0);
      ;HEAP32[$21>>2]=HEAP32[$534>>2]|0;HEAP32[$21+4>>2]=HEAP32[$534+4>>2]|0;HEAP32[$21+8>>2]=HEAP32[$534+8>>2]|0;
      HEAP32[$534>>2] = 0;
      $535 = ((($534)) + 4|0);
      HEAP32[$535>>2] = 0;
      $536 = ((($534)) + 8|0);
      HEAP32[$536>>2] = 0;
      $537 = HEAP32[$528>>2]|0;
      $538 = ((($537)) + -24|0);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($23,$538);
      $539 = HEAP8[$23>>0]|0;
      $540 = $539 & 1;
      $541 = ($540<<24>>24)==(0);
      $542 = ((($23)) + 8|0);
      $543 = HEAP32[$542>>2]|0;
      $544 = ((($23)) + 1|0);
      $545 = $541 ? $544 : $543;
      $546 = ((($23)) + 4|0);
      $547 = HEAP32[$546>>2]|0;
      $548 = $539&255;
      $549 = $548 >>> 1;
      $550 = $541 ? $549 : $547;
      $551 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($21,$545,$550)|0);
      ;HEAP32[$20>>2]=HEAP32[$551>>2]|0;HEAP32[$20+4>>2]=HEAP32[$551+4>>2]|0;HEAP32[$20+8>>2]=HEAP32[$551+8>>2]|0;
      HEAP32[$551>>2] = 0;
      $552 = ((($551)) + 4|0);
      HEAP32[$552>>2] = 0;
      $553 = ((($551)) + 8|0);
      HEAP32[$553>>2] = 0;
      $554 = HEAP8[$531>>0]|0;
      $555 = $554 & 1;
      $556 = ($555<<24>>24)==(0);
      do {
       if ($556) {
        $557 = ((($531)) + 1|0);
        HEAP8[$557>>0] = 0;
        HEAP8[$531>>0] = 0;
       } else {
        $558 = ((($529)) + -16|0);
        $559 = HEAP32[$558>>2]|0;
        HEAP8[$559>>0] = 0;
        $560 = ((($529)) + -20|0);
        HEAP32[$560>>2] = 0;
        $$pre$i$i$i = HEAP8[$531>>0]|0;
        $561 = $$pre$i$i$i & 1;
        $562 = ($561<<24>>24)==(0);
        if ($562) {
         $567 = $$pre$i$i$i;$576 = 10;
        } else {
         $563 = HEAP32[$531>>2]|0;
         $564 = $563 & -2;
         $phitmp$i$i$i$i$i$i = (($564) + -1)|0;
         $565 = $563&255;
         $567 = $565;$576 = $phitmp$i$i$i$i$i$i;
        }
        $566 = $567 & 1;
        $568 = ($566<<24>>24)==(0);
        if ($568) {
         $569 = $567&255;
         $570 = $569 >>> 1;
         $571 = ($567&255)<(22);
         if ($571) {
          $1749 = 1;$574 = 10;$595 = $570;
         } else {
          $572 = (($570) + 16)|0;
          $573 = $572 & 240;
          $phitmp$i2$i$i$i$i$i = (($573) + -1)|0;
          $1749 = 1;$574 = $phitmp$i2$i$i$i$i$i;$595 = $570;
         }
        } else {
         $1749 = 0;$574 = 10;$595 = 0;
        }
        $575 = ($574|0)==($576|0);
        if (!($575)) {
         $577 = ($574|0)==(10);
         if ($577) {
          $582 = ((($531)) + 1|0);
          $583 = HEAP32[$558>>2]|0;
          if ($1749) {
           $584 = $567&255;
           $585 = $584 >>> 1;
           $586 = (($585) + 1)|0;
           _memcpy(($582|0),($583|0),($586|0))|0;
           _free($583);
          } else {
           $591 = HEAP8[$583>>0]|0;
           HEAP8[$582>>0] = $591;
           _free($583);
          }
          $596 = $595 << 1;
          $597 = $596&255;
          HEAP8[$531>>0] = $597;
          break;
         }
         $578 = ($574>>>0)<=($576>>>0);
         $579 = (($574) + 1)|0;
         $580 = (_malloc($579)|0);
         $581 = ($580|0)==(0|0);
         $or$cond$i$i$i$i$i = $578 & $581;
         if (!($or$cond$i$i$i$i$i)) {
          if ($1749) {
           $587 = ((($531)) + 1|0);
           $588 = $567&255;
           $589 = $588 >>> 1;
           $590 = (($589) + 1)|0;
           _memcpy(($580|0),($587|0),($590|0))|0;
          } else {
           $592 = HEAP32[$558>>2]|0;
           $593 = HEAP8[$592>>0]|0;
           HEAP8[$580>>0] = $593;
           _free($592);
          }
          $594 = $579 | 1;
          HEAP32[$531>>2] = $594;
          HEAP32[$560>>2] = $595;
          HEAP32[$558>>2] = $580;
         }
        }
       }
      } while(0);
      ;HEAP32[$531>>2]=HEAP32[$20>>2]|0;HEAP32[$531+4>>2]=HEAP32[$20+4>>2]|0;HEAP32[$531+8>>2]=HEAP32[$20+8>>2]|0;
      HEAP32[$20>>2] = 0;
      $598 = ((($20)) + 4|0);
      HEAP32[$598>>2] = 0;
      $599 = ((($20)) + 8|0);
      HEAP32[$599>>2] = 0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($20);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($23);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($21);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($22);
      $$0 = $525;
      break L1;
      break;
     }
     case 99:  {
      $600 = ($83|0)>(2);
      if ($600) {
       $601 = HEAP8[$first>>0]|0;
       $602 = ($601<<24>>24)==(100);
       if ($602) {
        $603 = ((($first)) + 1|0);
        $604 = HEAP8[$603>>0]|0;
        $605 = ($604<<24>>24)==(99);
        if ($605) {
         $606 = ((($first)) + 2|0);
         $607 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($606,$last,$db)|0);
         $608 = ($607|0)==($606|0);
         if ($608) {
          $$06$i345 = $first;
         } else {
          $609 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($607,$last,$db)|0);
          $610 = ($609|0)==($607|0);
          if ($610) {
           $$06$i345 = $first;
          } else {
           $611 = ((($db)) + 4|0);
           $612 = HEAP32[$611>>2]|0;
           $613 = HEAP32[$db>>2]|0;
           $614 = $612;
           $615 = $613;
           $616 = (($614) - ($615))|0;
           $617 = (($616|0) / 24)&-1;
           $618 = ($617>>>0)<(2);
           if ($618) {
            $$06$i345 = $first;
           } else {
            $619 = ((($612)) + -24|0);
            __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($0,$619);
            $620 = HEAP32[$611>>2]|0;
            $621 = ((($620)) + -24|0);
            $623 = $620;
            while(1) {
             $622 = ((($623)) + -24|0);
             HEAP32[$611>>2] = $622;
             __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($622);
             $$pre$i$i319 = HEAP32[$611>>2]|0;
             $624 = ($$pre$i$i319|0)==($621|0);
             if ($624) {
              break;
             } else {
              $623 = $$pre$i$i319;
             }
            }
            $625 = ((($620)) + -48|0);
            __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($6,$625);
            $626 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($6,0,2826)|0);
            ;HEAP32[$5>>2]=HEAP32[$626>>2]|0;HEAP32[$5+4>>2]=HEAP32[$626+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$626+8>>2]|0;
            HEAP32[$626>>2] = 0;
            $627 = ((($626)) + 4|0);
            HEAP32[$627>>2] = 0;
            $628 = ((($626)) + 8|0);
            HEAP32[$628>>2] = 0;
            $629 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($5,2808)|0);
            ;HEAP32[$4>>2]=HEAP32[$629>>2]|0;HEAP32[$4+4>>2]=HEAP32[$629+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[$629+8>>2]|0;
            HEAP32[$629>>2] = 0;
            $630 = ((($629)) + 4|0);
            HEAP32[$630>>2] = 0;
            $631 = ((($629)) + 8|0);
            HEAP32[$631>>2] = 0;
            $632 = HEAP8[$0>>0]|0;
            $633 = $632 & 1;
            $634 = ($633<<24>>24)==(0);
            $635 = ((($0)) + 8|0);
            $636 = HEAP32[$635>>2]|0;
            $637 = ((($0)) + 1|0);
            $638 = $634 ? $637 : $636;
            $639 = ((($0)) + 4|0);
            $640 = HEAP32[$639>>2]|0;
            $641 = $632&255;
            $642 = $641 >>> 1;
            $643 = $634 ? $642 : $640;
            $644 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($4,$638,$643)|0);
            ;HEAP32[$3>>2]=HEAP32[$644>>2]|0;HEAP32[$3+4>>2]=HEAP32[$644+4>>2]|0;HEAP32[$3+8>>2]=HEAP32[$644+8>>2]|0;
            HEAP32[$644>>2] = 0;
            $645 = ((($644)) + 4|0);
            HEAP32[$645>>2] = 0;
            $646 = ((($644)) + 8|0);
            HEAP32[$646>>2] = 0;
            $647 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($3,1511)|0);
            ;HEAP32[$2>>2]=HEAP32[$647>>2]|0;HEAP32[$2+4>>2]=HEAP32[$647+4>>2]|0;HEAP32[$2+8>>2]=HEAP32[$647+8>>2]|0;
            HEAP32[$647>>2] = 0;
            $648 = ((($647)) + 4|0);
            HEAP32[$648>>2] = 0;
            $649 = ((($647)) + 8|0);
            HEAP32[$649>>2] = 0;
            __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($1,$2);
            __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($625,$1);
            __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1);
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($2);
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($0);
            $$06$i345 = $609;
           }
          }
         }
        } else {
         $$06$i345 = $first;
        }
       } else {
        $$06$i345 = $first;
       }
      } else {
       $$06$i345 = $first;
      }
      $$0 = $$06$i345;
      break L1;
      break;
     }
     case 101:  {
      $650 = ((($first)) + 2|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($24,1651,1);
      $651 = (__ZN10__cxxabiv112_GLOBAL__N_123parse_prefix_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($650,$last,$24,$db)|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($24);
      $652 = ($651|0)==($650|0);
      $first$39 = $652 ? $first : $651;
      $$0 = $first$39;
      break L1;
      break;
     }
     case 108:  {
      $653 = ((($t$0)) + 2|0);
      $654 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($653,$last,$db)|0);
      $655 = ($654|0)==($653|0);
      if ($655) {
       $$0 = $first;
       break L1;
      }
      $656 = HEAP32[$db>>2]|0;
      $657 = ((($db)) + 4|0);
      $658 = HEAP32[$657>>2]|0;
      $659 = ($656|0)==($658|0);
      if ($659) {
       $$0 = $first;
       break L1;
      }
      $660 = ((($658)) + -24|0);
      if ($parsed_gs$0$off0) {
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($27,1794,2);
      } else {
       HEAP32[$27>>2] = 0;
       $661 = ((($27)) + 4|0);
       HEAP32[$661>>2] = 0;
       $662 = ((($27)) + 8|0);
       HEAP32[$662>>2] = 0;
      }
      $663 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($27,2840)|0);
      ;HEAP32[$26>>2]=HEAP32[$663>>2]|0;HEAP32[$26+4>>2]=HEAP32[$663+4>>2]|0;HEAP32[$26+8>>2]=HEAP32[$663+8>>2]|0;
      HEAP32[$663>>2] = 0;
      $664 = ((($663)) + 4|0);
      HEAP32[$664>>2] = 0;
      $665 = ((($663)) + 8|0);
      HEAP32[$665>>2] = 0;
      $666 = HEAP32[$657>>2]|0;
      $667 = ((($666)) + -24|0);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($28,$667);
      $668 = HEAP8[$28>>0]|0;
      $669 = $668 & 1;
      $670 = ($669<<24>>24)==(0);
      $671 = ((($28)) + 8|0);
      $672 = HEAP32[$671>>2]|0;
      $673 = ((($28)) + 1|0);
      $674 = $670 ? $673 : $672;
      $675 = ((($28)) + 4|0);
      $676 = HEAP32[$675>>2]|0;
      $677 = $668&255;
      $678 = $677 >>> 1;
      $679 = $670 ? $678 : $676;
      $680 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($26,$674,$679)|0);
      ;HEAP32[$25>>2]=HEAP32[$680>>2]|0;HEAP32[$25+4>>2]=HEAP32[$680+4>>2]|0;HEAP32[$25+8>>2]=HEAP32[$680+8>>2]|0;
      HEAP32[$680>>2] = 0;
      $681 = ((($680)) + 4|0);
      HEAP32[$681>>2] = 0;
      $682 = ((($680)) + 8|0);
      HEAP32[$682>>2] = 0;
      $683 = HEAP8[$660>>0]|0;
      $684 = $683 & 1;
      $685 = ($684<<24>>24)==(0);
      do {
       if ($685) {
        $686 = ((($660)) + 1|0);
        HEAP8[$686>>0] = 0;
        HEAP8[$660>>0] = 0;
       } else {
        $687 = ((($658)) + -16|0);
        $688 = HEAP32[$687>>2]|0;
        HEAP8[$688>>0] = 0;
        $689 = ((($658)) + -20|0);
        HEAP32[$689>>2] = 0;
        $$pre$i$i$i87 = HEAP8[$660>>0]|0;
        $690 = $$pre$i$i$i87 & 1;
        $691 = ($690<<24>>24)==(0);
        if ($691) {
         $696 = $$pre$i$i$i87;$705 = 10;
        } else {
         $692 = HEAP32[$660>>2]|0;
         $693 = $692 & -2;
         $phitmp$i$i$i$i$i$i89 = (($693) + -1)|0;
         $694 = $692&255;
         $696 = $694;$705 = $phitmp$i$i$i$i$i$i89;
        }
        $695 = $696 & 1;
        $697 = ($695<<24>>24)==(0);
        if ($697) {
         $698 = $696&255;
         $699 = $698 >>> 1;
         $700 = ($696&255)<(22);
         if ($700) {
          $1750 = 1;$703 = 10;$724 = $699;
         } else {
          $701 = (($699) + 16)|0;
          $702 = $701 & 240;
          $phitmp$i2$i$i$i$i$i92 = (($702) + -1)|0;
          $1750 = 1;$703 = $phitmp$i2$i$i$i$i$i92;$724 = $699;
         }
        } else {
         $1750 = 0;$703 = 10;$724 = 0;
        }
        $704 = ($703|0)==($705|0);
        if (!($704)) {
         $706 = ($703|0)==(10);
         if ($706) {
          $711 = ((($660)) + 1|0);
          $712 = HEAP32[$687>>2]|0;
          if ($1750) {
           $713 = $696&255;
           $714 = $713 >>> 1;
           $715 = (($714) + 1)|0;
           _memcpy(($711|0),($712|0),($715|0))|0;
           _free($712);
          } else {
           $720 = HEAP8[$712>>0]|0;
           HEAP8[$711>>0] = $720;
           _free($712);
          }
          $725 = $724 << 1;
          $726 = $725&255;
          HEAP8[$660>>0] = $726;
          break;
         }
         $707 = ($703>>>0)<=($705>>>0);
         $708 = (($703) + 1)|0;
         $709 = (_malloc($708)|0);
         $710 = ($709|0)==(0|0);
         $or$cond$i$i$i$i$i94 = $707 & $710;
         if (!($or$cond$i$i$i$i$i94)) {
          if ($1750) {
           $716 = ((($660)) + 1|0);
           $717 = $696&255;
           $718 = $717 >>> 1;
           $719 = (($718) + 1)|0;
           _memcpy(($709|0),($716|0),($719|0))|0;
          } else {
           $721 = HEAP32[$687>>2]|0;
           $722 = HEAP8[$721>>0]|0;
           HEAP8[$709>>0] = $722;
           _free($721);
          }
          $723 = $708 | 1;
          HEAP32[$660>>2] = $723;
          HEAP32[$689>>2] = $724;
          HEAP32[$687>>2] = $709;
         }
        }
       }
      } while(0);
      ;HEAP32[$660>>2]=HEAP32[$25>>2]|0;HEAP32[$660+4>>2]=HEAP32[$25+4>>2]|0;HEAP32[$660+8>>2]=HEAP32[$25+8>>2]|0;
      HEAP32[$25>>2] = 0;
      $727 = ((($25)) + 4|0);
      HEAP32[$727>>2] = 0;
      $728 = ((($25)) + 8|0);
      HEAP32[$728>>2] = 0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($25);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($28);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($26);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($27);
      $$0 = $654;
      break L1;
      break;
     }
     case 110:  {
      $729 = (__ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db)|0);
      $$0 = $729;
      break L1;
      break;
     }
     case 115:  {
      $730 = ($83|0)>(2);
      if ($730) {
       $731 = HEAP8[$first>>0]|0;
       $732 = ($731<<24>>24)==(100);
       if ($732) {
        $733 = ((($first)) + 1|0);
        $734 = HEAP8[$733>>0]|0;
        $735 = ($734<<24>>24)==(115);
        if ($735) {
         $736 = ((($first)) + 2|0);
         $737 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($736,$last,$db)|0);
         $738 = ($737|0)==($736|0);
         if ($738) {
          $$02$i317 = $first;
         } else {
          $739 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($737,$last,$db)|0);
          $740 = ($739|0)==($737|0);
          if ($740) {
           $$02$i317 = $first;
          } else {
           $741 = ((($db)) + 4|0);
           $742 = HEAP32[$741>>2]|0;
           $743 = HEAP32[$db>>2]|0;
           $744 = $742;
           $745 = $743;
           $746 = (($744) - ($745))|0;
           $747 = (($746|0) / 24)&-1;
           $748 = ($747>>>0)<(2);
           if ($748) {
            $$02$i317 = $first;
           } else {
            $749 = ((($742)) + -24|0);
            __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($0,$749);
            $750 = HEAP32[$741>>2]|0;
            $751 = ((($750)) + -24|0);
            $753 = $750;
            while(1) {
             $752 = ((($753)) + -24|0);
             HEAP32[$741>>2] = $752;
             __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($752);
             $$pre$i$i312 = HEAP32[$741>>2]|0;
             $754 = ($$pre$i$i312|0)==($751|0);
             if ($754) {
              break;
             } else {
              $753 = $$pre$i$i312;
             }
            }
            __ZNSt3__1plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($1,2848,$0);
            $755 = ((($750)) + -48|0);
            $756 = HEAP8[$1>>0]|0;
            $757 = $756 & 1;
            $758 = ($757<<24>>24)==(0);
            $759 = ((($1)) + 8|0);
            $760 = HEAP32[$759>>2]|0;
            $761 = ((($1)) + 1|0);
            $762 = $758 ? $761 : $760;
            $763 = ((($1)) + 4|0);
            $764 = HEAP32[$763>>2]|0;
            $765 = $756&255;
            $766 = $765 >>> 1;
            $767 = $758 ? $766 : $764;
            (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($755,$762,$767)|0);
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($1);
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($0);
            $$02$i317 = $739;
           }
          }
         }
        } else {
         $$02$i317 = $first;
        }
       } else {
        $$02$i317 = $first;
       }
      } else {
       $$02$i317 = $first;
      }
      $$0 = $$02$i317;
      break L1;
      break;
     }
     case 116:  {
      $768 = ($83|0)>(2);
      if ($768) {
       $769 = HEAP8[$first>>0]|0;
       $770 = ($769<<24>>24)==(100);
       if ($770) {
        $771 = ((($first)) + 1|0);
        $772 = HEAP8[$771>>0]|0;
        $773 = ($772<<24>>24)==(116);
        if ($773) {
         $774 = ((($first)) + 2|0);
         $775 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($774,$last,$db)|0);
         $776 = ($775|0)==($774|0);
         if ($776) {
          $$02$i310 = $first;
         } else {
          $777 = (__ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($775,$last,$db)|0);
          $778 = ($777|0)==($775|0);
          if ($778) {
           $$02$i310 = $first;
          } else {
           $779 = ((($db)) + 4|0);
           $780 = HEAP32[$779>>2]|0;
           $781 = HEAP32[$db>>2]|0;
           $782 = $780;
           $783 = $781;
           $784 = (($782) - ($783))|0;
           $785 = (($784|0) / 24)&-1;
           $786 = ($785>>>0)<(2);
           if ($786) {
            $$02$i310 = $first;
           } else {
            $787 = ((($780)) + -24|0);
            __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($0,$787);
            $788 = HEAP32[$779>>2]|0;
            $789 = ((($788)) + -24|0);
            $791 = $788;
            while(1) {
             $790 = ((($791)) + -24|0);
             HEAP32[$779>>2] = $790;
             __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($790);
             $$pre$i$i305 = HEAP32[$779>>2]|0;
             $792 = ($$pre$i$i305|0)==($789|0);
             if ($792) {
              break;
             } else {
              $791 = $$pre$i$i305;
             }
            }
            __ZNSt3__1plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($1,4244,$0);
            $793 = ((($788)) + -48|0);
            $794 = HEAP8[$1>>0]|0;
            $795 = $794 & 1;
            $796 = ($795<<24>>24)==(0);
            $797 = ((($1)) + 8|0);
            $798 = HEAP32[$797>>2]|0;
            $799 = ((($1)) + 1|0);
            $800 = $796 ? $799 : $798;
            $801 = ((($1)) + 4|0);
            $802 = HEAP32[$801>>2]|0;
            $803 = $794&255;
            $804 = $803 >>> 1;
            $805 = $796 ? $804 : $802;
            (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($793,$800,$805)|0);
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($1);
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($0);
            $$02$i310 = $777;
           }
          }
         }
        } else {
         $$02$i310 = $first;
        }
       } else {
        $$02$i310 = $first;
       }
      } else {
       $$02$i310 = $first;
      }
      $$0 = $$02$i310;
      break L1;
      break;
     }
     case 118:  {
      $806 = ((($first)) + 2|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($29,2851,1);
      $807 = (__ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($806,$last,$29,$db)|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($29);
      $808 = ($807|0)==($806|0);
      $first$40 = $808 ? $first : $807;
      $$0 = $first$40;
      break L1;
      break;
     }
     case 86:  {
      $809 = ((($first)) + 2|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($30,2853,2);
      $810 = (__ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($809,$last,$30,$db)|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($30);
      $811 = ($810|0)==($809|0);
      $first$41 = $811 ? $first : $810;
      $$0 = $first$41;
      break L1;
      break;
     }
     default: {
      $$0 = $first;
      break L1;
     }
     }
     break;
    }
    case 101:  {
     $812 = ((($t$0)) + 1|0);
     $813 = HEAP8[$812>>0]|0;
     $814 = $813 << 24 >> 24;
     switch ($814|0) {
     case 111:  {
      $815 = ((($first)) + 2|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($31,2856,1);
      $816 = (__ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($815,$last,$31,$db)|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($31);
      $817 = ($816|0)==($815|0);
      $first$42 = $817 ? $first : $816;
      $$0 = $first$42;
      break L1;
      break;
     }
     case 79:  {
      $818 = ((($first)) + 2|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($32,2858,2);
      $819 = (__ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($818,$last,$32,$db)|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($32);
      $820 = ($819|0)==($818|0);
      $first$43 = $820 ? $first : $819;
      $$0 = $first$43;
      break L1;
      break;
     }
     case 113:  {
      $821 = ((($first)) + 2|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($33,2861,2);
      $822 = (__ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($821,$last,$33,$db)|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($33);
      $823 = ($822|0)==($821|0);
      $first$44 = $823 ? $first : $822;
      $$0 = $first$44;
      break L1;
      break;
     }
     default: {
      $$0 = $first;
      break L1;
     }
     }
     break;
    }
    case 103:  {
     $824 = ((($t$0)) + 1|0);
     $825 = HEAP8[$824>>0]|0;
     $826 = $825 << 24 >> 24;
     switch ($826|0) {
     case 101:  {
      $827 = ((($first)) + 2|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($34,2864,2);
      $828 = (__ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($827,$last,$34,$db)|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($34);
      $829 = ($828|0)==($827|0);
      $first$45 = $829 ? $first : $828;
      $$0 = $first$45;
      break L1;
      break;
     }
     case 116:  {
      $830 = ((($first)) + 2|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($35,1670,1);
      $831 = (__ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($830,$last,$35,$db)|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($35);
      $832 = ($831|0)==($830|0);
      $first$46 = $832 ? $first : $831;
      $$0 = $first$46;
      break L1;
      break;
     }
     default: {
      $$0 = $first;
      break L1;
     }
     }
     break;
    }
    case 105:  {
     $833 = ((($t$0)) + 1|0);
     $834 = HEAP8[$833>>0]|0;
     $835 = ($834<<24>>24)==(120);
     if (!($835)) {
      $$0 = $first;
      break L1;
     }
     $836 = ((($first)) + 2|0);
     $837 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($836,$last,$db)|0);
     $838 = ($837|0)==($836|0);
     if ($838) {
      $$0 = $first;
      break L1;
     }
     $839 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($837,$last,$db)|0);
     $840 = ($839|0)==($837|0);
     $841 = ((($db)) + 4|0);
     $842 = HEAP32[$841>>2]|0;
     if ($840) {
      $879 = ((($842)) + -24|0);
      $881 = $842;
      while(1) {
       $880 = ((($881)) + -24|0);
       HEAP32[$841>>2] = $880;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($880);
       $$pre$i116 = HEAP32[$841>>2]|0;
       $882 = ($$pre$i116|0)==($879|0);
       if ($882) {
        $$0 = $first;
        break L1;
       } else {
        $881 = $$pre$i116;
       }
      }
     }
     $843 = HEAP32[$db>>2]|0;
     $844 = $842;
     $845 = $843;
     $846 = (($844) - ($845))|0;
     $847 = (($846|0) / 24)&-1;
     $848 = ($847>>>0)<(2);
     if ($848) {
      $$0 = $first;
      break L1;
     }
     $849 = ((($842)) + -24|0);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($op2,$849);
     $850 = HEAP32[$841>>2]|0;
     $851 = ((($850)) + -24|0);
     $853 = $850;
     while(1) {
      $852 = ((($853)) + -24|0);
      HEAP32[$841>>2] = $852;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($852);
      $$pre$i = HEAP32[$841>>2]|0;
      $854 = ($$pre$i|0)==($851|0);
      if ($854) {
       break;
      } else {
       $853 = $$pre$i;
      }
     }
     $855 = ((($850)) + -48|0);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($op1,$855);
     $856 = HEAP32[$841>>2]|0;
     $857 = ((($856)) + -24|0);
     __ZNSt3__1plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($40,1606,$op1);
     $858 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($40,2867)|0);
     ;HEAP32[$39>>2]=HEAP32[$858>>2]|0;HEAP32[$39+4>>2]=HEAP32[$858+4>>2]|0;HEAP32[$39+8>>2]=HEAP32[$858+8>>2]|0;
     HEAP32[$858>>2] = 0;
     $859 = ((($858)) + 4|0);
     HEAP32[$859>>2] = 0;
     $860 = ((($858)) + 8|0);
     HEAP32[$860>>2] = 0;
     $861 = HEAP8[$op2>>0]|0;
     $862 = $861 & 1;
     $863 = ($862<<24>>24)==(0);
     $864 = ((($op2)) + 8|0);
     $865 = HEAP32[$864>>2]|0;
     $866 = ((($op2)) + 1|0);
     $867 = $863 ? $866 : $865;
     $868 = ((($op2)) + 4|0);
     $869 = HEAP32[$868>>2]|0;
     $870 = $861&255;
     $871 = $870 >>> 1;
     $872 = $863 ? $871 : $869;
     $873 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($39,$867,$872)|0);
     ;HEAP32[$38>>2]=HEAP32[$873>>2]|0;HEAP32[$38+4>>2]=HEAP32[$873+4>>2]|0;HEAP32[$38+8>>2]=HEAP32[$873+8>>2]|0;
     HEAP32[$873>>2] = 0;
     $874 = ((($873)) + 4|0);
     HEAP32[$874>>2] = 0;
     $875 = ((($873)) + 8|0);
     HEAP32[$875>>2] = 0;
     $876 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($38,1595)|0);
     ;HEAP32[$37>>2]=HEAP32[$876>>2]|0;HEAP32[$37+4>>2]=HEAP32[$876+4>>2]|0;HEAP32[$37+8>>2]=HEAP32[$876+8>>2]|0;
     HEAP32[$876>>2] = 0;
     $877 = ((($876)) + 4|0);
     HEAP32[$877>>2] = 0;
     $878 = ((($876)) + 8|0);
     HEAP32[$878>>2] = 0;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($36,$37);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($857,$36);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($36);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($37);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($38);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($39);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($40);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($op1);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($op2);
     $$0 = $839;
     break L1;
     break;
    }
    case 108:  {
     $883 = ((($t$0)) + 1|0);
     $884 = HEAP8[$883>>0]|0;
     $885 = $884 << 24 >> 24;
     switch ($885|0) {
     case 101:  {
      $886 = ((($first)) + 2|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($41,2870,2);
      $887 = (__ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($886,$last,$41,$db)|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($41);
      $888 = ($887|0)==($886|0);
      $first$47 = $888 ? $first : $887;
      $$0 = $first$47;
      break L1;
      break;
     }
     case 115:  {
      $889 = ((($first)) + 2|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($42,2873,2);
      $890 = (__ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($889,$last,$42,$db)|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($42);
      $891 = ($890|0)==($889|0);
      $first$48 = $891 ? $first : $890;
      $$0 = $first$48;
      break L1;
      break;
     }
     case 83:  {
      $892 = ((($first)) + 2|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($43,2876,3);
      $893 = (__ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($892,$last,$43,$db)|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($43);
      $894 = ($893|0)==($892|0);
      $first$49 = $894 ? $first : $893;
      $$0 = $first$49;
      break L1;
      break;
     }
     case 116:  {
      $895 = ((($first)) + 2|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($44,1668,1);
      $896 = (__ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($895,$last,$44,$db)|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($44);
      $897 = ($896|0)==($895|0);
      $first$50 = $897 ? $first : $896;
      $$0 = $first$50;
      break L1;
      break;
     }
     default: {
      $$0 = $first;
      break L1;
     }
     }
     break;
    }
    case 109:  {
     $898 = ((($t$0)) + 1|0);
     $899 = HEAP8[$898>>0]|0;
     $900 = $899 << 24 >> 24;
     switch ($900|0) {
     case 105:  {
      $901 = ((($first)) + 2|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($45,2880,1);
      $902 = (__ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($901,$last,$45,$db)|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($45);
      $903 = ($902|0)==($901|0);
      $first$51 = $903 ? $first : $902;
      $$0 = $first$51;
      break L1;
      break;
     }
     case 73:  {
      $904 = ((($first)) + 2|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($46,2882,2);
      $905 = (__ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($904,$last,$46,$db)|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($46);
      $906 = ($905|0)==($904|0);
      $first$52 = $906 ? $first : $905;
      $$0 = $first$52;
      break L1;
      break;
     }
     case 108:  {
      $907 = ((($first)) + 2|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($47,1651,1);
      $908 = (__ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($907,$last,$47,$db)|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($47);
      $909 = ($908|0)==($907|0);
      $first$53 = $909 ? $first : $908;
      $$0 = $first$53;
      break L1;
      break;
     }
     case 76:  {
      $910 = ((($first)) + 2|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($48,2885,2);
      $911 = (__ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($910,$last,$48,$db)|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($48);
      $912 = ($911|0)==($910|0);
      $first$54 = $912 ? $first : $911;
      $$0 = $first$54;
      break L1;
      break;
     }
     case 109:  {
      $913 = ((($first)) + 2|0);
      $914 = ($913|0)==($last|0);
      if (!($914)) {
       $915 = HEAP8[$913>>0]|0;
       $916 = ($915<<24>>24)==(95);
       if ($916) {
        $917 = ((($first)) + 3|0);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($49,2888,2);
        $918 = (__ZN10__cxxabiv112_GLOBAL__N_123parse_prefix_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($917,$last,$49,$db)|0);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($49);
        $919 = ($918|0)==($917|0);
        $first$55 = $919 ? $first : $918;
        $$0 = $first$55;
        break L1;
       }
      }
      $920 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($913,$last,$db)|0);
      $921 = ($920|0)==($913|0);
      if ($921) {
       $$0 = $first;
       break L1;
      }
      $922 = HEAP32[$db>>2]|0;
      $923 = ((($db)) + 4|0);
      $924 = HEAP32[$923>>2]|0;
      $925 = ($922|0)==($924|0);
      if ($925) {
       $$0 = $first;
       break L1;
      }
      $926 = ((($924)) + -24|0);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($53,$926);
      $927 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($53,0,1606)|0);
      ;HEAP32[$52>>2]=HEAP32[$927>>2]|0;HEAP32[$52+4>>2]=HEAP32[$927+4>>2]|0;HEAP32[$52+8>>2]=HEAP32[$927+8>>2]|0;
      HEAP32[$927>>2] = 0;
      $928 = ((($927)) + 4|0);
      HEAP32[$928>>2] = 0;
      $929 = ((($927)) + 8|0);
      HEAP32[$929>>2] = 0;
      $930 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($52,2891)|0);
      ;HEAP32[$51>>2]=HEAP32[$930>>2]|0;HEAP32[$51+4>>2]=HEAP32[$930+4>>2]|0;HEAP32[$51+8>>2]=HEAP32[$930+8>>2]|0;
      HEAP32[$930>>2] = 0;
      $931 = ((($930)) + 4|0);
      HEAP32[$931>>2] = 0;
      $932 = ((($930)) + 8|0);
      HEAP32[$932>>2] = 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($50,$51);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($926,$50);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($50);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($51);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($52);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($53);
      $$0 = $920;
      break L1;
      break;
     }
     default: {
      $$0 = $first;
      break L1;
     }
     }
     break;
    }
    case 110:  {
     $933 = ((($t$0)) + 1|0);
     $934 = HEAP8[$933>>0]|0;
     $935 = $934 << 24 >> 24;
     switch ($935|0) {
     case 119: case 97:  {
      L323: do {
       if ($85) {
        $936 = HEAP8[$first>>0]|0;
        $937 = ($936<<24>>24)==(103);
        if ($937) {
         $938 = ((($first)) + 1|0);
         $939 = HEAP8[$938>>0]|0;
         $940 = ($939<<24>>24)==(115);
         $941 = ((($first)) + 2|0);
         $$first$i = $940 ? $941 : $first;
         $$pre = HEAP8[$$first$i>>0]|0;
         $942 = $$pre;$parsed_gs$0$off0$i = $940;$t$0$i267 = $$first$i;
        } else {
         $942 = $936;$parsed_gs$0$off0$i = 0;$t$0$i267 = $first;
        }
        $943 = ($942<<24>>24)==(110);
        if ($943) {
         $944 = ((($t$0$i267)) + 1|0);
         $945 = HEAP8[$944>>0]|0;
         switch ($945<<24>>24) {
         case 97: case 119:  {
          break;
         }
         default: {
          $$221$i = $first;
          label = 319;
          break L323;
         }
         }
         $946 = ($945<<24>>24)==(97);
         $947 = ((($t$0$i267)) + 2|0);
         $948 = ($947|0)==($last|0);
         if ($948) {
          $$9$i = $first;
         } else {
          $has_expr_list$0$off0$i = 0;$t$1$i = $947;
          while(1) {
           $949 = HEAP8[$t$1$i>>0]|0;
           $950 = ($949<<24>>24)==(95);
           if ($950) {
            $has_expr_list$0$off0$i$lcssa = $has_expr_list$0$off0$i;$t$1$i$lcssa = $t$1$i;
            break;
           }
           $951 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($t$1$i,$last,$db)|0);
           $952 = ($951|0)==($t$1$i|0);
           $953 = ($951|0)==($last|0);
           $or$cond$i = $952 | $953;
           if ($or$cond$i) {
            $$9$i = $first;
            break L323;
           } else {
            $has_expr_list$0$off0$i = 1;$t$1$i = $951;
           }
          }
          $954 = ((($t$1$i$lcssa)) + 1|0);
          $955 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($954,$last,$db)|0);
          $956 = ($955|0)==($954|0);
          $957 = ($955|0)==($last|0);
          $or$cond22$i = $956 | $957;
          if ($or$cond22$i) {
           $$9$i = $first;
          } else {
           $958 = $955;
           $959 = (($81) - ($958))|0;
           $960 = ($959|0)>(2);
           $961 = HEAP8[$955>>0]|0;
           $962 = ($961<<24>>24)==(112);
           $or$cond = $960 & $962;
           L335: do {
            if ($or$cond) {
             $963 = ((($955)) + 1|0);
             $964 = HEAP8[$963>>0]|0;
             $965 = ($964<<24>>24)==(105);
             if (!($965)) {
              $$9$i = $first;
              break L323;
             }
             $966 = ((($955)) + 2|0);
             $t$2$i = $966;
             while(1) {
              $967 = HEAP8[$t$2$i>>0]|0;
              $968 = ($967<<24>>24)==(69);
              if ($968) {
               $has_init$0$off0$i513 = 1;$t$3$i512 = $t$2$i;
               break L335;
              }
              $969 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($t$2$i,$last,$db)|0);
              $970 = ($969|0)==($t$2$i|0);
              $971 = ($969|0)==($last|0);
              $or$cond23$i = $970 | $971;
              if ($or$cond23$i) {
               $$9$i = $first;
               break L323;
              } else {
               $t$2$i = $969;
              }
             }
            } else {
             $972 = ($961<<24>>24)==(69);
             if ($972) {
              $has_init$0$off0$i513 = 0;$t$3$i512 = $955;
             } else {
              $$9$i = $first;
              break L323;
             }
            }
           } while(0);
           HEAP32[$1>>2] = 0;
           $973 = ((($1)) + 4|0);
           HEAP32[$973>>2] = 0;
           $974 = ((($1)) + 8|0);
           HEAP32[$974>>2] = 0;
           if ($has_init$0$off0$i513) {
            $975 = HEAP32[$db>>2]|0;
            $976 = ((($db)) + 4|0);
            $977 = HEAP32[$976>>2]|0;
            $978 = ($975|0)==($977|0);
            if (!($978)) {
             $979 = ((($977)) + -24|0);
             __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($2,$979);
             $980 = HEAP8[$1>>0]|0;
             $981 = $980 & 1;
             $982 = ($981<<24>>24)==(0);
             L346: do {
              if ($982) {
               $983 = ((($1)) + 1|0);
               HEAP8[$983>>0] = 0;
               HEAP8[$1>>0] = 0;
              } else {
               $984 = ((($1)) + 8|0);
               $985 = HEAP32[$984>>2]|0;
               HEAP8[$985>>0] = 0;
               $986 = ((($1)) + 4|0);
               HEAP32[$986>>2] = 0;
               $987 = HEAP32[$1>>2]|0;
               $988 = $987 & -2;
               $phitmp$i$i$i$i$i$i$i273 = (($988) + -1)|0;
               $989 = $987&255;
               $990 = $989 & 1;
               $991 = ($990<<24>>24)==(0);
               do {
                if ($991) {
                 $992 = $987 >>> 1;
                 $993 = $992 & 127;
                 $994 = ($989&255)<(22);
                 if ($994) {
                  $1001 = ((($1)) + 1|0);
                  $1002 = $987 >>> 1;
                  $1003 = $1002 & 127;
                  $1004 = (($1003) + 1)|0;
                  _memcpy(($1001|0),($985|0),($1004|0))|0;
                  _free($985);
                  $$ph518 = $993;
                  break;
                 }
                 $995 = (($993) + 16)|0;
                 $996 = $995 & 240;
                 $phitmp$i2$i$i$i$i$i$i276 = (($996) + -1)|0;
                 $997 = ($phitmp$i2$i$i$i$i$i$i276|0)==($phitmp$i$i$i$i$i$i$i273|0);
                 if ($997) {
                  break L346;
                 }
                 $998 = ($phitmp$i2$i$i$i$i$i$i276>>>0)<=($phitmp$i$i$i$i$i$i$i273>>>0);
                 $999 = (_malloc($996)|0);
                 $1000 = ($999|0)==(0|0);
                 $or$cond$i$i$i$i$i$i278 = $998 & $1000;
                 if ($or$cond$i$i$i$i$i$i278) {
                  break L346;
                 }
                 $1006 = ((($1)) + 1|0);
                 $1007 = $987 >>> 1;
                 $1008 = $1007 & 127;
                 $1009 = (($1008) + 1)|0;
                 _memcpy(($999|0),($1006|0),($1009|0))|0;
                 $1010 = $996 | 1;
                 HEAP32[$1>>2] = $1010;
                 HEAP32[$986>>2] = $993;
                 HEAP32[$984>>2] = $999;
                 break L346;
                } else {
                 $1005 = ((($1)) + 1|0);
                 HEAP8[$1005>>0] = 0;
                 _free($985);
                 $$ph518 = 0;
                }
               } while(0);
               $1011 = $$ph518 << 1;
               $1012 = $1011&255;
               HEAP8[$1>>0] = $1012;
              }
             } while(0);
             ;HEAP32[$1>>2]=HEAP32[$2>>2]|0;HEAP32[$1+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$1+8>>2]=HEAP32[$2+8>>2]|0;
             HEAP32[$2>>2] = 0;
             $1013 = ((($2)) + 4|0);
             HEAP32[$1013>>2] = 0;
             $1014 = ((($2)) + 8|0);
             HEAP32[$1014>>2] = 0;
             __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($2);
             $1015 = HEAP32[$976>>2]|0;
             $1016 = ((($1015)) + -24|0);
             $1018 = $1015;
             while(1) {
              $1017 = ((($1018)) + -24|0);
              HEAP32[$976>>2] = $1017;
              __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1017);
              $$pre$i$i289 = HEAP32[$976>>2]|0;
              $1019 = ($$pre$i$i289|0)==($1016|0);
              if ($1019) {
               $$pre$phi511Z2D = $976;$$pre$phiZ2D = $db;$1022 = $1016;
               label = 283;
               break;
              } else {
               $1018 = $$pre$i$i289;
              }
             }
            }
           } else {
            $$phi$trans$insert = ((($db)) + 4|0);
            $$pre507 = HEAP32[$$phi$trans$insert>>2]|0;
            $$pre$phi511Z2D = $$phi$trans$insert;$$pre$phiZ2D = $db;$1022 = $$pre507;
            label = 283;
           }
           if ((label|0) == 283) {
            $1020 = HEAP32[$$pre$phiZ2D>>2]|0;
            $1021 = ($1020|0)==($1022|0);
            if (!($1021)) {
             $1023 = ((($1022)) + -24|0);
             __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3,$1023);
             $1024 = HEAP32[$$pre$phi511Z2D>>2]|0;
             $1025 = ((($1024)) + -24|0);
             $1027 = $1024;
             while(1) {
              $1026 = ((($1027)) + -24|0);
              HEAP32[$$pre$phi511Z2D>>2] = $1026;
              __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1026);
              $$pre$i24$i = HEAP32[$$pre$phi511Z2D>>2]|0;
              $1028 = ($$pre$i24$i|0)==($1025|0);
              if ($1028) {
               break;
              } else {
               $1027 = $$pre$i24$i;
              }
             }
             HEAP32[$4>>2] = 0;
             $1029 = ((($4)) + 4|0);
             HEAP32[$1029>>2] = 0;
             $1030 = ((($4)) + 8|0);
             HEAP32[$1030>>2] = 0;
             if ($has_expr_list$0$off0$i$lcssa) {
              $1031 = HEAP32[$$pre$phiZ2D>>2]|0;
              $1032 = ($1031|0)==($1025|0);
              if ($1032) {
               $$019$i = $first;$$2$i302 = 0;
              } else {
               $1033 = ((($1024)) + -48|0);
               __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($5,$1033);
               $1034 = HEAP8[$4>>0]|0;
               $1035 = $1034 & 1;
               $1036 = ($1035<<24>>24)==(0);
               L371: do {
                if ($1036) {
                 $1037 = ((($4)) + 1|0);
                 HEAP8[$1037>>0] = 0;
                 HEAP8[$4>>0] = 0;
                } else {
                 $1038 = ((($4)) + 8|0);
                 $1039 = HEAP32[$1038>>2]|0;
                 HEAP8[$1039>>0] = 0;
                 $1040 = ((($4)) + 4|0);
                 HEAP32[$1040>>2] = 0;
                 $1041 = HEAP32[$4>>2]|0;
                 $1042 = $1041 & -2;
                 $phitmp$i$i$i$i$i$i32$i = (($1042) + -1)|0;
                 $1043 = $1041&255;
                 $1044 = $1043 & 1;
                 $1045 = ($1044<<24>>24)==(0);
                 do {
                  if ($1045) {
                   $1046 = $1041 >>> 1;
                   $1047 = $1046 & 127;
                   $1048 = ($1043&255)<(22);
                   if ($1048) {
                    $1055 = ((($4)) + 1|0);
                    $1056 = $1041 >>> 1;
                    $1057 = $1056 & 127;
                    $1058 = (($1057) + 1)|0;
                    _memcpy(($1055|0),($1039|0),($1058|0))|0;
                    _free($1039);
                    $$ph520524 = $1047;
                    break;
                   }
                   $1049 = (($1047) + 16)|0;
                   $1050 = $1049 & 240;
                   $phitmp$i2$i$i$i$i$i35$i = (($1050) + -1)|0;
                   $1051 = ($phitmp$i2$i$i$i$i$i35$i|0)==($phitmp$i$i$i$i$i$i32$i|0);
                   if ($1051) {
                    break L371;
                   }
                   $1052 = ($phitmp$i2$i$i$i$i$i35$i>>>0)<=($phitmp$i$i$i$i$i$i32$i>>>0);
                   $1053 = (_malloc($1050)|0);
                   $1054 = ($1053|0)==(0|0);
                   $or$cond$i$i$i$i$i37$i = $1052 & $1054;
                   if ($or$cond$i$i$i$i$i37$i) {
                    break L371;
                   }
                   $1060 = ((($4)) + 1|0);
                   $1061 = $1041 >>> 1;
                   $1062 = $1061 & 127;
                   $1063 = (($1062) + 1)|0;
                   _memcpy(($1053|0),($1060|0),($1063|0))|0;
                   $1064 = $1050 | 1;
                   HEAP32[$4>>2] = $1064;
                   HEAP32[$1040>>2] = $1047;
                   HEAP32[$1038>>2] = $1053;
                   break L371;
                  } else {
                   $1059 = ((($4)) + 1|0);
                   HEAP8[$1059>>0] = 0;
                   _free($1039);
                   $$ph520524 = 0;
                  }
                 } while(0);
                 $1065 = $$ph520524 << 1;
                 $1066 = $1065&255;
                 HEAP8[$4>>0] = $1066;
                }
               } while(0);
               ;HEAP32[$4>>2]=HEAP32[$5>>2]|0;HEAP32[$4+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[$5+8>>2]|0;
               HEAP32[$5>>2] = 0;
               $1067 = ((($5)) + 4|0);
               HEAP32[$1067>>2] = 0;
               $1068 = ((($5)) + 8|0);
               HEAP32[$1068>>2] = 0;
               __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
               $1069 = HEAP32[$$pre$phi511Z2D>>2]|0;
               $1070 = ((($1069)) + -24|0);
               $1072 = $1069;
               while(1) {
                $1071 = ((($1072)) + -24|0);
                HEAP32[$$pre$phi511Z2D>>2] = $1071;
                __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1071);
                $$pre$i48$i = HEAP32[$$pre$phi511Z2D>>2]|0;
                $1073 = ($$pre$i48$i|0)==($1070|0);
                if ($1073) {
                 label = 300;
                 break;
                } else {
                 $1072 = $$pre$i48$i;
                }
               }
              }
             } else {
              label = 300;
             }
             if ((label|0) == 300) {
              HEAP32[$6>>2] = 0;
              $1074 = ((($6)) + 4|0);
              HEAP32[$1074>>2] = 0;
              $1075 = ((($6)) + 8|0);
              HEAP32[$1075>>2] = 0;
              if ($parsed_gs$0$off0$i) {
               __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6assignEPKcj($6,1794,2);
              }
              if ($946) {
               (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($6,2895)|0);
              } else {
               (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($6,1618)|0);
              }
              if ($has_expr_list$0$off0$i$lcssa) {
               __ZNSt3__1plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($8,1606,$4);
               $1076 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($8,2899)|0);
               ;HEAP32[$7>>2]=HEAP32[$1076>>2]|0;HEAP32[$7+4>>2]=HEAP32[$1076+4>>2]|0;HEAP32[$7+8>>2]=HEAP32[$1076+8>>2]|0;
               HEAP32[$1076>>2] = 0;
               $1077 = ((($1076)) + 4|0);
               HEAP32[$1077>>2] = 0;
               $1078 = ((($1076)) + 8|0);
               HEAP32[$1078>>2] = 0;
               $1079 = HEAP8[$7>>0]|0;
               $1080 = $1079 & 1;
               $1081 = ($1080<<24>>24)==(0);
               $1082 = ((($7)) + 8|0);
               $1083 = HEAP32[$1082>>2]|0;
               $1084 = ((($7)) + 1|0);
               $1085 = $1081 ? $1084 : $1083;
               $1086 = ((($7)) + 4|0);
               $1087 = HEAP32[$1086>>2]|0;
               $1088 = $1079&255;
               $1089 = $1088 >>> 1;
               $1090 = $1081 ? $1089 : $1087;
               (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($6,$1085,$1090)|0);
               __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
               __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
              }
              $1091 = HEAP8[$3>>0]|0;
              $1092 = $1091 & 1;
              $1093 = ($1092<<24>>24)==(0);
              $1094 = ((($3)) + 8|0);
              $1095 = HEAP32[$1094>>2]|0;
              $1096 = ((($3)) + 1|0);
              $1097 = $1093 ? $1096 : $1095;
              $1098 = ((($3)) + 4|0);
              $1099 = HEAP32[$1098>>2]|0;
              $1100 = $1091&255;
              $1101 = $1100 >>> 1;
              $1102 = $1093 ? $1101 : $1099;
              (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($6,$1097,$1102)|0);
              if ($has_init$0$off0$i513) {
               __ZNSt3__1plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($10,1508,$1);
               $1103 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($10,1511)|0);
               ;HEAP32[$9>>2]=HEAP32[$1103>>2]|0;HEAP32[$9+4>>2]=HEAP32[$1103+4>>2]|0;HEAP32[$9+8>>2]=HEAP32[$1103+8>>2]|0;
               HEAP32[$1103>>2] = 0;
               $1104 = ((($1103)) + 4|0);
               HEAP32[$1104>>2] = 0;
               $1105 = ((($1103)) + 8|0);
               HEAP32[$1105>>2] = 0;
               $1106 = HEAP8[$9>>0]|0;
               $1107 = $1106 & 1;
               $1108 = ($1107<<24>>24)==(0);
               $1109 = ((($9)) + 8|0);
               $1110 = HEAP32[$1109>>2]|0;
               $1111 = ((($9)) + 1|0);
               $1112 = $1108 ? $1111 : $1110;
               $1113 = ((($9)) + 4|0);
               $1114 = HEAP32[$1113>>2]|0;
               $1115 = $1106&255;
               $1116 = $1115 >>> 1;
               $1117 = $1108 ? $1116 : $1114;
               (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($6,$1112,$1117)|0);
               __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
               __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($10);
              }
              ;HEAP32[$12>>2]=HEAP32[$6>>2]|0;HEAP32[$12+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$12+8>>2]=HEAP32[$6+8>>2]|0;
              HEAP32[$6>>2] = 0;
              $1118 = ((($6)) + 4|0);
              HEAP32[$1118>>2] = 0;
              $1119 = ((($6)) + 8|0);
              HEAP32[$1119>>2] = 0;
              __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($11,$12);
              $1120 = HEAP32[$$pre$phi511Z2D>>2]|0;
              $1121 = ((($db)) + 8|0);
              $1122 = HEAP32[$1121>>2]|0;
              $1123 = ($1120>>>0)<($1122>>>0);
              if ($1123) {
               __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($1120,$11);
               $1124 = HEAP32[$$pre$phi511Z2D>>2]|0;
               $1125 = ((($1124)) + 24|0);
               HEAP32[$$pre$phi511Z2D>>2] = $1125;
              } else {
               $1126 = ((($db)) + 12|0);
               $1127 = HEAP32[$$pre$phiZ2D>>2]|0;
               $1128 = $1120;
               $1129 = $1127;
               $1130 = (($1128) - ($1129))|0;
               $1131 = (($1130|0) / 24)&-1;
               $1132 = (($1131) + 1)|0;
               $1133 = ($1130|0)<(-24);
               if ($1133) {
                __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
                // unreachable;
               }
               $1134 = $1122;
               $1135 = (($1134) - ($1129))|0;
               $1136 = (($1135|0) / 24)&-1;
               $1137 = ($1136>>>0)<(1073741823);
               if ($1137) {
                $1138 = $1136 << 1;
                $1139 = ($1138>>>0)<($1132>>>0);
                $1140 = $1139 ? $1132 : $1138;
                $$0$i$i$i$i299 = $1140;
               } else {
                $$0$i$i$i$i299 = 2147483647;
               }
               __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($0,$$0$i$i$i$i299,$1131,$1126);
               $1141 = ((($0)) + 8|0);
               $1142 = HEAP32[$1141>>2]|0;
               __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($1142,$11);
               $1143 = ((($1142)) + 24|0);
               HEAP32[$1141>>2] = $1143;
               __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$0);
               __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($0);
              }
              __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($11);
              __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($12);
              $1144 = ((($t$3$i512)) + 1|0);
              __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
              $$019$i = $1144;$$2$i302 = 1;
             }
             __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
             __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
             __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($1);
             if ($$2$i302) {
              $$221$i = $$019$i;
              label = 319;
              break;
             } else {
              $$9$i = $first;
              break;
             }
            }
           }
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($1);
           $$9$i = $first;
          }
         }
        } else {
         $$221$i = $first;
         label = 319;
        }
       } else {
        $$221$i = $first;
        label = 319;
       }
      } while(0);
      if ((label|0) == 319) {
       $$9$i = $$221$i;
      }
      $$0 = $$9$i;
      break L1;
      break;
     }
     case 101:  {
      $1145 = ((($first)) + 2|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($54,2902,2);
      $1146 = (__ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($1145,$last,$54,$db)|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($54);
      $1147 = ($1146|0)==($1145|0);
      $first$56 = $1147 ? $first : $1146;
      $$0 = $first$56;
      break L1;
      break;
     }
     case 103:  {
      $1148 = ((($first)) + 2|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($55,2880,1);
      $1149 = (__ZN10__cxxabiv112_GLOBAL__N_123parse_prefix_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($1148,$last,$55,$db)|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($55);
      $1150 = ($1149|0)==($1148|0);
      $first$57 = $1150 ? $first : $1149;
      $$0 = $first$57;
      break L1;
      break;
     }
     case 116:  {
      $1151 = ((($first)) + 2|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($56,2905,1);
      $1152 = (__ZN10__cxxabiv112_GLOBAL__N_123parse_prefix_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($1151,$last,$56,$db)|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($56);
      $1153 = ($1152|0)==($1151|0);
      $first$58 = $1153 ? $first : $1152;
      $$0 = $first$58;
      break L1;
      break;
     }
     case 120:  {
      $1154 = ((($first)) + 2|0);
      $1155 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($1154,$last,$db)|0);
      $1156 = ($1155|0)==($1154|0);
      if ($1156) {
       $$03$i265 = $1154;
      } else {
       $1157 = HEAP32[$db>>2]|0;
       $1158 = ((($db)) + 4|0);
       $1159 = HEAP32[$1158>>2]|0;
       $1160 = ($1157|0)==($1159|0);
       if ($1160) {
        $$03$i265 = $1154;
       } else {
        $1161 = ((($1159)) + -24|0);
        __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($2,$1161);
        $1162 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($2,0,2907)|0);
        ;HEAP32[$1>>2]=HEAP32[$1162>>2]|0;HEAP32[$1+4>>2]=HEAP32[$1162+4>>2]|0;HEAP32[$1+8>>2]=HEAP32[$1162+8>>2]|0;
        HEAP32[$1162>>2] = 0;
        $1163 = ((($1162)) + 4|0);
        HEAP32[$1163>>2] = 0;
        $1164 = ((($1162)) + 8|0);
        HEAP32[$1164>>2] = 0;
        $1165 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($1,1511)|0);
        ;HEAP32[$0>>2]=HEAP32[$1165>>2]|0;HEAP32[$0+4>>2]=HEAP32[$1165+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$1165+8>>2]|0;
        HEAP32[$1165>>2] = 0;
        $1166 = ((($1165)) + 4|0);
        HEAP32[$1166>>2] = 0;
        $1167 = ((($1165)) + 8|0);
        HEAP32[$1167>>2] = 0;
        $1168 = HEAP8[$1161>>0]|0;
        $1169 = $1168 & 1;
        $1170 = ($1169<<24>>24)==(0);
        do {
         if ($1170) {
          $1171 = ((($1161)) + 1|0);
          HEAP8[$1171>>0] = 0;
          HEAP8[$1161>>0] = 0;
         } else {
          $1172 = ((($1159)) + -16|0);
          $1173 = HEAP32[$1172>>2]|0;
          HEAP8[$1173>>0] = 0;
          $1174 = ((($1159)) + -20|0);
          HEAP32[$1174>>2] = 0;
          $$pre$i$i$i$i = HEAP8[$1161>>0]|0;
          $1175 = $$pre$i$i$i$i & 1;
          $1176 = ($1175<<24>>24)==(0);
          if ($1176) {
           $1181 = $$pre$i$i$i$i;$1190 = 10;
          } else {
           $1177 = HEAP32[$1161>>2]|0;
           $1178 = $1177 & -2;
           $phitmp$i$i$i$i$i$i$i = (($1178) + -1)|0;
           $1179 = $1177&255;
           $1181 = $1179;$1190 = $phitmp$i$i$i$i$i$i$i;
          }
          $1180 = $1181 & 1;
          $1182 = ($1180<<24>>24)==(0);
          if ($1182) {
           $1183 = $1181&255;
           $1184 = $1183 >>> 1;
           $1185 = ($1181&255)<(22);
           if ($1185) {
            $1188 = 10;$1209 = $1184;$1751 = 1;
           } else {
            $1186 = (($1184) + 16)|0;
            $1187 = $1186 & 240;
            $phitmp$i2$i$i$i$i$i$i = (($1187) + -1)|0;
            $1188 = $phitmp$i2$i$i$i$i$i$i;$1209 = $1184;$1751 = 1;
           }
          } else {
           $1188 = 10;$1209 = 0;$1751 = 0;
          }
          $1189 = ($1188|0)==($1190|0);
          if (!($1189)) {
           $1191 = ($1188|0)==(10);
           if ($1191) {
            $1196 = ((($1161)) + 1|0);
            $1197 = HEAP32[$1172>>2]|0;
            if ($1751) {
             $1198 = $1181&255;
             $1199 = $1198 >>> 1;
             $1200 = (($1199) + 1)|0;
             _memcpy(($1196|0),($1197|0),($1200|0))|0;
             _free($1197);
            } else {
             $1205 = HEAP8[$1197>>0]|0;
             HEAP8[$1196>>0] = $1205;
             _free($1197);
            }
            $1210 = $1209 << 1;
            $1211 = $1210&255;
            HEAP8[$1161>>0] = $1211;
            break;
           }
           $1192 = ($1188>>>0)<=($1190>>>0);
           $1193 = (($1188) + 1)|0;
           $1194 = (_malloc($1193)|0);
           $1195 = ($1194|0)==(0|0);
           $or$cond$i$i$i$i$i$i = $1192 & $1195;
           if (!($or$cond$i$i$i$i$i$i)) {
            if ($1751) {
             $1201 = ((($1161)) + 1|0);
             $1202 = $1181&255;
             $1203 = $1202 >>> 1;
             $1204 = (($1203) + 1)|0;
             _memcpy(($1194|0),($1201|0),($1204|0))|0;
            } else {
             $1206 = HEAP32[$1172>>2]|0;
             $1207 = HEAP8[$1206>>0]|0;
             HEAP8[$1194>>0] = $1207;
             _free($1206);
            }
            $1208 = $1193 | 1;
            HEAP32[$1161>>2] = $1208;
            HEAP32[$1174>>2] = $1209;
            HEAP32[$1172>>2] = $1194;
           }
          }
         }
        } while(0);
        ;HEAP32[$1161>>2]=HEAP32[$0>>2]|0;HEAP32[$1161+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$1161+8>>2]=HEAP32[$0+8>>2]|0;
        HEAP32[$0>>2] = 0;
        $1212 = ((($0)) + 4|0);
        HEAP32[$1212>>2] = 0;
        $1213 = ((($0)) + 8|0);
        HEAP32[$1213>>2] = 0;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($0);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($1);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($2);
        $$03$i265 = $1155;
       }
      }
      $1214 = ($$03$i265|0)==($1154|0);
      $first$59 = $1214 ? $first : $$03$i265;
      $$0 = $first$59;
      break L1;
      break;
     }
     default: {
      $$0 = $first;
      break L1;
     }
     }
     break;
    }
    case 111:  {
     $1215 = ((($t$0)) + 1|0);
     $1216 = HEAP8[$1215>>0]|0;
     $1217 = $1216 << 24 >> 24;
     switch ($1217|0) {
     case 110:  {
      $1218 = (__ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db)|0);
      $$0 = $1218;
      break L1;
      break;
     }
     case 111:  {
      $1219 = ((($first)) + 2|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($57,2918,2);
      $1220 = (__ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($1219,$last,$57,$db)|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($57);
      $1221 = ($1220|0)==($1219|0);
      $first$60 = $1221 ? $first : $1220;
      $$0 = $first$60;
      break L1;
      break;
     }
     case 114:  {
      $1222 = ((($first)) + 2|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($58,2921,1);
      $1223 = (__ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($1222,$last,$58,$db)|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($58);
      $1224 = ($1223|0)==($1222|0);
      $first$61 = $1224 ? $first : $1223;
      $$0 = $first$61;
      break L1;
      break;
     }
     case 82:  {
      $1225 = ((($first)) + 2|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($59,2923,2);
      $1226 = (__ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($1225,$last,$59,$db)|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($59);
      $1227 = ($1226|0)==($1225|0);
      $first$62 = $1227 ? $first : $1226;
      $$0 = $first$62;
      break L1;
      break;
     }
     default: {
      $$0 = $first;
      break L1;
     }
     }
     break;
    }
    case 112:  {
     $1228 = ((($t$0)) + 1|0);
     $1229 = HEAP8[$1228>>0]|0;
     $1230 = $1229 << 24 >> 24;
     switch ($1230|0) {
     case 109:  {
      $1231 = ((($first)) + 2|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($60,2926,3);
      $1232 = (__ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($1231,$last,$60,$db)|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($60);
      $1233 = ($1232|0)==($1231|0);
      $first$63 = $1233 ? $first : $1232;
      $$0 = $first$63;
      break L1;
      break;
     }
     case 108:  {
      $1234 = ((($first)) + 2|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($61,2930,1);
      $1235 = (__ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($1234,$last,$61,$db)|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($61);
      $1236 = ($1235|0)==($1234|0);
      $first$64 = $1236 ? $first : $1235;
      $$0 = $first$64;
      break L1;
      break;
     }
     case 76:  {
      $1237 = ((($first)) + 2|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($62,2932,2);
      $1238 = (__ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($1237,$last,$62,$db)|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($62);
      $1239 = ($1238|0)==($1237|0);
      $first$65 = $1239 ? $first : $1238;
      $$0 = $first$65;
      break L1;
      break;
     }
     case 112:  {
      $1240 = ((($first)) + 2|0);
      $1241 = ($1240|0)==($last|0);
      if (!($1241)) {
       $1242 = HEAP8[$1240>>0]|0;
       $1243 = ($1242<<24>>24)==(95);
       if ($1243) {
        $1244 = ((($first)) + 3|0);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($63,2935,2);
        $1245 = (__ZN10__cxxabiv112_GLOBAL__N_123parse_prefix_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($1244,$last,$63,$db)|0);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($63);
        $1246 = ($1245|0)==($1244|0);
        $first$66 = $1246 ? $first : $1245;
        $$0 = $first$66;
        break L1;
       }
      }
      $1247 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($1240,$last,$db)|0);
      $1248 = ($1247|0)==($1240|0);
      if ($1248) {
       $$0 = $first;
       break L1;
      }
      $1249 = HEAP32[$db>>2]|0;
      $1250 = ((($db)) + 4|0);
      $1251 = HEAP32[$1250>>2]|0;
      $1252 = ($1249|0)==($1251|0);
      if ($1252) {
       $$0 = $first;
       break L1;
      }
      $1253 = ((($1251)) + -24|0);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($67,$1253);
      $1254 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($67,0,1606)|0);
      ;HEAP32[$66>>2]=HEAP32[$1254>>2]|0;HEAP32[$66+4>>2]=HEAP32[$1254+4>>2]|0;HEAP32[$66+8>>2]=HEAP32[$1254+8>>2]|0;
      HEAP32[$1254>>2] = 0;
      $1255 = ((($1254)) + 4|0);
      HEAP32[$1255>>2] = 0;
      $1256 = ((($1254)) + 8|0);
      HEAP32[$1256>>2] = 0;
      $1257 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($66,2938)|0);
      ;HEAP32[$65>>2]=HEAP32[$1257>>2]|0;HEAP32[$65+4>>2]=HEAP32[$1257+4>>2]|0;HEAP32[$65+8>>2]=HEAP32[$1257+8>>2]|0;
      HEAP32[$1257>>2] = 0;
      $1258 = ((($1257)) + 4|0);
      HEAP32[$1258>>2] = 0;
      $1259 = ((($1257)) + 8|0);
      HEAP32[$1259>>2] = 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($64,$65);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($1253,$64);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($64);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($65);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($66);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($67);
      $$0 = $1247;
      break L1;
      break;
     }
     case 115:  {
      $1260 = ((($first)) + 2|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($68,2930,1);
      $1261 = (__ZN10__cxxabiv112_GLOBAL__N_123parse_prefix_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($1260,$last,$68,$db)|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($68);
      $1262 = ($1261|0)==($1260|0);
      $first$67 = $1262 ? $first : $1261;
      $$0 = $first$67;
      break L1;
      break;
     }
     case 116:  {
      $1263 = ($83|0)>(2);
      if ($1263) {
       $1264 = HEAP8[$first>>0]|0;
       $1265 = ($1264<<24>>24)==(112);
       if ($1265) {
        $1266 = ((($first)) + 1|0);
        $1267 = HEAP8[$1266>>0]|0;
        $1268 = ($1267<<24>>24)==(116);
        if ($1268) {
         $1269 = ((($first)) + 2|0);
         $1270 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($1269,$last,$db)|0);
         $1271 = ($1270|0)==($1269|0);
         if ($1271) {
          $$0$i254 = $first;
         } else {
          $1272 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($1270,$last,$db)|0);
          $1273 = ($1272|0)==($1270|0);
          if ($1273) {
           $$0$i254 = $first;
          } else {
           $1274 = ((($db)) + 4|0);
           $1275 = HEAP32[$1274>>2]|0;
           $1276 = HEAP32[$db>>2]|0;
           $1277 = $1275;
           $1278 = $1276;
           $1279 = (($1277) - ($1278))|0;
           $1280 = (($1279|0) / 24)&-1;
           $1281 = ($1280>>>0)<(2);
           if ($1281) {
            $$0$i254 = $first;
           } else {
            $1282 = ((($1275)) + -24|0);
            __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($0,$1282);
            $1283 = HEAP32[$1274>>2]|0;
            $1284 = ((($1283)) + -24|0);
            $1286 = $1283;
            while(1) {
             $1285 = ((($1286)) + -24|0);
             HEAP32[$1274>>2] = $1285;
             __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1285);
             $$pre$i$i250 = HEAP32[$1274>>2]|0;
             $1287 = ($$pre$i$i250|0)==($1284|0);
             if ($1287) {
              break;
             } else {
              $1286 = $$pre$i$i250;
             }
            }
            $1288 = ((($1283)) + -48|0);
            (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($1288,2942)|0);
            $1289 = HEAP32[$1274>>2]|0;
            $1290 = ((($1289)) + -24|0);
            $1291 = HEAP8[$0>>0]|0;
            $1292 = $1291 & 1;
            $1293 = ($1292<<24>>24)==(0);
            $1294 = ((($0)) + 8|0);
            $1295 = HEAP32[$1294>>2]|0;
            $1296 = ((($0)) + 1|0);
            $1297 = $1293 ? $1296 : $1295;
            $1298 = ((($0)) + 4|0);
            $1299 = HEAP32[$1298>>2]|0;
            $1300 = $1291&255;
            $1301 = $1300 >>> 1;
            $1302 = $1293 ? $1301 : $1299;
            (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($1290,$1297,$1302)|0);
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($0);
            $$0$i254 = $1272;
           }
          }
         }
        } else {
         $$0$i254 = $first;
        }
       } else {
        $$0$i254 = $first;
       }
      } else {
       $$0$i254 = $first;
      }
      $$0 = $$0$i254;
      break L1;
      break;
     }
     default: {
      $$0 = $first;
      break L1;
     }
     }
     break;
    }
    case 113:  {
     $1303 = ((($t$0)) + 1|0);
     $1304 = HEAP8[$1303>>0]|0;
     $1305 = ($1304<<24>>24)==(117);
     if (!($1305)) {
      $$0 = $first;
      break L1;
     }
     $1306 = ((($first)) + 2|0);
     $1307 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($1306,$last,$db)|0);
     $1308 = ($1307|0)==($1306|0);
     if ($1308) {
      $$0 = $first;
      break L1;
     }
     $1309 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($1307,$last,$db)|0);
     $1310 = ($1309|0)==($1307|0);
     if ($1310) {
      $1383 = ((($db)) + 4|0);
      $1384 = HEAP32[$1383>>2]|0;
      $1385 = ((($1384)) + -24|0);
      $1387 = $1384;
      while(1) {
       $1386 = ((($1387)) + -24|0);
       HEAP32[$1383>>2] = $1386;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1386);
       $$pre$i161 = HEAP32[$1383>>2]|0;
       $1388 = ($$pre$i161|0)==($1385|0);
       if ($1388) {
        $$0 = $first;
        break L1;
       } else {
        $1387 = $$pre$i161;
       }
      }
     }
     $1311 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($1309,$last,$db)|0);
     $1312 = ($1311|0)==($1309|0);
     $1313 = ((($db)) + 4|0);
     $1314 = HEAP32[$1313>>2]|0;
     if ($1312) {
      $1375 = ((($1314)) + -24|0);
      $1377 = $1314;
      while(1) {
       $1376 = ((($1377)) + -24|0);
       HEAP32[$1313>>2] = $1376;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1376);
       $$pre$i157 = HEAP32[$1313>>2]|0;
       $1378 = ($$pre$i157|0)==($1375|0);
       if ($1378) {
        break;
       } else {
        $1377 = $$pre$i157;
       }
      }
      $1379 = ((($1314)) + -48|0);
      $1381 = $1375;
      while(1) {
       $1380 = ((($1381)) + -24|0);
       HEAP32[$1313>>2] = $1380;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1380);
       $$pre$i159 = HEAP32[$1313>>2]|0;
       $1382 = ($$pre$i159|0)==($1379|0);
       if ($1382) {
        $$0 = $first;
        break L1;
       } else {
        $1381 = $$pre$i159;
       }
      }
     }
     $1315 = HEAP32[$db>>2]|0;
     $1316 = $1314;
     $1317 = $1315;
     $1318 = (($1316) - ($1317))|0;
     $1319 = (($1318|0) / 24)&-1;
     $1320 = ($1319>>>0)<(3);
     if ($1320) {
      $$0 = $first;
      break L1;
     }
     $1321 = ((($1314)) + -24|0);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($op3,$1321);
     $1322 = HEAP32[$1313>>2]|0;
     $1323 = ((($1322)) + -24|0);
     $1325 = $1322;
     while(1) {
      $1324 = ((($1325)) + -24|0);
      HEAP32[$1313>>2] = $1324;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1324);
      $$pre$i133 = HEAP32[$1313>>2]|0;
      $1326 = ($$pre$i133|0)==($1323|0);
      if ($1326) {
       break;
      } else {
       $1325 = $$pre$i133;
      }
     }
     $1327 = ((($1322)) + -48|0);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($op27,$1327);
     $1328 = HEAP32[$1313>>2]|0;
     $1329 = ((($1328)) + -24|0);
     $1331 = $1328;
     while(1) {
      $1330 = ((($1331)) + -24|0);
      HEAP32[$1313>>2] = $1330;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1330);
      $$pre$i135 = HEAP32[$1313>>2]|0;
      $1332 = ($$pre$i135|0)==($1329|0);
      if ($1332) {
       break;
      } else {
       $1331 = $$pre$i135;
      }
     }
     $1333 = ((($1328)) + -48|0);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($op18,$1333);
     $1334 = HEAP32[$1313>>2]|0;
     $1335 = ((($1334)) + -24|0);
     __ZNSt3__1plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($75,1606,$op18);
     $1336 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($75,2945)|0);
     ;HEAP32[$74>>2]=HEAP32[$1336>>2]|0;HEAP32[$74+4>>2]=HEAP32[$1336+4>>2]|0;HEAP32[$74+8>>2]=HEAP32[$1336+8>>2]|0;
     HEAP32[$1336>>2] = 0;
     $1337 = ((($1336)) + 4|0);
     HEAP32[$1337>>2] = 0;
     $1338 = ((($1336)) + 8|0);
     HEAP32[$1338>>2] = 0;
     $1339 = HEAP8[$op27>>0]|0;
     $1340 = $1339 & 1;
     $1341 = ($1340<<24>>24)==(0);
     $1342 = ((($op27)) + 8|0);
     $1343 = HEAP32[$1342>>2]|0;
     $1344 = ((($op27)) + 1|0);
     $1345 = $1341 ? $1344 : $1343;
     $1346 = ((($op27)) + 4|0);
     $1347 = HEAP32[$1346>>2]|0;
     $1348 = $1339&255;
     $1349 = $1348 >>> 1;
     $1350 = $1341 ? $1349 : $1347;
     $1351 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($74,$1345,$1350)|0);
     ;HEAP32[$73>>2]=HEAP32[$1351>>2]|0;HEAP32[$73+4>>2]=HEAP32[$1351+4>>2]|0;HEAP32[$73+8>>2]=HEAP32[$1351+8>>2]|0;
     HEAP32[$1351>>2] = 0;
     $1352 = ((($1351)) + 4|0);
     HEAP32[$1352>>2] = 0;
     $1353 = ((($1351)) + 8|0);
     HEAP32[$1353>>2] = 0;
     $1354 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($73,2951)|0);
     ;HEAP32[$72>>2]=HEAP32[$1354>>2]|0;HEAP32[$72+4>>2]=HEAP32[$1354+4>>2]|0;HEAP32[$72+8>>2]=HEAP32[$1354+8>>2]|0;
     HEAP32[$1354>>2] = 0;
     $1355 = ((($1354)) + 4|0);
     HEAP32[$1355>>2] = 0;
     $1356 = ((($1354)) + 8|0);
     HEAP32[$1356>>2] = 0;
     $1357 = HEAP8[$op3>>0]|0;
     $1358 = $1357 & 1;
     $1359 = ($1358<<24>>24)==(0);
     $1360 = ((($op3)) + 8|0);
     $1361 = HEAP32[$1360>>2]|0;
     $1362 = ((($op3)) + 1|0);
     $1363 = $1359 ? $1362 : $1361;
     $1364 = ((($op3)) + 4|0);
     $1365 = HEAP32[$1364>>2]|0;
     $1366 = $1357&255;
     $1367 = $1366 >>> 1;
     $1368 = $1359 ? $1367 : $1365;
     $1369 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($72,$1363,$1368)|0);
     ;HEAP32[$71>>2]=HEAP32[$1369>>2]|0;HEAP32[$71+4>>2]=HEAP32[$1369+4>>2]|0;HEAP32[$71+8>>2]=HEAP32[$1369+8>>2]|0;
     HEAP32[$1369>>2] = 0;
     $1370 = ((($1369)) + 4|0);
     HEAP32[$1370>>2] = 0;
     $1371 = ((($1369)) + 8|0);
     HEAP32[$1371>>2] = 0;
     $1372 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($71,1511)|0);
     ;HEAP32[$70>>2]=HEAP32[$1372>>2]|0;HEAP32[$70+4>>2]=HEAP32[$1372+4>>2]|0;HEAP32[$70+8>>2]=HEAP32[$1372+8>>2]|0;
     HEAP32[$1372>>2] = 0;
     $1373 = ((($1372)) + 4|0);
     HEAP32[$1373>>2] = 0;
     $1374 = ((($1372)) + 8|0);
     HEAP32[$1374>>2] = 0;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($69,$70);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($1335,$69);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($69);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($70);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($71);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($72);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($73);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($74);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($75);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($op18);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($op27);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($op3);
     $$0 = $1311;
     break L1;
     break;
    }
    case 114:  {
     $1389 = ((($t$0)) + 1|0);
     $1390 = HEAP8[$1389>>0]|0;
     $1391 = $1390 << 24 >> 24;
     switch ($1391|0) {
     case 99:  {
      $1392 = ($83|0)>(2);
      if ($1392) {
       $1393 = HEAP8[$first>>0]|0;
       $1394 = ($1393<<24>>24)==(114);
       if ($1394) {
        $1395 = ((($first)) + 1|0);
        $1396 = HEAP8[$1395>>0]|0;
        $1397 = ($1396<<24>>24)==(99);
        if ($1397) {
         $1398 = ((($first)) + 2|0);
         $1399 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($1398,$last,$db)|0);
         $1400 = ($1399|0)==($1398|0);
         if ($1400) {
          $$06$i248 = $first;
         } else {
          $1401 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($1399,$last,$db)|0);
          $1402 = ($1401|0)==($1399|0);
          if ($1402) {
           $$06$i248 = $first;
          } else {
           $1403 = ((($db)) + 4|0);
           $1404 = HEAP32[$1403>>2]|0;
           $1405 = HEAP32[$db>>2]|0;
           $1406 = $1404;
           $1407 = $1405;
           $1408 = (($1406) - ($1407))|0;
           $1409 = (($1408|0) / 24)&-1;
           $1410 = ($1409>>>0)<(2);
           if ($1410) {
            $$06$i248 = $first;
           } else {
            $1411 = ((($1404)) + -24|0);
            __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($0,$1411);
            $1412 = HEAP32[$1403>>2]|0;
            $1413 = ((($1412)) + -24|0);
            $1415 = $1412;
            while(1) {
             $1414 = ((($1415)) + -24|0);
             HEAP32[$1403>>2] = $1414;
             __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1414);
             $$pre$i$i222 = HEAP32[$1403>>2]|0;
             $1416 = ($$pre$i$i222|0)==($1413|0);
             if ($1416) {
              break;
             } else {
              $1415 = $$pre$i$i222;
             }
            }
            $1417 = ((($1412)) + -48|0);
            __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($6,$1417);
            $1418 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($6,0,2957)|0);
            ;HEAP32[$5>>2]=HEAP32[$1418>>2]|0;HEAP32[$5+4>>2]=HEAP32[$1418+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$1418+8>>2]|0;
            HEAP32[$1418>>2] = 0;
            $1419 = ((($1418)) + 4|0);
            HEAP32[$1419>>2] = 0;
            $1420 = ((($1418)) + 8|0);
            HEAP32[$1420>>2] = 0;
            $1421 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($5,2808)|0);
            ;HEAP32[$4>>2]=HEAP32[$1421>>2]|0;HEAP32[$4+4>>2]=HEAP32[$1421+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[$1421+8>>2]|0;
            HEAP32[$1421>>2] = 0;
            $1422 = ((($1421)) + 4|0);
            HEAP32[$1422>>2] = 0;
            $1423 = ((($1421)) + 8|0);
            HEAP32[$1423>>2] = 0;
            $1424 = HEAP8[$0>>0]|0;
            $1425 = $1424 & 1;
            $1426 = ($1425<<24>>24)==(0);
            $1427 = ((($0)) + 8|0);
            $1428 = HEAP32[$1427>>2]|0;
            $1429 = ((($0)) + 1|0);
            $1430 = $1426 ? $1429 : $1428;
            $1431 = ((($0)) + 4|0);
            $1432 = HEAP32[$1431>>2]|0;
            $1433 = $1424&255;
            $1434 = $1433 >>> 1;
            $1435 = $1426 ? $1434 : $1432;
            $1436 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($4,$1430,$1435)|0);
            ;HEAP32[$3>>2]=HEAP32[$1436>>2]|0;HEAP32[$3+4>>2]=HEAP32[$1436+4>>2]|0;HEAP32[$3+8>>2]=HEAP32[$1436+8>>2]|0;
            HEAP32[$1436>>2] = 0;
            $1437 = ((($1436)) + 4|0);
            HEAP32[$1437>>2] = 0;
            $1438 = ((($1436)) + 8|0);
            HEAP32[$1438>>2] = 0;
            $1439 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($3,1511)|0);
            ;HEAP32[$2>>2]=HEAP32[$1439>>2]|0;HEAP32[$2+4>>2]=HEAP32[$1439+4>>2]|0;HEAP32[$2+8>>2]=HEAP32[$1439+8>>2]|0;
            HEAP32[$1439>>2] = 0;
            $1440 = ((($1439)) + 4|0);
            HEAP32[$1440>>2] = 0;
            $1441 = ((($1439)) + 8|0);
            HEAP32[$1441>>2] = 0;
            __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($1,$2);
            __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($1417,$1);
            __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1);
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($2);
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($0);
            $$06$i248 = $1401;
           }
          }
         }
        } else {
         $$06$i248 = $first;
        }
       } else {
        $$06$i248 = $first;
       }
      } else {
       $$06$i248 = $first;
      }
      $$0 = $$06$i248;
      break L1;
      break;
     }
     case 109:  {
      $1442 = ((($first)) + 2|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($76,2975,1);
      $1443 = (__ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($1442,$last,$76,$db)|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($76);
      $1444 = ($1443|0)==($1442|0);
      $first$68 = $1444 ? $first : $1443;
      $$0 = $first$68;
      break L1;
      break;
     }
     case 77:  {
      $1445 = ((($first)) + 2|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($77,2977,2);
      $1446 = (__ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($1445,$last,$77,$db)|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($77);
      $1447 = ($1446|0)==($1445|0);
      $first$69 = $1447 ? $first : $1446;
      $$0 = $first$69;
      break L1;
      break;
     }
     case 115:  {
      $1448 = ((($first)) + 2|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($78,2980,2);
      $1449 = (__ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($1448,$last,$78,$db)|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($78);
      $1450 = ($1449|0)==($1448|0);
      $first$70 = $1450 ? $first : $1449;
      $$0 = $first$70;
      break L1;
      break;
     }
     case 83:  {
      $1451 = ((($first)) + 2|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($79,2983,3);
      $1452 = (__ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($1451,$last,$79,$db)|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($79);
      $1453 = ($1452|0)==($1451|0);
      $first$71 = $1453 ? $first : $1452;
      STACKTOP = sp;return ($first$71|0);
      break;
     }
     default: {
      $$0 = $first;
      break L1;
     }
     }
     break;
    }
    case 115:  {
     $1454 = ((($t$0)) + 1|0);
     $1455 = HEAP8[$1454>>0]|0;
     $1456 = $1455 << 24 >> 24;
     switch ($1456|0) {
     case 99:  {
      $1457 = ($83|0)>(2);
      if ($1457) {
       $1458 = HEAP8[$first>>0]|0;
       $1459 = ($1458<<24>>24)==(115);
       if ($1459) {
        $1460 = ((($first)) + 1|0);
        $1461 = HEAP8[$1460>>0]|0;
        $1462 = ($1461<<24>>24)==(99);
        if ($1462) {
         $1463 = ((($first)) + 2|0);
         $1464 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($1463,$last,$db)|0);
         $1465 = ($1464|0)==($1463|0);
         if ($1465) {
          $$06$i = $first;
         } else {
          $1466 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($1464,$last,$db)|0);
          $1467 = ($1466|0)==($1464|0);
          if ($1467) {
           $$06$i = $first;
          } else {
           $1468 = ((($db)) + 4|0);
           $1469 = HEAP32[$1468>>2]|0;
           $1470 = HEAP32[$db>>2]|0;
           $1471 = $1469;
           $1472 = $1470;
           $1473 = (($1471) - ($1472))|0;
           $1474 = (($1473|0) / 24)&-1;
           $1475 = ($1474>>>0)<(2);
           if ($1475) {
            $$06$i = $first;
           } else {
            $1476 = ((($1469)) + -24|0);
            __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($0,$1476);
            $1477 = HEAP32[$1468>>2]|0;
            $1478 = ((($1477)) + -24|0);
            $1480 = $1477;
            while(1) {
             $1479 = ((($1480)) + -24|0);
             HEAP32[$1468>>2] = $1479;
             __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1479);
             $$pre$i$i212 = HEAP32[$1468>>2]|0;
             $1481 = ($$pre$i$i212|0)==($1478|0);
             if ($1481) {
              break;
             } else {
              $1480 = $$pre$i$i212;
             }
            }
            $1482 = ((($1477)) + -48|0);
            __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($6,$1482);
            $1483 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($6,0,2987)|0);
            ;HEAP32[$5>>2]=HEAP32[$1483>>2]|0;HEAP32[$5+4>>2]=HEAP32[$1483+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$1483+8>>2]|0;
            HEAP32[$1483>>2] = 0;
            $1484 = ((($1483)) + 4|0);
            HEAP32[$1484>>2] = 0;
            $1485 = ((($1483)) + 8|0);
            HEAP32[$1485>>2] = 0;
            $1486 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($5,2808)|0);
            ;HEAP32[$4>>2]=HEAP32[$1486>>2]|0;HEAP32[$4+4>>2]=HEAP32[$1486+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[$1486+8>>2]|0;
            HEAP32[$1486>>2] = 0;
            $1487 = ((($1486)) + 4|0);
            HEAP32[$1487>>2] = 0;
            $1488 = ((($1486)) + 8|0);
            HEAP32[$1488>>2] = 0;
            $1489 = HEAP8[$0>>0]|0;
            $1490 = $1489 & 1;
            $1491 = ($1490<<24>>24)==(0);
            $1492 = ((($0)) + 8|0);
            $1493 = HEAP32[$1492>>2]|0;
            $1494 = ((($0)) + 1|0);
            $1495 = $1491 ? $1494 : $1493;
            $1496 = ((($0)) + 4|0);
            $1497 = HEAP32[$1496>>2]|0;
            $1498 = $1489&255;
            $1499 = $1498 >>> 1;
            $1500 = $1491 ? $1499 : $1497;
            $1501 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($4,$1495,$1500)|0);
            ;HEAP32[$3>>2]=HEAP32[$1501>>2]|0;HEAP32[$3+4>>2]=HEAP32[$1501+4>>2]|0;HEAP32[$3+8>>2]=HEAP32[$1501+8>>2]|0;
            HEAP32[$1501>>2] = 0;
            $1502 = ((($1501)) + 4|0);
            HEAP32[$1502>>2] = 0;
            $1503 = ((($1501)) + 8|0);
            HEAP32[$1503>>2] = 0;
            $1504 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($3,1511)|0);
            ;HEAP32[$2>>2]=HEAP32[$1504>>2]|0;HEAP32[$2+4>>2]=HEAP32[$1504+4>>2]|0;HEAP32[$2+8>>2]=HEAP32[$1504+8>>2]|0;
            HEAP32[$1504>>2] = 0;
            $1505 = ((($1504)) + 4|0);
            HEAP32[$1505>>2] = 0;
            $1506 = ((($1504)) + 8|0);
            HEAP32[$1506>>2] = 0;
            __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($1,$2);
            __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($1482,$1);
            __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1);
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($2);
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($0);
            $$06$i = $1466;
           }
          }
         }
        } else {
         $$06$i = $first;
        }
       } else {
        $$06$i = $first;
       }
      } else {
       $$06$i = $first;
      }
      $$0 = $$06$i;
      break L1;
      break;
     }
     case 112:  {
      $1507 = ($83|0)>(2);
      if (!($1507)) {
       $$0 = $first;
       break L1;
      }
      $1508 = HEAP8[$first>>0]|0;
      $1509 = ($1508<<24>>24)==(115);
      if (!($1509)) {
       $$0 = $first;
       break L1;
      }
      $1510 = ((($first)) + 1|0);
      $1511 = HEAP8[$1510>>0]|0;
      $1512 = ($1511<<24>>24)==(112);
      if (!($1512)) {
       $$0 = $first;
       break L1;
      }
      $1513 = ((($first)) + 2|0);
      $1514 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($1513,$last,$db)|0);
      $1515 = ($1514|0)==($1513|0);
      $first$$i = $1515 ? $first : $1514;
      $$0 = $first$$i;
      break L1;
      break;
     }
     case 114:  {
      $1516 = (__ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db)|0);
      $$0 = $1516;
      break L1;
      break;
     }
     case 116:  {
      $1517 = ($83|0)>(2);
      if ($1517) {
       $1518 = HEAP8[$first>>0]|0;
       $1519 = ($1518<<24>>24)==(115);
       if ($1519) {
        $1520 = ((($first)) + 1|0);
        $1521 = HEAP8[$1520>>0]|0;
        $1522 = ($1521<<24>>24)==(116);
        if ($1522) {
         $1523 = ((($first)) + 2|0);
         $1524 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($1523,$last,$db)|0);
         $1525 = ($1524|0)==($1523|0);
         if ($1525) {
          $$03$i211 = $first;
         } else {
          $1526 = HEAP32[$db>>2]|0;
          $1527 = ((($db)) + 4|0);
          $1528 = HEAP32[$1527>>2]|0;
          $1529 = ($1526|0)==($1528|0);
          if ($1529) {
           $$03$i211 = $first;
          } else {
           $1530 = ((($1528)) + -24|0);
           __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3,$1530);
           $1531 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($3,0,3000)|0);
           ;HEAP32[$2>>2]=HEAP32[$1531>>2]|0;HEAP32[$2+4>>2]=HEAP32[$1531+4>>2]|0;HEAP32[$2+8>>2]=HEAP32[$1531+8>>2]|0;
           HEAP32[$1531>>2] = 0;
           $1532 = ((($1531)) + 4|0);
           HEAP32[$1532>>2] = 0;
           $1533 = ((($1531)) + 8|0);
           HEAP32[$1533>>2] = 0;
           $1534 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($2,1511)|0);
           ;HEAP32[$1>>2]=HEAP32[$1534>>2]|0;HEAP32[$1+4>>2]=HEAP32[$1534+4>>2]|0;HEAP32[$1+8>>2]=HEAP32[$1534+8>>2]|0;
           HEAP32[$1534>>2] = 0;
           $1535 = ((($1534)) + 4|0);
           HEAP32[$1535>>2] = 0;
           $1536 = ((($1534)) + 8|0);
           HEAP32[$1536>>2] = 0;
           __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($0,$1);
           __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($1530,$0);
           __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($0);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($1);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($2);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
           $$03$i211 = $1524;
          }
         }
        } else {
         $$03$i211 = $first;
        }
       } else {
        $$03$i211 = $first;
       }
      } else {
       $$03$i211 = $first;
      }
      $$0 = $$03$i211;
      break L1;
      break;
     }
     case 122:  {
      $1537 = ($83|0)>(2);
      if ($1537) {
       $1538 = HEAP8[$first>>0]|0;
       $1539 = ($1538<<24>>24)==(115);
       if ($1539) {
        $1540 = ((($first)) + 1|0);
        $1541 = HEAP8[$1540>>0]|0;
        $1542 = ($1541<<24>>24)==(122);
        if ($1542) {
         $1543 = ((($first)) + 2|0);
         $1544 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($1543,$last,$db)|0);
         $1545 = ($1544|0)==($1543|0);
         if ($1545) {
          $$03$i200 = $first;
         } else {
          $1546 = HEAP32[$db>>2]|0;
          $1547 = ((($db)) + 4|0);
          $1548 = HEAP32[$1547>>2]|0;
          $1549 = ($1546|0)==($1548|0);
          if ($1549) {
           $$03$i200 = $first;
          } else {
           $1550 = ((($1548)) + -24|0);
           __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3,$1550);
           $1551 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($3,0,3000)|0);
           ;HEAP32[$2>>2]=HEAP32[$1551>>2]|0;HEAP32[$2+4>>2]=HEAP32[$1551+4>>2]|0;HEAP32[$2+8>>2]=HEAP32[$1551+8>>2]|0;
           HEAP32[$1551>>2] = 0;
           $1552 = ((($1551)) + 4|0);
           HEAP32[$1552>>2] = 0;
           $1553 = ((($1551)) + 8|0);
           HEAP32[$1553>>2] = 0;
           $1554 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($2,1511)|0);
           ;HEAP32[$1>>2]=HEAP32[$1554>>2]|0;HEAP32[$1+4>>2]=HEAP32[$1554+4>>2]|0;HEAP32[$1+8>>2]=HEAP32[$1554+8>>2]|0;
           HEAP32[$1554>>2] = 0;
           $1555 = ((($1554)) + 4|0);
           HEAP32[$1555>>2] = 0;
           $1556 = ((($1554)) + 8|0);
           HEAP32[$1556>>2] = 0;
           __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($0,$1);
           __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($1550,$0);
           __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($0);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($1);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($2);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
           $$03$i200 = $1544;
          }
         }
        } else {
         $$03$i200 = $first;
        }
       } else {
        $$03$i200 = $first;
       }
      } else {
       $$03$i200 = $first;
      }
      $$0 = $$03$i200;
      break L1;
      break;
     }
     case 90:  {
      $1557 = $t$0;
      $1558 = (($81) - ($1557))|0;
      $1559 = ($1558|0)>(2);
      if (!($1559)) {
       $$0 = $first;
       break L1;
      }
      $1560 = ((($t$0)) + 2|0);
      $1561 = HEAP8[$1560>>0]|0;
      $1562 = $1561 << 24 >> 24;
      switch ($1562|0) {
      case 84:  {
       break;
      }
      case 102:  {
       $1656 = ($83|0)>(2);
       if ($1656) {
        $1657 = HEAP8[$first>>0]|0;
        $1658 = ($1657<<24>>24)==(115);
        if ($1658) {
         $1659 = ((($first)) + 1|0);
         $1660 = HEAP8[$1659>>0]|0;
         $1661 = ($1660<<24>>24)==(90);
         if ($1661) {
          $1662 = ((($first)) + 2|0);
          $1663 = HEAP8[$1662>>0]|0;
          $1664 = ($1663<<24>>24)==(102);
          if ($1664) {
           $1665 = (__ZN10__cxxabiv112_GLOBAL__N_120parse_function_paramINS0_2DbEEEPKcS4_S4_RT_($1662,$last,$db)|0);
           $1666 = ($1665|0)==($1662|0);
           if ($1666) {
            $$03$i174 = $first;
           } else {
            $1667 = HEAP32[$db>>2]|0;
            $1668 = ((($db)) + 4|0);
            $1669 = HEAP32[$1668>>2]|0;
            $1670 = ($1667|0)==($1669|0);
            if ($1670) {
             $$03$i174 = $first;
            } else {
             $1671 = ((($1669)) + -24|0);
             __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3,$1671);
             $1672 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($3,0,3009)|0);
             ;HEAP32[$2>>2]=HEAP32[$1672>>2]|0;HEAP32[$2+4>>2]=HEAP32[$1672+4>>2]|0;HEAP32[$2+8>>2]=HEAP32[$1672+8>>2]|0;
             HEAP32[$1672>>2] = 0;
             $1673 = ((($1672)) + 4|0);
             HEAP32[$1673>>2] = 0;
             $1674 = ((($1672)) + 8|0);
             HEAP32[$1674>>2] = 0;
             $1675 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($2,1511)|0);
             ;HEAP32[$1>>2]=HEAP32[$1675>>2]|0;HEAP32[$1+4>>2]=HEAP32[$1675+4>>2]|0;HEAP32[$1+8>>2]=HEAP32[$1675+8>>2]|0;
             HEAP32[$1675>>2] = 0;
             $1676 = ((($1675)) + 4|0);
             HEAP32[$1676>>2] = 0;
             $1677 = ((($1675)) + 8|0);
             HEAP32[$1677>>2] = 0;
             __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($0,$1);
             __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($1671,$0);
             __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($0);
             __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($1);
             __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($2);
             __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
             $$03$i174 = $1665;
            }
           }
          } else {
           $$03$i174 = $first;
          }
         } else {
          $$03$i174 = $first;
         }
        } else {
         $$03$i174 = $first;
        }
       } else {
        $$03$i174 = $first;
       }
       $$0 = $$03$i174;
       break L1;
       break;
      }
      default: {
       $$0 = $first;
       break L1;
      }
      }
      $1563 = ($83|0)>(2);
      if ($1563) {
       $1564 = HEAP8[$first>>0]|0;
       $1565 = ($1564<<24>>24)==(115);
       if ($1565) {
        $1566 = ((($first)) + 1|0);
        $1567 = HEAP8[$1566>>0]|0;
        $1568 = ($1567<<24>>24)==(90);
        if ($1568) {
         $1569 = ((($first)) + 2|0);
         $1570 = HEAP8[$1569>>0]|0;
         $1571 = ($1570<<24>>24)==(84);
         if ($1571) {
          $1572 = ((($db)) + 4|0);
          $1573 = HEAP32[$1572>>2]|0;
          $1574 = HEAP32[$db>>2]|0;
          $1575 = $1573;
          $1576 = $1574;
          $1577 = (($1575) - ($1576))|0;
          $1578 = (($1577|0) / 24)&-1;
          $1579 = (__ZN10__cxxabiv112_GLOBAL__N_120parse_template_paramINS0_2DbEEEPKcS4_S4_RT_($1569,$last,$db)|0);
          $1580 = HEAP32[$1572>>2]|0;
          $1581 = HEAP32[$db>>2]|0;
          $1582 = $1580;
          $1583 = $1581;
          $1584 = (($1582) - ($1583))|0;
          $1585 = (($1584|0) / 24)&-1;
          $1586 = ($1579|0)==($1569|0);
          if ($1586) {
           $$03$i = $first;
          } else {
           HEAP8[$1>>0] = 20;
           $1587 = ((($1)) + 1|0);
           dest=$1587; src=3009; stop=dest+10|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
           $1588 = ((($1)) + 11|0);
           HEAP8[$1588>>0] = 0;
           $1589 = ($1578|0)==($1585|0);
           if (!($1589)) {
            $1590 = (($1581) + (($1578*24)|0)|0);
            __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($2,$1590);
            $1591 = HEAP8[$2>>0]|0;
            $1592 = $1591 & 1;
            $1593 = ($1592<<24>>24)==(0);
            $1594 = ((($2)) + 8|0);
            $1595 = HEAP32[$1594>>2]|0;
            $1596 = ((($2)) + 1|0);
            $1597 = $1593 ? $1596 : $1595;
            $1598 = ((($2)) + 4|0);
            $1599 = HEAP32[$1598>>2]|0;
            $1600 = $1591&255;
            $1601 = $1600 >>> 1;
            $1602 = $1593 ? $1601 : $1599;
            (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($1,$1597,$1602)|0);
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($2);
            $1603 = ((($3)) + 8|0);
            $1604 = ((($3)) + 1|0);
            $1605 = ((($3)) + 4|0);
            $k$0$i621 = (($1578) + 1)|0;
            $1606 = ($k$0$i621|0)==($1585|0);
            if (!($1606)) {
             $k$0$i622 = $k$0$i621;
             while(1) {
              $1607 = HEAP32[$db>>2]|0;
              $1608 = (($1607) + (($k$0$i622*24)|0)|0);
              __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($4,$1608);
              $1609 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($4,0,1608)|0);
              ;HEAP32[$3>>2]=HEAP32[$1609>>2]|0;HEAP32[$3+4>>2]=HEAP32[$1609+4>>2]|0;HEAP32[$3+8>>2]=HEAP32[$1609+8>>2]|0;
              HEAP32[$1609>>2] = 0;
              $1610 = ((($1609)) + 4|0);
              HEAP32[$1610>>2] = 0;
              $1611 = ((($1609)) + 8|0);
              HEAP32[$1611>>2] = 0;
              $1612 = HEAP8[$3>>0]|0;
              $1613 = $1612 & 1;
              $1614 = ($1613<<24>>24)==(0);
              $1615 = HEAP32[$1603>>2]|0;
              $1616 = $1614 ? $1604 : $1615;
              $1617 = HEAP32[$1605>>2]|0;
              $1618 = $1612&255;
              $1619 = $1618 >>> 1;
              $1620 = $1614 ? $1619 : $1617;
              (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($1,$1616,$1620)|0);
              __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
              __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
              $k$0$i = (($k$0$i622) + 1)|0;
              $1621 = ($k$0$i|0)==($1585|0);
              if ($1621) {
               break;
              } else {
               $k$0$i622 = $k$0$i;
              }
             }
            }
           }
           (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($1,1511)|0);
           $1622 = ($1585|0)==($1578|0);
           if (!($1622)) {
            $k1$0$i618 = $1585;
            while(1) {
             $1623 = HEAP32[$1572>>2]|0;
             $1624 = ((($1623)) + -24|0);
             $1626 = $1623;
             while(1) {
              $1625 = ((($1626)) + -24|0);
              HEAP32[$1572>>2] = $1625;
              __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1625);
              $$pre$i$i = HEAP32[$1572>>2]|0;
              $1627 = ($$pre$i$i|0)==($1624|0);
              if ($1627) {
               break;
              } else {
               $1626 = $$pre$i$i;
              }
             }
             $1628 = (($k1$0$i618) + -1)|0;
             $1629 = ($1628|0)==($1578|0);
             if ($1629) {
              break;
             } else {
              $k1$0$i618 = $1628;
             }
            }
           }
           ;HEAP32[$6>>2]=HEAP32[$1>>2]|0;HEAP32[$6+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$1+8>>2]|0;
           HEAP32[$1>>2] = 0;
           $1630 = ((($1)) + 4|0);
           HEAP32[$1630>>2] = 0;
           $1631 = ((($1)) + 8|0);
           HEAP32[$1631>>2] = 0;
           __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($5,$6);
           $1632 = HEAP32[$1572>>2]|0;
           $1633 = ((($db)) + 8|0);
           $1634 = HEAP32[$1633>>2]|0;
           $1635 = ($1632>>>0)<($1634>>>0);
           if ($1635) {
            __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($1632,$5);
            $1636 = HEAP32[$1572>>2]|0;
            $1637 = ((($1636)) + 24|0);
            HEAP32[$1572>>2] = $1637;
           } else {
            $1638 = ((($db)) + 12|0);
            $1639 = HEAP32[$db>>2]|0;
            $1640 = $1632;
            $1641 = $1639;
            $1642 = (($1640) - ($1641))|0;
            $1643 = (($1642|0) / 24)&-1;
            $1644 = (($1643) + 1)|0;
            $1645 = ($1642|0)<(-24);
            if ($1645) {
             __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
             // unreachable;
            }
            $1646 = $1634;
            $1647 = (($1646) - ($1641))|0;
            $1648 = (($1647|0) / 24)&-1;
            $1649 = ($1648>>>0)<(1073741823);
            if ($1649) {
             $1650 = $1648 << 1;
             $1651 = ($1650>>>0)<($1644>>>0);
             $1652 = $1651 ? $1644 : $1650;
             $$0$i$i$i$i = $1652;
            } else {
             $$0$i$i$i$i = 2147483647;
            }
            __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($0,$$0$i$i$i$i,$1643,$1638);
            $1653 = ((($0)) + 8|0);
            $1654 = HEAP32[$1653>>2]|0;
            __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($1654,$5);
            $1655 = ((($1654)) + 24|0);
            HEAP32[$1653>>2] = $1655;
            __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$0);
            __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($0);
           }
           __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($5);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($1);
           $$03$i = $1579;
          }
         } else {
          $$03$i = $first;
         }
        } else {
         $$03$i = $first;
        }
       } else {
        $$03$i = $first;
       }
      } else {
       $$03$i = $first;
      }
      $$0 = $$03$i;
      break L1;
      break;
     }
     default: {
      $$0 = $first;
      break L1;
     }
     }
     break;
    }
    case 116:  {
     $1678 = ((($t$0)) + 1|0);
     $1679 = HEAP8[$1678>>0]|0;
     $1680 = $1679 << 24 >> 24;
     switch ($1680|0) {
     case 105: case 101:  {
      $1681 = ($83|0)>(2);
      L600: do {
       if ($1681) {
        $1682 = HEAP8[$first>>0]|0;
        $1683 = ($1682<<24>>24)==(116);
        if ($1683) {
         $1684 = ((($first)) + 1|0);
         $1685 = HEAP8[$1684>>0]|0;
         switch ($1685<<24>>24) {
         case 105: case 101:  {
          break;
         }
         default: {
          $$03$i189 = $first;
          break L600;
         }
         }
         $1686 = ($1685<<24>>24)==(101);
         $1687 = ((($first)) + 2|0);
         if ($1686) {
          $1688 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($1687,$last,$db)|0);
          $t$0$i = $1688;
         } else {
          $1689 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($1687,$last,$db)|0);
          $t$0$i = $1689;
         }
         $1690 = ($t$0$i|0)==($1687|0);
         if ($1690) {
          $$03$i189 = $first;
         } else {
          $1691 = HEAP32[$db>>2]|0;
          $1692 = ((($db)) + 4|0);
          $1693 = HEAP32[$1692>>2]|0;
          $1694 = ($1691|0)==($1693|0);
          if ($1694) {
           $$03$i189 = $first;
          } else {
           $1695 = ((($1693)) + -24|0);
           __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3,$1695);
           $1696 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($3,0,3020)|0);
           ;HEAP32[$2>>2]=HEAP32[$1696>>2]|0;HEAP32[$2+4>>2]=HEAP32[$1696+4>>2]|0;HEAP32[$2+8>>2]=HEAP32[$1696+8>>2]|0;
           HEAP32[$1696>>2] = 0;
           $1697 = ((($1696)) + 4|0);
           HEAP32[$1697>>2] = 0;
           $1698 = ((($1696)) + 8|0);
           HEAP32[$1698>>2] = 0;
           $1699 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($2,1511)|0);
           ;HEAP32[$1>>2]=HEAP32[$1699>>2]|0;HEAP32[$1+4>>2]=HEAP32[$1699+4>>2]|0;HEAP32[$1+8>>2]=HEAP32[$1699+8>>2]|0;
           HEAP32[$1699>>2] = 0;
           $1700 = ((($1699)) + 4|0);
           HEAP32[$1700>>2] = 0;
           $1701 = ((($1699)) + 8|0);
           HEAP32[$1701>>2] = 0;
           __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($0,$1);
           __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($1695,$0);
           __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($0);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($1);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($2);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
           $$03$i189 = $t$0$i;
          }
         }
        } else {
         $$03$i189 = $first;
        }
       } else {
        $$03$i189 = $first;
       }
      } while(0);
      $$0 = $$03$i189;
      break L1;
      break;
     }
     case 114:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj6EEERAT__Kc($80,3028);
      $1702 = ((($db)) + 4|0);
      $1703 = HEAP32[$1702>>2]|0;
      $1704 = ((($db)) + 8|0);
      $1705 = HEAP32[$1704>>2]|0;
      $1706 = ($1703>>>0)<($1705>>>0);
      if ($1706) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($1703,$80);
       $1707 = HEAP32[$1702>>2]|0;
       $1708 = ((($1707)) + 24|0);
       HEAP32[$1702>>2] = $1708;
      } else {
       $1709 = ((($db)) + 12|0);
       $1710 = HEAP32[$db>>2]|0;
       $1711 = $1703;
       $1712 = $1710;
       $1713 = (($1711) - ($1712))|0;
       $1714 = (($1713|0) / 24)&-1;
       $1715 = (($1714) + 1)|0;
       $1716 = ($1713|0)<(-24);
       if ($1716) {
        __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
        // unreachable;
       }
       $1717 = $1705;
       $1718 = (($1717) - ($1712))|0;
       $1719 = (($1718|0) / 24)&-1;
       $1720 = ($1719>>>0)<(1073741823);
       if ($1720) {
        $1721 = $1719 << 1;
        $1722 = ($1721>>>0)<($1715>>>0);
        $1723 = $1722 ? $1715 : $1721;
        $$0$i$i$i = $1723;
       } else {
        $$0$i$i$i = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($0,$$0$i$i$i,$1714,$1709);
       $1724 = ((($0)) + 8|0);
       $1725 = HEAP32[$1724>>2]|0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($1725,$80);
       $1726 = ((($1725)) + 24|0);
       HEAP32[$1724>>2] = $1726;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$0);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($0);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($80);
      $1727 = ((($first)) + 2|0);
      $$0 = $1727;
      break L1;
      break;
     }
     case 119:  {
      $1728 = ($83|0)>(2);
      if ($1728) {
       $1729 = HEAP8[$first>>0]|0;
       $1730 = ($1729<<24>>24)==(116);
       if ($1730) {
        $1731 = ((($first)) + 1|0);
        $1732 = HEAP8[$1731>>0]|0;
        $1733 = ($1732<<24>>24)==(119);
        if ($1733) {
         $1734 = ((($first)) + 2|0);
         $1735 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($1734,$last,$db)|0);
         $1736 = ($1735|0)==($1734|0);
         if ($1736) {
          $$02$i = $first;
         } else {
          $1737 = HEAP32[$db>>2]|0;
          $1738 = ((($db)) + 4|0);
          $1739 = HEAP32[$1738>>2]|0;
          $1740 = ($1737|0)==($1739|0);
          if ($1740) {
           $$02$i = $first;
          } else {
           $1741 = ((($1739)) + -24|0);
           __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($2,$1741);
           $1742 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($2,0,3034)|0);
           ;HEAP32[$1>>2]=HEAP32[$1742>>2]|0;HEAP32[$1+4>>2]=HEAP32[$1742+4>>2]|0;HEAP32[$1+8>>2]=HEAP32[$1742+8>>2]|0;
           HEAP32[$1742>>2] = 0;
           $1743 = ((($1742)) + 4|0);
           HEAP32[$1743>>2] = 0;
           $1744 = ((($1742)) + 8|0);
           HEAP32[$1744>>2] = 0;
           __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($0,$1);
           __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($1741,$0);
           __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($0);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($1);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($2);
           $$02$i = $1735;
          }
         }
        } else {
         $$02$i = $first;
        }
       } else {
        $$02$i = $first;
       }
      } else {
       $$02$i = $first;
      }
      $$0 = $$02$i;
      break L1;
      break;
     }
     default: {
      $$0 = $first;
      break L1;
     }
     }
     break;
    }
    case 57: case 56: case 55: case 54: case 53: case 52: case 51: case 50: case 49:  {
     $1745 = (__ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db)|0);
     $$0 = $1745;
     break L1;
     break;
    }
    default: {
     $$0 = $first;
     break L1;
    }
    }
   } while(0);
  } else {
   $$0 = $first;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$this>>2]=HEAP32[$0>>2]|0;HEAP32[$this+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$this+8>>2]=HEAP32[$0+8>>2]|0;
 HEAP32[$0>>2] = 0;
 $1 = ((($0)) + 4|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($0)) + 8|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($this)) + 12|0);
 $4 = ((($0)) + 12|0);
 ;HEAP32[$3>>2]=HEAP32[$4>>2]|0;HEAP32[$3+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$3+8>>2]=HEAP32[$4+8>>2]|0;
 HEAP32[$4>>2] = 0;
 $5 = ((($4)) + 4|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($4)) + 8|0);
 HEAP32[$6>>2] = 0;
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 12|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 $4 = ((($this)) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($0)) + 1|0);
 $7 = $3 ? $6 : $5;
 $8 = ((($this)) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $1&255;
 $11 = $10 >>> 1;
 $12 = $3 ? $11 : $9;
 $13 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($this,$7,$12)|0);
 ;HEAP32[$agg$result>>2]=HEAP32[$13>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$13+4>>2]|0;HEAP32[$agg$result+8>>2]=HEAP32[$13+8>>2]|0;
 HEAP32[$13>>2] = 0;
 $14 = ((($13)) + 4|0);
 HEAP32[$14>>2] = 0;
 $15 = ((($13)) + 8|0);
 HEAP32[$15>>2] = 0;
 return;
}
function __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($this,$__x,$__a) {
 $this = $this|0;
 $__x = $__x|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = 0;
 $0 = ((($this)) + 4|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($this)) + 8|0);
 $2 = HEAP32[$__a>>2]|0;
 HEAP32[$1>>2] = 0;
 $3 = ((($this)) + 12|0);
 HEAP32[$3>>2] = $2;
 $4 = $2;
 $5 = (__ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE8allocateEj($4,24)|0);
 HEAP32[$0>>2] = $5;
 HEAP32[$this>>2] = $5;
 $6 = ((($5)) + 24|0);
 $7 = ((($this)) + 8|0);
 HEAP32[$7>>2] = $6;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($5,$__x);
 $8 = ((($5)) + 12|0);
 $9 = ((($__x)) + 12|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($8,$9);
 $10 = HEAP32[$0>>2]|0;
 $11 = ((($10)) + 24|0);
 HEAP32[$0>>2] = $11;
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_120parse_template_paramINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db) {
 $first = $first|0;
 $last = $last|0;
 $db = $db|0;
 var $$0 = 0, $$0$i$i$i = 0, $$0$i$i$i15 = 0, $$0$i$i$i7 = 0, $$0$i$i$i9 = 0, $$0$i$i58 = 0, $$lcssa81 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
 var $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0;
 var $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $__p$0$i$i57 = 0, $__p$0$ph$i$i = 0, $__v$i$i13 = 0, $isdigit = 0, $isdigit5 = 0, $isdigittmp = 0, $isdigittmp4 = 0, $scevgep2$i$i = 0, $sub$061 = 0, $sub$061$lcssa = 0, $t1$060 = 0, $t1$060$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__v$i$i13 = sp + 60|0;
 $0 = sp;
 $1 = sp + 24|0;
 $2 = sp + 48|0;
 $3 = $last;
 $4 = $first;
 $5 = (($3) - ($4))|0;
 $6 = ($5|0)>(1);
 L1: do {
  if ($6) {
   $7 = HEAP8[$first>>0]|0;
   $8 = ($7<<24>>24)==(84);
   if ($8) {
    $9 = ((($first)) + 1|0);
    $10 = HEAP8[$9>>0]|0;
    $11 = ($10<<24>>24)==(95);
    if ($11) {
     $12 = ((($db)) + 32|0);
     $13 = HEAP32[$12>>2]|0;
     $14 = ((($db)) + 36|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = ($13|0)==($15|0);
     if ($16) {
      $$0 = $first;
      break;
     }
     $17 = ((($15)) + -16|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = ((($15)) + -12|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = ($18|0)==($20|0);
     if ($21) {
      HEAP8[$0>>0] = 4;
      $56 = ((($0)) + 1|0);
      HEAP8[$56>>0]=24404&255;HEAP8[$56+1>>0]=24404>>8;
      $57 = ((($0)) + 3|0);
      HEAP8[$57>>0] = 0;
      $58 = ((($0)) + 12|0);
      HEAP32[$58>>2] = 0;
      $59 = ((($58)) + 4|0);
      HEAP32[$59>>2] = 0;
      $60 = ((($58)) + 8|0);
      HEAP32[$60>>2] = 0;
      $61 = ((($db)) + 4|0);
      $62 = HEAP32[$61>>2]|0;
      $63 = ((($db)) + 8|0);
      $64 = HEAP32[$63>>2]|0;
      $65 = ($62>>>0)<($64>>>0);
      if ($65) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($62,$0);
       $66 = HEAP32[$61>>2]|0;
       $67 = ((($66)) + 24|0);
       HEAP32[$61>>2] = $67;
      } else {
       $68 = ((($db)) + 12|0);
       $69 = HEAP32[$db>>2]|0;
       $70 = $62;
       $71 = $69;
       $72 = (($70) - ($71))|0;
       $73 = (($72|0) / 24)&-1;
       $74 = (($73) + 1)|0;
       $75 = ($72|0)<(-24);
       if ($75) {
        __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
        // unreachable;
       }
       $76 = $64;
       $77 = (($76) - ($71))|0;
       $78 = (($77|0) / 24)&-1;
       $79 = ($78>>>0)<(1073741823);
       if ($79) {
        $80 = $78 << 1;
        $81 = ($80>>>0)<($74>>>0);
        $82 = $81 ? $74 : $80;
        $$0$i$i$i9 = $82;
       } else {
        $$0$i$i$i9 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i13,$$0$i$i$i9,$73,$68);
       $83 = ((($__v$i$i13)) + 8|0);
       $84 = HEAP32[$83>>2]|0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($84,$0);
       $85 = ((($84)) + 24|0);
       HEAP32[$83>>2] = $85;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i13);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i13);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($0);
      $86 = ((($first)) + 2|0);
      $87 = ((($db)) + 62|0);
      HEAP8[$87>>0] = 1;
      $$0 = $86;
      break;
     }
     $22 = HEAP32[$18>>2]|0;
     $23 = ((($18)) + 4|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ((($db)) + 4|0);
     $26 = ((($db)) + 8|0);
     $27 = ((($db)) + 12|0);
     $28 = ((($__v$i$i13)) + 8|0);
     $29 = ($22|0)==($24|0);
     L20: do {
      if (!($29)) {
       $33 = $22;
       while(1) {
        $30 = HEAP32[$25>>2]|0;
        $31 = HEAP32[$26>>2]|0;
        $32 = ($30|0)==($31|0);
        if ($32) {
         $38 = HEAP32[$db>>2]|0;
         $39 = $30;
         $40 = $38;
         $41 = (($39) - ($40))|0;
         $42 = (($41|0) / 24)&-1;
         $43 = (($42) + 1)|0;
         $44 = ($41|0)<(-24);
         if ($44) {
          break;
         }
         $45 = ($42>>>0)<(1073741823);
         if ($45) {
          $46 = $42 << 1;
          $47 = ($46>>>0)<($43>>>0);
          $48 = $47 ? $43 : $46;
          $$0$i$i$i7 = $48;
         } else {
          $$0$i$i$i7 = 2147483647;
         }
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i13,$$0$i$i$i7,$42,$27);
         $49 = HEAP32[$28>>2]|0;
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($49,$33);
         $50 = ((($49)) + 12|0);
         $51 = ((($33)) + 12|0);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($50,$51);
         $52 = ((($49)) + 24|0);
         HEAP32[$28>>2] = $52;
         __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i13);
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i13);
        } else {
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($30,$33);
         $34 = ((($30)) + 12|0);
         $35 = ((($33)) + 12|0);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($34,$35);
         $36 = HEAP32[$25>>2]|0;
         $37 = ((($36)) + 24|0);
         HEAP32[$25>>2] = $37;
        }
        $53 = ((($33)) + 24|0);
        $54 = ($53|0)==($24|0);
        if ($54) {
         break L20;
        } else {
         $33 = $53;
        }
       }
       __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
       // unreachable;
      }
     } while(0);
     $55 = ((($first)) + 2|0);
     $$0 = $55;
     break;
    }
    $88 = $10 << 24 >> 24;
    $isdigittmp = (($88) + -48)|0;
    $isdigit = ($isdigittmp>>>0)<(10);
    if ($isdigit) {
     $89 = ((($first)) + 2|0);
     $90 = ($89|0)==($last|0);
     if ($90) {
      $$0 = $first;
     } else {
      $sub$061 = $isdigittmp;$t1$060 = $89;
      while(1) {
       $91 = HEAP8[$t1$060>>0]|0;
       $92 = $91 << 24 >> 24;
       $isdigittmp4 = (($92) + -48)|0;
       $isdigit5 = ($isdigittmp4>>>0)<(10);
       if (!($isdigit5)) {
        $$lcssa81 = $91;$sub$061$lcssa = $sub$061;$t1$060$lcssa = $t1$060;
        break;
       }
       $93 = ($sub$061*10)|0;
       $94 = (($isdigittmp4) + ($93))|0;
       $95 = ((($t1$060)) + 1|0);
       $96 = ($95|0)==($last|0);
       if ($96) {
        $$0 = $first;
        break L1;
       } else {
        $sub$061 = $94;$t1$060 = $95;
       }
      }
      $97 = ($$lcssa81<<24>>24)==(95);
      if ($97) {
       $98 = ((($db)) + 32|0);
       $99 = HEAP32[$98>>2]|0;
       $100 = ((($db)) + 36|0);
       $101 = HEAP32[$100>>2]|0;
       $102 = ($99|0)==($101|0);
       if ($102) {
        $$0 = $first;
       } else {
        $103 = (($sub$061$lcssa) + 1)|0;
        $104 = ((($101)) + -12|0);
        $105 = HEAP32[$104>>2]|0;
        $106 = ((($101)) + -16|0);
        $107 = HEAP32[$106>>2]|0;
        $108 = $105;
        $109 = $107;
        $110 = (($108) - ($109))|0;
        $111 = $110 >> 4;
        $112 = ($103>>>0)<($111>>>0);
        if ($112) {
         $113 = (($107) + ($103<<4)|0);
         $114 = HEAP32[$113>>2]|0;
         $115 = (((($107) + ($103<<4)|0)) + 4|0);
         $116 = HEAP32[$115>>2]|0;
         $117 = ((($db)) + 4|0);
         $118 = ((($db)) + 8|0);
         $119 = ((($db)) + 12|0);
         $120 = ((($__v$i$i13)) + 8|0);
         $121 = ($114|0)==($116|0);
         L43: do {
          if (!($121)) {
           $125 = $114;
           while(1) {
            $122 = HEAP32[$117>>2]|0;
            $123 = HEAP32[$118>>2]|0;
            $124 = ($122|0)==($123|0);
            if ($124) {
             $130 = HEAP32[$db>>2]|0;
             $131 = $122;
             $132 = $130;
             $133 = (($131) - ($132))|0;
             $134 = (($133|0) / 24)&-1;
             $135 = (($134) + 1)|0;
             $136 = ($133|0)<(-24);
             if ($136) {
              break;
             }
             $137 = ($134>>>0)<(1073741823);
             if ($137) {
              $138 = $134 << 1;
              $139 = ($138>>>0)<($135>>>0);
              $140 = $139 ? $135 : $138;
              $$0$i$i$i15 = $140;
             } else {
              $$0$i$i$i15 = 2147483647;
             }
             __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i13,$$0$i$i$i15,$134,$119);
             $141 = HEAP32[$120>>2]|0;
             __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($141,$125);
             $142 = ((($141)) + 12|0);
             $143 = ((($125)) + 12|0);
             __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($142,$143);
             $144 = ((($141)) + 24|0);
             HEAP32[$120>>2] = $144;
             __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i13);
             __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i13);
            } else {
             __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($122,$125);
             $126 = ((($122)) + 12|0);
             $127 = ((($125)) + 12|0);
             __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($126,$127);
             $128 = HEAP32[$117>>2]|0;
             $129 = ((($128)) + 24|0);
             HEAP32[$117>>2] = $129;
            }
            $145 = ((($125)) + 24|0);
            $146 = ($145|0)==($116|0);
            if ($146) {
             break L43;
            } else {
             $125 = $145;
            }
           }
           __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
           // unreachable;
          }
         } while(0);
         $147 = ((($t1$060$lcssa)) + 1|0);
         $$0 = $147;
         break;
        }
        $148 = ((($t1$060$lcssa)) + 1|0);
        $149 = $148;
        $150 = (($149) - ($4))|0;
        $151 = ($150>>>0)>(4294967279);
        if ($151) {
         __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($2);
         // unreachable;
        }
        $152 = ($150>>>0)<(11);
        if ($152) {
         $153 = $150 << 1;
         $154 = $153&255;
         HEAP8[$2>>0] = $154;
         $155 = ((($2)) + 1|0);
         $__p$0$ph$i$i = $155;
        } else {
         $156 = (($150) + 16)|0;
         $157 = $156 & -16;
         $158 = (_malloc($157)|0);
         $159 = ((($2)) + 8|0);
         HEAP32[$159>>2] = $158;
         $160 = $157 | 1;
         HEAP32[$2>>2] = $160;
         $161 = ((($2)) + 4|0);
         HEAP32[$161>>2] = $150;
         $__p$0$ph$i$i = $158;
        }
        $162 = ($148|0)==($first|0);
        if (!($162)) {
         $$0$i$i58 = $first;$__p$0$i$i57 = $__p$0$ph$i$i;
         while(1) {
          $163 = HEAP8[$$0$i$i58>>0]|0;
          HEAP8[$__p$0$i$i57>>0] = $163;
          $164 = ((($$0$i$i58)) + 1|0);
          $165 = ((($__p$0$i$i57)) + 1|0);
          $166 = ($$0$i$i58|0)==($t1$060$lcssa|0);
          if ($166) {
           break;
          } else {
           $$0$i$i58 = $164;$__p$0$i$i57 = $165;
          }
         }
        }
        $scevgep2$i$i = (($__p$0$ph$i$i) + ($150)|0);
        HEAP8[$scevgep2$i$i>>0] = 0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($1,$2);
        $167 = ((($db)) + 4|0);
        $168 = HEAP32[$167>>2]|0;
        $169 = ((($db)) + 8|0);
        $170 = HEAP32[$169>>2]|0;
        $171 = ($168>>>0)<($170>>>0);
        if ($171) {
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($168,$1);
         $172 = HEAP32[$167>>2]|0;
         $173 = ((($172)) + 24|0);
         HEAP32[$167>>2] = $173;
        } else {
         $174 = ((($db)) + 12|0);
         $175 = HEAP32[$db>>2]|0;
         $176 = $168;
         $177 = $175;
         $178 = (($176) - ($177))|0;
         $179 = (($178|0) / 24)&-1;
         $180 = (($179) + 1)|0;
         $181 = ($178|0)<(-24);
         if ($181) {
          __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
          // unreachable;
         }
         $182 = $170;
         $183 = (($182) - ($177))|0;
         $184 = (($183|0) / 24)&-1;
         $185 = ($184>>>0)<(1073741823);
         if ($185) {
          $186 = $184 << 1;
          $187 = ($186>>>0)<($180>>>0);
          $188 = $187 ? $180 : $186;
          $$0$i$i$i = $188;
         } else {
          $$0$i$i$i = 2147483647;
         }
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i13,$$0$i$i$i,$179,$174);
         $189 = ((($__v$i$i13)) + 8|0);
         $190 = HEAP32[$189>>2]|0;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($190,$1);
         $191 = ((($190)) + 24|0);
         HEAP32[$189>>2] = $191;
         __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i13);
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i13);
        }
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($2);
        $192 = ((($db)) + 62|0);
        HEAP8[$192>>0] = 1;
        $$0 = $148;
       }
      } else {
       $$0 = $first;
      }
     }
    } else {
     $$0 = $first;
    }
   } else {
    $$0 = $first;
   }
  } else {
   $$0 = $first;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db) {
 $first = $first|0;
 $last = $last|0;
 $db = $db|0;
 var $$0$i$i$i = 0, $$0$i$i$i10 = 0, $$0$i$i$i21 = 0, $$0$i$i$i7 = 0, $$1 = 0, $$lcssa = 0, $$lcssa152 = 0, $$pre = 0, $$pre$i = 0, $$pre$i15 = 0, $$sum$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0;
 var $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0;
 var $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0;
 var $232 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__v$i$i20 = 0, $args = 0, $k$0121 = 0, $k1$0124 = 0, $k2$0123 = 0, $or$cond = 0, $t$0$lcssa = 0, $t$0126 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__v$i$i20 = sp + 60|0;
 $args = sp;
 $0 = sp + 12|0;
 $1 = sp + 24|0;
 $2 = sp + 48|0;
 $3 = $last;
 $4 = $first;
 $5 = (($3) - ($4))|0;
 $6 = ($5|0)>(1);
 L1: do {
  if ($6) {
   $7 = HEAP8[$first>>0]|0;
   $8 = ($7<<24>>24)==(73);
   if ($8) {
    $9 = ((($db)) + 61|0);
    $10 = HEAP8[$9>>0]|0;
    $11 = ($10<<24>>24)==(0);
    $$pre = ((($db)) + 36|0);
    if (!($11)) {
     $12 = HEAP32[$$pre>>2]|0;
     $13 = ((($12)) + -16|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = ((($12)) + -12|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($16|0)==($14|0);
     if (!($17)) {
      $19 = $16;
      while(1) {
       $18 = ((($19)) + -16|0);
       HEAP32[$15>>2] = $18;
       __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($18);
       $20 = HEAP32[$15>>2]|0;
       $21 = ($20|0)==($14|0);
       if ($21) {
        break;
       } else {
        $19 = $20;
       }
      }
     }
    }
    $22 = ((($first)) + 1|0);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($args,1668,1);
    $23 = ((($db)) + 4|0);
    $24 = ((($db)) + 12|0);
    $25 = ((($__v$i$i20)) + 8|0);
    $26 = ((($__v$i$i20)) + 8|0);
    $27 = ((($args)) + 4|0);
    $28 = ((($0)) + 8|0);
    $29 = ((($0)) + 1|0);
    $30 = ((($0)) + 4|0);
    $31 = ((($db)) + 32|0);
    $32 = ((($db)) + 40|0);
    $33 = ((($db)) + 44|0);
    $34 = ((($__v$i$i20)) + 8|0);
    $35 = HEAP8[$22>>0]|0;
    $36 = ($35<<24>>24)==(69);
    L9: do {
     if ($36) {
      $t$0$lcssa = $22;
     } else {
      $t$0126 = $22;
      L10: while(1) {
       $40 = HEAP8[$9>>0]|0;
       $41 = ($40<<24>>24)==(0);
       do {
        if (!($41)) {
         $42 = HEAP32[$24>>2]|0;
         $43 = $42;
         $44 = HEAP32[$$pre>>2]|0;
         $45 = HEAP32[$32>>2]|0;
         $46 = ($44>>>0)<($45>>>0);
         if ($46) {
          HEAP32[$44>>2] = 0;
          $47 = ((($44)) + 4|0);
          HEAP32[$47>>2] = 0;
          $48 = ((($44)) + 8|0);
          HEAP32[$48>>2] = 0;
          $49 = ((($44)) + 12|0);
          HEAP32[$49>>2] = $43;
          $50 = HEAP32[$$pre>>2]|0;
          $51 = ((($50)) + 16|0);
          HEAP32[$$pre>>2] = $51;
          break;
         }
         $52 = HEAP32[$31>>2]|0;
         $53 = $44;
         $54 = $52;
         $55 = (($53) - ($54))|0;
         $56 = $55 >> 4;
         $57 = (($56) + 1)|0;
         $58 = ($55|0)<(-16);
         if ($58) {
          label = 12;
          break L10;
         }
         $59 = $45;
         $60 = (($59) - ($54))|0;
         $61 = $60 >> 4;
         $62 = ($61>>>0)<(1073741823);
         if ($62) {
          $63 = $60 >> 3;
          $64 = ($63>>>0)<($57>>>0);
          $65 = $64 ? $57 : $63;
          $$0$i$i$i = $65;
         } else {
          $$0$i$i$i = 2147483647;
         }
         __ZNSt3__114__split_bufferINS_6vectorINS1_IN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEEERNS5_IS9_Lj4096EEEEC2EjjSB_($__v$i$i20,$$0$i$i$i,$56,$33);
         $66 = HEAP32[$34>>2]|0;
         HEAP32[$66>>2] = 0;
         $67 = ((($66)) + 4|0);
         HEAP32[$67>>2] = 0;
         $68 = ((($66)) + 8|0);
         HEAP32[$68>>2] = 0;
         $69 = ((($66)) + 12|0);
         HEAP32[$69>>2] = $43;
         $70 = ((($66)) + 16|0);
         HEAP32[$34>>2] = $70;
         __ZNSt3__16vectorINS0_INS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEEENS4_IS8_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS8_RS9_EE($31,$__v$i$i20);
         __ZNSt3__114__split_bufferINS_6vectorINS1_IN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEEERNS5_IS9_Lj4096EEEED2Ev($__v$i$i20);
        }
       } while(0);
       $71 = HEAP32[$23>>2]|0;
       $72 = HEAP32[$db>>2]|0;
       $73 = $71;
       $74 = $72;
       $75 = (($73) - ($74))|0;
       $76 = (($75|0) / 24)&-1;
       $38 = (__ZN10__cxxabiv112_GLOBAL__N_118parse_template_argINS0_2DbEEEPKcS4_S4_RT_($t$0126,$last,$db)|0);
       $77 = HEAP32[$23>>2]|0;
       $78 = HEAP32[$db>>2]|0;
       $79 = $77;
       $80 = $78;
       $81 = (($79) - ($80))|0;
       $82 = (($81|0) / 24)&-1;
       $83 = HEAP8[$9>>0]|0;
       $84 = ($83<<24>>24)==(0);
       if (!($84)) {
        $85 = HEAP32[$$pre>>2]|0;
        $86 = ((($85)) + -16|0);
        $88 = $85;
        while(1) {
         $87 = ((($88)) + -16|0);
         HEAP32[$$pre>>2] = $87;
         __ZNSt3__113__vector_baseINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEED2Ev($87);
         $$pre$i = HEAP32[$$pre>>2]|0;
         $89 = ($$pre$i|0)==($86|0);
         if ($89) {
          break;
         } else {
          $88 = $$pre$i;
         }
        }
       }
       $90 = ($38|0)==($t$0126|0);
       $91 = ($38|0)==($last|0);
       $or$cond = $90 | $91;
       if ($or$cond) {
        label = 56;
        break;
       }
       $92 = HEAP8[$9>>0]|0;
       $93 = ($92<<24>>24)==(0);
       if (!($93)) {
        $95 = HEAP32[$$pre>>2]|0;
        $96 = ((($95)) + -16|0);
        $97 = HEAP32[$24>>2]|0;
        $98 = $97;
        $99 = ((($95)) + -12|0);
        $100 = HEAP32[$99>>2]|0;
        $101 = ((($95)) + -8|0);
        $102 = HEAP32[$101>>2]|0;
        $103 = ($100>>>0)<($102>>>0);
        if ($103) {
         HEAP32[$100>>2] = 0;
         $104 = ((($100)) + 4|0);
         HEAP32[$104>>2] = 0;
         $105 = ((($100)) + 8|0);
         HEAP32[$105>>2] = 0;
         $106 = ((($100)) + 12|0);
         HEAP32[$106>>2] = $98;
         $107 = HEAP32[$99>>2]|0;
         $108 = ((($107)) + 16|0);
         HEAP32[$99>>2] = $108;
        } else {
         $109 = ((($95)) + -4|0);
         $110 = HEAP32[$96>>2]|0;
         $111 = $100;
         $112 = $110;
         $113 = (($111) - ($112))|0;
         $114 = $113 >> 4;
         $115 = (($114) + 1)|0;
         $116 = ($113|0)<(-16);
         if ($116) {
          $$lcssa = $96;
          label = 25;
          break;
         }
         $117 = $102;
         $118 = (($117) - ($112))|0;
         $119 = $118 >> 4;
         $120 = ($119>>>0)<(1073741823);
         if ($120) {
          $121 = $118 >> 3;
          $122 = ($121>>>0)<($115>>>0);
          $123 = $122 ? $115 : $121;
          $$0$i$i$i7 = $123;
         } else {
          $$0$i$i$i7 = 2147483647;
         }
         __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i20,$$0$i$i$i7,$114,$109);
         $124 = HEAP32[$25>>2]|0;
         HEAP32[$124>>2] = 0;
         $125 = ((($124)) + 4|0);
         HEAP32[$125>>2] = 0;
         $126 = ((($124)) + 8|0);
         HEAP32[$126>>2] = 0;
         $127 = ((($124)) + 12|0);
         HEAP32[$127>>2] = $98;
         $128 = ((($124)) + 16|0);
         HEAP32[$25>>2] = $128;
         __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($96,$__v$i$i20);
         __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i20);
        }
        $129 = ($76>>>0)<($82>>>0);
        if ($129) {
         $k$0121 = $76;
         while(1) {
          $130 = HEAP32[$$pre>>2]|0;
          $131 = ((($130)) + -12|0);
          $132 = HEAP32[$131>>2]|0;
          $133 = ((($132)) + -16|0);
          $134 = HEAP32[$db>>2]|0;
          $135 = (($134) + (($k$0121*24)|0)|0);
          $136 = ((($132)) + -12|0);
          $137 = HEAP32[$136>>2]|0;
          $138 = ((($132)) + -8|0);
          $139 = HEAP32[$138>>2]|0;
          $140 = ($137|0)==($139|0);
          if ($140) {
           $145 = ((($132)) + -4|0);
           $146 = HEAP32[$133>>2]|0;
           $147 = $137;
           $148 = $146;
           $149 = (($147) - ($148))|0;
           $150 = (($149|0) / 24)&-1;
           $151 = (($150) + 1)|0;
           $152 = ($149|0)<(-24);
           if ($152) {
            $$lcssa152 = $133;
            label = 33;
            break L10;
           }
           $153 = ($150>>>0)<(1073741823);
           if ($153) {
            $154 = $150 << 1;
            $155 = ($154>>>0)<($151>>>0);
            $156 = $155 ? $151 : $154;
            $$0$i$i$i10 = $156;
           } else {
            $$0$i$i$i10 = 2147483647;
           }
           __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i20,$$0$i$i$i10,$150,$145);
           $157 = HEAP32[$26>>2]|0;
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($157,$135);
           $158 = ((($157)) + 12|0);
           $159 = (((($134) + (($k$0121*24)|0)|0)) + 12|0);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($158,$159);
           $160 = ((($157)) + 24|0);
           HEAP32[$26>>2] = $160;
           __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($133,$__v$i$i20);
           __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i20);
          } else {
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($137,$135);
           $141 = ((($137)) + 12|0);
           $142 = (((($134) + (($k$0121*24)|0)|0)) + 12|0);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($141,$142);
           $143 = HEAP32[$136>>2]|0;
           $144 = ((($143)) + 24|0);
           HEAP32[$136>>2] = $144;
          }
          $161 = (($k$0121) + 1)|0;
          $162 = ($161>>>0)<($82>>>0);
          if ($162) {
           $k$0121 = $161;
          } else {
           break;
          }
         }
        }
       }
       $94 = ($76>>>0)<($82>>>0);
       if ($94) {
        $k2$0123 = $76;
        while(1) {
         $164 = HEAP8[$args>>0]|0;
         $165 = $164 & 1;
         $166 = ($165<<24>>24)==(0);
         $167 = HEAP32[$27>>2]|0;
         $168 = $164&255;
         $169 = $168 >>> 1;
         $170 = $166 ? $169 : $167;
         $171 = ($170>>>0)>(1);
         if ($171) {
          (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($args,1608)|0);
         }
         $172 = HEAP32[$db>>2]|0;
         $173 = (($172) + (($k2$0123*24)|0)|0);
         __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($0,$173);
         $174 = HEAP8[$0>>0]|0;
         $175 = $174 & 1;
         $176 = ($175<<24>>24)==(0);
         $177 = HEAP32[$28>>2]|0;
         $178 = $176 ? $29 : $177;
         $179 = HEAP32[$30>>2]|0;
         $180 = $174&255;
         $181 = $180 >>> 1;
         $182 = $176 ? $181 : $179;
         (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($args,$178,$182)|0);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($0);
         $183 = (($k2$0123) + 1)|0;
         $184 = ($183>>>0)<($82>>>0);
         if ($184) {
          $k2$0123 = $183;
         } else {
          break;
         }
        }
       }
       $163 = ($82|0)==($76|0);
       if (!($163)) {
        $k1$0124 = $82;
        while(1) {
         $185 = HEAP32[$23>>2]|0;
         $186 = ((($185)) + -24|0);
         $188 = $185;
         while(1) {
          $187 = ((($188)) + -24|0);
          HEAP32[$23>>2] = $187;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($187);
          $$pre$i15 = HEAP32[$23>>2]|0;
          $189 = ($$pre$i15|0)==($186|0);
          if ($189) {
           break;
          } else {
           $188 = $$pre$i15;
          }
         }
         $190 = (($k1$0124) + -1)|0;
         $191 = ($190|0)==($76|0);
         if ($191) {
          break;
         } else {
          $k1$0124 = $190;
         }
        }
       }
       $37 = HEAP8[$38>>0]|0;
       $39 = ($37<<24>>24)==(69);
       if ($39) {
        $t$0$lcssa = $38;
        break L9;
       } else {
        $t$0126 = $38;
       }
      }
      if ((label|0) == 12) {
       __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($31);
       // unreachable;
      }
      else if ((label|0) == 25) {
       __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($$lcssa);
       // unreachable;
      }
      else if ((label|0) == 33) {
       __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($$lcssa152);
       // unreachable;
      }
      else if ((label|0) == 56) {
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($args);
       $$1 = $first;
       break L1;
      }
     }
    } while(0);
    $192 = ((($t$0$lcssa)) + 1|0);
    $193 = HEAP8[$args>>0]|0;
    $194 = $193 & 1;
    $195 = ($194<<24>>24)==(0);
    $196 = ((($args)) + 8|0);
    $197 = HEAP32[$196>>2]|0;
    $198 = HEAP32[$27>>2]|0;
    $199 = ((($args)) + 1|0);
    $200 = $193&255;
    $201 = $200 >>> 1;
    $202 = $195 ? $199 : $197;
    $203 = $195 ? $201 : $198;
    $$sum$i = (($203) + -1)|0;
    $204 = (($202) + ($$sum$i)|0);
    $205 = HEAP8[$204>>0]|0;
    $206 = ($205<<24>>24)==(62);
    if ($206) {
     (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($args,2653)|0);
    } else {
     (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($args,1670)|0);
    }
    ;HEAP32[$2>>2]=HEAP32[$args>>2]|0;HEAP32[$2+4>>2]=HEAP32[$args+4>>2]|0;HEAP32[$2+8>>2]=HEAP32[$args+8>>2]|0;
    HEAP32[$args>>2] = 0;
    $207 = ((($args)) + 4|0);
    HEAP32[$207>>2] = 0;
    $208 = ((($args)) + 8|0);
    HEAP32[$208>>2] = 0;
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($1,$2);
    $209 = HEAP32[$23>>2]|0;
    $210 = ((($db)) + 8|0);
    $211 = HEAP32[$210>>2]|0;
    $212 = ($209>>>0)<($211>>>0);
    if ($212) {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($209,$1);
     $213 = HEAP32[$23>>2]|0;
     $214 = ((($213)) + 24|0);
     HEAP32[$23>>2] = $214;
    } else {
     $215 = ((($db)) + 12|0);
     $216 = HEAP32[$db>>2]|0;
     $217 = $209;
     $218 = $216;
     $219 = (($217) - ($218))|0;
     $220 = (($219|0) / 24)&-1;
     $221 = (($220) + 1)|0;
     $222 = ($219|0)<(-24);
     if ($222) {
      __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
      // unreachable;
     }
     $223 = $211;
     $224 = (($223) - ($218))|0;
     $225 = (($224|0) / 24)&-1;
     $226 = ($225>>>0)<(1073741823);
     if ($226) {
      $227 = $225 << 1;
      $228 = ($227>>>0)<($221>>>0);
      $229 = $228 ? $221 : $227;
      $$0$i$i$i21 = $229;
     } else {
      $$0$i$i$i21 = 2147483647;
     }
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i20,$$0$i$i$i21,$220,$215);
     $230 = ((($__v$i$i20)) + 8|0);
     $231 = HEAP32[$230>>2]|0;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($231,$1);
     $232 = ((($231)) + 24|0);
     HEAP32[$230>>2] = $232;
     __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i20);
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i20);
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($2);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($args);
    $$1 = $192;
   } else {
    $$1 = $first;
   }
  } else {
   $$1 = $first;
  }
 } while(0);
 STACKTOP = sp;return ($$1|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_117parse_source_nameINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db) {
 $first = $first|0;
 $last = $last|0;
 $db = $db|0;
 var $$$$i$i$i = 0, $$$i$i$i = 0, $$0$i$i$i = 0, $$0$i$i$i8 = 0, $$02 = 0, $$lcssa = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__v$i$i7 = 0;
 var $c$0 = 0, $c$0$in$lcssa = 0, $c$0$in29 = 0, $c$026 = 0, $isdigit = 0, $isdigit5 = 0, $isdigit528 = 0, $isdigittmp = 0, $isdigittmp4 = 0, $isdigittmp427 = 0, $isdigittmp431 = 0, $n$0$lcssa = 0, $n$030 = 0, $r = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__v$i$i7 = sp + 84|0;
 $r = sp;
 $0 = sp + 12|0;
 $1 = sp + 24|0;
 $2 = sp + 48|0;
 $3 = sp + 72|0;
 $4 = ($first|0)==($last|0);
 L1: do {
  if ($4) {
   $$02 = $first;
  } else {
   $5 = HEAP8[$first>>0]|0;
   $6 = $5 << 24 >> 24;
   $isdigittmp = (($6) + -48)|0;
   $isdigit = ($isdigittmp>>>0)<(10);
   if ($isdigit) {
    $7 = ((($first)) + 1|0);
    $8 = ($7|0)==($last|0);
    if ($8) {
     $$02 = $first;
    } else {
     $c$026 = HEAP8[$7>>0]|0;
     $9 = $c$026 << 24 >> 24;
     $isdigittmp427 = (($9) + -48)|0;
     $isdigit528 = ($isdigittmp427>>>0)<(10);
     if ($isdigit528) {
      $c$0$in29 = $7;$isdigittmp431 = $isdigittmp427;$n$030 = $isdigittmp;
      while(1) {
       $10 = ((($c$0$in29)) + 1|0);
       $11 = ($10|0)==($last|0);
       if ($11) {
        $$02 = $first;
        break L1;
       }
       $12 = ($n$030*10)|0;
       $13 = (($isdigittmp431) + ($12))|0;
       $c$0 = HEAP8[$10>>0]|0;
       $14 = $c$0 << 24 >> 24;
       $isdigittmp4 = (($14) + -48)|0;
       $isdigit5 = ($isdigittmp4>>>0)<(10);
       if ($isdigit5) {
        $c$0$in29 = $10;$isdigittmp431 = $isdigittmp4;$n$030 = $13;
       } else {
        $$lcssa = $c$0$in29;$c$0$in$lcssa = $10;$n$0$lcssa = $13;
        break;
       }
      }
     } else {
      $$lcssa = $first;$c$0$in$lcssa = $7;$n$0$lcssa = $isdigittmp;
     }
     $15 = $last;
     $16 = $c$0$in$lcssa;
     $17 = (($15) - ($16))|0;
     $18 = ($17>>>0)<($n$0$lcssa>>>0);
     if ($18) {
      $$02 = $first;
     } else {
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($r,$c$0$in$lcssa,$n$0$lcssa);
      $19 = HEAP8[$r>>0]|0;
      $20 = $19 & 1;
      $21 = ($20<<24>>24)==(0);
      $22 = ((($r)) + 4|0);
      $23 = HEAP32[$22>>2]|0;
      $24 = $19&255;
      $25 = $24 >>> 1;
      $26 = $21 ? $25 : $23;
      $27 = ((($r)) + 8|0);
      $28 = HEAP32[$27>>2]|0;
      $29 = ((($r)) + 1|0);
      $30 = $21 ? $29 : $28;
      $31 = ($26>>>0)<(10);
      $32 = $31 ? $26 : 10;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($0,$30,$32);
      $33 = HEAP8[$0>>0]|0;
      $34 = $33 & 1;
      $35 = ($34<<24>>24)==(0);
      $36 = ((($0)) + 4|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = $33&255;
      $39 = $38 >>> 1;
      $40 = $35 ? $39 : $37;
      $41 = ((($0)) + 8|0);
      $42 = HEAP32[$41>>2]|0;
      $43 = ((($0)) + 1|0);
      $44 = $35 ? $43 : $42;
      $45 = ($40>>>0)>(10);
      $46 = $45 ? 10 : $40;
      $47 = (_memcmp($44,2620,$46)|0);
      $48 = ($47|0)==(0);
      $49 = ($40>>>0)<(10);
      $$$i$i$i = $45&1;
      $$$$i$i$i = $49 ? -1 : $$$i$i$i;
      $50 = $48 ? $$$$i$i$i : $47;
      $51 = ($50|0)==(0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($0);
      if ($51) {
       $52 = (_malloc(32)|0);
       $53 = ((($1)) + 8|0);
       HEAP32[$53>>2] = $52;
       HEAP32[$1>>2] = 33;
       $54 = ((($1)) + 4|0);
       HEAP32[$54>>2] = 21;
       dest=$52; src=2631; stop=dest+21|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
       $55 = ((($52)) + 21|0);
       HEAP8[$55>>0] = 0;
       $56 = ((($1)) + 12|0);
       HEAP32[$56>>2] = 0;
       $57 = ((($56)) + 4|0);
       HEAP32[$57>>2] = 0;
       $58 = ((($56)) + 8|0);
       HEAP32[$58>>2] = 0;
       $59 = ((($db)) + 4|0);
       $60 = HEAP32[$59>>2]|0;
       $61 = ((($db)) + 8|0);
       $62 = HEAP32[$61>>2]|0;
       $63 = ($60>>>0)<($62>>>0);
       if ($63) {
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($60,$1);
        $64 = HEAP32[$59>>2]|0;
        $65 = ((($64)) + 24|0);
        HEAP32[$59>>2] = $65;
       } else {
        $66 = ((($db)) + 12|0);
        $67 = HEAP32[$db>>2]|0;
        $68 = $60;
        $69 = $67;
        $70 = (($68) - ($69))|0;
        $71 = (($70|0) / 24)&-1;
        $72 = (($71) + 1)|0;
        $73 = ($70|0)<(-24);
        if ($73) {
         __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
         // unreachable;
        }
        $74 = $62;
        $75 = (($74) - ($69))|0;
        $76 = (($75|0) / 24)&-1;
        $77 = ($76>>>0)<(1073741823);
        if ($77) {
         $78 = $76 << 1;
         $79 = ($78>>>0)<($72>>>0);
         $80 = $79 ? $72 : $78;
         $$0$i$i$i = $80;
        } else {
         $$0$i$i$i = 2147483647;
        }
        __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i7,$$0$i$i$i,$71,$66);
        $81 = ((($__v$i$i7)) + 8|0);
        $82 = HEAP32[$81>>2]|0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($82,$1);
        $83 = ((($82)) + 24|0);
        HEAP32[$81>>2] = $83;
        __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i7);
        __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i7);
       }
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1);
      } else {
       ;HEAP32[$3>>2]=HEAP32[$r>>2]|0;HEAP32[$3+4>>2]=HEAP32[$r+4>>2]|0;HEAP32[$3+8>>2]=HEAP32[$r+8>>2]|0;
       HEAP32[$r>>2] = 0;
       $84 = ((($r)) + 4|0);
       HEAP32[$84>>2] = 0;
       $85 = ((($r)) + 8|0);
       HEAP32[$85>>2] = 0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($2,$3);
       $86 = ((($db)) + 4|0);
       $87 = HEAP32[$86>>2]|0;
       $88 = ((($db)) + 8|0);
       $89 = HEAP32[$88>>2]|0;
       $90 = ($87>>>0)<($89>>>0);
       if ($90) {
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($87,$2);
        $91 = HEAP32[$86>>2]|0;
        $92 = ((($91)) + 24|0);
        HEAP32[$86>>2] = $92;
       } else {
        $93 = ((($db)) + 12|0);
        $94 = HEAP32[$db>>2]|0;
        $95 = $87;
        $96 = $94;
        $97 = (($95) - ($96))|0;
        $98 = (($97|0) / 24)&-1;
        $99 = (($98) + 1)|0;
        $100 = ($97|0)<(-24);
        if ($100) {
         __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
         // unreachable;
        }
        $101 = $89;
        $102 = (($101) - ($96))|0;
        $103 = (($102|0) / 24)&-1;
        $104 = ($103>>>0)<(1073741823);
        if ($104) {
         $105 = $103 << 1;
         $106 = ($105>>>0)<($99>>>0);
         $107 = $106 ? $99 : $105;
         $$0$i$i$i8 = $107;
        } else {
         $$0$i$i$i8 = 2147483647;
        }
        __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i7,$$0$i$i$i8,$98,$93);
        $108 = ((($__v$i$i7)) + 8|0);
        $109 = HEAP32[$108>>2]|0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($109,$2);
        $110 = ((($109)) + 24|0);
        HEAP32[$108>>2] = $110;
        __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i7);
        __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i7);
       }
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($2);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      }
      $$sum = (($n$0$lcssa) + 1)|0;
      $111 = (($$lcssa) + ($$sum)|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($r);
      $$02 = $111;
     }
    }
   } else {
    $$02 = $first;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$02|0);
}
function __ZNSt3__1plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EERKSB_PKS8_($agg$result,$__lhs,$__rhs) {
 $agg$result = $agg$result|0;
 $__lhs = $__lhs|0;
 $__rhs = $__rhs|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$agg$result>>2] = 0;
 $0 = ((($agg$result)) + 4|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($agg$result)) + 8|0);
 HEAP32[$1>>2] = 0;
 $2 = HEAP8[$__lhs>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 $5 = ((($__lhs)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $2&255;
 $8 = $7 >>> 1;
 $9 = $4 ? $8 : $6;
 $10 = (_strlen(($__rhs|0))|0);
 $11 = ((($__lhs)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($__lhs)) + 1|0);
 $14 = $4 ? $13 : $12;
 $15 = (($9) + ($10))|0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcjj($agg$result,$14,$9,$15);
 (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($agg$result,$__rhs,$10)|0);
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$this>>2]=HEAP32[$f>>2]|0;HEAP32[$this+4>>2]=HEAP32[$f+4>>2]|0;HEAP32[$this+8>>2]=HEAP32[$f+8>>2]|0;
 HEAP32[$f>>2] = 0;
 $0 = ((($f)) + 4|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($f)) + 8|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($this)) + 12|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($2)) + 4|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($2)) + 8|0);
 HEAP32[$4>>2] = 0;
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $$pre$i$i$i = 0, $$pre$i$i$i2 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $or$cond$i$i$i$i$i = 0, $or$cond$i$i$i$i$i9 = 0;
 var $phitmp$i$i$i$i$i$i = 0, $phitmp$i$i$i$i$i$i4 = 0, $phitmp$i2$i$i$i$i$i = 0, $phitmp$i2$i$i$i$i$i7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[$this>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 do {
  if ($3) {
   $4 = ((($this)) + 1|0);
   HEAP8[$4>>0] = 0;
   HEAP8[$this>>0] = 0;
  } else {
   $5 = ((($this)) + 8|0);
   $6 = HEAP32[$5>>2]|0;
   HEAP8[$6>>0] = 0;
   $7 = ((($this)) + 4|0);
   HEAP32[$7>>2] = 0;
   $$pre$i$i$i = HEAP8[$this>>0]|0;
   $8 = $$pre$i$i$i & 1;
   $9 = ($8<<24>>24)==(0);
   if ($9) {
    $14 = $$pre$i$i$i;$23 = 10;
   } else {
    $10 = HEAP32[$this>>2]|0;
    $11 = $10 & -2;
    $phitmp$i$i$i$i$i$i = (($11) + -1)|0;
    $12 = $10&255;
    $14 = $12;$23 = $phitmp$i$i$i$i$i$i;
   }
   $13 = $14 & 1;
   $15 = ($13<<24>>24)==(0);
   if ($15) {
    $16 = $14&255;
    $17 = $16 >>> 1;
    $18 = ($14&255)<(22);
    if ($18) {
     $21 = 10;$42 = $17;$95 = 1;
    } else {
     $19 = (($17) + 16)|0;
     $20 = $19 & 240;
     $phitmp$i2$i$i$i$i$i = (($20) + -1)|0;
     $21 = $phitmp$i2$i$i$i$i$i;$42 = $17;$95 = 1;
    }
   } else {
    $21 = 10;$42 = 0;$95 = 0;
   }
   $22 = ($21|0)==($23|0);
   if (!($22)) {
    $24 = ($21|0)==(10);
    if ($24) {
     $29 = ((($this)) + 1|0);
     $30 = HEAP32[$5>>2]|0;
     if ($95) {
      $31 = $14&255;
      $32 = $31 >>> 1;
      $33 = (($32) + 1)|0;
      _memcpy(($29|0),($30|0),($33|0))|0;
      _free($30);
     } else {
      $38 = HEAP8[$30>>0]|0;
      HEAP8[$29>>0] = $38;
      _free($30);
     }
     $43 = $42 << 1;
     $44 = $43&255;
     HEAP8[$this>>0] = $44;
     break;
    }
    $25 = ($21>>>0)<=($23>>>0);
    $26 = (($21) + 1)|0;
    $27 = (_malloc($26)|0);
    $28 = ($27|0)==(0|0);
    $or$cond$i$i$i$i$i = $25 & $28;
    if (!($or$cond$i$i$i$i$i)) {
     if ($95) {
      $34 = ((($this)) + 1|0);
      $35 = $14&255;
      $36 = $35 >>> 1;
      $37 = (($36) + 1)|0;
      _memcpy(($27|0),($34|0),($37|0))|0;
     } else {
      $39 = HEAP32[$5>>2]|0;
      $40 = HEAP8[$39>>0]|0;
      HEAP8[$27>>0] = $40;
      _free($39);
     }
     $41 = $26 | 1;
     HEAP32[$this>>2] = $41;
     HEAP32[$7>>2] = $42;
     HEAP32[$5>>2] = $27;
    }
   }
  }
 } while(0);
 ;HEAP32[$this>>2]=HEAP32[$0>>2]|0;HEAP32[$this+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$this+8>>2]=HEAP32[$0+8>>2]|0;
 HEAP32[$0>>2] = 0;
 $45 = ((($0)) + 4|0);
 HEAP32[$45>>2] = 0;
 $46 = ((($0)) + 8|0);
 HEAP32[$46>>2] = 0;
 $47 = ((($this)) + 12|0);
 $48 = ((($0)) + 12|0);
 $49 = HEAP8[$47>>0]|0;
 $50 = $49 & 1;
 $51 = ($50<<24>>24)==(0);
 do {
  if ($51) {
   $52 = ((($47)) + 1|0);
   HEAP8[$52>>0] = 0;
   HEAP8[$47>>0] = 0;
  } else {
   $53 = ((($this)) + 20|0);
   $54 = HEAP32[$53>>2]|0;
   HEAP8[$54>>0] = 0;
   $55 = ((($this)) + 16|0);
   HEAP32[$55>>2] = 0;
   $$pre$i$i$i2 = HEAP8[$47>>0]|0;
   $56 = $$pre$i$i$i2 & 1;
   $57 = ($56<<24>>24)==(0);
   if ($57) {
    $62 = $$pre$i$i$i2;$71 = 10;
   } else {
    $58 = HEAP32[$47>>2]|0;
    $59 = $58 & -2;
    $phitmp$i$i$i$i$i$i4 = (($59) + -1)|0;
    $60 = $58&255;
    $62 = $60;$71 = $phitmp$i$i$i$i$i$i4;
   }
   $61 = $62 & 1;
   $63 = ($61<<24>>24)==(0);
   if ($63) {
    $64 = $62&255;
    $65 = $64 >>> 1;
    $66 = ($62&255)<(22);
    if ($66) {
     $69 = 10;$90 = $65;$96 = 1;
    } else {
     $67 = (($65) + 16)|0;
     $68 = $67 & 240;
     $phitmp$i2$i$i$i$i$i7 = (($68) + -1)|0;
     $69 = $phitmp$i2$i$i$i$i$i7;$90 = $65;$96 = 1;
    }
   } else {
    $69 = 10;$90 = 0;$96 = 0;
   }
   $70 = ($69|0)==($71|0);
   if (!($70)) {
    $72 = ($69|0)==(10);
    if ($72) {
     $77 = ((($47)) + 1|0);
     $78 = HEAP32[$53>>2]|0;
     if ($96) {
      $79 = $62&255;
      $80 = $79 >>> 1;
      $81 = (($80) + 1)|0;
      _memcpy(($77|0),($78|0),($81|0))|0;
      _free($78);
     } else {
      $86 = HEAP8[$78>>0]|0;
      HEAP8[$77>>0] = $86;
      _free($78);
     }
     $91 = $90 << 1;
     $92 = $91&255;
     HEAP8[$47>>0] = $92;
     break;
    }
    $73 = ($69>>>0)<=($71>>>0);
    $74 = (($69) + 1)|0;
    $75 = (_malloc($74)|0);
    $76 = ($75|0)==(0|0);
    $or$cond$i$i$i$i$i9 = $73 & $76;
    if (!($or$cond$i$i$i$i$i9)) {
     if ($96) {
      $82 = ((($47)) + 1|0);
      $83 = $62&255;
      $84 = $83 >>> 1;
      $85 = (($84) + 1)|0;
      _memcpy(($75|0),($82|0),($85|0))|0;
     } else {
      $87 = HEAP32[$53>>2]|0;
      $88 = HEAP8[$87>>0]|0;
      HEAP8[$75>>0] = $88;
      _free($87);
     }
     $89 = $74 | 1;
     HEAP32[$47>>2] = $89;
     HEAP32[$55>>2] = $90;
     HEAP32[$53>>2] = $75;
    }
   }
  }
 } while(0);
 ;HEAP32[$47>>2]=HEAP32[$48>>2]|0;HEAP32[$47+4>>2]=HEAP32[$48+4>>2]|0;HEAP32[$47+8>>2]=HEAP32[$48+8>>2]|0;
 HEAP32[$48>>2] = 0;
 $93 = ((($48)) + 4|0);
 HEAP32[$93>>2] = 0;
 $94 = ((($48)) + 8|0);
 HEAP32[$94>>2] = 0;
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_110parse_nameINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db) {
 $first = $first|0;
 $last = $last|0;
 $db = $db|0;
 var $$$i = 0, $$0$i = 0, $$0$i$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i16$i = 0, $$0$i$i$i23$i = 0, $$0$i$i$i33$i = 0, $$0$i$i$i42$i = 0, $$0$i$i$i52$i = 0, $$0$i10 = 0, $$02 = 0, $$07$i = 0, $$first = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i$i14 = 0, $$pre$i13$i = 0, $$pre$i17$i = 0, $$pre$i27$i = 0, $$pre$i37$i = 0;
 var $$pre$i4$i = 0, $$pre$i46$i = 0, $$pre$i56$i = 0, $$pre$i6 = 0, $$pre$i6$i = 0, $$pre$i9$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0;
 var $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0;
 var $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0;
 var $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0;
 var $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0;
 var $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0;
 var $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0;
 var $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0;
 var $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0;
 var $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0;
 var $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0;
 var $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0;
 var $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0;
 var $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0;
 var $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0;
 var $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0;
 var $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0;
 var $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0;
 var $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0;
 var $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0;
 var $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0;
 var $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0;
 var $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0;
 var $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0;
 var $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0;
 var $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0;
 var $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0;
 var $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0;
 var $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0;
 var $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0;
 var $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $St$0$off0$i = 0, $__v$i$i51$i = 0, $brmerge$i = 0, $cv$i = 0, $first$ = 0, $first$4 = 0, $first$mux$i = 0, $name$i11 = 0, $name1$i = 0, $name2$i12 = 0, $name3$i = 0, $name4$i = 0, $or$cond = 0, $or$cond$i = 0;
 var $or$cond$i16 = 0, $or$cond10$i = 0, $or$cond11$i = 0, $or$cond12$i = 0, $or$cond9$i = 0, $pop_subs$0$off0$i$ph$lcssa = 0, $pop_subs$0$off0$i$ph136 = 0, $t0$0$i = 0, $t0$0$i13 = 0, $t0$1$i = 0, $t0$2$i$be = 0, $t0$2$i$lcssa = 0, $t0$2$i$ph$be = 0, $t0$2$i$ph135 = 0, $t0$2$i131 = 0, $t0$2$i131$lcssa177 = 0, $t0$2$i131$lcssa178 = 0, $t0$2$i131$lcssa179 = 0, $t0$2$i131184 = 0, $tmp = 0;
 var $tmp3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__v$i$i51$i = sp + 284|0;
 $cv$i = sp + 272|0;
 $name$i11 = sp + 260|0;
 $0 = sp + 248|0;
 $1 = sp + 232|0;
 $2 = sp + 224|0;
 $name1$i = sp + 212|0;
 $3 = sp + 200|0;
 $4 = sp + 184|0;
 $5 = sp + 176|0;
 $name2$i12 = sp + 164|0;
 $6 = sp + 152|0;
 $7 = sp + 136|0;
 $8 = sp + 48|0;
 $name3$i = sp;
 $9 = sp + 16|0;
 $10 = sp + 32|0;
 $name4$i = sp + 36|0;
 $11 = sp + 52|0;
 $12 = sp + 64|0;
 $13 = sp + 80|0;
 $14 = sp + 88|0;
 $15 = sp + 104|0;
 $tmp = sp + 108|0;
 $tmp3 = sp + 120|0;
 $16 = $last;
 $17 = $first;
 $18 = (($16) - ($17))|0;
 $19 = ($18|0)>(1);
 L1: do {
  if ($19) {
   $20 = HEAP8[$first>>0]|0;
   $21 = ($20<<24>>24)==(76);
   $22 = ((($first)) + 1|0);
   $$first = $21 ? $22 : $first;
   $23 = HEAP8[$$first>>0]|0;
   $24 = $23 << 24 >> 24;
   switch ($24|0) {
   case 78:  {
    $25 = ($$first|0)==($last|0);
    L44: do {
     if ($25) {
      $$07$i = $last;
     } else {
      $26 = ($23<<24>>24)==(78);
      if ($26) {
       $27 = ((($$first)) + 1|0);
       $28 = (__ZN10__cxxabiv112_GLOBAL__N_119parse_cv_qualifiersEPKcS2_Rj($27,$last,$cv$i)|0);
       $29 = ($28|0)==($last|0);
       if ($29) {
        $$07$i = $$first;
       } else {
        $30 = ((($db)) + 52|0);
        HEAP32[$30>>2] = 0;
        $31 = HEAP8[$28>>0]|0;
        switch ($31<<24>>24) {
        case 82:  {
         HEAP32[$30>>2] = 1;
         $32 = ((($28)) + 1|0);
         $t0$0$i13 = $32;
         break;
        }
        case 79:  {
         HEAP32[$30>>2] = 2;
         $33 = ((($28)) + 1|0);
         $t0$0$i13 = $33;
         break;
        }
        default: {
         $t0$0$i13 = $28;
        }
        }
        $34 = ((($db)) + 4|0);
        $35 = HEAP32[$34>>2]|0;
        $36 = ((($db)) + 8|0);
        $37 = HEAP32[$36>>2]|0;
        $38 = ($35>>>0)<($37>>>0);
        if ($38) {
         ;HEAP32[$35>>2]=0|0;HEAP32[$35+4>>2]=0|0;HEAP32[$35+8>>2]=0|0;HEAP32[$35+12>>2]=0|0;HEAP32[$35+16>>2]=0|0;HEAP32[$35+20>>2]=0|0;
         HEAP32[$35>>2] = 0;
         $39 = ((($35)) + 4|0);
         HEAP32[$39>>2] = 0;
         $40 = ((($35)) + 8|0);
         HEAP32[$40>>2] = 0;
         $41 = ((($35)) + 12|0);
         HEAP32[$41>>2] = 0;
         $42 = ((($41)) + 4|0);
         HEAP32[$42>>2] = 0;
         $43 = ((($41)) + 8|0);
         HEAP32[$43>>2] = 0;
         $44 = HEAP32[$34>>2]|0;
         $45 = ((($44)) + 24|0);
         HEAP32[$34>>2] = $45;
        } else {
         $46 = ((($db)) + 12|0);
         $47 = HEAP32[$db>>2]|0;
         $48 = $35;
         $49 = $47;
         $50 = (($48) - ($49))|0;
         $51 = (($50|0) / 24)&-1;
         $52 = (($51) + 1)|0;
         $53 = ($50|0)<(-24);
         if ($53) {
          __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
          // unreachable;
         }
         $54 = $37;
         $55 = (($54) - ($49))|0;
         $56 = (($55|0) / 24)&-1;
         $57 = ($56>>>0)<(1073741823);
         if ($57) {
          $58 = $56 << 1;
          $59 = ($58>>>0)<($52>>>0);
          $60 = $59 ? $52 : $58;
          $$0$i$i$i$i = $60;
         } else {
          $$0$i$i$i$i = 2147483647;
         }
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i51$i,$$0$i$i$i$i,$51,$46);
         $61 = ((($__v$i$i51$i)) + 8|0);
         $62 = HEAP32[$61>>2]|0;
         ;HEAP32[$62>>2]=0|0;HEAP32[$62+4>>2]=0|0;HEAP32[$62+8>>2]=0|0;HEAP32[$62+12>>2]=0|0;HEAP32[$62+16>>2]=0|0;HEAP32[$62+20>>2]=0|0;
         HEAP32[$62>>2] = 0;
         $63 = ((($62)) + 4|0);
         HEAP32[$63>>2] = 0;
         $64 = ((($62)) + 8|0);
         HEAP32[$64>>2] = 0;
         $65 = ((($62)) + 12|0);
         HEAP32[$65>>2] = 0;
         $66 = ((($65)) + 4|0);
         HEAP32[$66>>2] = 0;
         $67 = ((($65)) + 8|0);
         HEAP32[$67>>2] = 0;
         $68 = ((($62)) + 24|0);
         HEAP32[$61>>2] = $68;
         __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i51$i);
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i51$i);
        }
        $69 = $t0$0$i13;
        $70 = (($16) - ($69))|0;
        $71 = ($70|0)>(1);
        if ($71) {
         $72 = HEAP8[$t0$0$i13>>0]|0;
         $73 = ($72<<24>>24)==(83);
         if ($73) {
          $74 = ((($t0$0$i13)) + 1|0);
          $75 = HEAP8[$74>>0]|0;
          $76 = ($75<<24>>24)==(116);
          if ($76) {
           $77 = ((($t0$0$i13)) + 2|0);
           $78 = HEAP32[$34>>2]|0;
           $79 = ((($78)) + -24|0);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6assignEPKcj($79,1790,3);
           $t0$1$i = $77;
          } else {
           $t0$1$i = $t0$0$i13;
          }
         } else {
          $t0$1$i = $t0$0$i13;
         }
        } else {
         $t0$1$i = $t0$0$i13;
        }
        $80 = ($t0$1$i|0)==($last|0);
        if ($80) {
         $123 = HEAP32[$34>>2]|0;
         $124 = ((($123)) + -24|0);
         $126 = $123;
         while(1) {
          $125 = ((($126)) + -24|0);
          HEAP32[$34>>2] = $125;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($125);
          $$pre$i$i14 = HEAP32[$34>>2]|0;
          $127 = ($$pre$i$i14|0)==($124|0);
          if ($127) {
           $$07$i = $$first;
           break L44;
          } else {
           $126 = $$pre$i$i14;
          }
         }
        }
        $81 = ((($name3$i)) + 8|0);
        $82 = ((($name3$i)) + 1|0);
        $83 = ((($name3$i)) + 4|0);
        $84 = ((($db)) + 12|0);
        $85 = ((($db)) + 16|0);
        $86 = ((($db)) + 20|0);
        $87 = ((($db)) + 24|0);
        $88 = ((($9)) + 12|0);
        $89 = ((($9)) + 4|0);
        $90 = ((($9)) + 8|0);
        $91 = ((($db)) + 28|0);
        $92 = ((($__v$i$i51$i)) + 8|0);
        $93 = ((($12)) + 12|0);
        $94 = ((($12)) + 4|0);
        $95 = ((($12)) + 8|0);
        $96 = ((($__v$i$i51$i)) + 8|0);
        $97 = ((($11)) + 8|0);
        $98 = ((($11)) + 1|0);
        $99 = ((($11)) + 4|0);
        $100 = ((($0)) + 8|0);
        $101 = ((($0)) + 1|0);
        $102 = ((($0)) + 4|0);
        $103 = ((($1)) + 12|0);
        $104 = ((($1)) + 4|0);
        $105 = ((($1)) + 8|0);
        $106 = ((($__v$i$i51$i)) + 8|0);
        $107 = ((($4)) + 12|0);
        $108 = ((($4)) + 4|0);
        $109 = ((($4)) + 8|0);
        $110 = ((($__v$i$i51$i)) + 8|0);
        $111 = ((($3)) + 8|0);
        $112 = ((($3)) + 1|0);
        $113 = ((($3)) + 4|0);
        $114 = ((($7)) + 12|0);
        $115 = ((($7)) + 4|0);
        $116 = ((($7)) + 8|0);
        $117 = ((($__v$i$i51$i)) + 8|0);
        $118 = ((($6)) + 8|0);
        $119 = ((($6)) + 1|0);
        $120 = ((($6)) + 4|0);
        $121 = HEAP8[$t0$1$i>>0]|0;
        $122 = ($121<<24>>24)==(69);
        L72: do {
         if ($122) {
          $pop_subs$0$off0$i$ph$lcssa = 0;$t0$2$i$lcssa = $t0$1$i;
         } else {
          $719 = $121;$pop_subs$0$off0$i$ph136 = 0;$t0$2$i$ph135 = $t0$1$i;
          L73: while(1) {
           $129 = $719;$t0$2$i131 = $t0$2$i$ph135;
           L75: while(1) {
            $128 = $129 << 24 >> 24;
            switch ($128|0) {
            case 83:  {
             $t0$2$i131$lcssa177 = $t0$2$i131;
             label = 25;
             break L75;
             break;
            }
            case 84:  {
             $t0$2$i131$lcssa178 = $t0$2$i131;
             label = 44;
             break L75;
             break;
            }
            case 68:  {
             $t0$2$i131$lcssa179 = $t0$2$i131;
             label = 61;
             break L75;
             break;
            }
            case 73:  {
             $338 = (__ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($t0$2$i131,$last,$db)|0);
             $339 = ($338|0)==($t0$2$i131|0);
             $340 = ($338|0)==($last|0);
             $or$cond11$i = $339 | $340;
             if ($or$cond11$i) {
              $$07$i = $$first;
              break L44;
             }
             $341 = HEAP32[$34>>2]|0;
             $342 = ((($341)) + -24|0);
             __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($name3$i,$342);
             $343 = HEAP32[$34>>2]|0;
             $344 = ((($343)) + -24|0);
             $346 = $343;
             while(1) {
              $345 = ((($346)) + -24|0);
              HEAP32[$34>>2] = $345;
              __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($345);
              $$pre$i37$i = HEAP32[$34>>2]|0;
              $347 = ($$pre$i37$i|0)==($344|0);
              if ($347) {
               break;
              } else {
               $346 = $$pre$i37$i;
              }
             }
             $348 = ((($343)) + -48|0);
             $349 = HEAP8[$name3$i>>0]|0;
             $350 = $349 & 1;
             $351 = ($350<<24>>24)==(0);
             $352 = HEAP32[$81>>2]|0;
             $353 = $351 ? $82 : $352;
             $354 = HEAP32[$83>>2]|0;
             $355 = $349&255;
             $356 = $355 >>> 1;
             $357 = $351 ? $356 : $354;
             (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($348,$353,$357)|0);
             $358 = HEAP32[$34>>2]|0;
             $359 = ((($358)) + -24|0);
             $360 = HEAP32[$84>>2]|0;
             HEAP32[$10>>2] = $360;
             __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($9,$359,$10);
             $361 = HEAP32[$86>>2]|0;
             $362 = HEAP32[$87>>2]|0;
             $363 = ($361>>>0)<($362>>>0);
             if ($363) {
              $364 = ((($361)) + 4|0);
              $365 = HEAP32[$88>>2]|0;
              $366 = ((($361)) + 12|0);
              HEAP32[$366>>2] = $365;
              $367 = HEAP32[$9>>2]|0;
              HEAP32[$361>>2] = $367;
              $368 = HEAP32[$89>>2]|0;
              HEAP32[$364>>2] = $368;
              $369 = HEAP32[$90>>2]|0;
              $370 = ((($361)) + 8|0);
              HEAP32[$370>>2] = $369;
              HEAP32[$90>>2] = 0;
              HEAP32[$89>>2] = 0;
              HEAP32[$9>>2] = 0;
              $371 = HEAP32[$86>>2]|0;
              $372 = ((($371)) + 16|0);
              HEAP32[$86>>2] = $372;
             } else {
              $373 = HEAP32[$85>>2]|0;
              $374 = $361;
              $375 = $373;
              $376 = (($374) - ($375))|0;
              $377 = $376 >> 4;
              $378 = (($377) + 1)|0;
              $379 = ($376|0)<(-16);
              if ($379) {
               label = 86;
               break L73;
              }
              $380 = $362;
              $381 = (($380) - ($375))|0;
              $382 = $381 >> 4;
              $383 = ($382>>>0)<(1073741823);
              if ($383) {
               $384 = $381 >> 3;
               $385 = ($384>>>0)<($378>>>0);
               $386 = $385 ? $378 : $384;
               $$0$i$i$i42$i = $386;
              } else {
               $$0$i$i$i42$i = 2147483647;
              }
              __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i51$i,$$0$i$i$i42$i,$377,$91);
              $387 = HEAP32[$92>>2]|0;
              $388 = ((($387)) + 4|0);
              $389 = HEAP32[$88>>2]|0;
              $390 = ((($387)) + 12|0);
              HEAP32[$390>>2] = $389;
              $391 = HEAP32[$9>>2]|0;
              HEAP32[$387>>2] = $391;
              $392 = HEAP32[$89>>2]|0;
              HEAP32[$388>>2] = $392;
              $393 = HEAP32[$90>>2]|0;
              $394 = ((($387)) + 8|0);
              HEAP32[$394>>2] = $393;
              HEAP32[$90>>2] = 0;
              HEAP32[$89>>2] = 0;
              HEAP32[$9>>2] = 0;
              $395 = ((($387)) + 16|0);
              HEAP32[$92>>2] = $395;
              __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($85,$__v$i$i51$i);
              __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i51$i);
             }
             __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($9);
             __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($name3$i);
             $t0$2$i$be = $338;
             break;
            }
            case 76:  {
             $398 = ((($t0$2$i131)) + 1|0);
             $399 = ($398|0)==($last|0);
             if ($399) {
              $$07$i = $$first;
              break L44;
             } else {
              $t0$2$i$be = $398;
             }
             break;
            }
            default: {
             $t0$2$i131184 = $t0$2$i131;
             label = 93;
             break L75;
            }
            }
            $396 = HEAP8[$t0$2$i$be>>0]|0;
            $397 = ($396<<24>>24)==(69);
            if ($397) {
             $pop_subs$0$off0$i$ph$lcssa = $pop_subs$0$off0$i$ph136;$t0$2$i$lcssa = $t0$2$i$be;
             break L72;
            } else {
             $129 = $396;$t0$2$i131 = $t0$2$i$be;
            }
           }
           L93: do {
            if ((label|0) == 25) {
             label = 0;
             $130 = ((($t0$2$i131$lcssa177)) + 1|0);
             $131 = ($130|0)==($last|0);
             if (!($131)) {
              $132 = HEAP8[$130>>0]|0;
              $133 = ($132<<24>>24)==(116);
              if ($133) {
               $t0$2$i131184 = $t0$2$i131$lcssa177;
               label = 93;
               break;
              }
             }
             $134 = (__ZN10__cxxabiv112_GLOBAL__N_118parse_substitutionINS0_2DbEEEPKcS4_S4_RT_($t0$2$i131$lcssa177,$last,$db)|0);
             $135 = ($134|0)==($t0$2$i131$lcssa177|0);
             $136 = ($134|0)==($last|0);
             $or$cond$i16 = $135 | $136;
             if ($or$cond$i16) {
              $$07$i = $$first;
              break L44;
             }
             $137 = HEAP32[$34>>2]|0;
             $138 = ((($137)) + -24|0);
             __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($name$i11,$138);
             $139 = HEAP32[$34>>2]|0;
             $140 = ((($139)) + -24|0);
             $142 = $139;
             while(1) {
              $141 = ((($142)) + -24|0);
              HEAP32[$34>>2] = $141;
              __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($141);
              $$pre$i13$i = HEAP32[$34>>2]|0;
              $143 = ($$pre$i13$i|0)==($140|0);
              if ($143) {
               break;
              } else {
               $142 = $$pre$i13$i;
              }
             }
             $144 = ((($139)) + -48|0);
             $145 = HEAP8[$144>>0]|0;
             $146 = $145 & 1;
             $147 = ($146<<24>>24)==(0);
             if ($147) {
              $150 = $145&255;
              $151 = $150 >>> 1;
              $152 = $151;
             } else {
              $148 = ((($139)) + -44|0);
              $149 = HEAP32[$148>>2]|0;
              $152 = $149;
             }
             $153 = ($152|0)==(0);
             if ($153) {
              __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEaSERKS7_($144,$name$i11);
             } else {
              __ZNSt3__1plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($0,1794,$name$i11);
              $154 = HEAP8[$0>>0]|0;
              $155 = $154 & 1;
              $156 = ($155<<24>>24)==(0);
              $157 = HEAP32[$100>>2]|0;
              $158 = $156 ? $101 : $157;
              $159 = HEAP32[$102>>2]|0;
              $160 = $154&255;
              $161 = $160 >>> 1;
              $162 = $156 ? $161 : $159;
              (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($144,$158,$162)|0);
              __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($0);
              $163 = HEAP32[$34>>2]|0;
              $164 = ((($163)) + -24|0);
              $165 = HEAP32[$84>>2]|0;
              HEAP32[$2>>2] = $165;
              __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($1,$164,$2);
              $166 = HEAP32[$86>>2]|0;
              $167 = HEAP32[$87>>2]|0;
              $168 = ($166>>>0)<($167>>>0);
              if ($168) {
               $169 = ((($166)) + 4|0);
               $170 = HEAP32[$103>>2]|0;
               $171 = ((($166)) + 12|0);
               HEAP32[$171>>2] = $170;
               $172 = HEAP32[$1>>2]|0;
               HEAP32[$166>>2] = $172;
               $173 = HEAP32[$104>>2]|0;
               HEAP32[$169>>2] = $173;
               $174 = HEAP32[$105>>2]|0;
               $175 = ((($166)) + 8|0);
               HEAP32[$175>>2] = $174;
               HEAP32[$105>>2] = 0;
               HEAP32[$104>>2] = 0;
               HEAP32[$1>>2] = 0;
               $176 = HEAP32[$86>>2]|0;
               $177 = ((($176)) + 16|0);
               HEAP32[$86>>2] = $177;
              } else {
               $178 = HEAP32[$85>>2]|0;
               $179 = $166;
               $180 = $178;
               $181 = (($179) - ($180))|0;
               $182 = $181 >> 4;
               $183 = (($182) + 1)|0;
               $184 = ($181|0)<(-16);
               if ($184) {
                label = 37;
                break L73;
               }
               $185 = $167;
               $186 = (($185) - ($180))|0;
               $187 = $186 >> 4;
               $188 = ($187>>>0)<(1073741823);
               if ($188) {
                $189 = $186 >> 3;
                $190 = ($189>>>0)<($183>>>0);
                $191 = $190 ? $183 : $189;
                $$0$i$i$i16$i = $191;
               } else {
                $$0$i$i$i16$i = 2147483647;
               }
               __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i51$i,$$0$i$i$i16$i,$182,$91);
               $192 = HEAP32[$106>>2]|0;
               $193 = ((($192)) + 4|0);
               $194 = HEAP32[$103>>2]|0;
               $195 = ((($192)) + 12|0);
               HEAP32[$195>>2] = $194;
               $196 = HEAP32[$1>>2]|0;
               HEAP32[$192>>2] = $196;
               $197 = HEAP32[$104>>2]|0;
               HEAP32[$193>>2] = $197;
               $198 = HEAP32[$105>>2]|0;
               $199 = ((($192)) + 8|0);
               HEAP32[$199>>2] = $198;
               HEAP32[$105>>2] = 0;
               HEAP32[$104>>2] = 0;
               HEAP32[$1>>2] = 0;
               $200 = ((($192)) + 16|0);
               HEAP32[$106>>2] = $200;
               __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($85,$__v$i$i51$i);
               __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i51$i);
              }
              __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($1);
             }
             __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($name$i11);
             $t0$2$i$ph$be = $134;
            }
            else if ((label|0) == 44) {
             label = 0;
             $201 = (__ZN10__cxxabiv112_GLOBAL__N_120parse_template_paramINS0_2DbEEEPKcS4_S4_RT_($t0$2$i131$lcssa178,$last,$db)|0);
             $202 = ($201|0)==($t0$2$i131$lcssa178|0);
             $203 = ($201|0)==($last|0);
             $or$cond9$i = $202 | $203;
             if ($or$cond9$i) {
              $$07$i = $$first;
              break L44;
             }
             $204 = HEAP32[$34>>2]|0;
             $205 = ((($204)) + -24|0);
             __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($name1$i,$205);
             $206 = HEAP32[$34>>2]|0;
             $207 = ((($206)) + -24|0);
             $209 = $206;
             while(1) {
              $208 = ((($209)) + -24|0);
              HEAP32[$34>>2] = $208;
              __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($208);
              $$pre$i17$i = HEAP32[$34>>2]|0;
              $210 = ($$pre$i17$i|0)==($207|0);
              if ($210) {
               break;
              } else {
               $209 = $$pre$i17$i;
              }
             }
             $211 = ((($206)) + -48|0);
             $212 = HEAP8[$211>>0]|0;
             $213 = $212 & 1;
             $214 = ($213<<24>>24)==(0);
             if ($214) {
              $217 = $212&255;
              $218 = $217 >>> 1;
              $219 = $218;
             } else {
              $215 = ((($206)) + -44|0);
              $216 = HEAP32[$215>>2]|0;
              $219 = $216;
             }
             $220 = ($219|0)==(0);
             if ($220) {
              __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEaSERKS7_($211,$name1$i);
             } else {
              __ZNSt3__1plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($3,1794,$name1$i);
              $221 = HEAP8[$3>>0]|0;
              $222 = $221 & 1;
              $223 = ($222<<24>>24)==(0);
              $224 = HEAP32[$111>>2]|0;
              $225 = $223 ? $112 : $224;
              $226 = HEAP32[$113>>2]|0;
              $227 = $221&255;
              $228 = $227 >>> 1;
              $229 = $223 ? $228 : $226;
              (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($211,$225,$229)|0);
              __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
             }
             $230 = HEAP32[$34>>2]|0;
             $231 = ((($230)) + -24|0);
             $232 = HEAP32[$84>>2]|0;
             HEAP32[$5>>2] = $232;
             __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($4,$231,$5);
             $233 = HEAP32[$86>>2]|0;
             $234 = HEAP32[$87>>2]|0;
             $235 = ($233>>>0)<($234>>>0);
             if ($235) {
              $236 = ((($233)) + 4|0);
              $237 = HEAP32[$107>>2]|0;
              $238 = ((($233)) + 12|0);
              HEAP32[$238>>2] = $237;
              $239 = HEAP32[$4>>2]|0;
              HEAP32[$233>>2] = $239;
              $240 = HEAP32[$108>>2]|0;
              HEAP32[$236>>2] = $240;
              $241 = HEAP32[$109>>2]|0;
              $242 = ((($233)) + 8|0);
              HEAP32[$242>>2] = $241;
              HEAP32[$109>>2] = 0;
              HEAP32[$108>>2] = 0;
              HEAP32[$4>>2] = 0;
              $243 = HEAP32[$86>>2]|0;
              $244 = ((($243)) + 16|0);
              HEAP32[$86>>2] = $244;
             } else {
              $245 = HEAP32[$85>>2]|0;
              $246 = $233;
              $247 = $245;
              $248 = (($246) - ($247))|0;
              $249 = $248 >> 4;
              $250 = (($249) + 1)|0;
              $251 = ($248|0)<(-16);
              if ($251) {
               label = 56;
               break L73;
              }
              $252 = $234;
              $253 = (($252) - ($247))|0;
              $254 = $253 >> 4;
              $255 = ($254>>>0)<(1073741823);
              if ($255) {
               $256 = $253 >> 3;
               $257 = ($256>>>0)<($250>>>0);
               $258 = $257 ? $250 : $256;
               $$0$i$i$i23$i = $258;
              } else {
               $$0$i$i$i23$i = 2147483647;
              }
              __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i51$i,$$0$i$i$i23$i,$249,$91);
              $259 = HEAP32[$110>>2]|0;
              $260 = ((($259)) + 4|0);
              $261 = HEAP32[$107>>2]|0;
              $262 = ((($259)) + 12|0);
              HEAP32[$262>>2] = $261;
              $263 = HEAP32[$4>>2]|0;
              HEAP32[$259>>2] = $263;
              $264 = HEAP32[$108>>2]|0;
              HEAP32[$260>>2] = $264;
              $265 = HEAP32[$109>>2]|0;
              $266 = ((($259)) + 8|0);
              HEAP32[$266>>2] = $265;
              HEAP32[$109>>2] = 0;
              HEAP32[$108>>2] = 0;
              HEAP32[$4>>2] = 0;
              $267 = ((($259)) + 16|0);
              HEAP32[$110>>2] = $267;
              __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($85,$__v$i$i51$i);
              __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i51$i);
             }
             __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($4);
             __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($name1$i);
             $t0$2$i$ph$be = $201;
            }
            else if ((label|0) == 61) {
             label = 0;
             $268 = ((($t0$2$i131$lcssa179)) + 1|0);
             $269 = ($268|0)==($last|0);
             if (!($269)) {
              $270 = HEAP8[$268>>0]|0;
              switch ($270<<24>>24) {
              case 84: case 116:  {
               break;
              }
              default: {
               $t0$2$i131184 = $t0$2$i131$lcssa179;
               label = 93;
               break L93;
              }
              }
             }
             $271 = (__ZN10__cxxabiv112_GLOBAL__N_114parse_decltypeINS0_2DbEEEPKcS4_S4_RT_($t0$2$i131$lcssa179,$last,$db)|0);
             $272 = ($271|0)==($t0$2$i131$lcssa179|0);
             $273 = ($271|0)==($last|0);
             $or$cond10$i = $272 | $273;
             if ($or$cond10$i) {
              $$07$i = $$first;
              break L44;
             }
             $274 = HEAP32[$34>>2]|0;
             $275 = ((($274)) + -24|0);
             __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($name2$i12,$275);
             $276 = HEAP32[$34>>2]|0;
             $277 = ((($276)) + -24|0);
             $279 = $276;
             while(1) {
              $278 = ((($279)) + -24|0);
              HEAP32[$34>>2] = $278;
              __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($278);
              $$pre$i27$i = HEAP32[$34>>2]|0;
              $280 = ($$pre$i27$i|0)==($277|0);
              if ($280) {
               break;
              } else {
               $279 = $$pre$i27$i;
              }
             }
             $281 = ((($276)) + -48|0);
             $282 = HEAP8[$281>>0]|0;
             $283 = $282 & 1;
             $284 = ($283<<24>>24)==(0);
             if ($284) {
              $287 = $282&255;
              $288 = $287 >>> 1;
              $289 = $288;
             } else {
              $285 = ((($276)) + -44|0);
              $286 = HEAP32[$285>>2]|0;
              $289 = $286;
             }
             $290 = ($289|0)==(0);
             if ($290) {
              __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEaSERKS7_($281,$name2$i12);
             } else {
              __ZNSt3__1plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($6,1794,$name2$i12);
              $291 = HEAP8[$6>>0]|0;
              $292 = $291 & 1;
              $293 = ($292<<24>>24)==(0);
              $294 = HEAP32[$118>>2]|0;
              $295 = $293 ? $119 : $294;
              $296 = HEAP32[$120>>2]|0;
              $297 = $291&255;
              $298 = $297 >>> 1;
              $299 = $293 ? $298 : $296;
              (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($281,$295,$299)|0);
              __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
             }
             $300 = HEAP32[$34>>2]|0;
             $301 = ((($300)) + -24|0);
             $302 = HEAP32[$84>>2]|0;
             HEAP32[$8>>2] = $302;
             __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($7,$301,$8);
             $303 = HEAP32[$86>>2]|0;
             $304 = HEAP32[$87>>2]|0;
             $305 = ($303>>>0)<($304>>>0);
             if ($305) {
              $306 = ((($303)) + 4|0);
              $307 = HEAP32[$114>>2]|0;
              $308 = ((($303)) + 12|0);
              HEAP32[$308>>2] = $307;
              $309 = HEAP32[$7>>2]|0;
              HEAP32[$303>>2] = $309;
              $310 = HEAP32[$115>>2]|0;
              HEAP32[$306>>2] = $310;
              $311 = HEAP32[$116>>2]|0;
              $312 = ((($303)) + 8|0);
              HEAP32[$312>>2] = $311;
              HEAP32[$116>>2] = 0;
              HEAP32[$115>>2] = 0;
              HEAP32[$7>>2] = 0;
              $313 = HEAP32[$86>>2]|0;
              $314 = ((($313)) + 16|0);
              HEAP32[$86>>2] = $314;
             } else {
              $315 = HEAP32[$85>>2]|0;
              $316 = $303;
              $317 = $315;
              $318 = (($316) - ($317))|0;
              $319 = $318 >> 4;
              $320 = (($319) + 1)|0;
              $321 = ($318|0)<(-16);
              if ($321) {
               label = 75;
               break L73;
              }
              $322 = $304;
              $323 = (($322) - ($317))|0;
              $324 = $323 >> 4;
              $325 = ($324>>>0)<(1073741823);
              if ($325) {
               $326 = $323 >> 3;
               $327 = ($326>>>0)<($320>>>0);
               $328 = $327 ? $320 : $326;
               $$0$i$i$i33$i = $328;
              } else {
               $$0$i$i$i33$i = 2147483647;
              }
              __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i51$i,$$0$i$i$i33$i,$319,$91);
              $329 = HEAP32[$117>>2]|0;
              $330 = ((($329)) + 4|0);
              $331 = HEAP32[$114>>2]|0;
              $332 = ((($329)) + 12|0);
              HEAP32[$332>>2] = $331;
              $333 = HEAP32[$7>>2]|0;
              HEAP32[$329>>2] = $333;
              $334 = HEAP32[$115>>2]|0;
              HEAP32[$330>>2] = $334;
              $335 = HEAP32[$116>>2]|0;
              $336 = ((($329)) + 8|0);
              HEAP32[$336>>2] = $335;
              HEAP32[$116>>2] = 0;
              HEAP32[$115>>2] = 0;
              HEAP32[$7>>2] = 0;
              $337 = ((($329)) + 16|0);
              HEAP32[$117>>2] = $337;
              __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($85,$__v$i$i51$i);
              __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i51$i);
             }
             __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($7);
             __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($name2$i12);
             $t0$2$i$ph$be = $271;
            }
           } while(0);
           if ((label|0) == 93) {
            label = 0;
            $400 = (__ZN10__cxxabiv112_GLOBAL__N_122parse_unqualified_nameINS0_2DbEEEPKcS4_S4_RT_($t0$2$i131184,$last,$db)|0);
            $401 = ($400|0)==($t0$2$i131184|0);
            $402 = ($400|0)==($last|0);
            $or$cond12$i = $401 | $402;
            if ($or$cond12$i) {
             $$07$i = $$first;
             break L44;
            }
            $403 = HEAP32[$34>>2]|0;
            $404 = ((($403)) + -24|0);
            __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($name4$i,$404);
            $405 = HEAP32[$34>>2]|0;
            $406 = ((($405)) + -24|0);
            $408 = $405;
            while(1) {
             $407 = ((($408)) + -24|0);
             HEAP32[$34>>2] = $407;
             __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($407);
             $$pre$i46$i = HEAP32[$34>>2]|0;
             $409 = ($$pre$i46$i|0)==($406|0);
             if ($409) {
              break;
             } else {
              $408 = $$pre$i46$i;
             }
            }
            $410 = ((($405)) + -48|0);
            $411 = HEAP8[$410>>0]|0;
            $412 = $411 & 1;
            $413 = ($412<<24>>24)==(0);
            if ($413) {
             $416 = $411&255;
             $417 = $416 >>> 1;
             $418 = $417;
            } else {
             $414 = ((($405)) + -44|0);
             $415 = HEAP32[$414>>2]|0;
             $418 = $415;
            }
            $419 = ($418|0)==(0);
            if ($419) {
             __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEaSERKS7_($410,$name4$i);
            } else {
             __ZNSt3__1plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($11,1794,$name4$i);
             $420 = HEAP8[$11>>0]|0;
             $421 = $420 & 1;
             $422 = ($421<<24>>24)==(0);
             $423 = HEAP32[$97>>2]|0;
             $424 = $422 ? $98 : $423;
             $425 = HEAP32[$99>>2]|0;
             $426 = $420&255;
             $427 = $426 >>> 1;
             $428 = $422 ? $427 : $425;
             (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($410,$424,$428)|0);
             __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($11);
            }
            $429 = HEAP32[$34>>2]|0;
            $430 = ((($429)) + -24|0);
            $431 = HEAP32[$84>>2]|0;
            HEAP32[$13>>2] = $431;
            __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($12,$430,$13);
            $432 = HEAP32[$86>>2]|0;
            $433 = HEAP32[$87>>2]|0;
            $434 = ($432>>>0)<($433>>>0);
            if ($434) {
             $435 = ((($432)) + 4|0);
             $436 = HEAP32[$93>>2]|0;
             $437 = ((($432)) + 12|0);
             HEAP32[$437>>2] = $436;
             $438 = HEAP32[$12>>2]|0;
             HEAP32[$432>>2] = $438;
             $439 = HEAP32[$94>>2]|0;
             HEAP32[$435>>2] = $439;
             $440 = HEAP32[$95>>2]|0;
             $441 = ((($432)) + 8|0);
             HEAP32[$441>>2] = $440;
             HEAP32[$95>>2] = 0;
             HEAP32[$94>>2] = 0;
             HEAP32[$12>>2] = 0;
             $442 = HEAP32[$86>>2]|0;
             $443 = ((($442)) + 16|0);
             HEAP32[$86>>2] = $443;
            } else {
             $444 = HEAP32[$85>>2]|0;
             $445 = $432;
             $446 = $444;
             $447 = (($445) - ($446))|0;
             $448 = $447 >> 4;
             $449 = (($448) + 1)|0;
             $450 = ($447|0)<(-16);
             if ($450) {
              label = 105;
              break;
             }
             $451 = $433;
             $452 = (($451) - ($446))|0;
             $453 = $452 >> 4;
             $454 = ($453>>>0)<(1073741823);
             if ($454) {
              $455 = $452 >> 3;
              $456 = ($455>>>0)<($449>>>0);
              $457 = $456 ? $449 : $455;
              $$0$i$i$i52$i = $457;
             } else {
              $$0$i$i$i52$i = 2147483647;
             }
             __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i51$i,$$0$i$i$i52$i,$448,$91);
             $458 = HEAP32[$96>>2]|0;
             $459 = ((($458)) + 4|0);
             $460 = HEAP32[$93>>2]|0;
             $461 = ((($458)) + 12|0);
             HEAP32[$461>>2] = $460;
             $462 = HEAP32[$12>>2]|0;
             HEAP32[$458>>2] = $462;
             $463 = HEAP32[$94>>2]|0;
             HEAP32[$459>>2] = $463;
             $464 = HEAP32[$95>>2]|0;
             $465 = ((($458)) + 8|0);
             HEAP32[$465>>2] = $464;
             HEAP32[$95>>2] = 0;
             HEAP32[$94>>2] = 0;
             HEAP32[$12>>2] = 0;
             $466 = ((($458)) + 16|0);
             HEAP32[$96>>2] = $466;
             __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($85,$__v$i$i51$i);
             __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i51$i);
            }
            __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($12);
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($name4$i);
            $t0$2$i$ph$be = $400;
           }
           $467 = HEAP8[$t0$2$i$ph$be>>0]|0;
           $468 = ($467<<24>>24)==(69);
           if ($468) {
            $pop_subs$0$off0$i$ph$lcssa = 1;$t0$2$i$lcssa = $t0$2$i$ph$be;
            break L72;
           } else {
            $719 = $467;$pop_subs$0$off0$i$ph136 = 1;$t0$2$i$ph135 = $t0$2$i$ph$be;
           }
          }
          if ((label|0) == 37) {
           __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($85);
           // unreachable;
          }
          else if ((label|0) == 56) {
           __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($85);
           // unreachable;
          }
          else if ((label|0) == 75) {
           __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($85);
           // unreachable;
          }
          else if ((label|0) == 86) {
           __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($85);
           // unreachable;
          }
          else if ((label|0) == 105) {
           __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($85);
           // unreachable;
          }
         }
        } while(0);
        $469 = ((($t0$2$i$lcssa)) + 1|0);
        $470 = HEAP32[$cv$i>>2]|0;
        $471 = ((($db)) + 48|0);
        HEAP32[$471>>2] = $470;
        if ($pop_subs$0$off0$i$ph$lcssa) {
         $472 = ((($db)) + 16|0);
         $473 = HEAP32[$472>>2]|0;
         $474 = HEAP32[$86>>2]|0;
         $475 = ($473|0)==($474|0);
         if ($475) {
          $$07$i = $469;
         } else {
          $476 = ((($474)) + -16|0);
          $478 = $474;
          while(1) {
           $477 = ((($478)) + -16|0);
           HEAP32[$86>>2] = $477;
           __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($477);
           $$pre$i56$i = HEAP32[$86>>2]|0;
           $479 = ($$pre$i56$i|0)==($476|0);
           if ($479) {
            $$07$i = $469;
            break;
           } else {
            $478 = $$pre$i56$i;
           }
          }
         }
        } else {
         $$07$i = $469;
        }
       }
      } else {
       $$07$i = $$first;
      }
     }
    } while(0);
    $480 = ($$07$i|0)==($$first|0);
    $first$ = $480 ? $first : $$07$i;
    $$02 = $first$;
    break L1;
    break;
   }
   case 90:  {
    $481 = ($$first|0)==($last|0);
    L199: do {
     if ($481) {
      $$0$i10 = $last;
     } else {
      $482 = ($23<<24>>24)==(90);
      if ($482) {
       $483 = ((($$first)) + 1|0);
       $484 = (__ZN10__cxxabiv112_GLOBAL__N_114parse_encodingINS0_2DbEEEPKcS4_S4_RT_($483,$last,$db)|0);
       $485 = ($484|0)==($483|0);
       $486 = ($484|0)==($last|0);
       $or$cond$i = $485 | $486;
       if ($or$cond$i) {
        $$0$i10 = $$first;
       } else {
        $487 = HEAP8[$484>>0]|0;
        $488 = ($487<<24>>24)==(69);
        if ($488) {
         $489 = ((($484)) + 1|0);
         $490 = ($489|0)==($last|0);
         if ($490) {
          $$0$i10 = $$first;
         } else {
          $491 = HEAP8[$489>>0]|0;
          $492 = $491 << 24 >> 24;
          switch ($492|0) {
          case 115:  {
           $493 = ((($484)) + 2|0);
           $494 = (__ZN10__cxxabiv112_GLOBAL__N_119parse_discriminatorEPKcS2_($493,$last)|0);
           $495 = HEAP32[$db>>2]|0;
           $496 = ((($db)) + 4|0);
           $497 = HEAP32[$496>>2]|0;
           $498 = ($495|0)==($497|0);
           if ($498) {
            $$0$i10 = $494;
            break L199;
           }
           $499 = ((($497)) + -24|0);
           (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($499,1797)|0);
           $$0$i10 = $494;
           break L199;
           break;
          }
          case 100:  {
           $500 = ((($484)) + 2|0);
           $501 = ($500|0)==($last|0);
           if ($501) {
            $$0$i10 = $$first;
            break L199;
           }
           $502 = (__ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($500,$last)|0);
           $503 = ($502|0)==($last|0);
           if ($503) {
            $$0$i10 = $$first;
            break L199;
           }
           $504 = HEAP8[$502>>0]|0;
           $505 = ($504<<24>>24)==(95);
           if (!($505)) {
            $$0$i10 = $$first;
            break L199;
           }
           $506 = ((($502)) + 1|0);
           $507 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_nameINS0_2DbEEEPKcS4_S4_RT_($506,$last,$db)|0);
           $508 = ($507|0)==($506|0);
           $509 = ((($db)) + 4|0);
           $510 = HEAP32[$509>>2]|0;
           if ($508) {
            $538 = ((($510)) + -24|0);
            $540 = $510;
            while(1) {
             $539 = ((($540)) + -24|0);
             HEAP32[$509>>2] = $539;
             __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($539);
             $$pre$i4$i = HEAP32[$509>>2]|0;
             $541 = ($$pre$i4$i|0)==($538|0);
             if ($541) {
              $$0$i10 = $$first;
              break L199;
             } else {
              $540 = $$pre$i4$i;
             }
            }
           }
           $511 = HEAP32[$db>>2]|0;
           $512 = $510;
           $513 = $511;
           $514 = (($512) - ($513))|0;
           $515 = (($514|0) / 24)&-1;
           $516 = ($515>>>0)<(2);
           if ($516) {
            $$0$i10 = $$first;
            break L199;
           }
           $517 = ((($510)) + -24|0);
           __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($__v$i$i51$i,$517);
           $518 = HEAP32[$509>>2]|0;
           $519 = ((($518)) + -24|0);
           $521 = $518;
           while(1) {
            $520 = ((($521)) + -24|0);
            HEAP32[$509>>2] = $520;
            __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($520);
            $$pre$i$i = HEAP32[$509>>2]|0;
            $522 = ($$pre$i$i|0)==($519|0);
            if ($522) {
             break;
            } else {
             $521 = $$pre$i$i;
            }
           }
           $523 = ((($518)) + -48|0);
           (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($523,1794)|0);
           $524 = HEAP32[$509>>2]|0;
           $525 = ((($524)) + -24|0);
           $526 = HEAP8[$__v$i$i51$i>>0]|0;
           $527 = $526 & 1;
           $528 = ($527<<24>>24)==(0);
           $529 = ((($__v$i$i51$i)) + 8|0);
           $530 = HEAP32[$529>>2]|0;
           $531 = ((($__v$i$i51$i)) + 1|0);
           $532 = $528 ? $531 : $530;
           $533 = ((($__v$i$i51$i)) + 4|0);
           $534 = HEAP32[$533>>2]|0;
           $535 = $526&255;
           $536 = $535 >>> 1;
           $537 = $528 ? $536 : $534;
           (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($525,$532,$537)|0);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($__v$i$i51$i);
           $$0$i10 = $507;
           break L199;
           break;
          }
          default: {
           $542 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_nameINS0_2DbEEEPKcS4_S4_RT_($489,$last,$db)|0);
           $543 = ($542|0)==($489|0);
           if ($543) {
            $574 = ((($db)) + 4|0);
            $575 = HEAP32[$574>>2]|0;
            $576 = ((($575)) + -24|0);
            $578 = $575;
            while(1) {
             $577 = ((($578)) + -24|0);
             HEAP32[$574>>2] = $577;
             __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($577);
             $$pre$i9$i = HEAP32[$574>>2]|0;
             $579 = ($$pre$i9$i|0)==($576|0);
             if ($579) {
              $$0$i10 = $$first;
              break L199;
             } else {
              $578 = $$pre$i9$i;
             }
            }
           }
           $544 = (__ZN10__cxxabiv112_GLOBAL__N_119parse_discriminatorEPKcS2_($542,$last)|0);
           $545 = ((($db)) + 4|0);
           $546 = HEAP32[$545>>2]|0;
           $547 = HEAP32[$db>>2]|0;
           $548 = $546;
           $549 = $547;
           $550 = (($548) - ($549))|0;
           $551 = (($550|0) / 24)&-1;
           $552 = ($551>>>0)<(2);
           if ($552) {
            $$0$i10 = $544;
            break L199;
           }
           $553 = ((($546)) + -24|0);
           __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($cv$i,$553);
           $554 = HEAP32[$545>>2]|0;
           $555 = ((($554)) + -24|0);
           $557 = $554;
           while(1) {
            $556 = ((($557)) + -24|0);
            HEAP32[$545>>2] = $556;
            __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($556);
            $$pre$i6$i = HEAP32[$545>>2]|0;
            $558 = ($$pre$i6$i|0)==($555|0);
            if ($558) {
             break;
            } else {
             $557 = $$pre$i6$i;
            }
           }
           $559 = ((($554)) + -48|0);
           (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($559,1794)|0);
           $560 = HEAP32[$545>>2]|0;
           $561 = ((($560)) + -24|0);
           $562 = HEAP8[$cv$i>>0]|0;
           $563 = $562 & 1;
           $564 = ($563<<24>>24)==(0);
           $565 = ((($cv$i)) + 8|0);
           $566 = HEAP32[$565>>2]|0;
           $567 = ((($cv$i)) + 1|0);
           $568 = $564 ? $567 : $566;
           $569 = ((($cv$i)) + 4|0);
           $570 = HEAP32[$569>>2]|0;
           $571 = $562&255;
           $572 = $571 >>> 1;
           $573 = $564 ? $572 : $570;
           (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($561,$568,$573)|0);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($cv$i);
           $$0$i10 = $544;
           break L199;
          }
          }
         }
        } else {
         $$0$i10 = $$first;
        }
       }
      } else {
       $$0$i10 = $$first;
      }
     }
    } while(0);
    $580 = ($$0$i10|0)==($$first|0);
    $first$4 = $580 ? $first : $$0$i10;
    STACKTOP = sp;return ($first$4|0);
    break;
   }
   default: {
    $581 = $$first;
    $582 = (($16) - ($581))|0;
    $583 = ($582|0)>(1);
    do {
     if ($583) {
      $584 = ($23<<24>>24)==(83);
      if ($584) {
       $585 = ((($$first)) + 1|0);
       $586 = HEAP8[$585>>0]|0;
       $587 = ($586<<24>>24)==(116);
       if ($587) {
        $588 = ((($$first)) + 2|0);
        $589 = ($588|0)==($last|0);
        if ($589) {
         $St$0$off0$i = 0;$t0$0$i = $last;
        } else {
         $590 = HEAP8[$588>>0]|0;
         $591 = ($590<<24>>24)==(76);
         $592 = ((($$first)) + 3|0);
         $$$i = $591 ? $592 : $588;
         $St$0$off0$i = 0;$t0$0$i = $$$i;
        }
       } else {
        $St$0$off0$i = 1;$t0$0$i = $$first;
       }
      } else {
       $St$0$off0$i = 1;$t0$0$i = $$first;
      }
      $593 = (__ZN10__cxxabiv112_GLOBAL__N_122parse_unqualified_nameINS0_2DbEEEPKcS4_S4_RT_($t0$0$i,$last,$db)|0);
      $594 = ($593|0)==($t0$0$i|0);
      $brmerge$i = $St$0$off0$i | $594;
      $first$mux$i = $594 ? $$first : $593;
      if ($brmerge$i) {
       $$0$i = $first$mux$i;
      } else {
       $595 = HEAP32[$db>>2]|0;
       $596 = ((($db)) + 4|0);
       $597 = HEAP32[$596>>2]|0;
       $598 = ($595|0)==($597|0);
       if ($598) {
        break;
       }
       $599 = ((($597)) + -24|0);
       (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($599,0,1814)|0);
       $$0$i = $593;
      }
      $600 = ($$0$i|0)==($$first|0);
      if (!($600)) {
       $601 = ($$0$i|0)==($last|0);
       if ($601) {
        $$02 = $last;
        break L1;
       }
       $602 = HEAP8[$$0$i>>0]|0;
       $603 = ($602<<24>>24)==(73);
       if (!($603)) {
        $$02 = $$0$i;
        break L1;
       }
       $604 = HEAP32[$db>>2]|0;
       $605 = ((($db)) + 4|0);
       $606 = HEAP32[$605>>2]|0;
       $607 = ($604|0)==($606|0);
       if ($607) {
        $$02 = $first;
        break L1;
       }
       $608 = ((($db)) + 16|0);
       $609 = ((($606)) + -24|0);
       $610 = ((($db)) + 12|0);
       $611 = HEAP32[$610>>2]|0;
       HEAP32[$15>>2] = $611;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($14,$609,$15);
       $612 = ((($db)) + 20|0);
       $613 = HEAP32[$612>>2]|0;
       $614 = ((($db)) + 24|0);
       $615 = HEAP32[$614>>2]|0;
       $616 = ($613>>>0)<($615>>>0);
       if ($616) {
        $617 = ((($14)) + 12|0);
        $618 = ((($613)) + 4|0);
        $619 = HEAP32[$617>>2]|0;
        $620 = ((($613)) + 12|0);
        HEAP32[$620>>2] = $619;
        $621 = HEAP32[$14>>2]|0;
        HEAP32[$613>>2] = $621;
        $622 = ((($14)) + 4|0);
        $623 = HEAP32[$622>>2]|0;
        HEAP32[$618>>2] = $623;
        $624 = ((($14)) + 8|0);
        $625 = HEAP32[$624>>2]|0;
        $626 = ((($613)) + 8|0);
        HEAP32[$626>>2] = $625;
        HEAP32[$624>>2] = 0;
        HEAP32[$622>>2] = 0;
        HEAP32[$14>>2] = 0;
        $627 = HEAP32[$612>>2]|0;
        $628 = ((($627)) + 16|0);
        HEAP32[$612>>2] = $628;
       } else {
        $629 = ((($db)) + 28|0);
        $630 = HEAP32[$608>>2]|0;
        $631 = $613;
        $632 = $630;
        $633 = (($631) - ($632))|0;
        $634 = $633 >> 4;
        $635 = (($634) + 1)|0;
        $636 = ($633|0)<(-16);
        if ($636) {
         __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($608);
         // unreachable;
        }
        $637 = $615;
        $638 = (($637) - ($632))|0;
        $639 = $638 >> 4;
        $640 = ($639>>>0)<(1073741823);
        if ($640) {
         $641 = $638 >> 3;
         $642 = ($641>>>0)<($635>>>0);
         $643 = $642 ? $635 : $641;
         $$0$i$i$i = $643;
        } else {
         $$0$i$i$i = 2147483647;
        }
        __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i51$i,$$0$i$i$i,$634,$629);
        $644 = ((($__v$i$i51$i)) + 8|0);
        $645 = HEAP32[$644>>2]|0;
        $646 = ((($14)) + 12|0);
        $647 = ((($645)) + 4|0);
        $648 = HEAP32[$646>>2]|0;
        $649 = ((($645)) + 12|0);
        HEAP32[$649>>2] = $648;
        $650 = HEAP32[$14>>2]|0;
        HEAP32[$645>>2] = $650;
        $651 = ((($14)) + 4|0);
        $652 = HEAP32[$651>>2]|0;
        HEAP32[$647>>2] = $652;
        $653 = ((($14)) + 8|0);
        $654 = HEAP32[$653>>2]|0;
        $655 = ((($645)) + 8|0);
        HEAP32[$655>>2] = $654;
        HEAP32[$653>>2] = 0;
        HEAP32[$651>>2] = 0;
        HEAP32[$14>>2] = 0;
        $656 = ((($645)) + 16|0);
        HEAP32[$644>>2] = $656;
        __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($608,$__v$i$i51$i);
        __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i51$i);
       }
       __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($14);
       $657 = (__ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($$0$i,$last,$db)|0);
       $658 = ($657|0)==($$0$i|0);
       if ($658) {
        $$02 = $first;
        break L1;
       }
       $659 = HEAP32[$605>>2]|0;
       $660 = HEAP32[$db>>2]|0;
       $661 = $659;
       $662 = $660;
       $663 = (($661) - ($662))|0;
       $664 = (($663|0) / 24)&-1;
       $665 = ($664>>>0)<(2);
       if ($665) {
        $$02 = $first;
        break L1;
       }
       $666 = ((($659)) + -24|0);
       __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($tmp,$666);
       $667 = HEAP32[$605>>2]|0;
       $668 = ((($667)) + -24|0);
       $670 = $667;
       while(1) {
        $669 = ((($670)) + -24|0);
        HEAP32[$605>>2] = $669;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($669);
        $$pre$i = HEAP32[$605>>2]|0;
        $671 = ($$pre$i|0)==($668|0);
        if ($671) {
         break;
        } else {
         $670 = $$pre$i;
        }
       }
       $672 = ((($667)) + -48|0);
       $673 = HEAP8[$tmp>>0]|0;
       $674 = $673 & 1;
       $675 = ($674<<24>>24)==(0);
       $676 = ((($tmp)) + 8|0);
       $677 = HEAP32[$676>>2]|0;
       $678 = ((($tmp)) + 1|0);
       $679 = $675 ? $678 : $677;
       $680 = ((($tmp)) + 4|0);
       $681 = HEAP32[$680>>2]|0;
       $682 = $673&255;
       $683 = $682 >>> 1;
       $684 = $675 ? $683 : $681;
       (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($672,$679,$684)|0);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($tmp);
       $$02 = $657;
       break L1;
      }
     }
    } while(0);
    $685 = (__ZN10__cxxabiv112_GLOBAL__N_118parse_substitutionINS0_2DbEEEPKcS4_S4_RT_($$first,$last,$db)|0);
    $686 = ($685|0)==($$first|0);
    $687 = ($685|0)==($last|0);
    $or$cond = $686 | $687;
    if ($or$cond) {
     $$02 = $first;
     break L1;
    }
    $688 = HEAP8[$685>>0]|0;
    $689 = ($688<<24>>24)==(73);
    if (!($689)) {
     $$02 = $first;
     break L1;
    }
    $690 = (__ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($685,$last,$db)|0);
    $691 = ($690|0)==($685|0);
    if ($691) {
     $$02 = $first;
     break L1;
    }
    $692 = ((($db)) + 4|0);
    $693 = HEAP32[$692>>2]|0;
    $694 = HEAP32[$db>>2]|0;
    $695 = $693;
    $696 = $694;
    $697 = (($695) - ($696))|0;
    $698 = (($697|0) / 24)&-1;
    $699 = ($698>>>0)<(2);
    if ($699) {
     $$02 = $first;
     break L1;
    }
    $700 = ((($693)) + -24|0);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($tmp3,$700);
    $701 = HEAP32[$692>>2]|0;
    $702 = ((($701)) + -24|0);
    $704 = $701;
    while(1) {
     $703 = ((($704)) + -24|0);
     HEAP32[$692>>2] = $703;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($703);
     $$pre$i6 = HEAP32[$692>>2]|0;
     $705 = ($$pre$i6|0)==($702|0);
     if ($705) {
      break;
     } else {
      $704 = $$pre$i6;
     }
    }
    $706 = ((($701)) + -48|0);
    $707 = HEAP8[$tmp3>>0]|0;
    $708 = $707 & 1;
    $709 = ($708<<24>>24)==(0);
    $710 = ((($tmp3)) + 8|0);
    $711 = HEAP32[$710>>2]|0;
    $712 = ((($tmp3)) + 1|0);
    $713 = $709 ? $712 : $711;
    $714 = ((($tmp3)) + 4|0);
    $715 = HEAP32[$714>>2]|0;
    $716 = $707&255;
    $717 = $716 >>> 1;
    $718 = $709 ? $717 : $715;
    (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($706,$713,$718)|0);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($tmp3);
    $$02 = $690;
    break L1;
   }
   }
  } else {
   $$02 = $first;
  }
 } while(0);
 STACKTOP = sp;return ($$02|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_118parse_substitutionINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db) {
 $first = $first|0;
 $last = $last|0;
 $db = $db|0;
 var $$0 = 0, $$0$i$i$i = 0, $$0$i$i$i12 = 0, $$0$i$i$i17 = 0, $$0$i$i$i22 = 0, $$0$i$i$i27 = 0, $$0$i$i$i32 = 0, $$0$i$i$i37 = 0, $$0$i$i$i40 = 0, $$lcssa98 = 0, $$pn = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
 var $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0;
 var $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0;
 var $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0;
 var $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0;
 var $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0;
 var $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__v$i$i38 = 0, $isdigit = 0, $isdigit10 = 0, $isdigit6 = 0, $isdigit8 = 0, $isdigittmp = 0, $isdigittmp5 = 0, $isdigittmp7 = 0, $isdigittmp9 = 0, $sub$0 = 0, $sub$179 = 0, $sub$179$lcssa = 0, $sub$2 = 0, $t$080 = 0;
 var $t$080$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__v$i$i38 = sp + 144|0;
 $0 = sp;
 $1 = sp + 24|0;
 $2 = sp + 48|0;
 $3 = sp + 72|0;
 $4 = sp + 96|0;
 $5 = sp + 120|0;
 $6 = $last;
 $7 = $first;
 $8 = (($6) - ($7))|0;
 $9 = ($8|0)>(1);
 L1: do {
  if ($9) {
   $10 = HEAP8[$first>>0]|0;
   $11 = ($10<<24>>24)==(83);
   if ($11) {
    $12 = ((($first)) + 1|0);
    $13 = HEAP8[$12>>0]|0;
    $14 = $13 << 24 >> 24;
    switch ($14|0) {
    case 97:  {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj15EEERAT__Kc($0,1705);
     $15 = ((($db)) + 4|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ((($db)) + 8|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = ($16>>>0)<($18>>>0);
     if ($19) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($16,$0);
      $20 = HEAP32[$15>>2]|0;
      $21 = ((($20)) + 24|0);
      HEAP32[$15>>2] = $21;
     } else {
      $22 = ((($db)) + 12|0);
      $23 = HEAP32[$db>>2]|0;
      $24 = $16;
      $25 = $23;
      $26 = (($24) - ($25))|0;
      $27 = (($26|0) / 24)&-1;
      $28 = (($27) + 1)|0;
      $29 = ($26|0)<(-24);
      if ($29) {
       __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
       // unreachable;
      }
      $30 = $18;
      $31 = (($30) - ($25))|0;
      $32 = (($31|0) / 24)&-1;
      $33 = ($32>>>0)<(1073741823);
      if ($33) {
       $34 = $32 << 1;
       $35 = ($34>>>0)<($28>>>0);
       $36 = $35 ? $28 : $34;
       $$0$i$i$i = $36;
      } else {
       $$0$i$i$i = 2147483647;
      }
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i38,$$0$i$i$i,$27,$22);
      $37 = ((($__v$i$i38)) + 8|0);
      $38 = HEAP32[$37>>2]|0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($38,$0);
      $39 = ((($38)) + 24|0);
      HEAP32[$37>>2] = $39;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i38);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i38);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($0);
     $40 = ((($first)) + 2|0);
     $$0 = $40;
     break L1;
     break;
    }
    case 98:  {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj18EEERAT__Kc($1,1720);
     $41 = ((($db)) + 4|0);
     $42 = HEAP32[$41>>2]|0;
     $43 = ((($db)) + 8|0);
     $44 = HEAP32[$43>>2]|0;
     $45 = ($42>>>0)<($44>>>0);
     if ($45) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($42,$1);
      $46 = HEAP32[$41>>2]|0;
      $47 = ((($46)) + 24|0);
      HEAP32[$41>>2] = $47;
     } else {
      $48 = ((($db)) + 12|0);
      $49 = HEAP32[$db>>2]|0;
      $50 = $42;
      $51 = $49;
      $52 = (($50) - ($51))|0;
      $53 = (($52|0) / 24)&-1;
      $54 = (($53) + 1)|0;
      $55 = ($52|0)<(-24);
      if ($55) {
       __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
       // unreachable;
      }
      $56 = $44;
      $57 = (($56) - ($51))|0;
      $58 = (($57|0) / 24)&-1;
      $59 = ($58>>>0)<(1073741823);
      if ($59) {
       $60 = $58 << 1;
       $61 = ($60>>>0)<($54>>>0);
       $62 = $61 ? $54 : $60;
       $$0$i$i$i12 = $62;
      } else {
       $$0$i$i$i12 = 2147483647;
      }
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i38,$$0$i$i$i12,$53,$48);
      $63 = ((($__v$i$i38)) + 8|0);
      $64 = HEAP32[$63>>2]|0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($64,$1);
      $65 = ((($64)) + 24|0);
      HEAP32[$63>>2] = $65;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i38);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i38);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1);
     $66 = ((($first)) + 2|0);
     $$0 = $66;
     break L1;
     break;
    }
    case 115:  {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj12EEERAT__Kc($2,1738);
     $67 = ((($db)) + 4|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = ((($db)) + 8|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = ($68>>>0)<($70>>>0);
     if ($71) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($68,$2);
      $72 = HEAP32[$67>>2]|0;
      $73 = ((($72)) + 24|0);
      HEAP32[$67>>2] = $73;
     } else {
      $74 = ((($db)) + 12|0);
      $75 = HEAP32[$db>>2]|0;
      $76 = $68;
      $77 = $75;
      $78 = (($76) - ($77))|0;
      $79 = (($78|0) / 24)&-1;
      $80 = (($79) + 1)|0;
      $81 = ($78|0)<(-24);
      if ($81) {
       __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
       // unreachable;
      }
      $82 = $70;
      $83 = (($82) - ($77))|0;
      $84 = (($83|0) / 24)&-1;
      $85 = ($84>>>0)<(1073741823);
      if ($85) {
       $86 = $84 << 1;
       $87 = ($86>>>0)<($80>>>0);
       $88 = $87 ? $80 : $86;
       $$0$i$i$i17 = $88;
      } else {
       $$0$i$i$i17 = 2147483647;
      }
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i38,$$0$i$i$i17,$79,$74);
      $89 = ((($__v$i$i38)) + 8|0);
      $90 = HEAP32[$89>>2]|0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($90,$2);
      $91 = ((($90)) + 24|0);
      HEAP32[$89>>2] = $91;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i38);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i38);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($2);
     $92 = ((($first)) + 2|0);
     $$0 = $92;
     break L1;
     break;
    }
    case 105:  {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj13EEERAT__Kc($3,1750);
     $93 = ((($db)) + 4|0);
     $94 = HEAP32[$93>>2]|0;
     $95 = ((($db)) + 8|0);
     $96 = HEAP32[$95>>2]|0;
     $97 = ($94>>>0)<($96>>>0);
     if ($97) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($94,$3);
      $98 = HEAP32[$93>>2]|0;
      $99 = ((($98)) + 24|0);
      HEAP32[$93>>2] = $99;
     } else {
      $100 = ((($db)) + 12|0);
      $101 = HEAP32[$db>>2]|0;
      $102 = $94;
      $103 = $101;
      $104 = (($102) - ($103))|0;
      $105 = (($104|0) / 24)&-1;
      $106 = (($105) + 1)|0;
      $107 = ($104|0)<(-24);
      if ($107) {
       __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
       // unreachable;
      }
      $108 = $96;
      $109 = (($108) - ($103))|0;
      $110 = (($109|0) / 24)&-1;
      $111 = ($110>>>0)<(1073741823);
      if ($111) {
       $112 = $110 << 1;
       $113 = ($112>>>0)<($106>>>0);
       $114 = $113 ? $106 : $112;
       $$0$i$i$i22 = $114;
      } else {
       $$0$i$i$i22 = 2147483647;
      }
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i38,$$0$i$i$i22,$105,$100);
      $115 = ((($__v$i$i38)) + 8|0);
      $116 = HEAP32[$115>>2]|0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($116,$3);
      $117 = ((($116)) + 24|0);
      HEAP32[$115>>2] = $117;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i38);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i38);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $118 = ((($first)) + 2|0);
     $$0 = $118;
     break L1;
     break;
    }
    case 111:  {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj13EEERAT__Kc($4,1763);
     $119 = ((($db)) + 4|0);
     $120 = HEAP32[$119>>2]|0;
     $121 = ((($db)) + 8|0);
     $122 = HEAP32[$121>>2]|0;
     $123 = ($120>>>0)<($122>>>0);
     if ($123) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($120,$4);
      $124 = HEAP32[$119>>2]|0;
      $125 = ((($124)) + 24|0);
      HEAP32[$119>>2] = $125;
     } else {
      $126 = ((($db)) + 12|0);
      $127 = HEAP32[$db>>2]|0;
      $128 = $120;
      $129 = $127;
      $130 = (($128) - ($129))|0;
      $131 = (($130|0) / 24)&-1;
      $132 = (($131) + 1)|0;
      $133 = ($130|0)<(-24);
      if ($133) {
       __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
       // unreachable;
      }
      $134 = $122;
      $135 = (($134) - ($129))|0;
      $136 = (($135|0) / 24)&-1;
      $137 = ($136>>>0)<(1073741823);
      if ($137) {
       $138 = $136 << 1;
       $139 = ($138>>>0)<($132>>>0);
       $140 = $139 ? $132 : $138;
       $$0$i$i$i27 = $140;
      } else {
       $$0$i$i$i27 = 2147483647;
      }
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i38,$$0$i$i$i27,$131,$126);
      $141 = ((($__v$i$i38)) + 8|0);
      $142 = HEAP32[$141>>2]|0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($142,$4);
      $143 = ((($142)) + 24|0);
      HEAP32[$141>>2] = $143;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i38);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i38);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($4);
     $144 = ((($first)) + 2|0);
     $$0 = $144;
     break L1;
     break;
    }
    case 100:  {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj14EEERAT__Kc($5,1776);
     $145 = ((($db)) + 4|0);
     $146 = HEAP32[$145>>2]|0;
     $147 = ((($db)) + 8|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = ($146>>>0)<($148>>>0);
     if ($149) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($146,$5);
      $150 = HEAP32[$145>>2]|0;
      $151 = ((($150)) + 24|0);
      HEAP32[$145>>2] = $151;
     } else {
      $152 = ((($db)) + 12|0);
      $153 = HEAP32[$db>>2]|0;
      $154 = $146;
      $155 = $153;
      $156 = (($154) - ($155))|0;
      $157 = (($156|0) / 24)&-1;
      $158 = (($157) + 1)|0;
      $159 = ($156|0)<(-24);
      if ($159) {
       __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
       // unreachable;
      }
      $160 = $148;
      $161 = (($160) - ($155))|0;
      $162 = (($161|0) / 24)&-1;
      $163 = ($162>>>0)<(1073741823);
      if ($163) {
       $164 = $162 << 1;
       $165 = ($164>>>0)<($158>>>0);
       $166 = $165 ? $158 : $164;
       $$0$i$i$i32 = $166;
      } else {
       $$0$i$i$i32 = 2147483647;
      }
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i38,$$0$i$i$i32,$157,$152);
      $167 = ((($__v$i$i38)) + 8|0);
      $168 = HEAP32[$167>>2]|0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($168,$5);
      $169 = ((($168)) + 24|0);
      HEAP32[$167>>2] = $169;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i38);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i38);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($5);
     $170 = ((($first)) + 2|0);
     $$0 = $170;
     break L1;
     break;
    }
    case 95:  {
     $171 = ((($db)) + 16|0);
     $172 = HEAP32[$171>>2]|0;
     $173 = ((($db)) + 20|0);
     $174 = HEAP32[$173>>2]|0;
     $175 = ($172|0)==($174|0);
     if ($175) {
      $$0 = $first;
      break L1;
     }
     $176 = HEAP32[$172>>2]|0;
     $177 = ((($172)) + 4|0);
     $178 = HEAP32[$177>>2]|0;
     $179 = ((($db)) + 4|0);
     $180 = ((($db)) + 8|0);
     $181 = ((($db)) + 12|0);
     $182 = ((($__v$i$i38)) + 8|0);
     $183 = ($176|0)==($178|0);
     L100: do {
      if (!($183)) {
       $187 = $176;
       while(1) {
        $184 = HEAP32[$179>>2]|0;
        $185 = HEAP32[$180>>2]|0;
        $186 = ($184|0)==($185|0);
        if ($186) {
         $192 = HEAP32[$db>>2]|0;
         $193 = $184;
         $194 = $192;
         $195 = (($193) - ($194))|0;
         $196 = (($195|0) / 24)&-1;
         $197 = (($196) + 1)|0;
         $198 = ($195|0)<(-24);
         if ($198) {
          break;
         }
         $199 = ($196>>>0)<(1073741823);
         if ($199) {
          $200 = $196 << 1;
          $201 = ($200>>>0)<($197>>>0);
          $202 = $201 ? $197 : $200;
          $$0$i$i$i37 = $202;
         } else {
          $$0$i$i$i37 = 2147483647;
         }
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i38,$$0$i$i$i37,$196,$181);
         $203 = HEAP32[$182>>2]|0;
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($203,$187);
         $204 = ((($203)) + 12|0);
         $205 = ((($187)) + 12|0);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($204,$205);
         $206 = ((($203)) + 24|0);
         HEAP32[$182>>2] = $206;
         __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i38);
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i38);
        } else {
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($184,$187);
         $188 = ((($184)) + 12|0);
         $189 = ((($187)) + 12|0);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($188,$189);
         $190 = HEAP32[$179>>2]|0;
         $191 = ((($190)) + 24|0);
         HEAP32[$179>>2] = $191;
        }
        $207 = ((($187)) + 24|0);
        $208 = ($207|0)==($178|0);
        if ($208) {
         break L100;
        } else {
         $187 = $207;
        }
       }
       __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
       // unreachable;
      }
     } while(0);
     $209 = ((($first)) + 2|0);
     $$0 = $209;
     break L1;
     break;
    }
    default: {
     $isdigittmp = (($14) + -48)|0;
     $isdigit = ($isdigittmp>>>0)<(10);
     if ($isdigit) {
      $213 = $13;
     } else {
      $210 = (_isupper($14)|0);
      $211 = ($210|0)==(0);
      if ($211) {
       $$0 = $first;
       break L1;
      }
      $$pre = HEAP8[$12>>0]|0;
      $213 = $$pre;
     }
     $212 = $213 << 24 >> 24;
     $isdigittmp5 = (($212) + -48)|0;
     $214 = ((($first)) + 2|0);
     $215 = ($214|0)==($last|0);
     if ($215) {
      $$0 = $first;
      break L1;
     }
     $isdigit6 = ($isdigittmp5>>>0)<(10);
     $216 = (($212) + -55)|0;
     $sub$0 = $isdigit6 ? $isdigittmp5 : $216;
     $sub$179 = $sub$0;$t$080 = $214;
     while(1) {
      $217 = HEAP8[$t$080>>0]|0;
      $218 = $217 << 24 >> 24;
      $isdigittmp7 = (($218) + -48)|0;
      $isdigit8 = ($isdigittmp7>>>0)<(10);
      if ($isdigit8) {
       $224 = $217;
      } else {
       $219 = (_isupper($218)|0);
       $220 = ($219|0)==(0);
       $221 = HEAP8[$t$080>>0]|0;
       if ($220) {
        $$lcssa98 = $221;$sub$179$lcssa = $sub$179;$t$080$lcssa = $t$080;
        break;
       } else {
        $224 = $221;
       }
      }
      $222 = ($sub$179*36)|0;
      $223 = $224 << 24 >> 24;
      $isdigittmp9 = (($223) + -48)|0;
      $isdigit10 = ($isdigittmp9>>>0)<(10);
      $225 = (($223) + -55)|0;
      $$pn = $isdigit10 ? $isdigittmp9 : $225;
      $sub$2 = (($$pn) + ($222))|0;
      $226 = ((($t$080)) + 1|0);
      $227 = ($226|0)==($last|0);
      if ($227) {
       $$0 = $first;
       break L1;
      } else {
       $sub$179 = $sub$2;$t$080 = $226;
      }
     }
     $228 = ($$lcssa98<<24>>24)==(95);
     if (!($228)) {
      $$0 = $first;
      break L1;
     }
     $229 = (($sub$179$lcssa) + 1)|0;
     $230 = ((($db)) + 20|0);
     $231 = HEAP32[$230>>2]|0;
     $232 = ((($db)) + 16|0);
     $233 = HEAP32[$232>>2]|0;
     $234 = $231;
     $235 = $233;
     $236 = (($234) - ($235))|0;
     $237 = $236 >> 4;
     $238 = ($229>>>0)<($237>>>0);
     if (!($238)) {
      $$0 = $first;
      break L1;
     }
     $239 = (($233) + ($229<<4)|0);
     $240 = HEAP32[$239>>2]|0;
     $241 = (((($233) + ($229<<4)|0)) + 4|0);
     $242 = HEAP32[$241>>2]|0;
     $243 = ((($db)) + 4|0);
     $244 = ((($db)) + 8|0);
     $245 = ((($db)) + 12|0);
     $246 = ((($__v$i$i38)) + 8|0);
     $247 = ($240|0)==($242|0);
     L19: do {
      if (!($247)) {
       $251 = $240;
       while(1) {
        $248 = HEAP32[$243>>2]|0;
        $249 = HEAP32[$244>>2]|0;
        $250 = ($248|0)==($249|0);
        if ($250) {
         $256 = HEAP32[$db>>2]|0;
         $257 = $248;
         $258 = $256;
         $259 = (($257) - ($258))|0;
         $260 = (($259|0) / 24)&-1;
         $261 = (($260) + 1)|0;
         $262 = ($259|0)<(-24);
         if ($262) {
          break;
         }
         $263 = ($260>>>0)<(1073741823);
         if ($263) {
          $264 = $260 << 1;
          $265 = ($264>>>0)<($261>>>0);
          $266 = $265 ? $261 : $264;
          $$0$i$i$i40 = $266;
         } else {
          $$0$i$i$i40 = 2147483647;
         }
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i38,$$0$i$i$i40,$260,$245);
         $267 = HEAP32[$246>>2]|0;
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($267,$251);
         $268 = ((($267)) + 12|0);
         $269 = ((($251)) + 12|0);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($268,$269);
         $270 = ((($267)) + 24|0);
         HEAP32[$246>>2] = $270;
         __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i38);
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i38);
        } else {
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($248,$251);
         $252 = ((($248)) + 12|0);
         $253 = ((($251)) + 12|0);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($252,$253);
         $254 = HEAP32[$243>>2]|0;
         $255 = ((($254)) + 24|0);
         HEAP32[$243>>2] = $255;
        }
        $271 = ((($251)) + 24|0);
        $272 = ($271|0)==($242|0);
        if ($272) {
         break L19;
        } else {
         $251 = $271;
        }
       }
       __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
       // unreachable;
      }
     } while(0);
     $273 = ((($t$080$lcssa)) + 1|0);
     $$0 = $273;
     break L1;
    }
    }
   } else {
    $$0 = $first;
   }
  } else {
   $$0 = $first;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_114parse_decltypeINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db) {
 $first = $first|0;
 $last = $last|0;
 $db = $db|0;
 var $$03 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 40|0;
 $1 = sp;
 $2 = sp + 12|0;
 $3 = sp + 24|0;
 $4 = $last;
 $5 = $first;
 $6 = (($4) - ($5))|0;
 $7 = ($6|0)>(3);
 L1: do {
  if ($7) {
   $8 = HEAP8[$first>>0]|0;
   $9 = ($8<<24>>24)==(68);
   if ($9) {
    $10 = ((($first)) + 1|0);
    $11 = HEAP8[$10>>0]|0;
    $12 = $11 << 24 >> 24;
    switch ($12|0) {
    case 84: case 116:  {
     break;
    }
    default: {
     $$03 = $first;
     break L1;
    }
    }
    $13 = ((($first)) + 2|0);
    $14 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($13,$last,$db)|0);
    $15 = ($14|0)==($13|0);
    $16 = ($14|0)==($last|0);
    $or$cond = $15 | $16;
    if ($or$cond) {
     $$03 = $first;
    } else {
     $17 = HEAP8[$14>>0]|0;
     $18 = ($17<<24>>24)==(69);
     if ($18) {
      $19 = HEAP32[$db>>2]|0;
      $20 = ((($db)) + 4|0);
      $21 = HEAP32[$20>>2]|0;
      $22 = ($19|0)==($21|0);
      if ($22) {
       $$03 = $first;
      } else {
       $23 = ((($21)) + -24|0);
       __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3,$23);
       $24 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($3,0,1695)|0);
       ;HEAP32[$2>>2]=HEAP32[$24>>2]|0;HEAP32[$2+4>>2]=HEAP32[$24+4>>2]|0;HEAP32[$2+8>>2]=HEAP32[$24+8>>2]|0;
       HEAP32[$24>>2] = 0;
       $25 = ((($24)) + 4|0);
       HEAP32[$25>>2] = 0;
       $26 = ((($24)) + 8|0);
       HEAP32[$26>>2] = 0;
       $27 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($2,1511)|0);
       ;HEAP32[$1>>2]=HEAP32[$27>>2]|0;HEAP32[$1+4>>2]=HEAP32[$27+4>>2]|0;HEAP32[$1+8>>2]=HEAP32[$27+8>>2]|0;
       HEAP32[$27>>2] = 0;
       $28 = ((($27)) + 4|0);
       HEAP32[$28>>2] = 0;
       $29 = ((($27)) + 8|0);
       HEAP32[$29>>2] = 0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($0,$1);
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($23,$0);
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($0);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($1);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($2);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
       $30 = ((($14)) + 1|0);
       $$03 = $30;
      }
     } else {
      $$03 = $first;
     }
    }
   } else {
    $$03 = $first;
   }
  } else {
   $$03 = $first;
  }
 } while(0);
 STACKTOP = sp;return ($$03|0);
}
function __ZNSt3__1plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($agg$result,$__lhs,$__rhs) {
 $agg$result = $agg$result|0;
 $__lhs = $__lhs|0;
 $__rhs = $__rhs|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 HEAP32[$agg$result>>2] = 0;
 $0 = ((($agg$result)) + 4|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($agg$result)) + 8|0);
 HEAP32[$1>>2] = 0;
 $2 = (_strlen(($__lhs|0))|0);
 $3 = HEAP8[$__rhs>>0]|0;
 $4 = $3 & 1;
 $5 = ($4<<24>>24)==(0);
 $6 = ((($__rhs)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $3&255;
 $9 = $8 >>> 1;
 $10 = $5 ? $9 : $7;
 $11 = (($10) + ($2))|0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcjj($agg$result,$__lhs,$2,$11);
 $12 = HEAP8[$__rhs>>0]|0;
 $13 = $12 & 1;
 $14 = ($13<<24>>24)==(0);
 $15 = ((($__rhs)) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ((($__rhs)) + 1|0);
 $18 = $14 ? $17 : $16;
 (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($agg$result,$18,$10)|0);
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcjj($this,$__s,$__sz,$__reserve) {
 $this = $this|0;
 $__s = $__s|0;
 $__sz = $__sz|0;
 $__reserve = $__reserve|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__reserve>>>0)>(4294967279);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $1 = ($__reserve>>>0)<(11);
 if ($1) {
  $2 = $__sz << 1;
  $3 = $2&255;
  HEAP8[$this>>0] = $3;
  $4 = ((($this)) + 1|0);
  $__p$0 = $4;
 } else {
  $5 = (($__reserve) + 16)|0;
  $6 = $5 & -16;
  $7 = (_malloc($6)|0);
  $8 = ((($this)) + 8|0);
  HEAP32[$8>>2] = $7;
  $9 = $6 | 1;
  HEAP32[$this>>2] = $9;
  $10 = ((($this)) + 4|0);
  HEAP32[$10>>2] = $__sz;
  $__p$0 = $7;
 }
 _memcpy(($__p$0|0),($__s|0),($__sz|0))|0;
 $11 = (($__p$0) + ($__sz)|0);
 HEAP8[$11>>0] = 0;
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj15EEERAT__Kc($this,$s) {
 $this = $this|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($this,$s,14);
 $0 = ((($this)) + 12|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($0)) + 4|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($0)) + 8|0);
 HEAP32[$2>>2] = 0;
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj18EEERAT__Kc($this,$s) {
 $this = $this|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($this,$s,17);
 $0 = ((($this)) + 12|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($0)) + 4|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($0)) + 8|0);
 HEAP32[$2>>2] = 0;
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj12EEERAT__Kc($this,$s) {
 $this = $this|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($this,$s,11);
 $0 = ((($this)) + 12|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($0)) + 4|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($0)) + 8|0);
 HEAP32[$2>>2] = 0;
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj13EEERAT__Kc($this,$s) {
 $this = $this|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($this,$s,12);
 $0 = ((($this)) + 12|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($0)) + 4|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($0)) + 8|0);
 HEAP32[$2>>2] = 0;
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj14EEERAT__Kc($this,$s) {
 $this = $this|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($this,$s,13);
 $0 = ((($this)) + 12|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($0)) + 4|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($0)) + 8|0);
 HEAP32[$2>>2] = 0;
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6assignEPKcj($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $6 = 10;$9 = $0;
 } else {
  $3 = HEAP32[$this>>2]|0;
  $4 = $3 & -2;
  $phitmp$i = (($4) + -1)|0;
  $5 = $3&255;
  $6 = $phitmp$i;$9 = $5;
 }
 $7 = ($6>>>0)<($__n>>>0);
 $8 = $9 & 1;
 $10 = ($8<<24>>24)==(0);
 do {
  if ($7) {
   if ($10) {
    $24 = $9&255;
    $25 = $24 >>> 1;
    $27 = $25;
   } else {
    $22 = ((($this)) + 4|0);
    $23 = HEAP32[$22>>2]|0;
    $27 = $23;
   }
   $26 = (($__n) - ($6))|0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$6,$26,$27,0,$27,$__n,$__s);
  } else {
   if ($10) {
    $13 = ((($this)) + 1|0);
    $14 = $13;
   } else {
    $11 = ((($this)) + 8|0);
    $12 = HEAP32[$11>>2]|0;
    $14 = $12;
   }
   _memmove(($14|0),($__s|0),($__n|0))|0;
   $15 = (($14) + ($__n)|0);
   HEAP8[$15>>0] = 0;
   $16 = HEAP8[$this>>0]|0;
   $17 = $16 & 1;
   $18 = ($17<<24>>24)==(0);
   if ($18) {
    $20 = $__n << 1;
    $21 = $20&255;
    HEAP8[$this>>0] = $21;
    break;
   } else {
    $19 = ((($this)) + 4|0);
    HEAP32[$19>>2] = $__n;
    break;
   }
  }
 } while(0);
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEaSERKS7_($this,$__str) {
 $this = $this|0;
 $__str = $__str|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($this|0)==($__str|0);
 if (!($0)) {
  $1 = HEAP8[$__str>>0]|0;
  $2 = $1 & 1;
  $3 = ($2<<24>>24)==(0);
  $4 = ((($__str)) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($__str)) + 1|0);
  $7 = $3 ? $6 : $5;
  $8 = ((($__str)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $1&255;
  $11 = $10 >>> 1;
  $12 = $3 ? $11 : $9;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6assignEPKcj($this,$7,$12);
 }
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_122parse_unqualified_nameINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db) {
 $first = $first|0;
 $last = $last|0;
 $db = $db|0;
 var $$0 = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i6 = 0, $$0$i$i$i18$i = 0, $$0$i$i$i7$i = 0, $$0$i$i49 = 0, $$03$i = 0, $$1$i9 = 0, $$lcssa = 0, $$ph26 = 0, $$pre$i$i = 0, $$pre$i$i$i$i = 0, $$pre$i15$i = 0, $$pre$i22$i = 0, $$pre$i24$i = 0, $$pre$i27$i = 0, $$pre$i31$i = 0, $$pre$i33$i = 0, $$pre$i35$i = 0, $$sum$i$i = 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $__p$0$i$i = 0, $__p$1$i$i48 = 0, $__v$i$i17$i = 0, $isdigit$i = 0, $isdigit11$i = 0, $isdigit13$i = 0, $isdigit9$i = 0, $isdigittmp$i = 0, $isdigittmp10$i = 0, $isdigittmp12$i = 0, $isdigittmp8$i = 0, $or$cond = 0, $or$cond$i$i$i$i$i$i = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i$i$i$i$i = 0, $phitmp$i2$i$i$i$i$i$i = 0, $t0$0$i = 0;
 var $t01$0$i = 0, $t01$0$i$lcssa67 = 0, $t01$1$i = 0, $t01$2$i = 0, $t1$0$i$lcssa = 0, $t1$0$i45 = 0, $t13$0$i$lcssa = 0, $t13$0$i51 = 0, $tmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__v$i$i17$i = sp + 100|0;
 $0 = sp;
 $1 = sp + 24|0;
 $2 = sp + 40|0;
 $3 = sp + 64|0;
 $tmp$i = sp + 76|0;
 $4 = sp + 88|0;
 $5 = ($first|0)==($last|0);
 L1: do {
  if ($5) {
   $$0 = $first;
  } else {
   $6 = HEAP8[$first>>0]|0;
   $7 = $6 << 24 >> 24;
   switch ($7|0) {
   case 68: case 67:  {
    $8 = $last;
    $9 = $first;
    $10 = (($8) - ($9))|0;
    $11 = ($10|0)>(1);
    L6: do {
     if ($11) {
      $12 = HEAP32[$db>>2]|0;
      $13 = ((($db)) + 4|0);
      $14 = HEAP32[$13>>2]|0;
      $15 = ($12|0)==($14|0);
      if ($15) {
       $$03$i = $first;
      } else {
       switch ($7|0) {
       case 67:  {
        $16 = ((($first)) + 1|0);
        $17 = HEAP8[$16>>0]|0;
        $18 = $17 << 24 >> 24;
        switch ($18|0) {
        case 53: case 51: case 50: case 49:  {
         break;
        }
        default: {
         $$03$i = $first;
         break L6;
        }
        }
        $19 = ((($14)) + -24|0);
        __ZN10__cxxabiv112_GLOBAL__N_19base_nameINSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEEEET_RS9_($1,$19);
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($0,$1);
        $20 = HEAP32[$13>>2]|0;
        $21 = ((($db)) + 8|0);
        $22 = HEAP32[$21>>2]|0;
        $23 = ($20>>>0)<($22>>>0);
        if ($23) {
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($20,$0);
         $24 = HEAP32[$13>>2]|0;
         $25 = ((($24)) + 24|0);
         HEAP32[$13>>2] = $25;
        } else {
         $26 = ((($db)) + 12|0);
         $27 = HEAP32[$db>>2]|0;
         $28 = $20;
         $29 = $27;
         $30 = (($28) - ($29))|0;
         $31 = (($30|0) / 24)&-1;
         $32 = (($31) + 1)|0;
         $33 = ($30|0)<(-24);
         if ($33) {
          __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
          // unreachable;
         }
         $34 = $22;
         $35 = (($34) - ($29))|0;
         $36 = (($35|0) / 24)&-1;
         $37 = ($36>>>0)<(1073741823);
         if ($37) {
          $38 = $36 << 1;
          $39 = ($38>>>0)<($32>>>0);
          $40 = $39 ? $32 : $38;
          $$0$i$i$i$i = $40;
         } else {
          $$0$i$i$i$i = 2147483647;
         }
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i17$i,$$0$i$i$i$i,$31,$26);
         $41 = ((($__v$i$i17$i)) + 8|0);
         $42 = HEAP32[$41>>2]|0;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($42,$0);
         $43 = ((($42)) + 24|0);
         HEAP32[$41>>2] = $43;
         __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i17$i);
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i17$i);
        }
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($0);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($1);
        $44 = ((($first)) + 2|0);
        $45 = ((($db)) + 60|0);
        HEAP8[$45>>0] = 1;
        $$03$i = $44;
        break L6;
        break;
       }
       case 68:  {
        $46 = ((($first)) + 1|0);
        $47 = HEAP8[$46>>0]|0;
        $48 = $47 << 24 >> 24;
        switch ($48|0) {
        case 53: case 50: case 49: case 48:  {
         break;
        }
        default: {
         $$03$i = $first;
         break L6;
        }
        }
        $49 = ((($14)) + -24|0);
        __ZN10__cxxabiv112_GLOBAL__N_19base_nameINSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEEEET_RS9_($tmp$i,$49);
        $50 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($tmp$i,0,1820)|0);
        ;HEAP32[$3>>2]=HEAP32[$50>>2]|0;HEAP32[$3+4>>2]=HEAP32[$50+4>>2]|0;HEAP32[$3+8>>2]=HEAP32[$50+8>>2]|0;
        HEAP32[$50>>2] = 0;
        $51 = ((($50)) + 4|0);
        HEAP32[$51>>2] = 0;
        $52 = ((($50)) + 8|0);
        HEAP32[$52>>2] = 0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($2,$3);
        $53 = HEAP32[$13>>2]|0;
        $54 = ((($db)) + 8|0);
        $55 = HEAP32[$54>>2]|0;
        $56 = ($53>>>0)<($55>>>0);
        if ($56) {
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($53,$2);
         $57 = HEAP32[$13>>2]|0;
         $58 = ((($57)) + 24|0);
         HEAP32[$13>>2] = $58;
        } else {
         $59 = ((($db)) + 12|0);
         $60 = HEAP32[$db>>2]|0;
         $61 = $53;
         $62 = $60;
         $63 = (($61) - ($62))|0;
         $64 = (($63|0) / 24)&-1;
         $65 = (($64) + 1)|0;
         $66 = ($63|0)<(-24);
         if ($66) {
          __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
          // unreachable;
         }
         $67 = $55;
         $68 = (($67) - ($62))|0;
         $69 = (($68|0) / 24)&-1;
         $70 = ($69>>>0)<(1073741823);
         if ($70) {
          $71 = $69 << 1;
          $72 = ($71>>>0)<($65>>>0);
          $73 = $72 ? $65 : $71;
          $$0$i$i$i7$i = $73;
         } else {
          $$0$i$i$i7$i = 2147483647;
         }
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i17$i,$$0$i$i$i7$i,$64,$59);
         $74 = ((($__v$i$i17$i)) + 8|0);
         $75 = HEAP32[$74>>2]|0;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($75,$2);
         $76 = ((($75)) + 24|0);
         HEAP32[$74>>2] = $76;
         __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i17$i);
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i17$i);
        }
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($2);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($tmp$i);
        $77 = ((($first)) + 2|0);
        $78 = ((($db)) + 60|0);
        HEAP8[$78>>0] = 1;
        $$03$i = $77;
        break L6;
        break;
       }
       default: {
        $$03$i = $first;
        break L6;
       }
       }
      }
     } else {
      $$03$i = $first;
     }
    } while(0);
    $$0 = $$03$i;
    break L1;
    break;
   }
   case 85:  {
    $79 = $last;
    $80 = $first;
    $81 = (($79) - ($80))|0;
    $82 = ($81|0)>(2);
    $83 = ($6<<24>>24)==(85);
    $or$cond = $82 & $83;
    L36: do {
     if ($or$cond) {
      $84 = ((($first)) + 1|0);
      $85 = HEAP8[$84>>0]|0;
      $86 = $85 << 24 >> 24;
      switch ($86|0) {
      case 116:  {
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($1,1822,8);
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($0,$1);
       $87 = ((($db)) + 4|0);
       $88 = HEAP32[$87>>2]|0;
       $89 = ((($db)) + 8|0);
       $90 = HEAP32[$89>>2]|0;
       $91 = ($88>>>0)<($90>>>0);
       if ($91) {
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($88,$0);
        $92 = HEAP32[$87>>2]|0;
        $93 = ((($92)) + 24|0);
        HEAP32[$87>>2] = $93;
       } else {
        $94 = ((($db)) + 12|0);
        $95 = HEAP32[$db>>2]|0;
        $96 = $88;
        $97 = $95;
        $98 = (($96) - ($97))|0;
        $99 = (($98|0) / 24)&-1;
        $100 = (($99) + 1)|0;
        $101 = ($98|0)<(-24);
        if ($101) {
         __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
         // unreachable;
        }
        $102 = $90;
        $103 = (($102) - ($97))|0;
        $104 = (($103|0) / 24)&-1;
        $105 = ($104>>>0)<(1073741823);
        if ($105) {
         $106 = $104 << 1;
         $107 = ($106>>>0)<($100>>>0);
         $108 = $107 ? $100 : $106;
         $$0$i$i$i$i6 = $108;
        } else {
         $$0$i$i$i$i6 = 2147483647;
        }
        __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i17$i,$$0$i$i$i$i6,$99,$94);
        $109 = ((($__v$i$i17$i)) + 8|0);
        $110 = HEAP32[$109>>2]|0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($110,$0);
        $111 = ((($110)) + 24|0);
        HEAP32[$109>>2] = $111;
        __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i17$i);
        __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i17$i);
       }
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($0);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($1);
       $112 = ((($first)) + 2|0);
       $113 = ($112|0)==($last|0);
       if ($113) {
        $114 = HEAP32[$87>>2]|0;
        $115 = ((($114)) + -24|0);
        $117 = $114;
        while(1) {
         $116 = ((($117)) + -24|0);
         HEAP32[$87>>2] = $116;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($116);
         $$pre$i$i = HEAP32[$87>>2]|0;
         $118 = ($$pre$i$i|0)==($115|0);
         if ($118) {
          $$1$i9 = $first;
          break L36;
         } else {
          $117 = $$pre$i$i;
         }
        }
       }
       $119 = HEAP8[$112>>0]|0;
       $120 = $119 << 24 >> 24;
       $isdigittmp10$i = (($120) + -48)|0;
       $isdigit11$i = ($isdigittmp10$i>>>0)<(10);
       if ($isdigit11$i) {
        $121 = ((($first)) + 3|0);
        $122 = ($121|0)==($last|0);
        L57: do {
         if ($122) {
          $t1$0$i$lcssa = $last;
         } else {
          $t1$0$i45 = $121;
          while(1) {
           $123 = HEAP8[$t1$0$i45>>0]|0;
           $124 = $123 << 24 >> 24;
           $isdigittmp12$i = (($124) + -48)|0;
           $isdigit13$i = ($isdigittmp12$i>>>0)<(10);
           if (!($isdigit13$i)) {
            $t1$0$i$lcssa = $t1$0$i45;
            break L57;
           }
           $125 = ((($t1$0$i45)) + 1|0);
           $126 = ($125|0)==($last|0);
           if ($126) {
            $t1$0$i$lcssa = $last;
            break;
           } else {
            $t1$0$i45 = $125;
           }
          }
         }
        } while(0);
        $127 = HEAP32[$87>>2]|0;
        $128 = ((($127)) + -24|0);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS7_E4typeESC_SC_($128,$112,$t1$0$i$lcssa);
        $t0$0$i = $t1$0$i$lcssa;
       } else {
        $t0$0$i = $112;
       }
       $129 = HEAP32[$87>>2]|0;
       $130 = ((($129)) + -24|0);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9push_backEc($130,39);
       $131 = ($t0$0$i|0)==($last|0);
       if (!($131)) {
        $132 = HEAP8[$t0$0$i>>0]|0;
        $133 = ($132<<24>>24)==(95);
        if ($133) {
         $139 = ((($t0$0$i)) + 1|0);
         $$1$i9 = $139;
         break L36;
        }
       }
       $134 = HEAP32[$87>>2]|0;
       $135 = ((($134)) + -24|0);
       $137 = $134;
       while(1) {
        $136 = ((($137)) + -24|0);
        HEAP32[$87>>2] = $136;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($136);
        $$pre$i15$i = HEAP32[$87>>2]|0;
        $138 = ($$pre$i15$i|0)==($135|0);
        if ($138) {
         $$1$i9 = $first;
         break L36;
        } else {
         $137 = $$pre$i15$i;
        }
       }
       break;
      }
      case 108:  {
       break;
      }
      default: {
       $$1$i9 = $first;
       break L36;
      }
      }
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($3,1831,9);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($2,$3);
      $140 = ((($db)) + 4|0);
      $141 = HEAP32[$140>>2]|0;
      $142 = ((($db)) + 8|0);
      $143 = HEAP32[$142>>2]|0;
      $144 = ($141>>>0)<($143>>>0);
      if ($144) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($141,$2);
       $145 = HEAP32[$140>>2]|0;
       $146 = ((($145)) + 24|0);
       HEAP32[$140>>2] = $146;
      } else {
       $147 = ((($db)) + 12|0);
       $148 = HEAP32[$db>>2]|0;
       $149 = $141;
       $150 = $148;
       $151 = (($149) - ($150))|0;
       $152 = (($151|0) / 24)&-1;
       $153 = (($152) + 1)|0;
       $154 = ($151|0)<(-24);
       if ($154) {
        __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
        // unreachable;
       }
       $155 = $143;
       $156 = (($155) - ($150))|0;
       $157 = (($156|0) / 24)&-1;
       $158 = ($157>>>0)<(1073741823);
       if ($158) {
        $159 = $157 << 1;
        $160 = ($159>>>0)<($153>>>0);
        $161 = $160 ? $153 : $159;
        $$0$i$i$i18$i = $161;
       } else {
        $$0$i$i$i18$i = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i17$i,$$0$i$i$i18$i,$152,$147);
       $162 = ((($__v$i$i17$i)) + 8|0);
       $163 = HEAP32[$162>>2]|0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($163,$2);
       $164 = ((($163)) + 24|0);
       HEAP32[$162>>2] = $164;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i17$i);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i17$i);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($2);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $165 = ((($first)) + 2|0);
      $166 = HEAP8[$165>>0]|0;
      $167 = ($166<<24>>24)==(118);
      do {
       if ($167) {
        $168 = HEAP32[$140>>2]|0;
        $169 = ((($168)) + -24|0);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9push_backEc($169,41);
        $170 = ((($first)) + 3|0);
        $t01$1$i = $170;
       } else {
        $171 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($165,$last,$db)|0);
        $172 = ($171|0)==($165|0);
        $173 = HEAP32[$140>>2]|0;
        if ($172) {
         $174 = ((($173)) + -24|0);
         $176 = $173;
         while(1) {
          $175 = ((($176)) + -24|0);
          HEAP32[$140>>2] = $175;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($175);
          $$pre$i22$i = HEAP32[$140>>2]|0;
          $177 = ($$pre$i22$i|0)==($174|0);
          if ($177) {
           $$1$i9 = $first;
           break L36;
          } else {
           $176 = $$pre$i22$i;
          }
         }
        }
        $178 = HEAP32[$db>>2]|0;
        $179 = $173;
        $180 = $178;
        $181 = (($179) - ($180))|0;
        $182 = (($181|0) / 24)&-1;
        $183 = ($182>>>0)<(2);
        if ($183) {
         $$1$i9 = $first;
         break L36;
        }
        $184 = ((($173)) + -24|0);
        __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($tmp$i,$184);
        $185 = HEAP32[$140>>2]|0;
        $186 = ((($185)) + -24|0);
        $188 = $185;
        while(1) {
         $187 = ((($188)) + -24|0);
         HEAP32[$140>>2] = $187;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($187);
         $$pre$i24$i = HEAP32[$140>>2]|0;
         $189 = ($$pre$i24$i|0)==($186|0);
         if ($189) {
          break;
         } else {
          $188 = $$pre$i24$i;
         }
        }
        $190 = ((($185)) + -48|0);
        $191 = HEAP8[$tmp$i>>0]|0;
        $192 = $191 & 1;
        $193 = ($192<<24>>24)==(0);
        $194 = ((($tmp$i)) + 8|0);
        $195 = HEAP32[$194>>2]|0;
        $196 = ((($tmp$i)) + 1|0);
        $197 = $193 ? $196 : $195;
        $198 = ((($tmp$i)) + 4|0);
        $199 = HEAP32[$198>>2]|0;
        $200 = $191&255;
        $201 = $200 >>> 1;
        $202 = $193 ? $201 : $199;
        (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($190,$197,$202)|0);
        $203 = ((($4)) + 4|0);
        $204 = ((($4)) + 8|0);
        $$pre$i$i$i$i = $191;$t01$0$i = $171;
        while(1) {
         $205 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($t01$0$i,$last,$db)|0);
         $206 = ($205|0)==($t01$0$i|0);
         $207 = HEAP32[$140>>2]|0;
         if ($206) {
          $$lcssa = $207;$t01$0$i$lcssa67 = $t01$0$i;
          label = 79;
          break;
         }
         $208 = HEAP32[$db>>2]|0;
         $209 = $207;
         $210 = $208;
         $211 = (($209) - ($210))|0;
         $212 = (($211|0) / 24)&-1;
         $213 = ($212>>>0)<(2);
         if ($213) {
          label = 113;
          break;
         }
         $214 = ((($207)) + -24|0);
         __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($4,$214);
         $215 = $$pre$i$i$i$i & 1;
         $216 = ($215<<24>>24)==(0);
         L96: do {
          if ($216) {
           HEAP8[$196>>0] = 0;
           HEAP8[$tmp$i>>0] = 0;
          } else {
           $217 = HEAP32[$194>>2]|0;
           HEAP8[$217>>0] = 0;
           HEAP32[$198>>2] = 0;
           $218 = HEAP32[$tmp$i>>2]|0;
           $219 = $218 & -2;
           $phitmp$i$i$i$i$i$i$i = (($219) + -1)|0;
           $220 = $218&255;
           $221 = $220 & 1;
           $222 = ($221<<24>>24)==(0);
           do {
            if ($222) {
             $223 = $218 >>> 1;
             $224 = $223 & 127;
             $225 = ($220&255)<(22);
             if ($225) {
              $232 = $218 >>> 1;
              $233 = $232 & 127;
              $234 = (($233) + 1)|0;
              _memcpy(($196|0),($217|0),($234|0))|0;
              _free($217);
              $$ph26 = $224;
              break;
             }
             $226 = (($224) + 16)|0;
             $227 = $226 & 240;
             $phitmp$i2$i$i$i$i$i$i = (($227) + -1)|0;
             $228 = ($phitmp$i2$i$i$i$i$i$i|0)==($phitmp$i$i$i$i$i$i$i|0);
             if ($228) {
              break L96;
             }
             $229 = ($phitmp$i2$i$i$i$i$i$i>>>0)<=($phitmp$i$i$i$i$i$i$i>>>0);
             $230 = (_malloc($227)|0);
             $231 = ($230|0)==(0|0);
             $or$cond$i$i$i$i$i$i = $229 & $231;
             if ($or$cond$i$i$i$i$i$i) {
              break L96;
             }
             $235 = $218 >>> 1;
             $236 = $235 & 127;
             $237 = (($236) + 1)|0;
             _memcpy(($230|0),($196|0),($237|0))|0;
             $238 = $227 | 1;
             HEAP32[$tmp$i>>2] = $238;
             HEAP32[$198>>2] = $224;
             HEAP32[$194>>2] = $230;
             break L96;
            } else {
             HEAP8[$196>>0] = 0;
             _free($217);
             $$ph26 = 0;
            }
           } while(0);
           $239 = $$ph26 << 1;
           $240 = $239&255;
           HEAP8[$tmp$i>>0] = $240;
          }
         } while(0);
         ;HEAP32[$tmp$i>>2]=HEAP32[$4>>2]|0;HEAP32[$tmp$i+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$tmp$i+8>>2]=HEAP32[$4+8>>2]|0;
         HEAP32[$4>>2] = 0;
         HEAP32[$203>>2] = 0;
         HEAP32[$204>>2] = 0;
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
         $241 = HEAP32[$140>>2]|0;
         $242 = ((($241)) + -24|0);
         $244 = $241;
         while(1) {
          $243 = ((($244)) + -24|0);
          HEAP32[$140>>2] = $243;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($243);
          $$pre$i27$i = HEAP32[$140>>2]|0;
          $245 = ($$pre$i27$i|0)==($242|0);
          if ($245) {
           break;
          } else {
           $244 = $$pre$i27$i;
          }
         }
         $246 = HEAP8[$tmp$i>>0]|0;
         $247 = $246 & 1;
         $248 = ($247<<24>>24)==(0);
         $249 = HEAP32[$198>>2]|0;
         $250 = $246&255;
         $251 = $250 >>> 1;
         $252 = $248 ? $251 : $249;
         $253 = ($252|0)==(0);
         if ($253) {
          $$pre$i$i$i$i = $246;$t01$0$i = $205;
          continue;
         }
         $254 = ((($241)) + -48|0);
         (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($254,1608)|0);
         $255 = HEAP32[$140>>2]|0;
         $256 = ((($255)) + -24|0);
         $257 = HEAP32[$194>>2]|0;
         $258 = $248 ? $196 : $257;
         (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($256,$258,$252)|0);
         $$pre$i$i$i$i = $246;$t01$0$i = $205;
        }
        if ((label|0) == 79) {
         $259 = ((($$lcssa)) + -24|0);
         (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($259,1511)|0);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($tmp$i);
         $t01$1$i = $t01$0$i$lcssa67;
         break;
        }
        else if ((label|0) == 113) {
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($tmp$i);
         $$1$i9 = $first;
         break L36;
        }
       }
      } while(0);
      $260 = ($t01$1$i|0)==($last|0);
      if (!($260)) {
       $261 = HEAP8[$t01$1$i>>0]|0;
       $262 = ($261<<24>>24)==(69);
       if ($262) {
        $268 = ((($t01$1$i)) + 1|0);
        $269 = ($268|0)==($last|0);
        if ($269) {
         $270 = HEAP32[$140>>2]|0;
         $271 = ((($270)) + -24|0);
         $273 = $270;
         while(1) {
          $272 = ((($273)) + -24|0);
          HEAP32[$140>>2] = $272;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($272);
          $$pre$i33$i = HEAP32[$140>>2]|0;
          $274 = ($$pre$i33$i|0)==($271|0);
          if ($274) {
           $$1$i9 = $first;
           break L36;
          } else {
           $273 = $$pre$i33$i;
          }
         }
        }
        $275 = HEAP8[$268>>0]|0;
        $276 = $275 << 24 >> 24;
        $isdigittmp$i = (($276) + -48)|0;
        $isdigit$i = ($isdigittmp$i>>>0)<(10);
        if ($isdigit$i) {
         $277 = ((($t01$1$i)) + 2|0);
         $278 = ($277|0)==($last|0);
         L127: do {
          if ($278) {
           $t13$0$i$lcssa = $last;
          } else {
           $t13$0$i51 = $277;
           while(1) {
            $279 = HEAP8[$t13$0$i51>>0]|0;
            $280 = $279 << 24 >> 24;
            $isdigittmp8$i = (($280) + -48)|0;
            $isdigit9$i = ($isdigittmp8$i>>>0)<(10);
            if (!($isdigit9$i)) {
             $t13$0$i$lcssa = $t13$0$i51;
             break L127;
            }
            $281 = ((($t13$0$i51)) + 1|0);
            $282 = ($281|0)==($last|0);
            if ($282) {
             $t13$0$i$lcssa = $last;
             break;
            } else {
             $t13$0$i51 = $281;
            }
           }
          }
         } while(0);
         $283 = HEAP32[$140>>2]|0;
         $284 = ((($283)) + -24|0);
         $285 = HEAP8[$284>>0]|0;
         $286 = $285 & 1;
         $287 = ($286<<24>>24)==(0);
         if ($287) {
          $288 = $285&255;
          $289 = $288 >>> 1;
          $300 = 10;$301 = $289;$304 = $285;
         } else {
          $290 = ((($283)) + -20|0);
          $291 = HEAP32[$290>>2]|0;
          $292 = HEAP32[$284>>2]|0;
          $293 = $292 & -2;
          $phitmp$i$i$i = (($293) + -1)|0;
          $294 = $292&255;
          $300 = $phitmp$i$i$i;$301 = $291;$304 = $294;
         }
         $295 = $t13$0$i$lcssa;
         $296 = $268;
         $297 = (($295) - ($296))|0;
         $298 = ($t13$0$i$lcssa|0)==($268|0);
         if ($298) {
          $t01$2$i = $268;
         } else {
          $299 = (($300) - ($301))|0;
          $302 = ($299>>>0)<($297>>>0);
          if ($302) {
           $314 = (($301) + ($297))|0;
           $315 = (($314) - ($300))|0;
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9__grow_byEjjjjjj($284,$300,$315,$301,7,$297);
           $316 = ((($283)) + -16|0);
           $317 = HEAP32[$316>>2]|0;
           $__p$0$i$i = $317;
          } else {
           $303 = $304 & 1;
           $305 = ($303<<24>>24)==(0);
           if ($305) {
            $308 = ((($284)) + 1|0);
            $312 = $308;
           } else {
            $306 = ((($283)) + -16|0);
            $307 = HEAP32[$306>>2]|0;
            $312 = $307;
           }
           $309 = ($301|0)==(7);
           if ($309) {
            $__p$0$i$i = $312;
           } else {
            $310 = (($301) + -7)|0;
            $311 = ((($312)) + 7|0);
            $$sum$i$i = (($297) + 7)|0;
            $313 = (($312) + ($$sum$i$i)|0);
            _memmove(($313|0),($311|0),($310|0))|0;
            $__p$0$i$i = $312;
           }
          }
          $318 = (($301) + ($297))|0;
          $319 = HEAP8[$284>>0]|0;
          $320 = $319 & 1;
          $321 = ($320<<24>>24)==(0);
          if ($321) {
           $323 = $318 << 1;
           $324 = $323&255;
           HEAP8[$284>>0] = $324;
          } else {
           $322 = ((($283)) + -20|0);
           HEAP32[$322>>2] = $318;
          }
          $325 = (($__p$0$i$i) + ($318)|0);
          HEAP8[$325>>0] = 0;
          $326 = ($268|0)==($t13$0$i$lcssa|0);
          if ($326) {
           $t01$2$i = $t13$0$i$lcssa;
          } else {
           $327 = ((($__p$0$i$i)) + 7|0);
           $$0$i$i49 = $268;$__p$1$i$i48 = $327;
           while(1) {
            $328 = HEAP8[$$0$i$i49>>0]|0;
            HEAP8[$__p$1$i$i48>>0] = $328;
            $329 = ((($__p$1$i$i48)) + 1|0);
            $330 = ((($$0$i$i49)) + 1|0);
            $331 = ($330|0)==($t13$0$i$lcssa|0);
            if ($331) {
             $t01$2$i = $t13$0$i$lcssa;
             break;
            } else {
             $$0$i$i49 = $330;$__p$1$i$i48 = $329;
            }
           }
          }
         }
        } else {
         $t01$2$i = $268;
        }
        $332 = ($t01$2$i|0)==($last|0);
        if (!($332)) {
         $333 = HEAP8[$t01$2$i>>0]|0;
         $334 = ($333<<24>>24)==(95);
         if ($334) {
          $340 = ((($t01$2$i)) + 1|0);
          $$1$i9 = $340;
          break;
         }
        }
        $335 = HEAP32[$140>>2]|0;
        $336 = ((($335)) + -24|0);
        $338 = $335;
        while(1) {
         $337 = ((($338)) + -24|0);
         HEAP32[$140>>2] = $337;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($337);
         $$pre$i35$i = HEAP32[$140>>2]|0;
         $339 = ($$pre$i35$i|0)==($336|0);
         if ($339) {
          $$1$i9 = $first;
          break L36;
         } else {
          $338 = $$pre$i35$i;
         }
        }
       }
      }
      $263 = HEAP32[$140>>2]|0;
      $264 = ((($263)) + -24|0);
      $266 = $263;
      while(1) {
       $265 = ((($266)) + -24|0);
       HEAP32[$140>>2] = $265;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($265);
       $$pre$i31$i = HEAP32[$140>>2]|0;
       $267 = ($$pre$i31$i|0)==($264|0);
       if ($267) {
        $$1$i9 = $first;
        break;
       } else {
        $266 = $$pre$i31$i;
       }
      }
     } else {
      $$1$i9 = $first;
     }
    } while(0);
    $$0 = $$1$i9;
    break L1;
    break;
   }
   case 57: case 56: case 55: case 54: case 53: case 52: case 51: case 50: case 49:  {
    $341 = (__ZN10__cxxabiv112_GLOBAL__N_117parse_source_nameINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db)|0);
    STACKTOP = sp;return ($341|0);
    break;
   }
   default: {
    $342 = (__ZN10__cxxabiv112_GLOBAL__N_119parse_operator_nameINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db)|0);
    $$0 = $342;
    break L1;
   }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_119parse_discriminatorEPKcS2_($first,$last) {
 $first = $first|0;
 $last = $last|0;
 var $$0 = 0, $$first = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $first$pn = 0, $isdigit = 0, $isdigit3 = 0, $isdigit5 = 0, $isdigit7 = 0, $isdigittmp = 0, $isdigittmp2 = 0, $isdigittmp4 = 0, $isdigittmp6 = 0, $t1$016 = 0, $t1$016$lcssa = 0, $t11$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($first|0)==($last|0);
 L1: do {
  if ($0) {
   $$0 = $first;
  } else {
   $1 = HEAP8[$first>>0]|0;
   $2 = ($1<<24>>24)==(95);
   if (!($2)) {
    $17 = $1 << 24 >> 24;
    $isdigittmp = (($17) + -48)|0;
    $isdigit = ($isdigittmp>>>0)<(10);
    if ($isdigit) {
     $first$pn = $first;
    } else {
     $$0 = $first;
     break;
    }
    while(1) {
     $t11$0 = ((($first$pn)) + 1|0);
     $18 = ($t11$0|0)==($last|0);
     if ($18) {
      $$0 = $last;
      break L1;
     }
     $19 = HEAP8[$t11$0>>0]|0;
     $20 = $19 << 24 >> 24;
     $isdigittmp2 = (($20) + -48)|0;
     $isdigit3 = ($isdigittmp2>>>0)<(10);
     if ($isdigit3) {
      $first$pn = $t11$0;
     } else {
      $$0 = $t11$0;
      break L1;
     }
    }
   }
   $3 = ((($first)) + 1|0);
   $4 = ($3|0)==($last|0);
   if ($4) {
    $$0 = $first;
   } else {
    $5 = HEAP8[$3>>0]|0;
    $6 = $5 << 24 >> 24;
    $isdigittmp4 = (($6) + -48)|0;
    $isdigit5 = ($isdigittmp4>>>0)<(10);
    if ($isdigit5) {
     $7 = ((($first)) + 2|0);
     $$0 = $7;
     break;
    }
    $8 = ($5<<24>>24)==(95);
    if ($8) {
     $9 = ((($first)) + 2|0);
     $10 = ($9|0)==($last|0);
     if ($10) {
      $$0 = $first;
     } else {
      $t1$016 = $9;
      while(1) {
       $11 = HEAP8[$t1$016>>0]|0;
       $12 = $11 << 24 >> 24;
       $isdigittmp6 = (($12) + -48)|0;
       $isdigit7 = ($isdigittmp6>>>0)<(10);
       if (!($isdigit7)) {
        $$lcssa = $11;$t1$016$lcssa = $t1$016;
        break;
       }
       $13 = ((($t1$016)) + 1|0);
       $14 = ($13|0)==($last|0);
       if ($14) {
        $$0 = $first;
        break L1;
       } else {
        $t1$016 = $13;
       }
      }
      $15 = ($$lcssa<<24>>24)==(95);
      $16 = ((($t1$016$lcssa)) + 1|0);
      $$first = $15 ? $16 : $first;
      return ($$first|0);
     }
    } else {
     $$0 = $first;
    }
   }
  }
 } while(0);
 return ($$0|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_19base_nameINSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEEEET_RS9_($agg$result,$s) {
 $agg$result = $agg$result|0;
 $s = $s|0;
 var $$$$i$i$i = 0, $$$$i$i$i11 = 0, $$$$i$i$i3 = 0, $$$i$i$i = 0, $$$i$i$i10 = 0, $$$i$i$i2 = 0, $$0$i$i27 = 0, $$lcssa = 0, $$lcssa32 = 0, $$lcssa33 = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $8 = 0, $9 = 0, $__p$0$i$i26 = 0, $__p$0$ph$i$i = 0, $c$0$ph = 0, $p0$0 = 0, $p0$1 = 0, $pe$0 = 0, $pe$0$ph = 0, $pe$1 = 0, $pe$1$pn = 0, $scevgep2$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$s>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 $3 = ((($s)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $0&255;
 $6 = $5 >>> 1;
 $7 = $2 ? $6 : $4;
 $8 = ($7|0)==(0);
 L1: do {
  if ($8) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($agg$result,$s);
  } else {
   $9 = ((($s)) + 8|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ((($s)) + 1|0);
   $12 = $2 ? $11 : $10;
   $13 = ($7>>>0)>(11);
   $14 = $13 ? 11 : $7;
   $15 = (_memcmp($12,1738,$14)|0);
   $16 = ($15|0)==(0);
   $17 = ($7>>>0)<(11);
   $$$i$i$i = $13&1;
   $$$$i$i$i = $17 ? -1 : $$$i$i$i;
   $18 = $16 ? $$$$i$i$i : $15;
   $19 = ($18|0)==(0);
   if ($19) {
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6assignEPKcj($s,2342,70);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($agg$result,2413,12);
    break;
   }
   $20 = ($7>>>0)>(12);
   $21 = $20 ? 12 : $7;
   $22 = (_memcmp($12,1750,$21)|0);
   $23 = ($22|0)==(0);
   $24 = ($7>>>0)<(12);
   $$$i$i$i2 = $20&1;
   $$$$i$i$i3 = $24 ? -1 : $$$i$i$i2;
   $25 = $23 ? $$$$i$i$i3 : $22;
   $26 = ($25|0)==(0);
   if ($26) {
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6assignEPKcj($s,2426,49);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($agg$result,2476,13);
    break;
   }
   $27 = (_memcmp($12,1763,$21)|0);
   $28 = ($27|0)==(0);
   $29 = $28 ? $$$$i$i$i3 : $27;
   $30 = ($29|0)==(0);
   if ($30) {
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6assignEPKcj($s,2490,49);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($agg$result,2540,13);
    break;
   }
   $31 = ($7>>>0)>(13);
   $32 = $31 ? 13 : $7;
   $33 = (_memcmp($12,1776,$32)|0);
   $34 = ($33|0)==(0);
   $35 = ($7>>>0)<(13);
   $$$i$i$i10 = $31&1;
   $$$$i$i$i11 = $35 ? -1 : $$$i$i$i10;
   $36 = $34 ? $$$$i$i$i11 : $33;
   $37 = ($36|0)==(0);
   if ($37) {
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6assignEPKcj($s,2554,50);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($agg$result,2605,14);
    break;
   }
   $38 = (($12) + ($7)|0);
   $$sum = (($7) + -1)|0;
   $39 = (($12) + ($$sum)|0);
   $40 = HEAP8[$39>>0]|0;
   $41 = ($40<<24>>24)==(62);
   L16: do {
    if ($41) {
     $c$0$ph = 1;$pe$0$ph = $38;
     L17: while(1) {
      $pe$0 = $pe$0$ph;
      L19: while(1) {
       $42 = ((($pe$0)) + -1|0);
       $43 = ($42|0)==($12|0);
       if ($43) {
        break L17;
       }
       $46 = ((($pe$0)) + -2|0);
       $47 = HEAP8[$46>>0]|0;
       switch ($47<<24>>24) {
       case 60:  {
        $$lcssa = $46;$$lcssa32 = $42;
        label = 16;
        break L19;
        break;
       }
       case 62:  {
        $$lcssa33 = $42;
        label = 17;
        break L19;
        break;
       }
       default: {
        $pe$0 = $42;
       }
       }
      }
      if ((label|0) == 16) {
       label = 0;
       $48 = (($c$0$ph) + -1)|0;
       $49 = ($48|0)==(0);
       if ($49) {
        $pe$1 = $$lcssa;
        break L16;
       } else {
        $c$0$ph = $48;$pe$0$ph = $$lcssa32;
        continue;
       }
      }
      else if ((label|0) == 17) {
       label = 0;
       $50 = (($c$0$ph) + 1)|0;
       $c$0$ph = $50;$pe$0$ph = $$lcssa33;
       continue;
      }
     }
     HEAP32[$agg$result>>2] = 0;
     $44 = ((($agg$result)) + 4|0);
     HEAP32[$44>>2] = 0;
     $45 = ((($agg$result)) + 8|0);
     HEAP32[$45>>2] = 0;
     break L1;
    } else {
     $pe$1 = $38;
    }
   } while(0);
   $pe$1$pn = $pe$1;
   while(1) {
    $p0$0 = ((($pe$1$pn)) + -1|0);
    $51 = ($p0$0|0)==($12|0);
    if ($51) {
     $p0$1 = $12;
     break;
    }
    $52 = HEAP8[$p0$0>>0]|0;
    $53 = ($52<<24>>24)==(58);
    if ($53) {
     $p0$1 = $pe$1$pn;
     break;
    } else {
     $pe$1$pn = $p0$0;
    }
   }
   $54 = $p0$1;
   $55 = $pe$1;
   $56 = (($55) - ($54))|0;
   $57 = ($56>>>0)>(4294967279);
   if ($57) {
    __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($agg$result);
    // unreachable;
   }
   $58 = ($56>>>0)<(11);
   if ($58) {
    $59 = $56 << 1;
    $60 = $59&255;
    HEAP8[$agg$result>>0] = $60;
    $61 = ((($agg$result)) + 1|0);
    $__p$0$ph$i$i = $61;
   } else {
    $62 = (($56) + 16)|0;
    $63 = $62 & -16;
    $64 = (_malloc($63)|0);
    $65 = ((($agg$result)) + 8|0);
    HEAP32[$65>>2] = $64;
    $66 = $63 | 1;
    HEAP32[$agg$result>>2] = $66;
    $67 = ((($agg$result)) + 4|0);
    HEAP32[$67>>2] = $56;
    $__p$0$ph$i$i = $64;
   }
   $68 = ($p0$1|0)==($pe$1|0);
   if (!($68)) {
    $$0$i$i27 = $p0$1;$__p$0$i$i26 = $__p$0$ph$i$i;
    while(1) {
     $69 = HEAP8[$$0$i$i27>>0]|0;
     HEAP8[$__p$0$i$i26>>0] = $69;
     $70 = ((($$0$i$i27)) + 1|0);
     $71 = ((($__p$0$i$i26)) + 1|0);
     $72 = ($70|0)==($pe$1|0);
     if ($72) {
      break;
     } else {
      $$0$i$i27 = $70;$__p$0$i$i26 = $71;
     }
    }
   }
   $scevgep2$i$i = (($__p$0$ph$i$i) + ($56)|0);
   HEAP8[$scevgep2$i$i>>0] = 0;
  }
 } while(0);
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS7_E4typeESC_SC_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $$03 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$04 = 0, $phitmp$i = 0, $scevgep = 0, $scevgep1 = 0, $scevgep2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $__first;
 $1 = HEAP8[$this>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $4 = $1&255;
  $5 = $4 >>> 1;
  $15 = 10;$16 = $5;$41 = $1;
 } else {
  $6 = ((($this)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = HEAP32[$this>>2]|0;
  $9 = $8 & -2;
  $phitmp$i = (($9) + -1)|0;
  $10 = $8&255;
  $15 = $phitmp$i;$16 = $7;$41 = $10;
 }
 $11 = $__last;
 $12 = (($11) - ($0))|0;
 $13 = ($__last|0)==($__first|0);
 do {
  if (!($13)) {
   $14 = (($15) - ($16))|0;
   $17 = ($14>>>0)<($12>>>0);
   if ($17) {
    $18 = (($16) + ($12))|0;
    $19 = (($18) - ($15))|0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9__grow_byEjjjjjj($this,$15,$19,$16,$16,0);
    $$pre = HEAP8[$this>>0]|0;
    $21 = $$pre;
   } else {
    $21 = $41;
   }
   $20 = $21 & 1;
   $22 = ($20<<24>>24)==(0);
   if ($22) {
    $25 = ((($this)) + 1|0);
    $29 = $25;
   } else {
    $23 = ((($this)) + 8|0);
    $24 = HEAP32[$23>>2]|0;
    $29 = $24;
   }
   $26 = (($16) - ($0))|0;
   $scevgep = (($__last) + ($26)|0);
   $scevgep1 = $scevgep;
   $27 = ($__first|0)==($__last|0);
   if (!($27)) {
    $28 = (($29) + ($16)|0);
    $$03 = $__first;$__p$04 = $28;
    while(1) {
     $30 = HEAP8[$$03>>0]|0;
     HEAP8[$__p$04>>0] = $30;
     $31 = ((($__p$04)) + 1|0);
     $32 = ((($$03)) + 1|0);
     $33 = ($32|0)==($__last|0);
     if ($33) {
      break;
     } else {
      $$03 = $32;$__p$04 = $31;
     }
    }
   }
   $scevgep2 = (($29) + ($scevgep1)|0);
   HEAP8[$scevgep2>>0] = 0;
   $34 = (($16) + ($12))|0;
   $35 = HEAP8[$this>>0]|0;
   $36 = $35 & 1;
   $37 = ($36<<24>>24)==(0);
   if ($37) {
    $39 = $34 << 1;
    $40 = $39&255;
    HEAP8[$this>>0] = $40;
    break;
   } else {
    $38 = ((($this)) + 4|0);
    HEAP32[$38>>2] = $34;
    break;
   }
  }
 } while(0);
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9push_backEc($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$pn = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__cap$0 = 0, $__p$0 = 0, $__p$0$sum$pre$phiZZZ2D = 0, $__sz$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)!=(0);
 if ($2) {
  $5 = HEAP32[$this>>2]|0;
  $6 = $5 & -2;
  $7 = (($6) + -1)|0;
  $8 = ((($this)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $__cap$0 = $7;$__sz$0 = $9;
 } else {
  $3 = $0&255;
  $4 = $3 >>> 1;
  $__cap$0 = 10;$__sz$0 = $4;
 }
 $10 = ($__sz$0|0)==($__cap$0|0);
 if ($10) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9__grow_byEjjjjjj($this,$__cap$0,1,$__cap$0,$__cap$0,0);
  $11 = HEAP8[$this>>0]|0;
  $12 = $11 & 1;
  $13 = ($12<<24>>24)==(0);
  if ($13) {
   label = 7;
  } else {
   label = 8;
  }
 } else {
  if ($2) {
   label = 8;
  } else {
   label = 7;
  }
 }
 if ((label|0) == 7) {
  $14 = ((($this)) + 1|0);
  $15 = $__sz$0 << 1;
  $16 = (($15) + 2)|0;
  $17 = $16&255;
  HEAP8[$this>>0] = $17;
  $$pre = (($__sz$0) + 1)|0;
  $$pn = $14;$__p$0$sum$pre$phiZZZ2D = $$pre;
 }
 else if ((label|0) == 8) {
  $18 = ((($this)) + 8|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($__sz$0) + 1)|0;
  $21 = ((($this)) + 4|0);
  HEAP32[$21>>2] = $20;
  $$pn = $19;$__p$0$sum$pre$phiZZZ2D = $20;
 }
 $__p$0 = (($$pn) + ($__sz$0)|0);
 HEAP8[$__p$0>>0] = $__c;
 $22 = (($$pn) + ($__p$0$sum$pre$phiZZZ2D)|0);
 HEAP8[$22>>0] = 0;
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9__grow_byEjjjjjj($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_add) {
 $this = $this|0;
 $__old_cap = $__old_cap|0;
 $__delta_cap = $__delta_cap|0;
 $__old_sz = $__old_sz|0;
 $__n_copy = $__n_copy|0;
 $__n_add = $__n_add|0;
 var $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (-17 - ($__old_cap))|0;
 $1 = ($0>>>0)<($__delta_cap>>>0);
 if ($1) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $2 = HEAP8[$this>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = ((($this)) + 1|0);
  $20 = $7;
 } else {
  $5 = ((($this)) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $20 = $6;
 }
 $8 = ($__old_cap>>>0)<(2147483623);
 if ($8) {
  $9 = (($__delta_cap) + ($__old_cap))|0;
  $10 = $__old_cap << 1;
  $11 = ($9>>>0)<($10>>>0);
  $12 = $11 ? $10 : $9;
  $13 = ($12>>>0)<(11);
  $14 = (($12) + 16)|0;
  $15 = $14 & -16;
  $16 = $13 ? 11 : $15;
  $17 = $16;
 } else {
  $17 = -17;
 }
 $18 = (_malloc($17)|0);
 $19 = ($__n_copy|0)==(0);
 if (!($19)) {
  _memcpy(($18|0),($20|0),($__n_copy|0))|0;
 }
 $21 = ($__old_sz|0)==($__n_copy|0);
 if (!($21)) {
  $22 = (($__old_sz) - ($__n_copy))|0;
  $$sum = (($__n_add) + ($__n_copy))|0;
  $23 = (($18) + ($$sum)|0);
  $24 = (($20) + ($__n_copy)|0);
  _memcpy(($23|0),($24|0),($22|0))|0;
 }
 $25 = ($__old_cap|0)==(10);
 if (!($25)) {
  _free($20);
 }
 $26 = ((($this)) + 8|0);
 HEAP32[$26>>2] = $18;
 $27 = $17 | 1;
 HEAP32[$this>>2] = $27;
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_119parse_operator_nameINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db) {
 $first = $first|0;
 $last = $last|0;
 $db = $db|0;
 var $$0 = 0, $$0$i$i$i = 0, $$0$i$i$i10 = 0, $$0$i$i$i100 = 0, $$0$i$i$i105 = 0, $$0$i$i$i110 = 0, $$0$i$i$i115 = 0, $$0$i$i$i120 = 0, $$0$i$i$i125 = 0, $$0$i$i$i130 = 0, $$0$i$i$i135 = 0, $$0$i$i$i140 = 0, $$0$i$i$i145 = 0, $$0$i$i$i15 = 0, $$0$i$i$i150 = 0, $$0$i$i$i155 = 0, $$0$i$i$i160 = 0, $$0$i$i$i165 = 0, $$0$i$i$i170 = 0, $$0$i$i$i175 = 0;
 var $$0$i$i$i180 = 0, $$0$i$i$i185 = 0, $$0$i$i$i190 = 0, $$0$i$i$i195 = 0, $$0$i$i$i20 = 0, $$0$i$i$i200 = 0, $$0$i$i$i205 = 0, $$0$i$i$i210 = 0, $$0$i$i$i215 = 0, $$0$i$i$i220 = 0, $$0$i$i$i225 = 0, $$0$i$i$i25 = 0, $$0$i$i$i30 = 0, $$0$i$i$i35 = 0, $$0$i$i$i40 = 0, $$0$i$i$i45 = 0, $$0$i$i$i5 = 0, $$0$i$i$i50 = 0, $$0$i$i$i55 = 0, $$0$i$i$i60 = 0;
 var $$0$i$i$i65 = 0, $$0$i$i$i70 = 0, $$0$i$i$i75 = 0, $$0$i$i$i80 = 0, $$0$i$i$i85 = 0, $$0$i$i$i90 = 0, $$0$i$i$i95 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0;
 var $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0;
 var $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0;
 var $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0;
 var $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0;
 var $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0;
 var $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0;
 var $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0;
 var $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0;
 var $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0;
 var $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0;
 var $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0;
 var $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0;
 var $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0;
 var $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0;
 var $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0;
 var $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0;
 var $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0, $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0;
 var $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0, $1321 = 0, $1322 = 0, $1323 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0;
 var $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0;
 var $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0;
 var $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0;
 var $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0;
 var $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0;
 var $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0;
 var $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0;
 var $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0;
 var $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0;
 var $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0;
 var $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0;
 var $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0;
 var $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0;
 var $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0;
 var $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0;
 var $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0;
 var $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0;
 var $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0;
 var $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0;
 var $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0;
 var $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0;
 var $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0;
 var $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0;
 var $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0;
 var $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0;
 var $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0;
 var $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0;
 var $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0;
 var $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0;
 var $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0;
 var $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0;
 var $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0;
 var $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0;
 var $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0;
 var $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0;
 var $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0;
 var $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0;
 var $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0;
 var $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0;
 var $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0;
 var $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0;
 var $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0;
 var $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0;
 var $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0;
 var $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $__v$i$i224 = 0, $isdigit = 0, $isdigittmp = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1136|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__v$i$i224 = sp + 1104|0;
 $0 = sp + 1080|0;
 $1 = sp + 1056|0;
 $2 = sp + 1032|0;
 $3 = sp + 1008|0;
 $4 = sp + 984|0;
 $5 = sp + 960|0;
 $6 = sp + 936|0;
 $7 = sp + 912|0;
 $8 = sp + 888|0;
 $9 = sp + 864|0;
 $10 = sp + 840|0;
 $11 = sp + 816|0;
 $12 = sp + 792|0;
 $13 = sp + 768|0;
 $14 = sp + 744|0;
 $15 = sp + 720|0;
 $16 = sp + 696|0;
 $17 = sp + 672|0;
 $18 = sp + 648|0;
 $19 = sp + 624|0;
 $20 = sp + 600|0;
 $21 = sp + 576|0;
 $22 = sp + 552|0;
 $23 = sp + 240|0;
 $24 = sp + 216|0;
 $25 = sp + 192|0;
 $26 = sp + 168|0;
 $27 = sp + 144|0;
 $28 = sp + 120|0;
 $29 = sp + 72|0;
 $30 = sp + 48|0;
 $31 = sp + 24|0;
 $32 = sp;
 $33 = sp + 96|0;
 $34 = sp + 264|0;
 $35 = sp + 288|0;
 $36 = sp + 312|0;
 $37 = sp + 336|0;
 $38 = sp + 360|0;
 $39 = sp + 384|0;
 $40 = sp + 408|0;
 $41 = sp + 432|0;
 $42 = sp + 456|0;
 $43 = sp + 480|0;
 $44 = sp + 504|0;
 $45 = sp + 528|0;
 $46 = $last;
 $47 = $first;
 $48 = (($46) - ($47))|0;
 $49 = ($48|0)>(1);
 L1: do {
  if ($49) {
   $50 = HEAP8[$first>>0]|0;
   $51 = $50 << 24 >> 24;
   do {
    switch ($51|0) {
    case 97:  {
     $52 = ((($first)) + 1|0);
     $53 = HEAP8[$52>>0]|0;
     $54 = $53 << 24 >> 24;
     switch ($54|0) {
     case 97:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($0,1841);
      $55 = ((($db)) + 4|0);
      $56 = HEAP32[$55>>2]|0;
      $57 = ((($db)) + 8|0);
      $58 = HEAP32[$57>>2]|0;
      $59 = ($56>>>0)<($58>>>0);
      if ($59) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($56,$0);
       $60 = HEAP32[$55>>2]|0;
       $61 = ((($60)) + 24|0);
       HEAP32[$55>>2] = $61;
      } else {
       $62 = ((($db)) + 12|0);
       $63 = HEAP32[$db>>2]|0;
       $64 = $56;
       $65 = $63;
       $66 = (($64) - ($65))|0;
       $67 = (($66|0) / 24)&-1;
       $68 = (($67) + 1)|0;
       $69 = ($66|0)<(-24);
       if ($69) {
        __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
        // unreachable;
       }
       $70 = $58;
       $71 = (($70) - ($65))|0;
       $72 = (($71|0) / 24)&-1;
       $73 = ($72>>>0)<(1073741823);
       if ($73) {
        $74 = $72 << 1;
        $75 = ($74>>>0)<($68>>>0);
        $76 = $75 ? $68 : $74;
        $$0$i$i$i = $76;
       } else {
        $$0$i$i$i = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i224,$$0$i$i$i,$67,$62);
       $77 = ((($__v$i$i224)) + 8|0);
       $78 = HEAP32[$77>>2]|0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($78,$0);
       $79 = ((($78)) + 24|0);
       HEAP32[$77>>2] = $79;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i224);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i224);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($0);
      $80 = ((($first)) + 2|0);
      $$0 = $80;
      break L1;
      break;
     }
     case 110: case 100:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($1,1852);
      $81 = ((($db)) + 4|0);
      $82 = HEAP32[$81>>2]|0;
      $83 = ((($db)) + 8|0);
      $84 = HEAP32[$83>>2]|0;
      $85 = ($82>>>0)<($84>>>0);
      if ($85) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($82,$1);
       $86 = HEAP32[$81>>2]|0;
       $87 = ((($86)) + 24|0);
       HEAP32[$81>>2] = $87;
      } else {
       $88 = ((($db)) + 12|0);
       $89 = HEAP32[$db>>2]|0;
       $90 = $82;
       $91 = $89;
       $92 = (($90) - ($91))|0;
       $93 = (($92|0) / 24)&-1;
       $94 = (($93) + 1)|0;
       $95 = ($92|0)<(-24);
       if ($95) {
        __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
        // unreachable;
       }
       $96 = $84;
       $97 = (($96) - ($91))|0;
       $98 = (($97|0) / 24)&-1;
       $99 = ($98>>>0)<(1073741823);
       if ($99) {
        $100 = $98 << 1;
        $101 = ($100>>>0)<($94>>>0);
        $102 = $101 ? $94 : $100;
        $$0$i$i$i5 = $102;
       } else {
        $$0$i$i$i5 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i224,$$0$i$i$i5,$93,$88);
       $103 = ((($__v$i$i224)) + 8|0);
       $104 = HEAP32[$103>>2]|0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($104,$1);
       $105 = ((($104)) + 24|0);
       HEAP32[$103>>2] = $105;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i224);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i224);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1);
      $106 = ((($first)) + 2|0);
      $$0 = $106;
      break L1;
      break;
     }
     case 78:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($2,1862);
      $107 = ((($db)) + 4|0);
      $108 = HEAP32[$107>>2]|0;
      $109 = ((($db)) + 8|0);
      $110 = HEAP32[$109>>2]|0;
      $111 = ($108>>>0)<($110>>>0);
      if ($111) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($108,$2);
       $112 = HEAP32[$107>>2]|0;
       $113 = ((($112)) + 24|0);
       HEAP32[$107>>2] = $113;
      } else {
       $114 = ((($db)) + 12|0);
       $115 = HEAP32[$db>>2]|0;
       $116 = $108;
       $117 = $115;
       $118 = (($116) - ($117))|0;
       $119 = (($118|0) / 24)&-1;
       $120 = (($119) + 1)|0;
       $121 = ($118|0)<(-24);
       if ($121) {
        __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
        // unreachable;
       }
       $122 = $110;
       $123 = (($122) - ($117))|0;
       $124 = (($123|0) / 24)&-1;
       $125 = ($124>>>0)<(1073741823);
       if ($125) {
        $126 = $124 << 1;
        $127 = ($126>>>0)<($120>>>0);
        $128 = $127 ? $120 : $126;
        $$0$i$i$i10 = $128;
       } else {
        $$0$i$i$i10 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i224,$$0$i$i$i10,$119,$114);
       $129 = ((($__v$i$i224)) + 8|0);
       $130 = HEAP32[$129>>2]|0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($130,$2);
       $131 = ((($130)) + 24|0);
       HEAP32[$129>>2] = $131;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i224);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i224);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($2);
      $132 = ((($first)) + 2|0);
      $$0 = $132;
      break L1;
      break;
     }
     case 83:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($3,1873);
      $133 = ((($db)) + 4|0);
      $134 = HEAP32[$133>>2]|0;
      $135 = ((($db)) + 8|0);
      $136 = HEAP32[$135>>2]|0;
      $137 = ($134>>>0)<($136>>>0);
      if ($137) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($134,$3);
       $138 = HEAP32[$133>>2]|0;
       $139 = ((($138)) + 24|0);
       HEAP32[$133>>2] = $139;
      } else {
       $140 = ((($db)) + 12|0);
       $141 = HEAP32[$db>>2]|0;
       $142 = $134;
       $143 = $141;
       $144 = (($142) - ($143))|0;
       $145 = (($144|0) / 24)&-1;
       $146 = (($145) + 1)|0;
       $147 = ($144|0)<(-24);
       if ($147) {
        __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
        // unreachable;
       }
       $148 = $136;
       $149 = (($148) - ($143))|0;
       $150 = (($149|0) / 24)&-1;
       $151 = ($150>>>0)<(1073741823);
       if ($151) {
        $152 = $150 << 1;
        $153 = ($152>>>0)<($146>>>0);
        $154 = $153 ? $146 : $152;
        $$0$i$i$i15 = $154;
       } else {
        $$0$i$i$i15 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i224,$$0$i$i$i15,$145,$140);
       $155 = ((($__v$i$i224)) + 8|0);
       $156 = HEAP32[$155>>2]|0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($156,$3);
       $157 = ((($156)) + 24|0);
       HEAP32[$155>>2] = $157;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i224);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i224);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      $158 = ((($first)) + 2|0);
      $$0 = $158;
      break L1;
      break;
     }
     default: {
      $$0 = $first;
      break L1;
     }
     }
     break;
    }
    case 99:  {
     $159 = ((($first)) + 1|0);
     $160 = HEAP8[$159>>0]|0;
     $161 = $160 << 24 >> 24;
     switch ($161|0) {
     case 108:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($4,1883);
      $162 = ((($db)) + 4|0);
      $163 = HEAP32[$162>>2]|0;
      $164 = ((($db)) + 8|0);
      $165 = HEAP32[$164>>2]|0;
      $166 = ($163>>>0)<($165>>>0);
      if ($166) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($163,$4);
       $167 = HEAP32[$162>>2]|0;
       $168 = ((($167)) + 24|0);
       HEAP32[$162>>2] = $168;
      } else {
       $169 = ((($db)) + 12|0);
       $170 = HEAP32[$db>>2]|0;
       $171 = $163;
       $172 = $170;
       $173 = (($171) - ($172))|0;
       $174 = (($173|0) / 24)&-1;
       $175 = (($174) + 1)|0;
       $176 = ($173|0)<(-24);
       if ($176) {
        __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
        // unreachable;
       }
       $177 = $165;
       $178 = (($177) - ($172))|0;
       $179 = (($178|0) / 24)&-1;
       $180 = ($179>>>0)<(1073741823);
       if ($180) {
        $181 = $179 << 1;
        $182 = ($181>>>0)<($175>>>0);
        $183 = $182 ? $175 : $181;
        $$0$i$i$i20 = $183;
       } else {
        $$0$i$i$i20 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i224,$$0$i$i$i20,$174,$169);
       $184 = ((($__v$i$i224)) + 8|0);
       $185 = HEAP32[$184>>2]|0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($185,$4);
       $186 = ((($185)) + 24|0);
       HEAP32[$184>>2] = $186;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i224);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i224);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($4);
      $187 = ((($first)) + 2|0);
      $$0 = $187;
      break L1;
      break;
     }
     case 109:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($5,1894);
      $188 = ((($db)) + 4|0);
      $189 = HEAP32[$188>>2]|0;
      $190 = ((($db)) + 8|0);
      $191 = HEAP32[$190>>2]|0;
      $192 = ($189>>>0)<($191>>>0);
      if ($192) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($189,$5);
       $193 = HEAP32[$188>>2]|0;
       $194 = ((($193)) + 24|0);
       HEAP32[$188>>2] = $194;
      } else {
       $195 = ((($db)) + 12|0);
       $196 = HEAP32[$db>>2]|0;
       $197 = $189;
       $198 = $196;
       $199 = (($197) - ($198))|0;
       $200 = (($199|0) / 24)&-1;
       $201 = (($200) + 1)|0;
       $202 = ($199|0)<(-24);
       if ($202) {
        __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
        // unreachable;
       }
       $203 = $191;
       $204 = (($203) - ($198))|0;
       $205 = (($204|0) / 24)&-1;
       $206 = ($205>>>0)<(1073741823);
       if ($206) {
        $207 = $205 << 1;
        $208 = ($207>>>0)<($201>>>0);
        $209 = $208 ? $201 : $207;
        $$0$i$i$i25 = $209;
       } else {
        $$0$i$i$i25 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i224,$$0$i$i$i25,$200,$195);
       $210 = ((($__v$i$i224)) + 8|0);
       $211 = HEAP32[$210>>2]|0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($211,$5);
       $212 = ((($211)) + 24|0);
       HEAP32[$210>>2] = $212;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i224);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i224);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($5);
      $213 = ((($first)) + 2|0);
      $$0 = $213;
      break L1;
      break;
     }
     case 111:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($6,1904);
      $214 = ((($db)) + 4|0);
      $215 = HEAP32[$214>>2]|0;
      $216 = ((($db)) + 8|0);
      $217 = HEAP32[$216>>2]|0;
      $218 = ($215>>>0)<($217>>>0);
      if ($218) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($215,$6);
       $219 = HEAP32[$214>>2]|0;
       $220 = ((($219)) + 24|0);
       HEAP32[$214>>2] = $220;
      } else {
       $221 = ((($db)) + 12|0);
       $222 = HEAP32[$db>>2]|0;
       $223 = $215;
       $224 = $222;
       $225 = (($223) - ($224))|0;
       $226 = (($225|0) / 24)&-1;
       $227 = (($226) + 1)|0;
       $228 = ($225|0)<(-24);
       if ($228) {
        __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
        // unreachable;
       }
       $229 = $217;
       $230 = (($229) - ($224))|0;
       $231 = (($230|0) / 24)&-1;
       $232 = ($231>>>0)<(1073741823);
       if ($232) {
        $233 = $231 << 1;
        $234 = ($233>>>0)<($227>>>0);
        $235 = $234 ? $227 : $233;
        $$0$i$i$i30 = $235;
       } else {
        $$0$i$i$i30 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i224,$$0$i$i$i30,$226,$221);
       $236 = ((($__v$i$i224)) + 8|0);
       $237 = HEAP32[$236>>2]|0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($237,$6);
       $238 = ((($237)) + 24|0);
       HEAP32[$236>>2] = $238;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i224);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i224);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($6);
      $239 = ((($first)) + 2|0);
      $$0 = $239;
      break L1;
      break;
     }
     case 118:  {
      $240 = ((($db)) + 63|0);
      $241 = HEAP8[$240>>0]|0;
      HEAP8[$240>>0] = 0;
      $242 = ((($first)) + 2|0);
      $243 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($242,$last,$db)|0);
      HEAP8[$240>>0] = $241;
      $244 = ($243|0)==($242|0);
      if ($244) {
       $$0 = $first;
       break L1;
      }
      $245 = HEAP32[$db>>2]|0;
      $246 = ((($db)) + 4|0);
      $247 = HEAP32[$246>>2]|0;
      $248 = ($245|0)==($247|0);
      if ($248) {
       $$0 = $first;
       break L1;
      }
      $249 = ((($247)) + -24|0);
      (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($249,0,1914)|0);
      $250 = ((($db)) + 60|0);
      HEAP8[$250>>0] = 1;
      $$0 = $243;
      break L1;
      break;
     }
     default: {
      $$0 = $first;
      break L1;
     }
     }
     break;
    }
    case 100:  {
     $251 = ((($first)) + 1|0);
     $252 = HEAP8[$251>>0]|0;
     $253 = $252 << 24 >> 24;
     switch ($253|0) {
     case 97:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj18EEERAT__Kc($7,1924);
      $254 = ((($db)) + 4|0);
      $255 = HEAP32[$254>>2]|0;
      $256 = ((($db)) + 8|0);
      $257 = HEAP32[$256>>2]|0;
      $258 = ($255>>>0)<($257>>>0);
      if ($258) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($255,$7);
       $259 = HEAP32[$254>>2]|0;
       $260 = ((($259)) + 24|0);
       HEAP32[$254>>2] = $260;
      } else {
       $261 = ((($db)) + 12|0);
       $262 = HEAP32[$db>>2]|0;
       $263 = $255;
       $264 = $262;
       $265 = (($263) - ($264))|0;
       $266 = (($265|0) / 24)&-1;
       $267 = (($266) + 1)|0;
       $268 = ($265|0)<(-24);
       if ($268) {
        __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
        // unreachable;
       }
       $269 = $257;
       $270 = (($269) - ($264))|0;
       $271 = (($270|0) / 24)&-1;
       $272 = ($271>>>0)<(1073741823);
       if ($272) {
        $273 = $271 << 1;
        $274 = ($273>>>0)<($267>>>0);
        $275 = $274 ? $267 : $273;
        $$0$i$i$i35 = $275;
       } else {
        $$0$i$i$i35 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i224,$$0$i$i$i35,$266,$261);
       $276 = ((($__v$i$i224)) + 8|0);
       $277 = HEAP32[$276>>2]|0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($277,$7);
       $278 = ((($277)) + 24|0);
       HEAP32[$276>>2] = $278;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i224);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i224);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($7);
      $279 = ((($first)) + 2|0);
      $$0 = $279;
      break L1;
      break;
     }
     case 101:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($8,1942);
      $280 = ((($db)) + 4|0);
      $281 = HEAP32[$280>>2]|0;
      $282 = ((($db)) + 8|0);
      $283 = HEAP32[$282>>2]|0;
      $284 = ($281>>>0)<($283>>>0);
      if ($284) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($281,$8);
       $285 = HEAP32[$280>>2]|0;
       $286 = ((($285)) + 24|0);
       HEAP32[$280>>2] = $286;
      } else {
       $287 = ((($db)) + 12|0);
       $288 = HEAP32[$db>>2]|0;
       $289 = $281;
       $290 = $288;
       $291 = (($289) - ($290))|0;
       $292 = (($291|0) / 24)&-1;
       $293 = (($292) + 1)|0;
       $294 = ($291|0)<(-24);
       if ($294) {
        __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
        // unreachable;
       }
       $295 = $283;
       $296 = (($295) - ($290))|0;
       $297 = (($296|0) / 24)&-1;
       $298 = ($297>>>0)<(1073741823);
       if ($298) {
        $299 = $297 << 1;
        $300 = ($299>>>0)<($293>>>0);
        $301 = $300 ? $293 : $299;
        $$0$i$i$i40 = $301;
       } else {
        $$0$i$i$i40 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i224,$$0$i$i$i40,$292,$287);
       $302 = ((($__v$i$i224)) + 8|0);
       $303 = HEAP32[$302>>2]|0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($303,$8);
       $304 = ((($303)) + 24|0);
       HEAP32[$302>>2] = $304;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i224);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i224);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($8);
      $305 = ((($first)) + 2|0);
      $$0 = $305;
      break L1;
      break;
     }
     case 108:  {
      $306 = (_malloc(16)|0);
      $307 = ((($9)) + 8|0);
      HEAP32[$307>>2] = $306;
      HEAP32[$9>>2] = 17;
      $308 = ((($9)) + 4|0);
      HEAP32[$308>>2] = 15;
      dest=$306; src=1952; stop=dest+15|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
      $309 = ((($306)) + 15|0);
      HEAP8[$309>>0] = 0;
      $310 = ((($9)) + 12|0);
      HEAP32[$310>>2] = 0;
      $311 = ((($310)) + 4|0);
      HEAP32[$311>>2] = 0;
      $312 = ((($310)) + 8|0);
      HEAP32[$312>>2] = 0;
      $313 = ((($db)) + 4|0);
      $314 = HEAP32[$313>>2]|0;
      $315 = ((($db)) + 8|0);
      $316 = HEAP32[$315>>2]|0;
      $317 = ($314>>>0)<($316>>>0);
      if ($317) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($314,$9);
       $318 = HEAP32[$313>>2]|0;
       $319 = ((($318)) + 24|0);
       HEAP32[$313>>2] = $319;
      } else {
       $320 = ((($db)) + 12|0);
       $321 = HEAP32[$db>>2]|0;
       $322 = $314;
       $323 = $321;
       $324 = (($322) - ($323))|0;
       $325 = (($324|0) / 24)&-1;
       $326 = (($325) + 1)|0;
       $327 = ($324|0)<(-24);
       if ($327) {
        __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
        // unreachable;
       }
       $328 = $316;
       $329 = (($328) - ($323))|0;
       $330 = (($329|0) / 24)&-1;
       $331 = ($330>>>0)<(1073741823);
       if ($331) {
        $332 = $330 << 1;
        $333 = ($332>>>0)<($326>>>0);
        $334 = $333 ? $326 : $332;
        $$0$i$i$i45 = $334;
       } else {
        $$0$i$i$i45 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i224,$$0$i$i$i45,$325,$320);
       $335 = ((($__v$i$i224)) + 8|0);
       $336 = HEAP32[$335>>2]|0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($336,$9);
       $337 = ((($336)) + 24|0);
       HEAP32[$335>>2] = $337;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i224);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i224);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($9);
      $338 = ((($first)) + 2|0);
      $$0 = $338;
      break L1;
      break;
     }
     case 118:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($10,1968);
      $339 = ((($db)) + 4|0);
      $340 = HEAP32[$339>>2]|0;
      $341 = ((($db)) + 8|0);
      $342 = HEAP32[$341>>2]|0;
      $343 = ($340>>>0)<($342>>>0);
      if ($343) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($340,$10);
       $344 = HEAP32[$339>>2]|0;
       $345 = ((($344)) + 24|0);
       HEAP32[$339>>2] = $345;
      } else {
       $346 = ((($db)) + 12|0);
       $347 = HEAP32[$db>>2]|0;
       $348 = $340;
       $349 = $347;
       $350 = (($348) - ($349))|0;
       $351 = (($350|0) / 24)&-1;
       $352 = (($351) + 1)|0;
       $353 = ($350|0)<(-24);
       if ($353) {
        __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
        // unreachable;
       }
       $354 = $342;
       $355 = (($354) - ($349))|0;
       $356 = (($355|0) / 24)&-1;
       $357 = ($356>>>0)<(1073741823);
       if ($357) {
        $358 = $356 << 1;
        $359 = ($358>>>0)<($352>>>0);
        $360 = $359 ? $352 : $358;
        $$0$i$i$i50 = $360;
       } else {
        $$0$i$i$i50 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i224,$$0$i$i$i50,$351,$346);
       $361 = ((($__v$i$i224)) + 8|0);
       $362 = HEAP32[$361>>2]|0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($362,$10);
       $363 = ((($362)) + 24|0);
       HEAP32[$361>>2] = $363;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i224);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i224);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($10);
      $364 = ((($first)) + 2|0);
      $$0 = $364;
      break L1;
      break;
     }
     case 86:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($11,1978);
      $365 = ((($db)) + 4|0);
      $366 = HEAP32[$365>>2]|0;
      $367 = ((($db)) + 8|0);
      $368 = HEAP32[$367>>2]|0;
      $369 = ($366>>>0)<($368>>>0);
      if ($369) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($366,$11);
       $370 = HEAP32[$365>>2]|0;
       $371 = ((($370)) + 24|0);
       HEAP32[$365>>2] = $371;
      } else {
       $372 = ((($db)) + 12|0);
       $373 = HEAP32[$db>>2]|0;
       $374 = $366;
       $375 = $373;
       $376 = (($374) - ($375))|0;
       $377 = (($376|0) / 24)&-1;
       $378 = (($377) + 1)|0;
       $379 = ($376|0)<(-24);
       if ($379) {
        __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
        // unreachable;
       }
       $380 = $368;
       $381 = (($380) - ($375))|0;
       $382 = (($381|0) / 24)&-1;
       $383 = ($382>>>0)<(1073741823);
       if ($383) {
        $384 = $382 << 1;
        $385 = ($384>>>0)<($378>>>0);
        $386 = $385 ? $378 : $384;
        $$0$i$i$i55 = $386;
       } else {
        $$0$i$i$i55 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i224,$$0$i$i$i55,$377,$372);
       $387 = ((($__v$i$i224)) + 8|0);
       $388 = HEAP32[$387>>2]|0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($388,$11);
       $389 = ((($388)) + 24|0);
       HEAP32[$387>>2] = $389;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i224);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i224);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($11);
      $390 = ((($first)) + 2|0);
      $$0 = $390;
      break L1;
      break;
     }
     default: {
      $$0 = $first;
      break L1;
     }
     }
     break;
    }
    case 101:  {
     $391 = ((($first)) + 1|0);
     $392 = HEAP8[$391>>0]|0;
     $393 = $392 << 24 >> 24;
     switch ($393|0) {
     case 111:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($12,1989);
      $394 = ((($db)) + 4|0);
      $395 = HEAP32[$394>>2]|0;
      $396 = ((($db)) + 8|0);
      $397 = HEAP32[$396>>2]|0;
      $398 = ($395>>>0)<($397>>>0);
      if ($398) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($395,$12);
       $399 = HEAP32[$394>>2]|0;
       $400 = ((($399)) + 24|0);
       HEAP32[$394>>2] = $400;
      } else {
       $401 = ((($db)) + 12|0);
       $402 = HEAP32[$db>>2]|0;
       $403 = $395;
       $404 = $402;
       $405 = (($403) - ($404))|0;
       $406 = (($405|0) / 24)&-1;
       $407 = (($406) + 1)|0;
       $408 = ($405|0)<(-24);
       if ($408) {
        __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
        // unreachable;
       }
       $409 = $397;
       $410 = (($409) - ($404))|0;
       $411 = (($410|0) / 24)&-1;
       $412 = ($411>>>0)<(1073741823);
       if ($412) {
        $413 = $411 << 1;
        $414 = ($413>>>0)<($407>>>0);
        $415 = $414 ? $407 : $413;
        $$0$i$i$i60 = $415;
       } else {
        $$0$i$i$i60 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i224,$$0$i$i$i60,$406,$401);
       $416 = ((($__v$i$i224)) + 8|0);
       $417 = HEAP32[$416>>2]|0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($417,$12);
       $418 = ((($417)) + 24|0);
       HEAP32[$416>>2] = $418;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i224);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i224);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($12);
      $419 = ((($first)) + 2|0);
      $$0 = $419;
      break L1;
      break;
     }
     case 79:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($13,1999);
      $420 = ((($db)) + 4|0);
      $421 = HEAP32[$420>>2]|0;
      $422 = ((($db)) + 8|0);
      $423 = HEAP32[$422>>2]|0;
      $424 = ($421>>>0)<($423>>>0);
      if ($424) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($421,$13);
       $425 = HEAP32[$420>>2]|0;
       $426 = ((($425)) + 24|0);
       HEAP32[$420>>2] = $426;
      } else {
       $427 = ((($db)) + 12|0);
       $428 = HEAP32[$db>>2]|0;
       $429 = $421;
       $430 = $428;
       $431 = (($429) - ($430))|0;
       $432 = (($431|0) / 24)&-1;
       $433 = (($432) + 1)|0;
       $434 = ($431|0)<(-24);
       if ($434) {
        __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
        // unreachable;
       }
       $435 = $423;
       $436 = (($435) - ($430))|0;
       $437 = (($436|0) / 24)&-1;
       $438 = ($437>>>0)<(1073741823);
       if ($438) {
        $439 = $437 << 1;
        $440 = ($439>>>0)<($433>>>0);
        $441 = $440 ? $433 : $439;
        $$0$i$i$i65 = $441;
       } else {
        $$0$i$i$i65 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i224,$$0$i$i$i65,$432,$427);
       $442 = ((($__v$i$i224)) + 8|0);
       $443 = HEAP32[$442>>2]|0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($443,$13);
       $444 = ((($443)) + 24|0);
       HEAP32[$442>>2] = $444;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i224);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i224);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($13);
      $445 = ((($first)) + 2|0);
      $$0 = $445;
      break L1;
      break;
     }
     case 113:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($14,2010);
      $446 = ((($db)) + 4|0);
      $447 = HEAP32[$446>>2]|0;
      $448 = ((($db)) + 8|0);
      $449 = HEAP32[$448>>2]|0;
      $450 = ($447>>>0)<($449>>>0);
      if ($450) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($447,$14);
       $451 = HEAP32[$446>>2]|0;
       $452 = ((($451)) + 24|0);
       HEAP32[$446>>2] = $452;
      } else {
       $453 = ((($db)) + 12|0);
       $454 = HEAP32[$db>>2]|0;
       $455 = $447;
       $456 = $454;
       $457 = (($455) - ($456))|0;
       $458 = (($457|0) / 24)&-1;
       $459 = (($458) + 1)|0;
       $460 = ($457|0)<(-24);
       if ($460) {
        __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
        // unreachable;
       }
       $461 = $449;
       $462 = (($461) - ($456))|0;
       $463 = (($462|0) / 24)&-1;
       $464 = ($463>>>0)<(1073741823);
       if ($464) {
        $465 = $463 << 1;
        $466 = ($465>>>0)<($459>>>0);
        $467 = $466 ? $459 : $465;
        $$0$i$i$i70 = $467;
       } else {
        $$0$i$i$i70 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i224,$$0$i$i$i70,$458,$453);
       $468 = ((($__v$i$i224)) + 8|0);
       $469 = HEAP32[$468>>2]|0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($469,$14);
       $470 = ((($469)) + 24|0);
       HEAP32[$468>>2] = $470;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i224);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i224);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($14);
      $471 = ((($first)) + 2|0);
      $$0 = $471;
      break L1;
      break;
     }
     default: {
      $$0 = $first;
      break L1;
     }
     }
     break;
    }
    case 103:  {
     $472 = ((($first)) + 1|0);
     $473 = HEAP8[$472>>0]|0;
     $474 = $473 << 24 >> 24;
     switch ($474|0) {
     case 101:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($15,2021);
      $475 = ((($db)) + 4|0);
      $476 = HEAP32[$475>>2]|0;
      $477 = ((($db)) + 8|0);
      $478 = HEAP32[$477>>2]|0;
      $479 = ($476>>>0)<($478>>>0);
      if ($479) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($476,$15);
       $480 = HEAP32[$475>>2]|0;
       $481 = ((($480)) + 24|0);
       HEAP32[$475>>2] = $481;
      } else {
       $482 = ((($db)) + 12|0);
       $483 = HEAP32[$db>>2]|0;
       $484 = $476;
       $485 = $483;
       $486 = (($484) - ($485))|0;
       $487 = (($486|0) / 24)&-1;
       $488 = (($487) + 1)|0;
       $489 = ($486|0)<(-24);
       if ($489) {
        __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
        // unreachable;
       }
       $490 = $478;
       $491 = (($490) - ($485))|0;
       $492 = (($491|0) / 24)&-1;
       $493 = ($492>>>0)<(1073741823);
       if ($493) {
        $494 = $492 << 1;
        $495 = ($494>>>0)<($488>>>0);
        $496 = $495 ? $488 : $494;
        $$0$i$i$i75 = $496;
       } else {
        $$0$i$i$i75 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i224,$$0$i$i$i75,$487,$482);
       $497 = ((($__v$i$i224)) + 8|0);
       $498 = HEAP32[$497>>2]|0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($498,$15);
       $499 = ((($498)) + 24|0);
       HEAP32[$497>>2] = $499;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i224);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i224);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($15);
      $500 = ((($first)) + 2|0);
      $$0 = $500;
      break L1;
      break;
     }
     case 116:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($16,2032);
      $501 = ((($db)) + 4|0);
      $502 = HEAP32[$501>>2]|0;
      $503 = ((($db)) + 8|0);
      $504 = HEAP32[$503>>2]|0;
      $505 = ($502>>>0)<($504>>>0);
      if ($505) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($502,$16);
       $506 = HEAP32[$501>>2]|0;
       $507 = ((($506)) + 24|0);
       HEAP32[$501>>2] = $507;
      } else {
       $508 = ((($db)) + 12|0);
       $509 = HEAP32[$db>>2]|0;
       $510 = $502;
       $511 = $509;
       $512 = (($510) - ($511))|0;
       $513 = (($512|0) / 24)&-1;
       $514 = (($513) + 1)|0;
       $515 = ($512|0)<(-24);
       if ($515) {
        __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
        // unreachable;
       }
       $516 = $504;
       $517 = (($516) - ($511))|0;
       $518 = (($517|0) / 24)&-1;
       $519 = ($518>>>0)<(1073741823);
       if ($519) {
        $520 = $518 << 1;
        $521 = ($520>>>0)<($514>>>0);
        $522 = $521 ? $514 : $520;
        $$0$i$i$i80 = $522;
       } else {
        $$0$i$i$i80 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i224,$$0$i$i$i80,$513,$508);
       $523 = ((($__v$i$i224)) + 8|0);
       $524 = HEAP32[$523>>2]|0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($524,$16);
       $525 = ((($524)) + 24|0);
       HEAP32[$523>>2] = $525;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i224);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i224);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($16);
      $526 = ((($first)) + 2|0);
      $$0 = $526;
      break L1;
      break;
     }
     default: {
      $$0 = $first;
      break L1;
     }
     }
     break;
    }
    case 105:  {
     $527 = ((($first)) + 1|0);
     $528 = HEAP8[$527>>0]|0;
     $529 = ($528<<24>>24)==(120);
     if (!($529)) {
      $$0 = $first;
      break L1;
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($17,2042);
     $530 = ((($db)) + 4|0);
     $531 = HEAP32[$530>>2]|0;
     $532 = ((($db)) + 8|0);
     $533 = HEAP32[$532>>2]|0;
     $534 = ($531>>>0)<($533>>>0);
     if ($534) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($531,$17);
      $535 = HEAP32[$530>>2]|0;
      $536 = ((($535)) + 24|0);
      HEAP32[$530>>2] = $536;
     } else {
      $537 = ((($db)) + 12|0);
      $538 = HEAP32[$db>>2]|0;
      $539 = $531;
      $540 = $538;
      $541 = (($539) - ($540))|0;
      $542 = (($541|0) / 24)&-1;
      $543 = (($542) + 1)|0;
      $544 = ($541|0)<(-24);
      if ($544) {
       __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
       // unreachable;
      }
      $545 = $533;
      $546 = (($545) - ($540))|0;
      $547 = (($546|0) / 24)&-1;
      $548 = ($547>>>0)<(1073741823);
      if ($548) {
       $549 = $547 << 1;
       $550 = ($549>>>0)<($543>>>0);
       $551 = $550 ? $543 : $549;
       $$0$i$i$i85 = $551;
      } else {
       $$0$i$i$i85 = 2147483647;
      }
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i224,$$0$i$i$i85,$542,$537);
      $552 = ((($__v$i$i224)) + 8|0);
      $553 = HEAP32[$552>>2]|0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($553,$17);
      $554 = ((($553)) + 24|0);
      HEAP32[$552>>2] = $554;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i224);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i224);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($17);
     $555 = ((($first)) + 2|0);
     $$0 = $555;
     break L1;
     break;
    }
    case 108:  {
     $556 = ((($first)) + 1|0);
     $557 = HEAP8[$556>>0]|0;
     $558 = $557 << 24 >> 24;
     switch ($558|0) {
     case 101:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($18,2053);
      $559 = ((($db)) + 4|0);
      $560 = HEAP32[$559>>2]|0;
      $561 = ((($db)) + 8|0);
      $562 = HEAP32[$561>>2]|0;
      $563 = ($560>>>0)<($562>>>0);
      if ($563) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($560,$18);
       $564 = HEAP32[$559>>2]|0;
       $565 = ((($564)) + 24|0);
       HEAP32[$559>>2] = $565;
      } else {
       $566 = ((($db)) + 12|0);
       $567 = HEAP32[$db>>2]|0;
       $568 = $560;
       $569 = $567;
       $570 = (($568) - ($569))|0;
       $571 = (($570|0) / 24)&-1;
       $572 = (($571) + 1)|0;
       $573 = ($570|0)<(-24);
       if ($573) {
        __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
        // unreachable;
       }
       $574 = $562;
       $575 = (($574) - ($569))|0;
       $576 = (($575|0) / 24)&-1;
       $577 = ($576>>>0)<(1073741823);
       if ($577) {
        $578 = $576 << 1;
        $579 = ($578>>>0)<($572>>>0);
        $580 = $579 ? $572 : $578;
        $$0$i$i$i90 = $580;
       } else {
        $$0$i$i$i90 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i224,$$0$i$i$i90,$571,$566);
       $581 = ((($__v$i$i224)) + 8|0);
       $582 = HEAP32[$581>>2]|0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($582,$18);
       $583 = ((($582)) + 24|0);
       HEAP32[$581>>2] = $583;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i224);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i224);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($18);
      $584 = ((($first)) + 2|0);
      $$0 = $584;
      break L1;
      break;
     }
     case 105:  {
      $585 = ((($first)) + 2|0);
      $586 = (__ZN10__cxxabiv112_GLOBAL__N_117parse_source_nameINS0_2DbEEEPKcS4_S4_RT_($585,$last,$db)|0);
      $587 = ($586|0)==($585|0);
      if ($587) {
       $$0 = $first;
       break L1;
      }
      $588 = HEAP32[$db>>2]|0;
      $589 = ((($db)) + 4|0);
      $590 = HEAP32[$589>>2]|0;
      $591 = ($588|0)==($590|0);
      if ($591) {
       $$0 = $first;
       break L1;
      }
      $592 = ((($590)) + -24|0);
      (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($592,0,2064)|0);
      $$0 = $586;
      break L1;
      break;
     }
     case 115:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($19,2076);
      $593 = ((($db)) + 4|0);
      $594 = HEAP32[$593>>2]|0;
      $595 = ((($db)) + 8|0);
      $596 = HEAP32[$595>>2]|0;
      $597 = ($594>>>0)<($596>>>0);
      if ($597) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($594,$19);
       $598 = HEAP32[$593>>2]|0;
       $599 = ((($598)) + 24|0);
       HEAP32[$593>>2] = $599;
      } else {
       $600 = ((($db)) + 12|0);
       $601 = HEAP32[$db>>2]|0;
       $602 = $594;
       $603 = $601;
       $604 = (($602) - ($603))|0;
       $605 = (($604|0) / 24)&-1;
       $606 = (($605) + 1)|0;
       $607 = ($604|0)<(-24);
       if ($607) {
        __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
        // unreachable;
       }
       $608 = $596;
       $609 = (($608) - ($603))|0;
       $610 = (($609|0) / 24)&-1;
       $611 = ($610>>>0)<(1073741823);
       if ($611) {
        $612 = $610 << 1;
        $613 = ($612>>>0)<($606>>>0);
        $614 = $613 ? $606 : $612;
        $$0$i$i$i95 = $614;
       } else {
        $$0$i$i$i95 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i224,$$0$i$i$i95,$605,$600);
       $615 = ((($__v$i$i224)) + 8|0);
       $616 = HEAP32[$615>>2]|0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($616,$19);
       $617 = ((($616)) + 24|0);
       HEAP32[$615>>2] = $617;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i224);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i224);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($19);
      $618 = ((($first)) + 2|0);
      $$0 = $618;
      break L1;
      break;
     }
     case 83:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj12EEERAT__Kc($20,2087);
      $619 = ((($db)) + 4|0);
      $620 = HEAP32[$619>>2]|0;
      $621 = ((($db)) + 8|0);
      $622 = HEAP32[$621>>2]|0;
      $623 = ($620>>>0)<($622>>>0);
      if ($623) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($620,$20);
       $624 = HEAP32[$619>>2]|0;
       $625 = ((($624)) + 24|0);
       HEAP32[$619>>2] = $625;
      } else {
       $626 = ((($db)) + 12|0);
       $627 = HEAP32[$db>>2]|0;
       $628 = $620;
       $629 = $627;
       $630 = (($628) - ($629))|0;
       $631 = (($630|0) / 24)&-1;
       $632 = (($631) + 1)|0;
       $633 = ($630|0)<(-24);
       if ($633) {
        __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
        // unreachable;
       }
       $634 = $622;
       $635 = (($634) - ($629))|0;
       $636 = (($635|0) / 24)&-1;
       $637 = ($636>>>0)<(1073741823);
       if ($637) {
        $638 = $636 << 1;
        $639 = ($638>>>0)<($632>>>0);
        $640 = $639 ? $632 : $638;
        $$0$i$i$i100 = $640;
       } else {
        $$0$i$i$i100 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i224,$$0$i$i$i100,$631,$626);
       $641 = ((($__v$i$i224)) + 8|0);
       $642 = HEAP32[$641>>2]|0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($642,$20);
       $643 = ((($642)) + 24|0);
       HEAP32[$641>>2] = $643;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i224);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i224);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($20);
      $644 = ((($first)) + 2|0);
      $$0 = $644;
      break L1;
      break;
     }
     case 116:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($21,2099);
      $645 = ((($db)) + 4|0);
      $646 = HEAP32[$645>>2]|0;
      $647 = ((($db)) + 8|0);
      $648 = HEAP32[$647>>2]|0;
      $649 = ($646>>>0)<($648>>>0);
      if ($649) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($646,$21);
       $650 = HEAP32[$645>>2]|0;
       $651 = ((($650)) + 24|0);
       HEAP32[$645>>2] = $651;
      } else {
       $652 = ((($db)) + 12|0);
       $653 = HEAP32[$db>>2]|0;
       $654 = $646;
       $655 = $653;
       $656 = (($654) - ($655))|0;
       $657 = (($656|0) / 24)&-1;
       $658 = (($657) + 1)|0;
       $659 = ($656|0)<(-24);
       if ($659) {
        __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
        // unreachable;
       }
       $660 = $648;
       $661 = (($660) - ($655))|0;
       $662 = (($661|0) / 24)&-1;
       $663 = ($662>>>0)<(1073741823);
       if ($663) {
        $664 = $662 << 1;
        $665 = ($664>>>0)<($658>>>0);
        $666 = $665 ? $658 : $664;
        $$0$i$i$i105 = $666;
       } else {
        $$0$i$i$i105 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i224,$$0$i$i$i105,$657,$652);
       $667 = ((($__v$i$i224)) + 8|0);
       $668 = HEAP32[$667>>2]|0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($668,$21);
       $669 = ((($668)) + 24|0);
       HEAP32[$667>>2] = $669;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i224);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i224);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($21);
      $670 = ((($first)) + 2|0);
      $$0 = $670;
      break L1;
      break;
     }
     default: {
      $$0 = $first;
      break L1;
     }
     }
     break;
    }
    case 109:  {
     $671 = ((($first)) + 1|0);
     $672 = HEAP8[$671>>0]|0;
     $673 = $672 << 24 >> 24;
     switch ($673|0) {
     case 105:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($22,2109);
      $674 = ((($db)) + 4|0);
      $675 = HEAP32[$674>>2]|0;
      $676 = ((($db)) + 8|0);
      $677 = HEAP32[$676>>2]|0;
      $678 = ($675>>>0)<($677>>>0);
      if ($678) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($675,$22);
       $679 = HEAP32[$674>>2]|0;
       $680 = ((($679)) + 24|0);
       HEAP32[$674>>2] = $680;
      } else {
       $681 = ((($db)) + 12|0);
       $682 = HEAP32[$db>>2]|0;
       $683 = $675;
       $684 = $682;
       $685 = (($683) - ($684))|0;
       $686 = (($685|0) / 24)&-1;
       $687 = (($686) + 1)|0;
       $688 = ($685|0)<(-24);
       if ($688) {
        __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
        // unreachable;
       }
       $689 = $677;
       $690 = (($689) - ($684))|0;
       $691 = (($690|0) / 24)&-1;
       $692 = ($691>>>0)<(1073741823);
       if ($692) {
        $693 = $691 << 1;
        $694 = ($693>>>0)<($687>>>0);
        $695 = $694 ? $687 : $693;
        $$0$i$i$i110 = $695;
       } else {
        $$0$i$i$i110 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i224,$$0$i$i$i110,$686,$681);
       $696 = ((($__v$i$i224)) + 8|0);
       $697 = HEAP32[$696>>2]|0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($697,$22);
       $698 = ((($697)) + 24|0);
       HEAP32[$696>>2] = $698;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i224);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i224);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($22);
      $699 = ((($first)) + 2|0);
      $$0 = $699;
      break L1;
      break;
     }
     case 73:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($23,2119);
      $700 = ((($db)) + 4|0);
      $701 = HEAP32[$700>>2]|0;
      $702 = ((($db)) + 8|0);
      $703 = HEAP32[$702>>2]|0;
      $704 = ($701>>>0)<($703>>>0);
      if ($704) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($701,$23);
       $705 = HEAP32[$700>>2]|0;
       $706 = ((($705)) + 24|0);
       HEAP32[$700>>2] = $706;
      } else {
       $707 = ((($db)) + 12|0);
       $708 = HEAP32[$db>>2]|0;
       $709 = $701;
       $710 = $708;
       $711 = (($709) - ($710))|0;
       $712 = (($711|0) / 24)&-1;
       $713 = (($712) + 1)|0;
       $714 = ($711|0)<(-24);
       if ($714) {
        __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
        // unreachable;
       }
       $715 = $703;
       $716 = (($715) - ($710))|0;
       $717 = (($716|0) / 24)&-1;
       $718 = ($717>>>0)<(1073741823);
       if ($718) {
        $719 = $717 << 1;
        $720 = ($719>>>0)<($713>>>0);
        $721 = $720 ? $713 : $719;
        $$0$i$i$i115 = $721;
       } else {
        $$0$i$i$i115 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i224,$$0$i$i$i115,$712,$707);
       $722 = ((($__v$i$i224)) + 8|0);
       $723 = HEAP32[$722>>2]|0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($723,$23);
       $724 = ((($723)) + 24|0);
       HEAP32[$722>>2] = $724;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i224);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i224);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($23);
      $725 = ((($first)) + 2|0);
      $$0 = $725;
      break L1;
      break;
     }
     case 108:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($24,1942);
      $726 = ((($db)) + 4|0);
      $727 = HEAP32[$726>>2]|0;
      $728 = ((($db)) + 8|0);
      $729 = HEAP32[$728>>2]|0;
      $730 = ($727>>>0)<($729>>>0);
      if ($730) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($727,$24);
       $731 = HEAP32[$726>>2]|0;
       $732 = ((($731)) + 24|0);
       HEAP32[$726>>2] = $732;
      } else {
       $733 = ((($db)) + 12|0);
       $734 = HEAP32[$db>>2]|0;
       $735 = $727;
       $736 = $734;
       $737 = (($735) - ($736))|0;
       $738 = (($737|0) / 24)&-1;
       $739 = (($738) + 1)|0;
       $740 = ($737|0)<(-24);
       if ($740) {
        __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
        // unreachable;
       }
       $741 = $729;
       $742 = (($741) - ($736))|0;
       $743 = (($742|0) / 24)&-1;
       $744 = ($743>>>0)<(1073741823);
       if ($744) {
        $745 = $743 << 1;
        $746 = ($745>>>0)<($739>>>0);
        $747 = $746 ? $739 : $745;
        $$0$i$i$i120 = $747;
       } else {
        $$0$i$i$i120 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i224,$$0$i$i$i120,$738,$733);
       $748 = ((($__v$i$i224)) + 8|0);
       $749 = HEAP32[$748>>2]|0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($749,$24);
       $750 = ((($749)) + 24|0);
       HEAP32[$748>>2] = $750;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i224);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i224);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($24);
      $751 = ((($first)) + 2|0);
      $$0 = $751;
      break L1;
      break;
     }
     case 76:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($25,2130);
      $752 = ((($db)) + 4|0);
      $753 = HEAP32[$752>>2]|0;
      $754 = ((($db)) + 8|0);
      $755 = HEAP32[$754>>2]|0;
      $756 = ($753>>>0)<($755>>>0);
      if ($756) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($753,$25);
       $757 = HEAP32[$752>>2]|0;
       $758 = ((($757)) + 24|0);
       HEAP32[$752>>2] = $758;
      } else {
       $759 = ((($db)) + 12|0);
       $760 = HEAP32[$db>>2]|0;
       $761 = $753;
       $762 = $760;
       $763 = (($761) - ($762))|0;
       $764 = (($763|0) / 24)&-1;
       $765 = (($764) + 1)|0;
       $766 = ($763|0)<(-24);
       if ($766) {
        __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
        // unreachable;
       }
       $767 = $755;
       $768 = (($767) - ($762))|0;
       $769 = (($768|0) / 24)&-1;
       $770 = ($769>>>0)<(1073741823);
       if ($770) {
        $771 = $769 << 1;
        $772 = ($771>>>0)<($765>>>0);
        $773 = $772 ? $765 : $771;
        $$0$i$i$i125 = $773;
       } else {
        $$0$i$i$i125 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i224,$$0$i$i$i125,$764,$759);
       $774 = ((($__v$i$i224)) + 8|0);
       $775 = HEAP32[$774>>2]|0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($775,$25);
       $776 = ((($775)) + 24|0);
       HEAP32[$774>>2] = $776;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i224);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i224);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($25);
      $777 = ((($first)) + 2|0);
      $$0 = $777;
      break L1;
      break;
     }
     case 109:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($26,2141);
      $778 = ((($db)) + 4|0);
      $779 = HEAP32[$778>>2]|0;
      $780 = ((($db)) + 8|0);
      $781 = HEAP32[$780>>2]|0;
      $782 = ($779>>>0)<($781>>>0);
      if ($782) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($779,$26);
       $783 = HEAP32[$778>>2]|0;
       $784 = ((($783)) + 24|0);
       HEAP32[$778>>2] = $784;
      } else {
       $785 = ((($db)) + 12|0);
       $786 = HEAP32[$db>>2]|0;
       $787 = $779;
       $788 = $786;
       $789 = (($787) - ($788))|0;
       $790 = (($789|0) / 24)&-1;
       $791 = (($790) + 1)|0;
       $792 = ($789|0)<(-24);
       if ($792) {
        __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
        // unreachable;
       }
       $793 = $781;
       $794 = (($793) - ($788))|0;
       $795 = (($794|0) / 24)&-1;
       $796 = ($795>>>0)<(1073741823);
       if ($796) {
        $797 = $795 << 1;
        $798 = ($797>>>0)<($791>>>0);
        $799 = $798 ? $791 : $797;
        $$0$i$i$i130 = $799;
       } else {
        $$0$i$i$i130 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i224,$$0$i$i$i130,$790,$785);
       $800 = ((($__v$i$i224)) + 8|0);
       $801 = HEAP32[$800>>2]|0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($801,$26);
       $802 = ((($801)) + 24|0);
       HEAP32[$800>>2] = $802;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i224);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i224);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($26);
      $803 = ((($first)) + 2|0);
      $$0 = $803;
      break L1;
      break;
     }
     default: {
      $$0 = $first;
      break L1;
     }
     }
     break;
    }
    case 110:  {
     $804 = ((($first)) + 1|0);
     $805 = HEAP8[$804>>0]|0;
     $806 = $805 << 24 >> 24;
     switch ($806|0) {
     case 97:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj15EEERAT__Kc($27,2152);
      $807 = ((($db)) + 4|0);
      $808 = HEAP32[$807>>2]|0;
      $809 = ((($db)) + 8|0);
      $810 = HEAP32[$809>>2]|0;
      $811 = ($808>>>0)<($810>>>0);
      if ($811) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($808,$27);
       $812 = HEAP32[$807>>2]|0;
       $813 = ((($812)) + 24|0);
       HEAP32[$807>>2] = $813;
      } else {
       $814 = ((($db)) + 12|0);
       $815 = HEAP32[$db>>2]|0;
       $816 = $808;
       $817 = $815;
       $818 = (($816) - ($817))|0;
       $819 = (($818|0) / 24)&-1;
       $820 = (($819) + 1)|0;
       $821 = ($818|0)<(-24);
       if ($821) {
        __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
        // unreachable;
       }
       $822 = $810;
       $823 = (($822) - ($817))|0;
       $824 = (($823|0) / 24)&-1;
       $825 = ($824>>>0)<(1073741823);
       if ($825) {
        $826 = $824 << 1;
        $827 = ($826>>>0)<($820>>>0);
        $828 = $827 ? $820 : $826;
        $$0$i$i$i135 = $828;
       } else {
        $$0$i$i$i135 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i224,$$0$i$i$i135,$819,$814);
       $829 = ((($__v$i$i224)) + 8|0);
       $830 = HEAP32[$829>>2]|0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($830,$27);
       $831 = ((($830)) + 24|0);
       HEAP32[$829>>2] = $831;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i224);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i224);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($27);
      $832 = ((($first)) + 2|0);
      $$0 = $832;
      break L1;
      break;
     }
     case 101:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($28,2167);
      $833 = ((($db)) + 4|0);
      $834 = HEAP32[$833>>2]|0;
      $835 = ((($db)) + 8|0);
      $836 = HEAP32[$835>>2]|0;
      $837 = ($834>>>0)<($836>>>0);
      if ($837) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($834,$28);
       $838 = HEAP32[$833>>2]|0;
       $839 = ((($838)) + 24|0);
       HEAP32[$833>>2] = $839;
      } else {
       $840 = ((($db)) + 12|0);
       $841 = HEAP32[$db>>2]|0;
       $842 = $834;
       $843 = $841;
       $844 = (($842) - ($843))|0;
       $845 = (($844|0) / 24)&-1;
       $846 = (($845) + 1)|0;
       $847 = ($844|0)<(-24);
       if ($847) {
        __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
        // unreachable;
       }
       $848 = $836;
       $849 = (($848) - ($843))|0;
       $850 = (($849|0) / 24)&-1;
       $851 = ($850>>>0)<(1073741823);
       if ($851) {
        $852 = $850 << 1;
        $853 = ($852>>>0)<($846>>>0);
        $854 = $853 ? $846 : $852;
        $$0$i$i$i140 = $854;
       } else {
        $$0$i$i$i140 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i224,$$0$i$i$i140,$845,$840);
       $855 = ((($__v$i$i224)) + 8|0);
       $856 = HEAP32[$855>>2]|0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($856,$28);
       $857 = ((($856)) + 24|0);
       HEAP32[$855>>2] = $857;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i224);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i224);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($28);
      $858 = ((($first)) + 2|0);
      $$0 = $858;
      break L1;
      break;
     }
     case 103:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($29,2109);
      $859 = ((($db)) + 4|0);
      $860 = HEAP32[$859>>2]|0;
      $861 = ((($db)) + 8|0);
      $862 = HEAP32[$861>>2]|0;
      $863 = ($860>>>0)<($862>>>0);
      if ($863) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($860,$29);
       $864 = HEAP32[$859>>2]|0;
       $865 = ((($864)) + 24|0);
       HEAP32[$859>>2] = $865;
      } else {
       $866 = ((($db)) + 12|0);
       $867 = HEAP32[$db>>2]|0;
       $868 = $860;
       $869 = $867;
       $870 = (($868) - ($869))|0;
       $871 = (($870|0) / 24)&-1;
       $872 = (($871) + 1)|0;
       $873 = ($870|0)<(-24);
       if ($873) {
        __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
        // unreachable;
       }
       $874 = $862;
       $875 = (($874) - ($869))|0;
       $876 = (($875|0) / 24)&-1;
       $877 = ($876>>>0)<(1073741823);
       if ($877) {
        $878 = $876 << 1;
        $879 = ($878>>>0)<($872>>>0);
        $880 = $879 ? $872 : $878;
        $$0$i$i$i145 = $880;
       } else {
        $$0$i$i$i145 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i224,$$0$i$i$i145,$871,$866);
       $881 = ((($__v$i$i224)) + 8|0);
       $882 = HEAP32[$881>>2]|0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($882,$29);
       $883 = ((($882)) + 24|0);
       HEAP32[$881>>2] = $883;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i224);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i224);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($29);
      $884 = ((($first)) + 2|0);
      $$0 = $884;
      break L1;
      break;
     }
     case 116:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($30,2178);
      $885 = ((($db)) + 4|0);
      $886 = HEAP32[$885>>2]|0;
      $887 = ((($db)) + 8|0);
      $888 = HEAP32[$887>>2]|0;
      $889 = ($886>>>0)<($888>>>0);
      if ($889) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($886,$30);
       $890 = HEAP32[$885>>2]|0;
       $891 = ((($890)) + 24|0);
       HEAP32[$885>>2] = $891;
      } else {
       $892 = ((($db)) + 12|0);
       $893 = HEAP32[$db>>2]|0;
       $894 = $886;
       $895 = $893;
       $896 = (($894) - ($895))|0;
       $897 = (($896|0) / 24)&-1;
       $898 = (($897) + 1)|0;
       $899 = ($896|0)<(-24);
       if ($899) {
        __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
        // unreachable;
       }
       $900 = $888;
       $901 = (($900) - ($895))|0;
       $902 = (($901|0) / 24)&-1;
       $903 = ($902>>>0)<(1073741823);
       if ($903) {
        $904 = $902 << 1;
        $905 = ($904>>>0)<($898>>>0);
        $906 = $905 ? $898 : $904;
        $$0$i$i$i150 = $906;
       } else {
        $$0$i$i$i150 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i224,$$0$i$i$i150,$897,$892);
       $907 = ((($__v$i$i224)) + 8|0);
       $908 = HEAP32[$907>>2]|0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($908,$30);
       $909 = ((($908)) + 24|0);
       HEAP32[$907>>2] = $909;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i224);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i224);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($30);
      $910 = ((($first)) + 2|0);
      $$0 = $910;
      break L1;
      break;
     }
     case 119:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj13EEERAT__Kc($31,2188);
      $911 = ((($db)) + 4|0);
      $912 = HEAP32[$911>>2]|0;
      $913 = ((($db)) + 8|0);
      $914 = HEAP32[$913>>2]|0;
      $915 = ($912>>>0)<($914>>>0);
      if ($915) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($912,$31);
       $916 = HEAP32[$911>>2]|0;
       $917 = ((($916)) + 24|0);
       HEAP32[$911>>2] = $917;
      } else {
       $918 = ((($db)) + 12|0);
       $919 = HEAP32[$db>>2]|0;
       $920 = $912;
       $921 = $919;
       $922 = (($920) - ($921))|0;
       $923 = (($922|0) / 24)&-1;
       $924 = (($923) + 1)|0;
       $925 = ($922|0)<(-24);
       if ($925) {
        __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
        // unreachable;
       }
       $926 = $914;
       $927 = (($926) - ($921))|0;
       $928 = (($927|0) / 24)&-1;
       $929 = ($928>>>0)<(1073741823);
       if ($929) {
        $930 = $928 << 1;
        $931 = ($930>>>0)<($924>>>0);
        $932 = $931 ? $924 : $930;
        $$0$i$i$i155 = $932;
       } else {
        $$0$i$i$i155 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i224,$$0$i$i$i155,$923,$918);
       $933 = ((($__v$i$i224)) + 8|0);
       $934 = HEAP32[$933>>2]|0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($934,$31);
       $935 = ((($934)) + 24|0);
       HEAP32[$933>>2] = $935;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i224);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i224);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($31);
      $936 = ((($first)) + 2|0);
      $$0 = $936;
      break L1;
      break;
     }
     default: {
      $$0 = $first;
      break L1;
     }
     }
     break;
    }
    case 111:  {
     $937 = ((($first)) + 1|0);
     $938 = HEAP8[$937>>0]|0;
     $939 = $938 << 24 >> 24;
     switch ($939|0) {
     case 111:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($32,2201);
      $940 = ((($db)) + 4|0);
      $941 = HEAP32[$940>>2]|0;
      $942 = ((($db)) + 8|0);
      $943 = HEAP32[$942>>2]|0;
      $944 = ($941>>>0)<($943>>>0);
      if ($944) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($941,$32);
       $945 = HEAP32[$940>>2]|0;
       $946 = ((($945)) + 24|0);
       HEAP32[$940>>2] = $946;
      } else {
       $947 = ((($db)) + 12|0);
       $948 = HEAP32[$db>>2]|0;
       $949 = $941;
       $950 = $948;
       $951 = (($949) - ($950))|0;
       $952 = (($951|0) / 24)&-1;
       $953 = (($952) + 1)|0;
       $954 = ($951|0)<(-24);
       if ($954) {
        __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
        // unreachable;
       }
       $955 = $943;
       $956 = (($955) - ($950))|0;
       $957 = (($956|0) / 24)&-1;
       $958 = ($957>>>0)<(1073741823);
       if ($958) {
        $959 = $957 << 1;
        $960 = ($959>>>0)<($953>>>0);
        $961 = $960 ? $953 : $959;
        $$0$i$i$i160 = $961;
       } else {
        $$0$i$i$i160 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i224,$$0$i$i$i160,$952,$947);
       $962 = ((($__v$i$i224)) + 8|0);
       $963 = HEAP32[$962>>2]|0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($963,$32);
       $964 = ((($963)) + 24|0);
       HEAP32[$962>>2] = $964;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i224);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i224);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($32);
      $965 = ((($first)) + 2|0);
      $$0 = $965;
      break L1;
      break;
     }
     case 114:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($33,2212);
      $966 = ((($db)) + 4|0);
      $967 = HEAP32[$966>>2]|0;
      $968 = ((($db)) + 8|0);
      $969 = HEAP32[$968>>2]|0;
      $970 = ($967>>>0)<($969>>>0);
      if ($970) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($967,$33);
       $971 = HEAP32[$966>>2]|0;
       $972 = ((($971)) + 24|0);
       HEAP32[$966>>2] = $972;
      } else {
       $973 = ((($db)) + 12|0);
       $974 = HEAP32[$db>>2]|0;
       $975 = $967;
       $976 = $974;
       $977 = (($975) - ($976))|0;
       $978 = (($977|0) / 24)&-1;
       $979 = (($978) + 1)|0;
       $980 = ($977|0)<(-24);
       if ($980) {
        __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
        // unreachable;
       }
       $981 = $969;
       $982 = (($981) - ($976))|0;
       $983 = (($982|0) / 24)&-1;
       $984 = ($983>>>0)<(1073741823);
       if ($984) {
        $985 = $983 << 1;
        $986 = ($985>>>0)<($979>>>0);
        $987 = $986 ? $979 : $985;
        $$0$i$i$i165 = $987;
       } else {
        $$0$i$i$i165 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i224,$$0$i$i$i165,$978,$973);
       $988 = ((($__v$i$i224)) + 8|0);
       $989 = HEAP32[$988>>2]|0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($989,$33);
       $990 = ((($989)) + 24|0);
       HEAP32[$988>>2] = $990;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i224);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i224);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($33);
      $991 = ((($first)) + 2|0);
      $$0 = $991;
      break L1;
      break;
     }
     case 82:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($34,2222);
      $992 = ((($db)) + 4|0);
      $993 = HEAP32[$992>>2]|0;
      $994 = ((($db)) + 8|0);
      $995 = HEAP32[$994>>2]|0;
      $996 = ($993>>>0)<($995>>>0);
      if ($996) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($993,$34);
       $997 = HEAP32[$992>>2]|0;
       $998 = ((($997)) + 24|0);
       HEAP32[$992>>2] = $998;
      } else {
       $999 = ((($db)) + 12|0);
       $1000 = HEAP32[$db>>2]|0;
       $1001 = $993;
       $1002 = $1000;
       $1003 = (($1001) - ($1002))|0;
       $1004 = (($1003|0) / 24)&-1;
       $1005 = (($1004) + 1)|0;
       $1006 = ($1003|0)<(-24);
       if ($1006) {
        __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
        // unreachable;
       }
       $1007 = $995;
       $1008 = (($1007) - ($1002))|0;
       $1009 = (($1008|0) / 24)&-1;
       $1010 = ($1009>>>0)<(1073741823);
       if ($1010) {
        $1011 = $1009 << 1;
        $1012 = ($1011>>>0)<($1005>>>0);
        $1013 = $1012 ? $1005 : $1011;
        $$0$i$i$i170 = $1013;
       } else {
        $$0$i$i$i170 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i224,$$0$i$i$i170,$1004,$999);
       $1014 = ((($__v$i$i224)) + 8|0);
       $1015 = HEAP32[$1014>>2]|0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($1015,$34);
       $1016 = ((($1015)) + 24|0);
       HEAP32[$1014>>2] = $1016;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i224);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i224);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($34);
      $1017 = ((($first)) + 2|0);
      $$0 = $1017;
      break L1;
      break;
     }
     default: {
      $$0 = $first;
      break L1;
     }
     }
     break;
    }
    case 112:  {
     $1018 = ((($first)) + 1|0);
     $1019 = HEAP8[$1018>>0]|0;
     $1020 = $1019 << 24 >> 24;
     switch ($1020|0) {
     case 109:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj12EEERAT__Kc($35,2233);
      $1021 = ((($db)) + 4|0);
      $1022 = HEAP32[$1021>>2]|0;
      $1023 = ((($db)) + 8|0);
      $1024 = HEAP32[$1023>>2]|0;
      $1025 = ($1022>>>0)<($1024>>>0);
      if ($1025) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($1022,$35);
       $1026 = HEAP32[$1021>>2]|0;
       $1027 = ((($1026)) + 24|0);
       HEAP32[$1021>>2] = $1027;
      } else {
       $1028 = ((($db)) + 12|0);
       $1029 = HEAP32[$db>>2]|0;
       $1030 = $1022;
       $1031 = $1029;
       $1032 = (($1030) - ($1031))|0;
       $1033 = (($1032|0) / 24)&-1;
       $1034 = (($1033) + 1)|0;
       $1035 = ($1032|0)<(-24);
       if ($1035) {
        __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
        // unreachable;
       }
       $1036 = $1024;
       $1037 = (($1036) - ($1031))|0;
       $1038 = (($1037|0) / 24)&-1;
       $1039 = ($1038>>>0)<(1073741823);
       if ($1039) {
        $1040 = $1038 << 1;
        $1041 = ($1040>>>0)<($1034>>>0);
        $1042 = $1041 ? $1034 : $1040;
        $$0$i$i$i175 = $1042;
       } else {
        $$0$i$i$i175 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i224,$$0$i$i$i175,$1033,$1028);
       $1043 = ((($__v$i$i224)) + 8|0);
       $1044 = HEAP32[$1043>>2]|0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($1044,$35);
       $1045 = ((($1044)) + 24|0);
       HEAP32[$1043>>2] = $1045;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i224);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i224);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($35);
      $1046 = ((($first)) + 2|0);
      $$0 = $1046;
      break L1;
      break;
     }
     case 108:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($36,2245);
      $1047 = ((($db)) + 4|0);
      $1048 = HEAP32[$1047>>2]|0;
      $1049 = ((($db)) + 8|0);
      $1050 = HEAP32[$1049>>2]|0;
      $1051 = ($1048>>>0)<($1050>>>0);
      if ($1051) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($1048,$36);
       $1052 = HEAP32[$1047>>2]|0;
       $1053 = ((($1052)) + 24|0);
       HEAP32[$1047>>2] = $1053;
      } else {
       $1054 = ((($db)) + 12|0);
       $1055 = HEAP32[$db>>2]|0;
       $1056 = $1048;
       $1057 = $1055;
       $1058 = (($1056) - ($1057))|0;
       $1059 = (($1058|0) / 24)&-1;
       $1060 = (($1059) + 1)|0;
       $1061 = ($1058|0)<(-24);
       if ($1061) {
        __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
        // unreachable;
       }
       $1062 = $1050;
       $1063 = (($1062) - ($1057))|0;
       $1064 = (($1063|0) / 24)&-1;
       $1065 = ($1064>>>0)<(1073741823);
       if ($1065) {
        $1066 = $1064 << 1;
        $1067 = ($1066>>>0)<($1060>>>0);
        $1068 = $1067 ? $1060 : $1066;
        $$0$i$i$i180 = $1068;
       } else {
        $$0$i$i$i180 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i224,$$0$i$i$i180,$1059,$1054);
       $1069 = ((($__v$i$i224)) + 8|0);
       $1070 = HEAP32[$1069>>2]|0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($1070,$36);
       $1071 = ((($1070)) + 24|0);
       HEAP32[$1069>>2] = $1071;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i224);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i224);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($36);
      $1072 = ((($first)) + 2|0);
      $$0 = $1072;
      break L1;
      break;
     }
     case 76:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($37,2255);
      $1073 = ((($db)) + 4|0);
      $1074 = HEAP32[$1073>>2]|0;
      $1075 = ((($db)) + 8|0);
      $1076 = HEAP32[$1075>>2]|0;
      $1077 = ($1074>>>0)<($1076>>>0);
      if ($1077) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($1074,$37);
       $1078 = HEAP32[$1073>>2]|0;
       $1079 = ((($1078)) + 24|0);
       HEAP32[$1073>>2] = $1079;
      } else {
       $1080 = ((($db)) + 12|0);
       $1081 = HEAP32[$db>>2]|0;
       $1082 = $1074;
       $1083 = $1081;
       $1084 = (($1082) - ($1083))|0;
       $1085 = (($1084|0) / 24)&-1;
       $1086 = (($1085) + 1)|0;
       $1087 = ($1084|0)<(-24);
       if ($1087) {
        __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
        // unreachable;
       }
       $1088 = $1076;
       $1089 = (($1088) - ($1083))|0;
       $1090 = (($1089|0) / 24)&-1;
       $1091 = ($1090>>>0)<(1073741823);
       if ($1091) {
        $1092 = $1090 << 1;
        $1093 = ($1092>>>0)<($1086>>>0);
        $1094 = $1093 ? $1086 : $1092;
        $$0$i$i$i185 = $1094;
       } else {
        $$0$i$i$i185 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i224,$$0$i$i$i185,$1085,$1080);
       $1095 = ((($__v$i$i224)) + 8|0);
       $1096 = HEAP32[$1095>>2]|0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($1096,$37);
       $1097 = ((($1096)) + 24|0);
       HEAP32[$1095>>2] = $1097;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i224);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i224);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($37);
      $1098 = ((($first)) + 2|0);
      $$0 = $1098;
      break L1;
      break;
     }
     case 112:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($38,2266);
      $1099 = ((($db)) + 4|0);
      $1100 = HEAP32[$1099>>2]|0;
      $1101 = ((($db)) + 8|0);
      $1102 = HEAP32[$1101>>2]|0;
      $1103 = ($1100>>>0)<($1102>>>0);
      if ($1103) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($1100,$38);
       $1104 = HEAP32[$1099>>2]|0;
       $1105 = ((($1104)) + 24|0);
       HEAP32[$1099>>2] = $1105;
      } else {
       $1106 = ((($db)) + 12|0);
       $1107 = HEAP32[$db>>2]|0;
       $1108 = $1100;
       $1109 = $1107;
       $1110 = (($1108) - ($1109))|0;
       $1111 = (($1110|0) / 24)&-1;
       $1112 = (($1111) + 1)|0;
       $1113 = ($1110|0)<(-24);
       if ($1113) {
        __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
        // unreachable;
       }
       $1114 = $1102;
       $1115 = (($1114) - ($1109))|0;
       $1116 = (($1115|0) / 24)&-1;
       $1117 = ($1116>>>0)<(1073741823);
       if ($1117) {
        $1118 = $1116 << 1;
        $1119 = ($1118>>>0)<($1112>>>0);
        $1120 = $1119 ? $1112 : $1118;
        $$0$i$i$i190 = $1120;
       } else {
        $$0$i$i$i190 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i224,$$0$i$i$i190,$1111,$1106);
       $1121 = ((($__v$i$i224)) + 8|0);
       $1122 = HEAP32[$1121>>2]|0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($1122,$38);
       $1123 = ((($1122)) + 24|0);
       HEAP32[$1121>>2] = $1123;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i224);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i224);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($38);
      $1124 = ((($first)) + 2|0);
      $$0 = $1124;
      break L1;
      break;
     }
     case 115:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($39,2245);
      $1125 = ((($db)) + 4|0);
      $1126 = HEAP32[$1125>>2]|0;
      $1127 = ((($db)) + 8|0);
      $1128 = HEAP32[$1127>>2]|0;
      $1129 = ($1126>>>0)<($1128>>>0);
      if ($1129) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($1126,$39);
       $1130 = HEAP32[$1125>>2]|0;
       $1131 = ((($1130)) + 24|0);
       HEAP32[$1125>>2] = $1131;
      } else {
       $1132 = ((($db)) + 12|0);
       $1133 = HEAP32[$db>>2]|0;
       $1134 = $1126;
       $1135 = $1133;
       $1136 = (($1134) - ($1135))|0;
       $1137 = (($1136|0) / 24)&-1;
       $1138 = (($1137) + 1)|0;
       $1139 = ($1136|0)<(-24);
       if ($1139) {
        __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
        // unreachable;
       }
       $1140 = $1128;
       $1141 = (($1140) - ($1135))|0;
       $1142 = (($1141|0) / 24)&-1;
       $1143 = ($1142>>>0)<(1073741823);
       if ($1143) {
        $1144 = $1142 << 1;
        $1145 = ($1144>>>0)<($1138>>>0);
        $1146 = $1145 ? $1138 : $1144;
        $$0$i$i$i195 = $1146;
       } else {
        $$0$i$i$i195 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i224,$$0$i$i$i195,$1137,$1132);
       $1147 = ((($__v$i$i224)) + 8|0);
       $1148 = HEAP32[$1147>>2]|0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($1148,$39);
       $1149 = ((($1148)) + 24|0);
       HEAP32[$1147>>2] = $1149;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i224);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i224);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($39);
      $1150 = ((($first)) + 2|0);
      $$0 = $1150;
      break L1;
      break;
     }
     case 116:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($40,2277);
      $1151 = ((($db)) + 4|0);
      $1152 = HEAP32[$1151>>2]|0;
      $1153 = ((($db)) + 8|0);
      $1154 = HEAP32[$1153>>2]|0;
      $1155 = ($1152>>>0)<($1154>>>0);
      if ($1155) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($1152,$40);
       $1156 = HEAP32[$1151>>2]|0;
       $1157 = ((($1156)) + 24|0);
       HEAP32[$1151>>2] = $1157;
      } else {
       $1158 = ((($db)) + 12|0);
       $1159 = HEAP32[$db>>2]|0;
       $1160 = $1152;
       $1161 = $1159;
       $1162 = (($1160) - ($1161))|0;
       $1163 = (($1162|0) / 24)&-1;
       $1164 = (($1163) + 1)|0;
       $1165 = ($1162|0)<(-24);
       if ($1165) {
        __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
        // unreachable;
       }
       $1166 = $1154;
       $1167 = (($1166) - ($1161))|0;
       $1168 = (($1167|0) / 24)&-1;
       $1169 = ($1168>>>0)<(1073741823);
       if ($1169) {
        $1170 = $1168 << 1;
        $1171 = ($1170>>>0)<($1164>>>0);
        $1172 = $1171 ? $1164 : $1170;
        $$0$i$i$i200 = $1172;
       } else {
        $$0$i$i$i200 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i224,$$0$i$i$i200,$1163,$1158);
       $1173 = ((($__v$i$i224)) + 8|0);
       $1174 = HEAP32[$1173>>2]|0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($1174,$40);
       $1175 = ((($1174)) + 24|0);
       HEAP32[$1173>>2] = $1175;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i224);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i224);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($40);
      $1176 = ((($first)) + 2|0);
      $$0 = $1176;
      break L1;
      break;
     }
     default: {
      $$0 = $first;
      break L1;
     }
     }
     break;
    }
    case 113:  {
     $1177 = ((($first)) + 1|0);
     $1178 = HEAP8[$1177>>0]|0;
     $1179 = ($1178<<24>>24)==(117);
     if (!($1179)) {
      $$0 = $first;
      break L1;
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($41,2288);
     $1180 = ((($db)) + 4|0);
     $1181 = HEAP32[$1180>>2]|0;
     $1182 = ((($db)) + 8|0);
     $1183 = HEAP32[$1182>>2]|0;
     $1184 = ($1181>>>0)<($1183>>>0);
     if ($1184) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($1181,$41);
      $1185 = HEAP32[$1180>>2]|0;
      $1186 = ((($1185)) + 24|0);
      HEAP32[$1180>>2] = $1186;
     } else {
      $1187 = ((($db)) + 12|0);
      $1188 = HEAP32[$db>>2]|0;
      $1189 = $1181;
      $1190 = $1188;
      $1191 = (($1189) - ($1190))|0;
      $1192 = (($1191|0) / 24)&-1;
      $1193 = (($1192) + 1)|0;
      $1194 = ($1191|0)<(-24);
      if ($1194) {
       __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
       // unreachable;
      }
      $1195 = $1183;
      $1196 = (($1195) - ($1190))|0;
      $1197 = (($1196|0) / 24)&-1;
      $1198 = ($1197>>>0)<(1073741823);
      if ($1198) {
       $1199 = $1197 << 1;
       $1200 = ($1199>>>0)<($1193>>>0);
       $1201 = $1200 ? $1193 : $1199;
       $$0$i$i$i205 = $1201;
      } else {
       $$0$i$i$i205 = 2147483647;
      }
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i224,$$0$i$i$i205,$1192,$1187);
      $1202 = ((($__v$i$i224)) + 8|0);
      $1203 = HEAP32[$1202>>2]|0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($1203,$41);
      $1204 = ((($1203)) + 24|0);
      HEAP32[$1202>>2] = $1204;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i224);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i224);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($41);
     $1205 = ((($first)) + 2|0);
     $$0 = $1205;
     break L1;
     break;
    }
    case 114:  {
     $1206 = ((($first)) + 1|0);
     $1207 = HEAP8[$1206>>0]|0;
     $1208 = $1207 << 24 >> 24;
     switch ($1208|0) {
     case 109:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($42,2298);
      $1209 = ((($db)) + 4|0);
      $1210 = HEAP32[$1209>>2]|0;
      $1211 = ((($db)) + 8|0);
      $1212 = HEAP32[$1211>>2]|0;
      $1213 = ($1210>>>0)<($1212>>>0);
      if ($1213) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($1210,$42);
       $1214 = HEAP32[$1209>>2]|0;
       $1215 = ((($1214)) + 24|0);
       HEAP32[$1209>>2] = $1215;
      } else {
       $1216 = ((($db)) + 12|0);
       $1217 = HEAP32[$db>>2]|0;
       $1218 = $1210;
       $1219 = $1217;
       $1220 = (($1218) - ($1219))|0;
       $1221 = (($1220|0) / 24)&-1;
       $1222 = (($1221) + 1)|0;
       $1223 = ($1220|0)<(-24);
       if ($1223) {
        __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
        // unreachable;
       }
       $1224 = $1212;
       $1225 = (($1224) - ($1219))|0;
       $1226 = (($1225|0) / 24)&-1;
       $1227 = ($1226>>>0)<(1073741823);
       if ($1227) {
        $1228 = $1226 << 1;
        $1229 = ($1228>>>0)<($1222>>>0);
        $1230 = $1229 ? $1222 : $1228;
        $$0$i$i$i210 = $1230;
       } else {
        $$0$i$i$i210 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i224,$$0$i$i$i210,$1221,$1216);
       $1231 = ((($__v$i$i224)) + 8|0);
       $1232 = HEAP32[$1231>>2]|0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($1232,$42);
       $1233 = ((($1232)) + 24|0);
       HEAP32[$1231>>2] = $1233;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i224);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i224);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($42);
      $1234 = ((($first)) + 2|0);
      $$0 = $1234;
      break L1;
      break;
     }
     case 77:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($43,2308);
      $1235 = ((($db)) + 4|0);
      $1236 = HEAP32[$1235>>2]|0;
      $1237 = ((($db)) + 8|0);
      $1238 = HEAP32[$1237>>2]|0;
      $1239 = ($1236>>>0)<($1238>>>0);
      if ($1239) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($1236,$43);
       $1240 = HEAP32[$1235>>2]|0;
       $1241 = ((($1240)) + 24|0);
       HEAP32[$1235>>2] = $1241;
      } else {
       $1242 = ((($db)) + 12|0);
       $1243 = HEAP32[$db>>2]|0;
       $1244 = $1236;
       $1245 = $1243;
       $1246 = (($1244) - ($1245))|0;
       $1247 = (($1246|0) / 24)&-1;
       $1248 = (($1247) + 1)|0;
       $1249 = ($1246|0)<(-24);
       if ($1249) {
        __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
        // unreachable;
       }
       $1250 = $1238;
       $1251 = (($1250) - ($1245))|0;
       $1252 = (($1251|0) / 24)&-1;
       $1253 = ($1252>>>0)<(1073741823);
       if ($1253) {
        $1254 = $1252 << 1;
        $1255 = ($1254>>>0)<($1248>>>0);
        $1256 = $1255 ? $1248 : $1254;
        $$0$i$i$i215 = $1256;
       } else {
        $$0$i$i$i215 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i224,$$0$i$i$i215,$1247,$1242);
       $1257 = ((($__v$i$i224)) + 8|0);
       $1258 = HEAP32[$1257>>2]|0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($1258,$43);
       $1259 = ((($1258)) + 24|0);
       HEAP32[$1257>>2] = $1259;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i224);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i224);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($43);
      $1260 = ((($first)) + 2|0);
      $$0 = $1260;
      break L1;
      break;
     }
     case 115:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($44,2319);
      $1261 = ((($db)) + 4|0);
      $1262 = HEAP32[$1261>>2]|0;
      $1263 = ((($db)) + 8|0);
      $1264 = HEAP32[$1263>>2]|0;
      $1265 = ($1262>>>0)<($1264>>>0);
      if ($1265) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($1262,$44);
       $1266 = HEAP32[$1261>>2]|0;
       $1267 = ((($1266)) + 24|0);
       HEAP32[$1261>>2] = $1267;
      } else {
       $1268 = ((($db)) + 12|0);
       $1269 = HEAP32[$db>>2]|0;
       $1270 = $1262;
       $1271 = $1269;
       $1272 = (($1270) - ($1271))|0;
       $1273 = (($1272|0) / 24)&-1;
       $1274 = (($1273) + 1)|0;
       $1275 = ($1272|0)<(-24);
       if ($1275) {
        __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
        // unreachable;
       }
       $1276 = $1264;
       $1277 = (($1276) - ($1271))|0;
       $1278 = (($1277|0) / 24)&-1;
       $1279 = ($1278>>>0)<(1073741823);
       if ($1279) {
        $1280 = $1278 << 1;
        $1281 = ($1280>>>0)<($1274>>>0);
        $1282 = $1281 ? $1274 : $1280;
        $$0$i$i$i220 = $1282;
       } else {
        $$0$i$i$i220 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i224,$$0$i$i$i220,$1273,$1268);
       $1283 = ((($__v$i$i224)) + 8|0);
       $1284 = HEAP32[$1283>>2]|0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($1284,$44);
       $1285 = ((($1284)) + 24|0);
       HEAP32[$1283>>2] = $1285;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i224);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i224);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($44);
      $1286 = ((($first)) + 2|0);
      $$0 = $1286;
      break L1;
      break;
     }
     case 83:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj12EEERAT__Kc($45,2330);
      $1287 = ((($db)) + 4|0);
      $1288 = HEAP32[$1287>>2]|0;
      $1289 = ((($db)) + 8|0);
      $1290 = HEAP32[$1289>>2]|0;
      $1291 = ($1288>>>0)<($1290>>>0);
      if ($1291) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($1288,$45);
       $1292 = HEAP32[$1287>>2]|0;
       $1293 = ((($1292)) + 24|0);
       HEAP32[$1287>>2] = $1293;
      } else {
       $1294 = ((($db)) + 12|0);
       $1295 = HEAP32[$db>>2]|0;
       $1296 = $1288;
       $1297 = $1295;
       $1298 = (($1296) - ($1297))|0;
       $1299 = (($1298|0) / 24)&-1;
       $1300 = (($1299) + 1)|0;
       $1301 = ($1298|0)<(-24);
       if ($1301) {
        __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
        // unreachable;
       }
       $1302 = $1290;
       $1303 = (($1302) - ($1297))|0;
       $1304 = (($1303|0) / 24)&-1;
       $1305 = ($1304>>>0)<(1073741823);
       if ($1305) {
        $1306 = $1304 << 1;
        $1307 = ($1306>>>0)<($1300>>>0);
        $1308 = $1307 ? $1300 : $1306;
        $$0$i$i$i225 = $1308;
       } else {
        $$0$i$i$i225 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i224,$$0$i$i$i225,$1299,$1294);
       $1309 = ((($__v$i$i224)) + 8|0);
       $1310 = HEAP32[$1309>>2]|0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($1310,$45);
       $1311 = ((($1310)) + 24|0);
       HEAP32[$1309>>2] = $1311;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i224);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i224);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($45);
      $1312 = ((($first)) + 2|0);
      $$0 = $1312;
      break L1;
      break;
     }
     default: {
      $$0 = $first;
      break L1;
     }
     }
     break;
    }
    case 118:  {
     $1313 = ((($first)) + 1|0);
     $1314 = HEAP8[$1313>>0]|0;
     $1315 = $1314 << 24 >> 24;
     $isdigittmp = (($1315) + -48)|0;
     $isdigit = ($isdigittmp>>>0)<(10);
     if (!($isdigit)) {
      $$0 = $first;
      break L1;
     }
     $1316 = ((($first)) + 2|0);
     $1317 = (__ZN10__cxxabiv112_GLOBAL__N_117parse_source_nameINS0_2DbEEEPKcS4_S4_RT_($1316,$last,$db)|0);
     $1318 = ($1317|0)==($1316|0);
     if ($1318) {
      $$0 = $first;
      break L1;
     }
     $1319 = HEAP32[$db>>2]|0;
     $1320 = ((($db)) + 4|0);
     $1321 = HEAP32[$1320>>2]|0;
     $1322 = ($1319|0)==($1321|0);
     if ($1322) {
      $$0 = $first;
      break L1;
     }
     $1323 = ((($1321)) + -24|0);
     (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($1323,0,1914)|0);
     $$0 = $1317;
     break L1;
     break;
    }
    default: {
     $$0 = $first;
     break L1;
    }
    }
   } while(0);
  } else {
   $$0 = $first;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($this,$s) {
 $this = $this|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 HEAP8[$this>>0] = 20;
 $0 = ((($this)) + 1|0);
 dest=$0; src=$s; stop=dest+10|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $1 = ((($this)) + 11|0);
 HEAP8[$1>>0] = 0;
 $2 = ((($this)) + 12|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($2)) + 4|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($2)) + 8|0);
 HEAP32[$4>>2] = 0;
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($this,$s) {
 $this = $this|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 HEAP8[$this>>0] = 18;
 $0 = ((($this)) + 1|0);
 dest=$0; src=$s; stop=dest+9|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $1 = ((($this)) + 10|0);
 HEAP8[$1>>0] = 0;
 $2 = ((($this)) + 12|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($2)) + 4|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($2)) + 8|0);
 HEAP32[$4>>2] = 0;
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_118parse_template_argINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db) {
 $first = $first|0;
 $last = $last|0;
 $db = $db|0;
 var $$0 = 0, $$first = 0, $$first3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond2 = 0, $t$0 = 0, $t$0$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($first|0)==($last|0);
 L1: do {
  if ($0) {
   $$0 = $first;
  } else {
   $1 = HEAP8[$first>>0]|0;
   $2 = $1 << 24 >> 24;
   switch ($2|0) {
   case 88:  {
    $3 = ((($first)) + 1|0);
    $4 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($3,$last,$db)|0);
    $5 = ($4|0)==($3|0);
    $6 = ($4|0)==($last|0);
    $or$cond = $5 | $6;
    if ($or$cond) {
     $$0 = $first;
     break L1;
    }
    $7 = HEAP8[$4>>0]|0;
    $8 = ($7<<24>>24)==(69);
    $9 = ((($4)) + 1|0);
    $$first = $8 ? $9 : $first;
    $$0 = $$first;
    break L1;
    break;
   }
   case 74:  {
    $10 = ((($first)) + 1|0);
    $11 = ($10|0)==($last|0);
    if ($11) {
     $$0 = $first;
     break L1;
    } else {
     $t$0 = $10;
    }
    while(1) {
     $12 = HEAP8[$t$0>>0]|0;
     $13 = ($12<<24>>24)==(69);
     if ($13) {
      $t$0$lcssa = $t$0;
      break;
     }
     $14 = (__ZN10__cxxabiv112_GLOBAL__N_118parse_template_argINS0_2DbEEEPKcS4_S4_RT_($t$0,$last,$db)|0);
     $15 = ($14|0)==($t$0|0);
     if ($15) {
      $$0 = $first;
      break L1;
     } else {
      $t$0 = $14;
     }
    }
    $16 = ((($t$0$lcssa)) + 1|0);
    $$0 = $16;
    break L1;
    break;
   }
   case 76:  {
    $17 = ((($first)) + 1|0);
    $18 = ($17|0)==($last|0);
    if (!($18)) {
     $19 = HEAP8[$17>>0]|0;
     $20 = ($19<<24>>24)==(90);
     if ($20) {
      $21 = ((($first)) + 2|0);
      $22 = (__ZN10__cxxabiv112_GLOBAL__N_114parse_encodingINS0_2DbEEEPKcS4_S4_RT_($21,$last,$db)|0);
      $23 = ($22|0)==($21|0);
      $24 = ($22|0)==($last|0);
      $or$cond2 = $23 | $24;
      if ($or$cond2) {
       $$0 = $first;
       break L1;
      }
      $25 = HEAP8[$22>>0]|0;
      $26 = ($25<<24>>24)==(69);
      $27 = ((($22)) + 1|0);
      $$first3 = $26 ? $27 : $first;
      return ($$first3|0);
     }
    }
    $28 = (__ZN10__cxxabiv112_GLOBAL__N_118parse_expr_primaryINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db)|0);
    $$0 = $28;
    break L1;
    break;
   }
   default: {
    $29 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db)|0);
    $$0 = $29;
    break L1;
   }
   }
  }
 } while(0);
 return ($$0|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_118parse_expr_primaryINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db) {
 $first = $first|0;
 $last = $last|0;
 $db = $db|0;
 var $$0 = 0, $$0$i = 0, $$0$i$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i46 = 0, $$0$i$i$i$i62 = 0, $$0$i$i$i26 = 0, $$0$i$i117 = 0, $$0$i49 = 0, $$01$i$i$i122 = 0, $$01$i$i$i41126 = 0, $$01$i$i$i57130 = 0, $$1$i = 0, $$first = 0, $$lcssa = 0, $$lcssa154 = 0, $$lcssa155 = 0, $$lcssa157 = 0, $$lcssa158 = 0, $$lcssa160 = 0;
 var $$lcssa161 = 0, $$v$i = 0, $$v$i37 = 0, $$v$i56 = 0, $$v4$i = 0, $$v4$i40 = 0, $$v6$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $148$phi = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
 var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0.0, $17 = 0, $170 = 0.0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0;
 var $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0;
 var $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $214$phi = 0, $215 = 0;
 var $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0;
 var $234 = 0, $235 = 0.0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0;
 var $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0;
 var $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $279$phi = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0;
 var $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0.0, $301 = 0, $302 = 0, $303 = 0, $304 = 0;
 var $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0;
 var $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0;
 var $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0;
 var $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0;
 var $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0;
 var $396 = 0, $397 = 0, $398 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__p$0$i$i116 = 0, $__p$0$ph$i$i = 0, $e$0$i124 = 0, $e$0$i124$lcssa153 = 0, $e$0$i33128 = 0, $e$0$i33128$lcssa156 = 0, $e$0$i52132 = 0, $e$0$i52132$lcssa159 = 0, $first$ = 0, $first$10 = 0, $first$11 = 0;
 var $first$12 = 0, $first$13 = 0, $first$14 = 0, $first$15 = 0, $first$16 = 0, $first$17 = 0, $first$18 = 0, $first$19 = 0, $first$20 = 0, $first$21 = 0, $first$22 = 0, $first$23 = 0, $first$8 = 0, $first$9 = 0, $isdigit = 0, $isdigit$i = 0, $isdigit$i36 = 0, $isdigit$i55 = 0, $isdigit3$i = 0, $isdigit3$i39 = 0;
 var $isdigit5$i = 0, $isdigittmp = 0, $isdigittmp$i = 0, $isdigittmp$i35 = 0, $isdigittmp$i54 = 0, $isdigittmp2$i = 0, $isdigittmp2$i38 = 0, $isdigittmp4$i = 0, $n$0120 = 0, $n$0120$lcssa = 0, $num$i51 = 0, $or$cond = 0, $or$cond104 = 0, $or$cond134 = 0, $or$cond135 = 0, $or$cond136 = 0, $or$cond24 = 0, $scevgep2$i$i = 0, $t$0$i125 = 0, $t$0$i34129 = 0;
 var $t$0$i53133 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 480|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer4 = sp + 72|0;
 $vararg_buffer1 = sp;
 $vararg_buffer = sp + 24|0;
 $0 = sp + 48|0;
 $num$i51 = sp + 440|0;
 $1 = sp + 400|0;
 $2 = sp + 388|0;
 $3 = sp + 376|0;
 $4 = sp + 352|0;
 $5 = sp + 328|0;
 $6 = sp + 312|0;
 $7 = sp + 300|0;
 $8 = sp + 288|0;
 $9 = sp + 276|0;
 $10 = sp + 424|0;
 $11 = sp + 152|0;
 $12 = sp + 164|0;
 $13 = sp + 92|0;
 $14 = sp + 116|0;
 $15 = sp + 128|0;
 $16 = sp + 104|0;
 $17 = sp + 140|0;
 $18 = sp + 264|0;
 $19 = sp + 192|0;
 $20 = sp + 216|0;
 $21 = sp + 228|0;
 $22 = sp + 240|0;
 $23 = sp + 252|0;
 $24 = sp + 176|0;
 $25 = $last;
 $26 = $first;
 $27 = (($25) - ($26))|0;
 $28 = ($27|0)>(3);
 L1: do {
  if ($28) {
   $29 = HEAP8[$first>>0]|0;
   $30 = ($29<<24>>24)==(76);
   if ($30) {
    $31 = ((($first)) + 1|0);
    $32 = HEAP8[$31>>0]|0;
    $33 = $32 << 24 >> 24;
    do {
     switch ($33|0) {
     case 84:  {
      $$0 = $first;
      break L1;
      break;
     }
     case 119:  {
      $34 = ((($first)) + 2|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($3,2656,7);
      $35 = (__ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($34,$last,$3,$db)|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      $36 = ($35|0)==($34|0);
      $first$ = $36 ? $first : $35;
      $$0 = $first$;
      break L1;
      break;
     }
     case 98:  {
      $37 = ((($first)) + 3|0);
      $38 = HEAP8[$37>>0]|0;
      $39 = ($38<<24>>24)==(69);
      if (!($39)) {
       $$0 = $first;
       break L1;
      }
      $40 = ((($first)) + 2|0);
      $41 = HEAP8[$40>>0]|0;
      $42 = $41 << 24 >> 24;
      switch ($42|0) {
      case 48:  {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj6EEERAT__Kc($4,2664);
       $43 = ((($db)) + 4|0);
       $44 = HEAP32[$43>>2]|0;
       $45 = ((($db)) + 8|0);
       $46 = HEAP32[$45>>2]|0;
       $47 = ($44>>>0)<($46>>>0);
       if ($47) {
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($44,$4);
        $48 = HEAP32[$43>>2]|0;
        $49 = ((($48)) + 24|0);
        HEAP32[$43>>2] = $49;
       } else {
        $50 = ((($db)) + 12|0);
        $51 = HEAP32[$db>>2]|0;
        $52 = $44;
        $53 = $51;
        $54 = (($52) - ($53))|0;
        $55 = (($54|0) / 24)&-1;
        $56 = (($55) + 1)|0;
        $57 = ($54|0)<(-24);
        if ($57) {
         __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
         // unreachable;
        }
        $58 = $46;
        $59 = (($58) - ($53))|0;
        $60 = (($59|0) / 24)&-1;
        $61 = ($60>>>0)<(1073741823);
        if ($61) {
         $62 = $60 << 1;
         $63 = ($62>>>0)<($56>>>0);
         $64 = $63 ? $56 : $62;
         $$0$i$i$i = $64;
        } else {
         $$0$i$i$i = 2147483647;
        }
        __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($0,$$0$i$i$i,$55,$50);
        $65 = ((($0)) + 8|0);
        $66 = HEAP32[$65>>2]|0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($66,$4);
        $67 = ((($66)) + 24|0);
        HEAP32[$65>>2] = $67;
        __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$0);
        __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($0);
       }
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($4);
       $68 = ((($first)) + 4|0);
       $$0 = $68;
       break L1;
       break;
      }
      case 49:  {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj5EEERAT__Kc($5,2670);
       $69 = ((($db)) + 4|0);
       $70 = HEAP32[$69>>2]|0;
       $71 = ((($db)) + 8|0);
       $72 = HEAP32[$71>>2]|0;
       $73 = ($70>>>0)<($72>>>0);
       if ($73) {
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($70,$5);
        $74 = HEAP32[$69>>2]|0;
        $75 = ((($74)) + 24|0);
        HEAP32[$69>>2] = $75;
       } else {
        $76 = ((($db)) + 12|0);
        $77 = HEAP32[$db>>2]|0;
        $78 = $70;
        $79 = $77;
        $80 = (($78) - ($79))|0;
        $81 = (($80|0) / 24)&-1;
        $82 = (($81) + 1)|0;
        $83 = ($80|0)<(-24);
        if ($83) {
         __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
         // unreachable;
        }
        $84 = $72;
        $85 = (($84) - ($79))|0;
        $86 = (($85|0) / 24)&-1;
        $87 = ($86>>>0)<(1073741823);
        if ($87) {
         $88 = $86 << 1;
         $89 = ($88>>>0)<($82>>>0);
         $90 = $89 ? $82 : $88;
         $$0$i$i$i26 = $90;
        } else {
         $$0$i$i$i26 = 2147483647;
        }
        __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($0,$$0$i$i$i26,$81,$76);
        $91 = ((($0)) + 8|0);
        $92 = HEAP32[$91>>2]|0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($92,$5);
        $93 = ((($92)) + 24|0);
        HEAP32[$91>>2] = $93;
        __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$0);
        __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($0);
       }
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($5);
       $94 = ((($first)) + 4|0);
       $$0 = $94;
       break L1;
       break;
      }
      default: {
       $$0 = $first;
       break L1;
      }
      }
      break;
     }
     case 99:  {
      $95 = ((($first)) + 2|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($6,2675,4);
      $96 = (__ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($95,$last,$6,$db)|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
      $97 = ($96|0)==($95|0);
      $first$8 = $97 ? $first : $96;
      $$0 = $first$8;
      break L1;
      break;
     }
     case 97:  {
      $98 = ((($first)) + 2|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($7,2680,11);
      $99 = (__ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($98,$last,$7,$db)|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
      $100 = ($99|0)==($98|0);
      $first$9 = $100 ? $first : $99;
      $$0 = $first$9;
      break L1;
      break;
     }
     case 104:  {
      $101 = ((($first)) + 2|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($8,2692,13);
      $102 = (__ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($101,$last,$8,$db)|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
      $103 = ($102|0)==($101|0);
      $first$10 = $103 ? $first : $102;
      $$0 = $first$10;
      break L1;
      break;
     }
     case 115:  {
      $104 = ((($first)) + 2|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($9,2706,5);
      $105 = (__ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($104,$last,$9,$db)|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
      $106 = ($105|0)==($104|0);
      $first$11 = $106 ? $first : $105;
      $$0 = $first$11;
      break L1;
      break;
     }
     case 116:  {
      $107 = ((($first)) + 2|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($10,2712,14);
      $108 = (__ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($107,$last,$10,$db)|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($10);
      $109 = ($108|0)==($107|0);
      $first$12 = $109 ? $first : $108;
      $$0 = $first$12;
      break L1;
      break;
     }
     case 105:  {
      $110 = ((($first)) + 2|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($11,2727,0);
      $111 = (__ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($110,$last,$11,$db)|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($11);
      $112 = ($111|0)==($110|0);
      $first$13 = $112 ? $first : $111;
      $$0 = $first$13;
      break L1;
      break;
     }
     case 106:  {
      $113 = ((($first)) + 2|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($12,2728,1);
      $114 = (__ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($113,$last,$12,$db)|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($12);
      $115 = ($114|0)==($113|0);
      $first$14 = $115 ? $first : $114;
      $$0 = $first$14;
      break L1;
      break;
     }
     case 108:  {
      $116 = ((($first)) + 2|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($13,2730,1);
      $117 = (__ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($116,$last,$13,$db)|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($13);
      $118 = ($117|0)==($116|0);
      $first$15 = $118 ? $first : $117;
      $$0 = $first$15;
      break L1;
      break;
     }
     case 109:  {
      $119 = ((($first)) + 2|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($14,2732,2);
      $120 = (__ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($119,$last,$14,$db)|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($14);
      $121 = ($120|0)==($119|0);
      $first$16 = $121 ? $first : $120;
      $$0 = $first$16;
      break L1;
      break;
     }
     case 120:  {
      $122 = ((($first)) + 2|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($15,2735,2);
      $123 = (__ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($122,$last,$15,$db)|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($15);
      $124 = ($123|0)==($122|0);
      $first$17 = $124 ? $first : $123;
      $$0 = $first$17;
      break L1;
      break;
     }
     case 121:  {
      $125 = ((($first)) + 2|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($16,2738,3);
      $126 = (__ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($125,$last,$16,$db)|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($16);
      $127 = ($126|0)==($125|0);
      $first$18 = $127 ? $first : $126;
      $$0 = $first$18;
      break L1;
      break;
     }
     case 110:  {
      $128 = ((($first)) + 2|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($17,2742,8);
      $129 = (__ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($128,$last,$17,$db)|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($17);
      $130 = ($129|0)==($128|0);
      $first$19 = $130 ? $first : $129;
      $$0 = $first$19;
      break L1;
      break;
     }
     case 111:  {
      $131 = ((($first)) + 2|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($18,2751,17);
      $132 = (__ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($131,$last,$18,$db)|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($18);
      $133 = ($132|0)==($131|0);
      $first$20 = $133 ? $first : $132;
      $$0 = $first$20;
      break L1;
      break;
     }
     case 102:  {
      $134 = ((($first)) + 2|0);
      $135 = $134;
      $136 = (($25) - ($135))|0;
      $137 = ($136>>>0)>(8);
      L67: do {
       if ($137) {
        $138 = ((($first)) + 10|0);
        $139 = HEAP8[$134>>0]|0;
        $141 = $139;$148 = $first;$e$0$i124 = $0;$t$0$i125 = $134;
        while(1) {
         $140 = $141 << 24 >> 24;
         $142 = (_isxdigit($140)|0);
         $143 = ($142|0)==(0);
         if ($143) {
          $$0$i = $134;
          break L67;
         }
         $144 = HEAP8[$t$0$i125>>0]|0;
         $145 = $144 << 24 >> 24;
         $isdigittmp$i = (($145) + -48)|0;
         $isdigit$i = ($isdigittmp$i>>>0)<(10);
         $$v$i = $isdigit$i ? 0 : 9;
         $146 = (($$v$i) + ($145))|0;
         $147 = ((($148)) + 3|0);
         $149 = HEAP8[$147>>0]|0;
         $150 = $149 << 24 >> 24;
         $isdigittmp2$i = (($150) + -48)|0;
         $isdigit3$i = ($isdigittmp2$i>>>0)<(10);
         $151 = $149&255;
         $$v4$i = $isdigit3$i ? 208 : 169;
         $152 = (($$v4$i) + ($151))|0;
         $153 = $146 << 4;
         $154 = (($152) + ($153))|0;
         $155 = $154&255;
         HEAP8[$e$0$i124>>0] = $155;
         $156 = ((($t$0$i125)) + 2|0);
         $157 = ((($e$0$i124)) + 1|0);
         $158 = ($156|0)==($138|0);
         $159 = HEAP8[$156>>0]|0;
         if ($158) {
          $$lcssa154 = $157;$$lcssa155 = $159;$e$0$i124$lcssa153 = $e$0$i124;
          break;
         } else {
          $148$phi = $t$0$i125;$141 = $159;$e$0$i124 = $157;$t$0$i125 = $156;$148 = $148$phi;
         }
        }
        $160 = ($$lcssa155<<24>>24)==(69);
        if ($160) {
         $161 = ($0|0)!=($$lcssa154|0);
         $162 = ($0>>>0)<($e$0$i124$lcssa153>>>0);
         $or$cond134 = $161 & $162;
         if ($or$cond134) {
          $$01$i$i$i122 = $0;$165 = $e$0$i124$lcssa153;
          while(1) {
           $163 = HEAP8[$$01$i$i$i122>>0]|0;
           $164 = HEAP8[$165>>0]|0;
           HEAP8[$$01$i$i$i122>>0] = $164;
           HEAP8[$165>>0] = $163;
           $166 = ((($$01$i$i$i122)) + 1|0);
           $167 = ((($165)) + -1|0);
           $168 = ($166>>>0)<($167>>>0);
           if ($168) {
            $$01$i$i$i122 = $166;$165 = $167;
           } else {
            break;
           }
          }
         }
         dest=$num$i51; stop=dest+24|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
         $169 = +HEAPF32[$0>>2];
         $170 = $169;
         HEAPF64[$vararg_buffer>>3] = $170;
         $171 = (_snprintf($num$i51,24,2769,$vararg_buffer)|0);
         $172 = ($171>>>0)>(23);
         if ($172) {
          $$0$i = $134;
         } else {
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($2,$num$i51,$171);
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($1,$2);
          $173 = ((($db)) + 4|0);
          $174 = HEAP32[$173>>2]|0;
          $175 = ((($db)) + 8|0);
          $176 = HEAP32[$175>>2]|0;
          $177 = ($174>>>0)<($176>>>0);
          if ($177) {
           __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($174,$1);
           $178 = HEAP32[$173>>2]|0;
           $179 = ((($178)) + 24|0);
           HEAP32[$173>>2] = $179;
          } else {
           $180 = ((($db)) + 12|0);
           $181 = HEAP32[$db>>2]|0;
           $182 = $174;
           $183 = $181;
           $184 = (($182) - ($183))|0;
           $185 = (($184|0) / 24)&-1;
           $186 = (($185) + 1)|0;
           $187 = ($184|0)<(-24);
           if ($187) {
            __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
            // unreachable;
           }
           $188 = $176;
           $189 = (($188) - ($183))|0;
           $190 = (($189|0) / 24)&-1;
           $191 = ($190>>>0)<(1073741823);
           if ($191) {
            $192 = $190 << 1;
            $193 = ($192>>>0)<($186>>>0);
            $194 = $193 ? $186 : $192;
            $$0$i$i$i$i = $194;
           } else {
            $$0$i$i$i$i = 2147483647;
           }
           __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($vararg_buffer,$$0$i$i$i$i,$185,$180);
           $195 = ((($vararg_buffer)) + 8|0);
           $196 = HEAP32[$195>>2]|0;
           __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($196,$1);
           $197 = ((($196)) + 24|0);
           HEAP32[$195>>2] = $197;
           __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$vararg_buffer);
           __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($vararg_buffer);
          }
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($2);
          $198 = ((($first)) + 11|0);
          $$0$i = $198;
         }
        } else {
         $$0$i = $134;
        }
       } else {
        $$0$i = $134;
       }
      } while(0);
      $199 = ($$0$i|0)==($134|0);
      $first$21 = $199 ? $first : $$0$i;
      $$0 = $first$21;
      break L1;
      break;
     }
     case 100:  {
      $200 = ((($first)) + 2|0);
      $201 = $200;
      $202 = (($25) - ($201))|0;
      $203 = ($202>>>0)>(16);
      L91: do {
       if ($203) {
        $204 = ((($first)) + 18|0);
        $205 = HEAP8[$200>>0]|0;
        $207 = $205;$214 = $first;$e$0$i33128 = $0;$t$0$i34129 = $200;
        while(1) {
         $206 = $207 << 24 >> 24;
         $208 = (_isxdigit($206)|0);
         $209 = ($208|0)==(0);
         if ($209) {
          $$0$i49 = $200;
          break L91;
         }
         $210 = HEAP8[$t$0$i34129>>0]|0;
         $211 = $210 << 24 >> 24;
         $isdigittmp$i35 = (($211) + -48)|0;
         $isdigit$i36 = ($isdigittmp$i35>>>0)<(10);
         $$v$i37 = $isdigit$i36 ? 0 : 9;
         $212 = (($$v$i37) + ($211))|0;
         $213 = ((($214)) + 3|0);
         $215 = HEAP8[$213>>0]|0;
         $216 = $215 << 24 >> 24;
         $isdigittmp2$i38 = (($216) + -48)|0;
         $isdigit3$i39 = ($isdigittmp2$i38>>>0)<(10);
         $217 = $215&255;
         $$v4$i40 = $isdigit3$i39 ? 208 : 169;
         $218 = (($$v4$i40) + ($217))|0;
         $219 = $212 << 4;
         $220 = (($218) + ($219))|0;
         $221 = $220&255;
         HEAP8[$e$0$i33128>>0] = $221;
         $222 = ((($t$0$i34129)) + 2|0);
         $223 = ((($e$0$i33128)) + 1|0);
         $224 = ($222|0)==($204|0);
         $225 = HEAP8[$222>>0]|0;
         if ($224) {
          $$lcssa157 = $223;$$lcssa158 = $225;$e$0$i33128$lcssa156 = $e$0$i33128;
          break;
         } else {
          $214$phi = $t$0$i34129;$207 = $225;$e$0$i33128 = $223;$t$0$i34129 = $222;$214 = $214$phi;
         }
        }
        $226 = ($$lcssa158<<24>>24)==(69);
        if ($226) {
         $227 = ($0|0)!=($$lcssa157|0);
         $228 = ($0>>>0)<($e$0$i33128$lcssa156>>>0);
         $or$cond135 = $227 & $228;
         if ($or$cond135) {
          $$01$i$i$i41126 = $0;$231 = $e$0$i33128$lcssa156;
          while(1) {
           $229 = HEAP8[$$01$i$i$i41126>>0]|0;
           $230 = HEAP8[$231>>0]|0;
           HEAP8[$$01$i$i$i41126>>0] = $230;
           HEAP8[$231>>0] = $229;
           $232 = ((($$01$i$i$i41126)) + 1|0);
           $233 = ((($231)) + -1|0);
           $234 = ($232>>>0)<($233>>>0);
           if ($234) {
            $$01$i$i$i41126 = $232;$231 = $233;
           } else {
            break;
           }
          }
         }
         dest=$num$i51; stop=dest+32|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
         $235 = +HEAPF64[$0>>3];
         HEAPF64[$vararg_buffer1>>3] = $235;
         $236 = (_snprintf($num$i51,32,2773,$vararg_buffer1)|0);
         $237 = ($236>>>0)>(31);
         if ($237) {
          $$0$i49 = $200;
         } else {
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($2,$num$i51,$236);
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($1,$2);
          $238 = ((($db)) + 4|0);
          $239 = HEAP32[$238>>2]|0;
          $240 = ((($db)) + 8|0);
          $241 = HEAP32[$240>>2]|0;
          $242 = ($239>>>0)<($241>>>0);
          if ($242) {
           __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($239,$1);
           $243 = HEAP32[$238>>2]|0;
           $244 = ((($243)) + 24|0);
           HEAP32[$238>>2] = $244;
          } else {
           $245 = ((($db)) + 12|0);
           $246 = HEAP32[$db>>2]|0;
           $247 = $239;
           $248 = $246;
           $249 = (($247) - ($248))|0;
           $250 = (($249|0) / 24)&-1;
           $251 = (($250) + 1)|0;
           $252 = ($249|0)<(-24);
           if ($252) {
            __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
            // unreachable;
           }
           $253 = $241;
           $254 = (($253) - ($248))|0;
           $255 = (($254|0) / 24)&-1;
           $256 = ($255>>>0)<(1073741823);
           if ($256) {
            $257 = $255 << 1;
            $258 = ($257>>>0)<($251>>>0);
            $259 = $258 ? $251 : $257;
            $$0$i$i$i$i46 = $259;
           } else {
            $$0$i$i$i$i46 = 2147483647;
           }
           __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($vararg_buffer1,$$0$i$i$i$i46,$250,$245);
           $260 = ((($vararg_buffer1)) + 8|0);
           $261 = HEAP32[$260>>2]|0;
           __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($261,$1);
           $262 = ((($261)) + 24|0);
           HEAP32[$260>>2] = $262;
           __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$vararg_buffer1);
           __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($vararg_buffer1);
          }
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($2);
          $263 = ((($first)) + 19|0);
          $$0$i49 = $263;
         }
        } else {
         $$0$i49 = $200;
        }
       } else {
        $$0$i49 = $200;
       }
      } while(0);
      $264 = ($$0$i49|0)==($200|0);
      $first$22 = $264 ? $first : $$0$i49;
      $$0 = $first$22;
      break L1;
      break;
     }
     case 101:  {
      $265 = ((($first)) + 2|0);
      $266 = $265;
      $267 = (($25) - ($266))|0;
      $268 = ($267>>>0)>(20);
      L115: do {
       if ($268) {
        $269 = ((($first)) + 22|0);
        $270 = HEAP8[$265>>0]|0;
        $272 = $270;$279 = $first;$e$0$i52132 = $0;$t$0$i53133 = $265;
        while(1) {
         $271 = $272 << 24 >> 24;
         $273 = (_isxdigit($271)|0);
         $274 = ($273|0)==(0);
         if ($274) {
          $$1$i = $265;
          break L115;
         }
         $275 = HEAP8[$t$0$i53133>>0]|0;
         $276 = $275 << 24 >> 24;
         $isdigittmp$i54 = (($276) + -48)|0;
         $isdigit$i55 = ($isdigittmp$i54>>>0)<(10);
         $$v$i56 = $isdigit$i55 ? 0 : 9;
         $277 = (($$v$i56) + ($276))|0;
         $278 = ((($279)) + 3|0);
         $280 = HEAP8[$278>>0]|0;
         $281 = $280 << 24 >> 24;
         $isdigittmp4$i = (($281) + -48)|0;
         $isdigit5$i = ($isdigittmp4$i>>>0)<(10);
         $282 = $280&255;
         $$v6$i = $isdigit5$i ? 208 : 169;
         $283 = (($$v6$i) + ($282))|0;
         $284 = $277 << 4;
         $285 = (($283) + ($284))|0;
         $286 = $285&255;
         HEAP8[$e$0$i52132>>0] = $286;
         $287 = ((($t$0$i53133)) + 2|0);
         $288 = ((($e$0$i52132)) + 1|0);
         $289 = ($287|0)==($269|0);
         $290 = HEAP8[$287>>0]|0;
         if ($289) {
          $$lcssa160 = $288;$$lcssa161 = $290;$e$0$i52132$lcssa159 = $e$0$i52132;
          break;
         } else {
          $279$phi = $t$0$i53133;$272 = $290;$e$0$i52132 = $288;$t$0$i53133 = $287;$279 = $279$phi;
         }
        }
        $291 = ($$lcssa161<<24>>24)==(69);
        if ($291) {
         $292 = ($0|0)!=($$lcssa160|0);
         $293 = ($0>>>0)<($e$0$i52132$lcssa159>>>0);
         $or$cond136 = $292 & $293;
         if ($or$cond136) {
          $$01$i$i$i57130 = $0;$296 = $e$0$i52132$lcssa159;
          while(1) {
           $294 = HEAP8[$$01$i$i$i57130>>0]|0;
           $295 = HEAP8[$296>>0]|0;
           HEAP8[$$01$i$i$i57130>>0] = $295;
           HEAP8[$296>>0] = $294;
           $297 = ((($$01$i$i$i57130)) + 1|0);
           $298 = ((($296)) + -1|0);
           $299 = ($297>>>0)<($298>>>0);
           if ($299) {
            $$01$i$i$i57130 = $297;$296 = $298;
           } else {
            break;
           }
          }
         }
         dest=$num$i51; stop=dest+40|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
         $300 = +HEAPF64[$0>>3];
         HEAPF64[$vararg_buffer4>>3] = $300;
         $301 = (_snprintf($num$i51,40,2776,$vararg_buffer4)|0);
         $302 = ($301>>>0)>(39);
         if ($302) {
          $$1$i = $265;
          break;
         }
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($2,$num$i51,$301);
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($1,$2);
         $303 = ((($db)) + 4|0);
         $304 = HEAP32[$303>>2]|0;
         $305 = ((($db)) + 8|0);
         $306 = HEAP32[$305>>2]|0;
         $307 = ($304>>>0)<($306>>>0);
         if ($307) {
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($304,$1);
          $308 = HEAP32[$303>>2]|0;
          $309 = ((($308)) + 24|0);
          HEAP32[$303>>2] = $309;
         } else {
          $310 = ((($db)) + 12|0);
          $311 = HEAP32[$db>>2]|0;
          $312 = $304;
          $313 = $311;
          $314 = (($312) - ($313))|0;
          $315 = (($314|0) / 24)&-1;
          $316 = (($315) + 1)|0;
          $317 = ($314|0)<(-24);
          if ($317) {
           __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
           // unreachable;
          }
          $318 = $306;
          $319 = (($318) - ($313))|0;
          $320 = (($319|0) / 24)&-1;
          $321 = ($320>>>0)<(1073741823);
          if ($321) {
           $322 = $320 << 1;
           $323 = ($322>>>0)<($316>>>0);
           $324 = $323 ? $316 : $322;
           $$0$i$i$i$i62 = $324;
          } else {
           $$0$i$i$i$i62 = 2147483647;
          }
          __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($vararg_buffer4,$$0$i$i$i$i62,$315,$310);
          $325 = ((($vararg_buffer4)) + 8|0);
          $326 = HEAP32[$325>>2]|0;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($326,$1);
          $327 = ((($326)) + 24|0);
          HEAP32[$325>>2] = $327;
          __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$vararg_buffer4);
          __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($vararg_buffer4);
         }
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($2);
         $328 = ((($first)) + 23|0);
         $$1$i = $328;
        } else {
         $$1$i = $265;
        }
       } else {
        $$1$i = $265;
       }
      } while(0);
      $329 = ($$1$i|0)==($265|0);
      $first$23 = $329 ? $first : $$1$i;
      $$0 = $first$23;
      break L1;
      break;
     }
     case 95:  {
      $330 = ((($first)) + 2|0);
      $331 = HEAP8[$330>>0]|0;
      $332 = ($331<<24>>24)==(90);
      if (!($332)) {
       $$0 = $first;
       break L1;
      }
      $333 = ((($first)) + 3|0);
      $334 = (__ZN10__cxxabiv112_GLOBAL__N_114parse_encodingINS0_2DbEEEPKcS4_S4_RT_($333,$last,$db)|0);
      $335 = ($334|0)==($333|0);
      $336 = ($334|0)==($last|0);
      $or$cond = $335 | $336;
      if ($or$cond) {
       $$0 = $first;
       break L1;
      }
      $337 = HEAP8[$334>>0]|0;
      $338 = ($337<<24>>24)==(69);
      $339 = ((($334)) + 1|0);
      $$first = $338 ? $339 : $first;
      STACKTOP = sp;return ($$first|0);
      break;
     }
     default: {
      $340 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($31,$last,$db)|0);
      $341 = ($340|0)==($31|0);
      $342 = ($340|0)==($last|0);
      $or$cond24 = $341 | $342;
      if ($or$cond24) {
       $$0 = $first;
       break L1;
      }
      $343 = HEAP8[$340>>0]|0;
      $344 = ($343<<24>>24)==(69);
      if ($344) {
       $398 = ((($340)) + 1|0);
       $$0 = $398;
       break L1;
      }
      $345 = ($340|0)==($last|0);
      if ($345) {
       $$0 = $first;
       break L1;
      } else {
       $n$0120 = $340;
      }
      while(1) {
       $346 = HEAP8[$n$0120>>0]|0;
       $347 = $346 << 24 >> 24;
       $isdigittmp = (($347) + -48)|0;
       $isdigit = ($isdigittmp>>>0)<(10);
       if (!($isdigit)) {
        $$lcssa = $346;$n$0120$lcssa = $n$0120;
        break;
       }
       $348 = ((($n$0120)) + 1|0);
       $349 = ($348|0)==($last|0);
       if ($349) {
        $$0 = $first;
        break L1;
       } else {
        $n$0120 = $348;
       }
      }
      $350 = ($n$0120$lcssa|0)!=($340|0);
      $351 = ($$lcssa<<24>>24)==(69);
      $or$cond104 = $350 & $351;
      if (!($or$cond104)) {
       $$0 = $first;
       break L1;
      }
      $352 = HEAP32[$db>>2]|0;
      $353 = ((($db)) + 4|0);
      $354 = HEAP32[$353>>2]|0;
      $355 = ($352|0)==($354|0);
      if ($355) {
       $$0 = $first;
       break L1;
      }
      $356 = ((($354)) + -24|0);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($23,$356);
      $357 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($23,0,1606)|0);
      ;HEAP32[$22>>2]=HEAP32[$357>>2]|0;HEAP32[$22+4>>2]=HEAP32[$357+4>>2]|0;HEAP32[$22+8>>2]=HEAP32[$357+8>>2]|0;
      HEAP32[$357>>2] = 0;
      $358 = ((($357)) + 4|0);
      HEAP32[$358>>2] = 0;
      $359 = ((($357)) + 8|0);
      HEAP32[$359>>2] = 0;
      $360 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($22,1511)|0);
      ;HEAP32[$21>>2]=HEAP32[$360>>2]|0;HEAP32[$21+4>>2]=HEAP32[$360+4>>2]|0;HEAP32[$21+8>>2]=HEAP32[$360+8>>2]|0;
      HEAP32[$360>>2] = 0;
      $361 = ((($360)) + 4|0);
      HEAP32[$361>>2] = 0;
      $362 = ((($360)) + 8|0);
      HEAP32[$362>>2] = 0;
      $363 = $340;
      $364 = $n$0120$lcssa;
      $365 = (($364) - ($363))|0;
      $366 = ($365>>>0)>(4294967279);
      if ($366) {
       __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($24);
       // unreachable;
      }
      $367 = ($365>>>0)<(11);
      if ($367) {
       $368 = $365 << 1;
       $369 = $368&255;
       HEAP8[$24>>0] = $369;
       $370 = ((($24)) + 1|0);
       $__p$0$ph$i$i = $370;
      } else {
       $371 = (($365) + 16)|0;
       $372 = $371 & -16;
       $373 = (_malloc($372)|0);
       $374 = ((($24)) + 8|0);
       HEAP32[$374>>2] = $373;
       $375 = $372 | 1;
       HEAP32[$24>>2] = $375;
       $376 = ((($24)) + 4|0);
       HEAP32[$376>>2] = $365;
       $__p$0$ph$i$i = $373;
      }
      $377 = ($340|0)==($n$0120$lcssa|0);
      if (!($377)) {
       $$0$i$i117 = $340;$__p$0$i$i116 = $__p$0$ph$i$i;
       while(1) {
        $378 = HEAP8[$$0$i$i117>>0]|0;
        HEAP8[$__p$0$i$i116>>0] = $378;
        $379 = ((($$0$i$i117)) + 1|0);
        $380 = ((($__p$0$i$i116)) + 1|0);
        $381 = ($379|0)==($n$0120$lcssa|0);
        if ($381) {
         break;
        } else {
         $$0$i$i117 = $379;$__p$0$i$i116 = $380;
        }
       }
      }
      $scevgep2$i$i = (($__p$0$ph$i$i) + ($365)|0);
      HEAP8[$scevgep2$i$i>>0] = 0;
      $382 = HEAP8[$24>>0]|0;
      $383 = $382 & 1;
      $384 = ($383<<24>>24)==(0);
      $385 = ((($24)) + 8|0);
      $386 = HEAP32[$385>>2]|0;
      $387 = ((($24)) + 1|0);
      $388 = $384 ? $387 : $386;
      $389 = ((($24)) + 4|0);
      $390 = HEAP32[$389>>2]|0;
      $391 = $382&255;
      $392 = $391 >>> 1;
      $393 = $384 ? $392 : $390;
      $394 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($21,$388,$393)|0);
      ;HEAP32[$20>>2]=HEAP32[$394>>2]|0;HEAP32[$20+4>>2]=HEAP32[$394+4>>2]|0;HEAP32[$20+8>>2]=HEAP32[$394+8>>2]|0;
      HEAP32[$394>>2] = 0;
      $395 = ((($394)) + 4|0);
      HEAP32[$395>>2] = 0;
      $396 = ((($394)) + 8|0);
      HEAP32[$396>>2] = 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($19,$20);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($356,$19);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($19);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($20);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($24);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($21);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($22);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($23);
      $397 = ((($n$0120$lcssa)) + 1|0);
      $$0 = $397;
      break L1;
     }
     }
    } while(0);
   } else {
    $$0 = $first;
   }
  } else {
   $$0 = $first;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($first,$last,$lit,$db) {
 $first = $first|0;
 $last = $last|0;
 $lit = $lit|0;
 $db = $db|0;
 var $$0$i$i$i = 0, $$0$i$i$i5 = 0, $$02 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__v$i$i4 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__v$i$i4 = sp + 48|0;
 $0 = sp;
 $1 = sp + 24|0;
 $2 = sp + 36|0;
 $3 = (__ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($first,$last)|0);
 $4 = ($3|0)==($first|0);
 $5 = ($3|0)==($last|0);
 $or$cond = $4 | $5;
 if ($or$cond) {
  $$1 = $first;
 } else {
  $6 = HEAP8[$3>>0]|0;
  $7 = ($6<<24>>24)==(69);
  if ($7) {
   $8 = HEAP8[$lit>>0]|0;
   $9 = $8 & 1;
   $10 = ($9<<24>>24)==(0);
   $11 = ((($lit)) + 4|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = $8&255;
   $14 = $13 >>> 1;
   $15 = $10 ? $14 : $12;
   $16 = ($15>>>0)>(3);
   do {
    if ($16) {
     __ZNSt3__1plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($2,1606,$lit);
     $17 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($2,1511)|0);
     ;HEAP32[$1>>2]=HEAP32[$17>>2]|0;HEAP32[$1+4>>2]=HEAP32[$17+4>>2]|0;HEAP32[$1+8>>2]=HEAP32[$17+8>>2]|0;
     HEAP32[$17>>2] = 0;
     $18 = ((($17)) + 4|0);
     HEAP32[$18>>2] = 0;
     $19 = ((($17)) + 8|0);
     HEAP32[$19>>2] = 0;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($0,$1);
     $20 = ((($db)) + 4|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ((($db)) + 8|0);
     $23 = HEAP32[$22>>2]|0;
     $24 = ($21>>>0)<($23>>>0);
     if ($24) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($21,$0);
      $25 = HEAP32[$20>>2]|0;
      $26 = ((($25)) + 24|0);
      HEAP32[$20>>2] = $26;
     } else {
      $27 = ((($db)) + 12|0);
      $28 = HEAP32[$db>>2]|0;
      $29 = $21;
      $30 = $28;
      $31 = (($29) - ($30))|0;
      $32 = (($31|0) / 24)&-1;
      $33 = (($32) + 1)|0;
      $34 = ($31|0)<(-24);
      if ($34) {
       __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
       // unreachable;
      }
      $35 = $23;
      $36 = (($35) - ($30))|0;
      $37 = (($36|0) / 24)&-1;
      $38 = ($37>>>0)<(1073741823);
      if ($38) {
       $39 = $37 << 1;
       $40 = ($39>>>0)<($33>>>0);
       $41 = $40 ? $33 : $39;
       $$0$i$i$i = $41;
      } else {
       $$0$i$i$i = 2147483647;
      }
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i4,$$0$i$i$i,$32,$27);
      $42 = ((($__v$i$i4)) + 8|0);
      $43 = HEAP32[$42>>2]|0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($43,$0);
      $44 = ((($43)) + 24|0);
      HEAP32[$42>>2] = $44;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i4);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i4);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($0);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($1);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($2);
    } else {
     $45 = ((($db)) + 4|0);
     $46 = HEAP32[$45>>2]|0;
     $47 = ((($db)) + 8|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = ($46>>>0)<($48>>>0);
     if ($49) {
      ;HEAP32[$46>>2]=0|0;HEAP32[$46+4>>2]=0|0;HEAP32[$46+8>>2]=0|0;HEAP32[$46+12>>2]=0|0;HEAP32[$46+16>>2]=0|0;HEAP32[$46+20>>2]=0|0;
      HEAP32[$46>>2] = 0;
      $50 = ((($46)) + 4|0);
      HEAP32[$50>>2] = 0;
      $51 = ((($46)) + 8|0);
      HEAP32[$51>>2] = 0;
      $52 = ((($46)) + 12|0);
      HEAP32[$52>>2] = 0;
      $53 = ((($52)) + 4|0);
      HEAP32[$53>>2] = 0;
      $54 = ((($52)) + 8|0);
      HEAP32[$54>>2] = 0;
      $55 = HEAP32[$45>>2]|0;
      $56 = ((($55)) + 24|0);
      HEAP32[$45>>2] = $56;
      break;
     }
     $57 = ((($db)) + 12|0);
     $58 = HEAP32[$db>>2]|0;
     $59 = $46;
     $60 = $58;
     $61 = (($59) - ($60))|0;
     $62 = (($61|0) / 24)&-1;
     $63 = (($62) + 1)|0;
     $64 = ($61|0)<(-24);
     if ($64) {
      __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
      // unreachable;
     }
     $65 = $48;
     $66 = (($65) - ($60))|0;
     $67 = (($66|0) / 24)&-1;
     $68 = ($67>>>0)<(1073741823);
     if ($68) {
      $69 = $67 << 1;
      $70 = ($69>>>0)<($63>>>0);
      $71 = $70 ? $63 : $69;
      $$0$i$i$i5 = $71;
     } else {
      $$0$i$i$i5 = 2147483647;
     }
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i4,$$0$i$i$i5,$62,$57);
     $72 = ((($__v$i$i4)) + 8|0);
     $73 = HEAP32[$72>>2]|0;
     ;HEAP32[$73>>2]=0|0;HEAP32[$73+4>>2]=0|0;HEAP32[$73+8>>2]=0|0;HEAP32[$73+12>>2]=0|0;HEAP32[$73+16>>2]=0|0;HEAP32[$73+20>>2]=0|0;
     HEAP32[$73>>2] = 0;
     $74 = ((($73)) + 4|0);
     HEAP32[$74>>2] = 0;
     $75 = ((($73)) + 8|0);
     HEAP32[$75>>2] = 0;
     $76 = ((($73)) + 12|0);
     HEAP32[$76>>2] = 0;
     $77 = ((($76)) + 4|0);
     HEAP32[$77>>2] = 0;
     $78 = ((($76)) + 8|0);
     HEAP32[$78>>2] = 0;
     $79 = ((($73)) + 24|0);
     HEAP32[$72>>2] = $79;
     __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i4);
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i4);
    }
   } while(0);
   $80 = HEAP8[$first>>0]|0;
   $81 = ($80<<24>>24)==(110);
   $82 = ((($db)) + 4|0);
   if ($81) {
    $83 = HEAP32[$82>>2]|0;
    $84 = ((($83)) + -24|0);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9push_backEc($84,45);
    $85 = ((($first)) + 1|0);
    $$02 = $85;
   } else {
    $$02 = $first;
   }
   $86 = HEAP32[$82>>2]|0;
   $87 = ((($86)) + -24|0);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS7_E4typeESC_SC_($87,$$02,$3);
   $88 = HEAP8[$lit>>0]|0;
   $89 = $88 & 1;
   $90 = ($89<<24>>24)==(0);
   $91 = HEAP32[$11>>2]|0;
   $92 = $88&255;
   $93 = $92 >>> 1;
   $94 = $90 ? $93 : $91;
   $95 = ($94>>>0)<(4);
   if ($95) {
    $96 = HEAP32[$82>>2]|0;
    $97 = ((($96)) + -24|0);
    $98 = ((($lit)) + 8|0);
    $99 = HEAP32[$98>>2]|0;
    $100 = ((($lit)) + 1|0);
    $101 = $90 ? $100 : $99;
    (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($97,$101,$94)|0);
   }
   $102 = ((($3)) + 1|0);
   $$1 = $102;
  } else {
   $$1 = $first;
  }
 }
 STACKTOP = sp;return ($$1|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj6EEERAT__Kc($this,$s) {
 $this = $this|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$this>>0] = 10;
 $0 = ((($this)) + 1|0);
 ;HEAP8[$0>>0]=HEAP8[$s>>0]|0;HEAP8[$0+1>>0]=HEAP8[$s+1>>0]|0;HEAP8[$0+2>>0]=HEAP8[$s+2>>0]|0;HEAP8[$0+3>>0]=HEAP8[$s+3>>0]|0;HEAP8[$0+4>>0]=HEAP8[$s+4>>0]|0;
 $1 = ((($this)) + 6|0);
 HEAP8[$1>>0] = 0;
 $2 = ((($this)) + 12|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($2)) + 4|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($2)) + 8|0);
 HEAP32[$4>>2] = 0;
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj5EEERAT__Kc($this,$s) {
 $this = $this|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$this>>0] = 8;
 $0 = ((($this)) + 1|0);
 $1 = HEAPU8[$s>>0]|(HEAPU8[$s+1>>0]<<8)|(HEAPU8[$s+2>>0]<<16)|(HEAPU8[$s+3>>0]<<24);
 HEAP8[$0>>0]=$1&255;HEAP8[$0+1>>0]=($1>>8)&255;HEAP8[$0+2>>0]=($1>>16)&255;HEAP8[$0+3>>0]=$1>>24;
 $2 = ((($this)) + 5|0);
 HEAP8[$2>>0] = 0;
 $3 = ((($this)) + 12|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($3)) + 4|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($3)) + 8|0);
 HEAP32[$5>>2] = 0;
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE8allocateEj($this,$n) {
 $this = $this|0;
 $n = $n|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($n) + 15)|0;
 $1 = $0 & -16;
 $2 = ((($this)) + 4096|0);
 $3 = ((($this)) + 4096|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $2;
 $6 = $4;
 $7 = (($5) - ($6))|0;
 $8 = ($7>>>0)<($1>>>0);
 if ($8) {
  $10 = (_malloc($1)|0);
  $$0 = $10;
 } else {
  $9 = (($4) + ($1)|0);
  HEAP32[$3>>2] = $9;
  $$0 = $4;
 }
 return ($$0|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_120parse_function_paramINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db) {
 $first = $first|0;
 $last = $last|0;
 $db = $db|0;
 var $$0 = 0, $$0$i$i$i = 0, $$0$i$i$i18 = 0, $$0$i$i1027 = 0, $$0$i$i24 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__p$0$i$i23 = 0, $__p$0$i$i926 = 0, $__p$0$ph$i$i = 0, $__p$0$ph$i$i7 = 0, $__v$i$i17 = 0, $cv = 0, $cv1 = 0, $scevgep2$i$i = 0;
 var $scevgep2$i$i11 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__v$i$i17 = sp + 108|0;
 $cv = sp + 104|0;
 $0 = sp + 80|0;
 $1 = sp + 68|0;
 $2 = sp + 56|0;
 $cv1 = sp + 40|0;
 $3 = sp + 16|0;
 $4 = sp;
 $5 = sp + 44|0;
 $6 = $last;
 $7 = $first;
 $8 = (($6) - ($7))|0;
 $9 = ($8|0)>(2);
 L1: do {
  if ($9) {
   $10 = HEAP8[$first>>0]|0;
   $11 = ($10<<24>>24)==(102);
   if ($11) {
    $12 = ((($first)) + 1|0);
    $13 = HEAP8[$12>>0]|0;
    switch ($13<<24>>24) {
    case 112:  {
     $14 = ((($first)) + 2|0);
     $15 = (__ZN10__cxxabiv112_GLOBAL__N_119parse_cv_qualifiersEPKcS2_Rj($14,$last,$cv)|0);
     $16 = (__ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($15,$last)|0);
     $17 = ($16|0)==($last|0);
     if ($17) {
      $$0 = $first;
      break L1;
     }
     $18 = HEAP8[$16>>0]|0;
     $19 = ($18<<24>>24)==(95);
     if (!($19)) {
      $$0 = $first;
      break L1;
     }
     $20 = $15;
     $21 = $16;
     $22 = (($21) - ($20))|0;
     $23 = ($22>>>0)>(4294967279);
     if ($23) {
      __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($2);
      // unreachable;
     }
     $24 = ($22>>>0)<(11);
     if ($24) {
      $25 = $22 << 1;
      $26 = $25&255;
      HEAP8[$2>>0] = $26;
      $27 = ((($2)) + 1|0);
      $__p$0$ph$i$i = $27;
     } else {
      $28 = (($22) + 16)|0;
      $29 = $28 & -16;
      $30 = (_malloc($29)|0);
      $31 = ((($2)) + 8|0);
      HEAP32[$31>>2] = $30;
      $32 = $29 | 1;
      HEAP32[$2>>2] = $32;
      $33 = ((($2)) + 4|0);
      HEAP32[$33>>2] = $22;
      $__p$0$ph$i$i = $30;
     }
     $34 = ($15|0)==($16|0);
     if (!($34)) {
      $$0$i$i24 = $15;$__p$0$i$i23 = $__p$0$ph$i$i;
      while(1) {
       $35 = HEAP8[$$0$i$i24>>0]|0;
       HEAP8[$__p$0$i$i23>>0] = $35;
       $36 = ((($$0$i$i24)) + 1|0);
       $37 = ((($__p$0$i$i23)) + 1|0);
       $38 = ($36|0)==($16|0);
       if ($38) {
        break;
       } else {
        $$0$i$i24 = $36;$__p$0$i$i23 = $37;
       }
      }
     }
     $scevgep2$i$i = (($__p$0$ph$i$i) + ($22)|0);
     HEAP8[$scevgep2$i$i>>0] = 0;
     $39 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($2,0,3041)|0);
     ;HEAP32[$1>>2]=HEAP32[$39>>2]|0;HEAP32[$1+4>>2]=HEAP32[$39+4>>2]|0;HEAP32[$1+8>>2]=HEAP32[$39+8>>2]|0;
     HEAP32[$39>>2] = 0;
     $40 = ((($39)) + 4|0);
     HEAP32[$40>>2] = 0;
     $41 = ((($39)) + 8|0);
     HEAP32[$41>>2] = 0;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($0,$1);
     $42 = ((($db)) + 4|0);
     $43 = HEAP32[$42>>2]|0;
     $44 = ((($db)) + 8|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = ($43>>>0)<($45>>>0);
     if ($46) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($43,$0);
      $47 = HEAP32[$42>>2]|0;
      $48 = ((($47)) + 24|0);
      HEAP32[$42>>2] = $48;
     } else {
      $49 = ((($db)) + 12|0);
      $50 = HEAP32[$db>>2]|0;
      $51 = $43;
      $52 = $50;
      $53 = (($51) - ($52))|0;
      $54 = (($53|0) / 24)&-1;
      $55 = (($54) + 1)|0;
      $56 = ($53|0)<(-24);
      if ($56) {
       __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
       // unreachable;
      }
      $57 = $45;
      $58 = (($57) - ($52))|0;
      $59 = (($58|0) / 24)&-1;
      $60 = ($59>>>0)<(1073741823);
      if ($60) {
       $61 = $59 << 1;
       $62 = ($61>>>0)<($55>>>0);
       $63 = $62 ? $55 : $61;
       $$0$i$i$i = $63;
      } else {
       $$0$i$i$i = 2147483647;
      }
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i17,$$0$i$i$i,$54,$49);
      $64 = ((($__v$i$i17)) + 8|0);
      $65 = HEAP32[$64>>2]|0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($65,$0);
      $66 = ((($65)) + 24|0);
      HEAP32[$64>>2] = $66;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i17);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i17);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($0);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($1);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($2);
     $67 = ((($16)) + 1|0);
     $$0 = $67;
     break L1;
     break;
    }
    case 76:  {
     break;
    }
    default: {
     $$0 = $first;
     break L1;
    }
    }
    $68 = ((($first)) + 2|0);
    $69 = (__ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($68,$last)|0);
    $70 = ($69|0)==($last|0);
    if ($70) {
     $$0 = $first;
    } else {
     $71 = HEAP8[$69>>0]|0;
     $72 = ($71<<24>>24)==(112);
     if ($72) {
      $73 = ((($69)) + 1|0);
      $74 = (__ZN10__cxxabiv112_GLOBAL__N_119parse_cv_qualifiersEPKcS2_Rj($73,$last,$cv1)|0);
      $75 = (__ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($74,$last)|0);
      $76 = ($75|0)==($last|0);
      if ($76) {
       $$0 = $first;
      } else {
       $77 = HEAP8[$75>>0]|0;
       $78 = ($77<<24>>24)==(95);
       if ($78) {
        $79 = $74;
        $80 = $75;
        $81 = (($80) - ($79))|0;
        $82 = ($81>>>0)>(4294967279);
        if ($82) {
         __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($5);
         // unreachable;
        }
        $83 = ($81>>>0)<(11);
        if ($83) {
         $84 = $81 << 1;
         $85 = $84&255;
         HEAP8[$5>>0] = $85;
         $86 = ((($5)) + 1|0);
         $__p$0$ph$i$i7 = $86;
        } else {
         $87 = (($81) + 16)|0;
         $88 = $87 & -16;
         $89 = (_malloc($88)|0);
         $90 = ((($5)) + 8|0);
         HEAP32[$90>>2] = $89;
         $91 = $88 | 1;
         HEAP32[$5>>2] = $91;
         $92 = ((($5)) + 4|0);
         HEAP32[$92>>2] = $81;
         $__p$0$ph$i$i7 = $89;
        }
        $93 = ($74|0)==($75|0);
        if (!($93)) {
         $$0$i$i1027 = $74;$__p$0$i$i926 = $__p$0$ph$i$i7;
         while(1) {
          $94 = HEAP8[$$0$i$i1027>>0]|0;
          HEAP8[$__p$0$i$i926>>0] = $94;
          $95 = ((($$0$i$i1027)) + 1|0);
          $96 = ((($__p$0$i$i926)) + 1|0);
          $97 = ($95|0)==($75|0);
          if ($97) {
           break;
          } else {
           $$0$i$i1027 = $95;$__p$0$i$i926 = $96;
          }
         }
        }
        $scevgep2$i$i11 = (($__p$0$ph$i$i7) + ($81)|0);
        HEAP8[$scevgep2$i$i11>>0] = 0;
        $98 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($5,0,3041)|0);
        ;HEAP32[$4>>2]=HEAP32[$98>>2]|0;HEAP32[$4+4>>2]=HEAP32[$98+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[$98+8>>2]|0;
        HEAP32[$98>>2] = 0;
        $99 = ((($98)) + 4|0);
        HEAP32[$99>>2] = 0;
        $100 = ((($98)) + 8|0);
        HEAP32[$100>>2] = 0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($3,$4);
        $101 = ((($db)) + 4|0);
        $102 = HEAP32[$101>>2]|0;
        $103 = ((($db)) + 8|0);
        $104 = HEAP32[$103>>2]|0;
        $105 = ($102>>>0)<($104>>>0);
        if ($105) {
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($102,$3);
         $106 = HEAP32[$101>>2]|0;
         $107 = ((($106)) + 24|0);
         HEAP32[$101>>2] = $107;
        } else {
         $108 = ((($db)) + 12|0);
         $109 = HEAP32[$db>>2]|0;
         $110 = $102;
         $111 = $109;
         $112 = (($110) - ($111))|0;
         $113 = (($112|0) / 24)&-1;
         $114 = (($113) + 1)|0;
         $115 = ($112|0)<(-24);
         if ($115) {
          __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
          // unreachable;
         }
         $116 = $104;
         $117 = (($116) - ($111))|0;
         $118 = (($117|0) / 24)&-1;
         $119 = ($118>>>0)<(1073741823);
         if ($119) {
          $120 = $118 << 1;
          $121 = ($120>>>0)<($114>>>0);
          $122 = $121 ? $114 : $120;
          $$0$i$i$i18 = $122;
         } else {
          $$0$i$i$i18 = 2147483647;
         }
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i17,$$0$i$i$i18,$113,$108);
         $123 = ((($__v$i$i17)) + 8|0);
         $124 = HEAP32[$123>>2]|0;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($124,$3);
         $125 = ((($124)) + 24|0);
         HEAP32[$123>>2] = $125;
         __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i17);
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i17);
        }
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
        $126 = ((($75)) + 1|0);
        $$0 = $126;
       } else {
        $$0 = $first;
       }
      }
     } else {
      $$0 = $first;
     }
    }
   } else {
    $$0 = $first;
   }
  } else {
   $$0 = $first;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($first,$last,$op,$db) {
 $first = $first|0;
 $last = $last|0;
 $op = $op|0;
 $db = $db|0;
 var $$$$i$i$i = 0, $$$$i$i$i28 = 0, $$$i$i$i = 0, $$$i$i$i27 = 0, $$0 = 0, $$pre$i = 0, $$pre$i32 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $op1 = 0, $op2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $op2 = sp + 84|0;
 $op1 = sp;
 $0 = sp + 12|0;
 $1 = sp + 24|0;
 $2 = sp + 36|0;
 $3 = sp + 48|0;
 $4 = sp + 60|0;
 $5 = sp + 72|0;
 $6 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db)|0);
 $7 = ($6|0)==($first|0);
 L1: do {
  if ($7) {
   $$0 = $first;
  } else {
   $8 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($6,$last,$db)|0);
   $9 = ($8|0)==($6|0);
   $10 = ((($db)) + 4|0);
   $11 = HEAP32[$10>>2]|0;
   if ($9) {
    $117 = ((($11)) + -24|0);
    $119 = $11;
    while(1) {
     $118 = ((($119)) + -24|0);
     HEAP32[$10>>2] = $118;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($118);
     $$pre$i32 = HEAP32[$10>>2]|0;
     $120 = ($$pre$i32|0)==($117|0);
     if ($120) {
      $$0 = $first;
      break L1;
     } else {
      $119 = $$pre$i32;
     }
    }
   }
   $12 = HEAP32[$db>>2]|0;
   $13 = $11;
   $14 = $12;
   $15 = (($13) - ($14))|0;
   $16 = (($15|0) / 24)&-1;
   $17 = ($16>>>0)<(2);
   if ($17) {
    $$0 = $first;
   } else {
    $18 = ((($11)) + -24|0);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($op2,$18);
    $19 = HEAP32[$10>>2]|0;
    $20 = ((($19)) + -24|0);
    $22 = $19;
    while(1) {
     $21 = ((($22)) + -24|0);
     HEAP32[$10>>2] = $21;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($21);
     $$pre$i = HEAP32[$10>>2]|0;
     $23 = ($$pre$i|0)==($20|0);
     if ($23) {
      break;
     } else {
      $22 = $$pre$i;
     }
    }
    $24 = ((($19)) + -48|0);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($op1,$24);
    $25 = HEAP32[$10>>2]|0;
    $26 = ((($25)) + -24|0);
    $27 = HEAP8[$26>>0]|0;
    $28 = $27 & 1;
    $29 = ($28<<24>>24)==(0);
    if ($29) {
     $33 = ((($26)) + 1|0);
     HEAP8[$33>>0] = 0;
     HEAP8[$26>>0] = 0;
    } else {
     $30 = ((($25)) + -16|0);
     $31 = HEAP32[$30>>2]|0;
     HEAP8[$31>>0] = 0;
     $32 = ((($25)) + -20|0);
     HEAP32[$32>>2] = 0;
    }
    $34 = HEAP8[$op>>0]|0;
    $35 = $34 & 1;
    $36 = ($35<<24>>24)==(0);
    $37 = ((($op)) + 4|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = $34&255;
    $40 = $39 >>> 1;
    $41 = $36 ? $40 : $38;
    $42 = ((($op)) + 8|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = ((($op)) + 1|0);
    $45 = $36 ? $44 : $43;
    $46 = ($41>>>0)>(1);
    $47 = $46 ? 1 : $41;
    $48 = (_memcmp($45,1670,$47)|0);
    $49 = ($48|0)==(0);
    $50 = ($41|0)==(0);
    $$$i$i$i = $46&1;
    $$$$i$i$i = $50 ? -1 : $$$i$i$i;
    $51 = $49 ? $$$$i$i$i : $48;
    $52 = ($51|0)==(0);
    if ($52) {
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9push_backEc($26,40);
    }
    __ZNSt3__1plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($5,1606,$op1);
    $53 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($5,2899)|0);
    ;HEAP32[$4>>2]=HEAP32[$53>>2]|0;HEAP32[$4+4>>2]=HEAP32[$53+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[$53+8>>2]|0;
    HEAP32[$53>>2] = 0;
    $54 = ((($53)) + 4|0);
    HEAP32[$54>>2] = 0;
    $55 = ((($53)) + 8|0);
    HEAP32[$55>>2] = 0;
    $56 = HEAP8[$op>>0]|0;
    $57 = $56 & 1;
    $58 = ($57<<24>>24)==(0);
    $59 = HEAP32[$42>>2]|0;
    $60 = $58 ? $44 : $59;
    $61 = HEAP32[$37>>2]|0;
    $62 = $56&255;
    $63 = $62 >>> 1;
    $64 = $58 ? $63 : $61;
    $65 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($4,$60,$64)|0);
    ;HEAP32[$3>>2]=HEAP32[$65>>2]|0;HEAP32[$3+4>>2]=HEAP32[$65+4>>2]|0;HEAP32[$3+8>>2]=HEAP32[$65+8>>2]|0;
    HEAP32[$65>>2] = 0;
    $66 = ((($65)) + 4|0);
    HEAP32[$66>>2] = 0;
    $67 = ((($65)) + 8|0);
    HEAP32[$67>>2] = 0;
    $68 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($3,1508)|0);
    ;HEAP32[$2>>2]=HEAP32[$68>>2]|0;HEAP32[$2+4>>2]=HEAP32[$68+4>>2]|0;HEAP32[$2+8>>2]=HEAP32[$68+8>>2]|0;
    HEAP32[$68>>2] = 0;
    $69 = ((($68)) + 4|0);
    HEAP32[$69>>2] = 0;
    $70 = ((($68)) + 8|0);
    HEAP32[$70>>2] = 0;
    $71 = HEAP8[$op2>>0]|0;
    $72 = $71 & 1;
    $73 = ($72<<24>>24)==(0);
    $74 = ((($op2)) + 8|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = ((($op2)) + 1|0);
    $77 = $73 ? $76 : $75;
    $78 = ((($op2)) + 4|0);
    $79 = HEAP32[$78>>2]|0;
    $80 = $71&255;
    $81 = $80 >>> 1;
    $82 = $73 ? $81 : $79;
    $83 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($2,$77,$82)|0);
    ;HEAP32[$1>>2]=HEAP32[$83>>2]|0;HEAP32[$1+4>>2]=HEAP32[$83+4>>2]|0;HEAP32[$1+8>>2]=HEAP32[$83+8>>2]|0;
    HEAP32[$83>>2] = 0;
    $84 = ((($83)) + 4|0);
    HEAP32[$84>>2] = 0;
    $85 = ((($83)) + 8|0);
    HEAP32[$85>>2] = 0;
    $86 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($1,1511)|0);
    ;HEAP32[$0>>2]=HEAP32[$86>>2]|0;HEAP32[$0+4>>2]=HEAP32[$86+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$86+8>>2]|0;
    HEAP32[$86>>2] = 0;
    $87 = ((($86)) + 4|0);
    HEAP32[$87>>2] = 0;
    $88 = ((($86)) + 8|0);
    HEAP32[$88>>2] = 0;
    $89 = HEAP8[$0>>0]|0;
    $90 = $89 & 1;
    $91 = ($90<<24>>24)==(0);
    $92 = ((($0)) + 8|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = ((($0)) + 1|0);
    $95 = $91 ? $94 : $93;
    $96 = ((($0)) + 4|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = $89&255;
    $99 = $98 >>> 1;
    $100 = $91 ? $99 : $97;
    (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($26,$95,$100)|0);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($0);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($1);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($2);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
    $101 = HEAP8[$op>>0]|0;
    $102 = $101 & 1;
    $103 = ($102<<24>>24)==(0);
    $104 = HEAP32[$37>>2]|0;
    $105 = $101&255;
    $106 = $105 >>> 1;
    $107 = $103 ? $106 : $104;
    $108 = HEAP32[$42>>2]|0;
    $109 = $103 ? $44 : $108;
    $110 = ($107>>>0)>(1);
    $111 = $110 ? 1 : $107;
    $112 = (_memcmp($109,1670,$111)|0);
    $113 = ($112|0)==(0);
    $114 = ($107|0)==(0);
    $$$i$i$i27 = $110&1;
    $$$$i$i$i28 = $114 ? -1 : $$$i$i$i27;
    $115 = $113 ? $$$$i$i$i28 : $112;
    $116 = ($115|0)==(0);
    if ($116) {
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9push_backEc($26,41);
    }
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($op1);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($op2);
    $$0 = $8;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_123parse_prefix_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($first,$last,$op,$db) {
 $first = $first|0;
 $last = $last|0;
 $op = $op|0;
 $db = $db|0;
 var $$04 = 0, $$pre$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0;
 var $or$cond$i$i$i$i$i = 0, $phitmp$i$i$i$i$i$i = 0, $phitmp$i2$i$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 36|0;
 $1 = sp;
 $2 = sp + 12|0;
 $3 = sp + 24|0;
 $4 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db)|0);
 $5 = ($4|0)==($first|0);
 if ($5) {
  $$04 = $first;
 } else {
  $6 = HEAP32[$db>>2]|0;
  $7 = ((($db)) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($6|0)==($8|0);
  if ($9) {
   $$04 = $first;
  } else {
   $10 = ((($8)) + -24|0);
   __ZNSt3__1plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EERKSB_PKS8_($2,$op,1606);
   $11 = HEAP32[$7>>2]|0;
   $12 = ((($11)) + -24|0);
   __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3,$12);
   $13 = HEAP8[$3>>0]|0;
   $14 = $13 & 1;
   $15 = ($14<<24>>24)==(0);
   $16 = ((($3)) + 8|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ((($3)) + 1|0);
   $19 = $15 ? $18 : $17;
   $20 = ((($3)) + 4|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = $13&255;
   $23 = $22 >>> 1;
   $24 = $15 ? $23 : $21;
   $25 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($2,$19,$24)|0);
   ;HEAP32[$1>>2]=HEAP32[$25>>2]|0;HEAP32[$1+4>>2]=HEAP32[$25+4>>2]|0;HEAP32[$1+8>>2]=HEAP32[$25+8>>2]|0;
   HEAP32[$25>>2] = 0;
   $26 = ((($25)) + 4|0);
   HEAP32[$26>>2] = 0;
   $27 = ((($25)) + 8|0);
   HEAP32[$27>>2] = 0;
   $28 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($1,1511)|0);
   ;HEAP32[$0>>2]=HEAP32[$28>>2]|0;HEAP32[$0+4>>2]=HEAP32[$28+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$28+8>>2]|0;
   HEAP32[$28>>2] = 0;
   $29 = ((($28)) + 4|0);
   HEAP32[$29>>2] = 0;
   $30 = ((($28)) + 8|0);
   HEAP32[$30>>2] = 0;
   $31 = HEAP8[$10>>0]|0;
   $32 = $31 & 1;
   $33 = ($32<<24>>24)==(0);
   do {
    if ($33) {
     $34 = ((($10)) + 1|0);
     HEAP8[$34>>0] = 0;
     HEAP8[$10>>0] = 0;
    } else {
     $35 = ((($8)) + -16|0);
     $36 = HEAP32[$35>>2]|0;
     HEAP8[$36>>0] = 0;
     $37 = ((($8)) + -20|0);
     HEAP32[$37>>2] = 0;
     $$pre$i$i$i = HEAP8[$10>>0]|0;
     $38 = $$pre$i$i$i & 1;
     $39 = ($38<<24>>24)==(0);
     if ($39) {
      $44 = $$pre$i$i$i;$53 = 10;
     } else {
      $40 = HEAP32[$10>>2]|0;
      $41 = $40 & -2;
      $phitmp$i$i$i$i$i$i = (($41) + -1)|0;
      $42 = $40&255;
      $44 = $42;$53 = $phitmp$i$i$i$i$i$i;
     }
     $43 = $44 & 1;
     $45 = ($43<<24>>24)==(0);
     if ($45) {
      $46 = $44&255;
      $47 = $46 >>> 1;
      $48 = ($44&255)<(22);
      if ($48) {
       $51 = 10;$72 = $47;$77 = 1;
      } else {
       $49 = (($47) + 16)|0;
       $50 = $49 & 240;
       $phitmp$i2$i$i$i$i$i = (($50) + -1)|0;
       $51 = $phitmp$i2$i$i$i$i$i;$72 = $47;$77 = 1;
      }
     } else {
      $51 = 10;$72 = 0;$77 = 0;
     }
     $52 = ($51|0)==($53|0);
     if (!($52)) {
      $54 = ($51|0)==(10);
      if ($54) {
       $59 = ((($10)) + 1|0);
       $60 = HEAP32[$35>>2]|0;
       if ($77) {
        $61 = $44&255;
        $62 = $61 >>> 1;
        $63 = (($62) + 1)|0;
        _memcpy(($59|0),($60|0),($63|0))|0;
        _free($60);
       } else {
        $68 = HEAP8[$60>>0]|0;
        HEAP8[$59>>0] = $68;
        _free($60);
       }
       $73 = $72 << 1;
       $74 = $73&255;
       HEAP8[$10>>0] = $74;
       break;
      }
      $55 = ($51>>>0)<=($53>>>0);
      $56 = (($51) + 1)|0;
      $57 = (_malloc($56)|0);
      $58 = ($57|0)==(0|0);
      $or$cond$i$i$i$i$i = $55 & $58;
      if (!($or$cond$i$i$i$i$i)) {
       if ($77) {
        $64 = ((($10)) + 1|0);
        $65 = $44&255;
        $66 = $65 >>> 1;
        $67 = (($66) + 1)|0;
        _memcpy(($57|0),($64|0),($67|0))|0;
       } else {
        $69 = HEAP32[$35>>2]|0;
        $70 = HEAP8[$69>>0]|0;
        HEAP8[$57>>0] = $70;
        _free($69);
       }
       $71 = $56 | 1;
       HEAP32[$10>>2] = $71;
       HEAP32[$37>>2] = $72;
       HEAP32[$35>>2] = $57;
      }
     }
    }
   } while(0);
   ;HEAP32[$10>>2]=HEAP32[$0>>2]|0;HEAP32[$10+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$10+8>>2]=HEAP32[$0+8>>2]|0;
   HEAP32[$0>>2] = 0;
   $75 = ((($0)) + 4|0);
   HEAP32[$75>>2] = 0;
   $76 = ((($0)) + 8|0);
   HEAP32[$76>>2] = 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($0);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($1);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($2);
   $$04 = $4;
  }
 }
 STACKTOP = sp;return ($$04|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db) {
 $first = $first|0;
 $last = $last|0;
 $db = $db|0;
 var $$19 = 0, $$first = 0, $$pre = 0, $$pre$i = 0, $$pre$i14 = 0, $$pre$i16 = 0, $$pre$i20 = 0, $$pre$i22 = 0, $$pre$i30 = 0, $$pre$i34 = 0, $$pre$i36 = 0, $$pre$i44 = 0, $$pre$i52 = 0, $$pre$i54 = 0, $$pre$phi80Z2D = 0, $$pre$phi82Z2D = 0, $$pre$phi84Z2D = 0, $$pre81 = 0, $0 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $args = 0, $args3 = 0;
 var $global$0$off0 = 0, $or$cond = 0, $or$cond11 = 0, $or$cond12 = 0, $or$cond13 = 0, $s = 0, $s1 = 0, $s4 = 0, $s5 = 0, $s6 = 0, $t$0 = 0, $t$1$lcssa = 0, $t$1$ph = 0, $t$1107 = 0, $t$2 = 0, $t$3$lcssa = 0, $t$3110 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args = sp + 132|0;
 $s = sp + 120|0;
 $0 = sp + 108|0;
 $s1 = sp + 96|0;
 $1 = sp + 84|0;
 $args3 = sp + 72|0;
 $s4 = sp + 60|0;
 $2 = sp + 36|0;
 $s5 = sp + 24|0;
 $3 = sp + 12|0;
 $s6 = sp;
 $4 = sp + 48|0;
 $5 = $last;
 $6 = $first;
 $7 = (($5) - ($6))|0;
 $8 = ($7|0)>(2);
 L1: do {
  if ($8) {
   $9 = HEAP8[$first>>0]|0;
   $10 = ($9<<24>>24)==(103);
   if ($10) {
    $11 = ((($first)) + 1|0);
    $12 = HEAP8[$11>>0]|0;
    $13 = ($12<<24>>24)==(115);
    $14 = ((($first)) + 2|0);
    $$first = $13 ? $14 : $first;
    $global$0$off0 = $13;$t$0 = $$first;
   } else {
    $global$0$off0 = 0;$t$0 = $first;
   }
   $15 = (__ZN10__cxxabiv112_GLOBAL__N_126parse_base_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($t$0,$last,$db)|0);
   $16 = ($15|0)==($t$0|0);
   if (!($16)) {
    if (!($global$0$off0)) {
     $$19 = $15;
     break;
    }
    $17 = HEAP32[$db>>2]|0;
    $18 = ((($db)) + 4|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = ($17|0)==($19|0);
    if ($20) {
     $$19 = $first;
     break;
    }
    $21 = ((($19)) + -24|0);
    (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($21,0,1794)|0);
    $$19 = $15;
    break;
   }
   $22 = $t$0;
   $23 = (($5) - ($22))|0;
   $24 = ($23|0)>(2);
   if ($24) {
    $25 = HEAP8[$t$0>>0]|0;
    $26 = ($25<<24>>24)==(115);
    if ($26) {
     $27 = ((($t$0)) + 1|0);
     $28 = HEAP8[$27>>0]|0;
     $29 = ($28<<24>>24)==(114);
     if ($29) {
      $30 = ((($t$0)) + 2|0);
      $31 = HEAP8[$30>>0]|0;
      $32 = ($31<<24>>24)==(78);
      if ($32) {
       $33 = ((($t$0)) + 3|0);
       $34 = (__ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_typeINS0_2DbEEEPKcS4_S4_RT_($33,$last,$db)|0);
       $35 = ($34|0)==($33|0);
       $36 = ($34|0)==($last|0);
       $or$cond = $35 | $36;
       if ($or$cond) {
        $$19 = $first;
        break;
       }
       $37 = (__ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($34,$last,$db)|0);
       $38 = ($37|0)==($34|0);
       $$pre = ((($db)) + 4|0);
       do {
        if ($38) {
         $$pre$phi80Z2D = $db;$t$1$ph = $34;
        } else {
         $39 = HEAP32[$$pre>>2]|0;
         $40 = HEAP32[$db>>2]|0;
         $41 = $39;
         $42 = $40;
         $43 = (($41) - ($42))|0;
         $44 = (($43|0) / 24)&-1;
         $45 = ($44>>>0)<(2);
         if ($45) {
          $$19 = $first;
          break L1;
         }
         $46 = ((($39)) + -24|0);
         __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($args,$46);
         $47 = HEAP32[$$pre>>2]|0;
         $48 = ((($47)) + -24|0);
         $50 = $47;
         while(1) {
          $49 = ((($50)) + -24|0);
          HEAP32[$$pre>>2] = $49;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($49);
          $$pre$i = HEAP32[$$pre>>2]|0;
          $51 = ($$pre$i|0)==($48|0);
          if ($51) {
           break;
          } else {
           $50 = $$pre$i;
          }
         }
         $52 = ((($47)) + -48|0);
         $53 = HEAP8[$args>>0]|0;
         $54 = $53 & 1;
         $55 = ($54<<24>>24)==(0);
         $56 = ((($args)) + 8|0);
         $57 = HEAP32[$56>>2]|0;
         $58 = ((($args)) + 1|0);
         $59 = $55 ? $58 : $57;
         $60 = ((($args)) + 4|0);
         $61 = HEAP32[$60>>2]|0;
         $62 = $53&255;
         $63 = $62 >>> 1;
         $64 = $55 ? $63 : $61;
         (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($52,$59,$64)|0);
         $65 = ($37|0)==($last|0);
         if (!($65)) {
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($args);
          $$pre$phi80Z2D = $db;$t$1$ph = $37;
          break;
         }
         $66 = HEAP32[$$pre>>2]|0;
         $67 = ((($66)) + -24|0);
         $69 = $66;
         while(1) {
          $68 = ((($69)) + -24|0);
          HEAP32[$$pre>>2] = $68;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($68);
          $$pre$i14 = HEAP32[$$pre>>2]|0;
          $70 = ($$pre$i14|0)==($67|0);
          if ($70) {
           break;
          } else {
           $69 = $$pre$i14;
          }
         }
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($args);
         $$19 = $first;
         break L1;
        }
       } while(0);
       $71 = ((($0)) + 8|0);
       $72 = ((($0)) + 1|0);
       $73 = ((($0)) + 4|0);
       $74 = HEAP8[$t$1$ph>>0]|0;
       $75 = ($74<<24>>24)==(69);
       if ($75) {
        $t$1$lcssa = $t$1$ph;
       } else {
        $t$1107 = $t$1$ph;
        while(1) {
         $76 = (__ZN10__cxxabiv112_GLOBAL__N_115parse_simple_idINS0_2DbEEEPKcS4_S4_RT_($t$1107,$last,$db)|0);
         $77 = ($76|0)==($t$1107|0);
         $78 = ($76|0)==($last|0);
         $or$cond11 = $77 | $78;
         if ($or$cond11) {
          $$19 = $first;
          break L1;
         }
         $79 = HEAP32[$$pre>>2]|0;
         $80 = HEAP32[$$pre$phi80Z2D>>2]|0;
         $81 = $79;
         $82 = $80;
         $83 = (($81) - ($82))|0;
         $84 = (($83|0) / 24)&-1;
         $85 = ($84>>>0)<(2);
         if ($85) {
          $$19 = $first;
          break L1;
         }
         $86 = ((($79)) + -24|0);
         __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($s,$86);
         $87 = HEAP32[$$pre>>2]|0;
         $88 = ((($87)) + -24|0);
         $90 = $87;
         while(1) {
          $89 = ((($90)) + -24|0);
          HEAP32[$$pre>>2] = $89;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($89);
          $$pre$i16 = HEAP32[$$pre>>2]|0;
          $91 = ($$pre$i16|0)==($88|0);
          if ($91) {
           break;
          } else {
           $90 = $$pre$i16;
          }
         }
         $92 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($s,0,1794)|0);
         ;HEAP32[$0>>2]=HEAP32[$92>>2]|0;HEAP32[$0+4>>2]=HEAP32[$92+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$92+8>>2]|0;
         HEAP32[$92>>2] = 0;
         $93 = ((($92)) + 4|0);
         HEAP32[$93>>2] = 0;
         $94 = ((($92)) + 8|0);
         HEAP32[$94>>2] = 0;
         $95 = ((($87)) + -48|0);
         $96 = HEAP8[$0>>0]|0;
         $97 = $96 & 1;
         $98 = ($97<<24>>24)==(0);
         $99 = HEAP32[$71>>2]|0;
         $100 = $98 ? $72 : $99;
         $101 = HEAP32[$73>>2]|0;
         $102 = $96&255;
         $103 = $102 >>> 1;
         $104 = $98 ? $103 : $101;
         (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($95,$100,$104)|0);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($0);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($s);
         $105 = HEAP8[$76>>0]|0;
         $106 = ($105<<24>>24)==(69);
         if ($106) {
          $t$1$lcssa = $76;
          break;
         } else {
          $t$1107 = $76;
         }
        }
       }
       $107 = ((($t$1$lcssa)) + 1|0);
       $108 = (__ZN10__cxxabiv112_GLOBAL__N_126parse_base_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($107,$last,$db)|0);
       $109 = ($108|0)==($107|0);
       if ($109) {
        $110 = HEAP32[$$pre$phi80Z2D>>2]|0;
        $111 = HEAP32[$$pre>>2]|0;
        $112 = ($110|0)==($111|0);
        if ($112) {
         $$19 = $first;
         break;
        }
        $113 = ((($111)) + -24|0);
        $115 = $111;
        while(1) {
         $114 = ((($115)) + -24|0);
         HEAP32[$$pre>>2] = $114;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($114);
         $$pre$i20 = HEAP32[$$pre>>2]|0;
         $116 = ($$pre$i20|0)==($113|0);
         if ($116) {
          $$19 = $first;
          break L1;
         } else {
          $115 = $$pre$i20;
         }
        }
       }
       $117 = HEAP32[$$pre>>2]|0;
       $118 = HEAP32[$$pre$phi80Z2D>>2]|0;
       $119 = $117;
       $120 = $118;
       $121 = (($119) - ($120))|0;
       $122 = (($121|0) / 24)&-1;
       $123 = ($122>>>0)<(2);
       if ($123) {
        $$19 = $first;
        break;
       }
       $124 = ((($117)) + -24|0);
       __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($s1,$124);
       $125 = HEAP32[$$pre>>2]|0;
       $126 = ((($125)) + -24|0);
       $128 = $125;
       while(1) {
        $127 = ((($128)) + -24|0);
        HEAP32[$$pre>>2] = $127;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($127);
        $$pre$i22 = HEAP32[$$pre>>2]|0;
        $129 = ($$pre$i22|0)==($126|0);
        if ($129) {
         break;
        } else {
         $128 = $$pre$i22;
        }
       }
       $130 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($s1,0,1794)|0);
       ;HEAP32[$1>>2]=HEAP32[$130>>2]|0;HEAP32[$1+4>>2]=HEAP32[$130+4>>2]|0;HEAP32[$1+8>>2]=HEAP32[$130+8>>2]|0;
       HEAP32[$130>>2] = 0;
       $131 = ((($130)) + 4|0);
       HEAP32[$131>>2] = 0;
       $132 = ((($130)) + 8|0);
       HEAP32[$132>>2] = 0;
       $133 = ((($125)) + -48|0);
       $134 = HEAP8[$1>>0]|0;
       $135 = $134 & 1;
       $136 = ($135<<24>>24)==(0);
       $137 = ((($1)) + 8|0);
       $138 = HEAP32[$137>>2]|0;
       $139 = ((($1)) + 1|0);
       $140 = $136 ? $139 : $138;
       $141 = ((($1)) + 4|0);
       $142 = HEAP32[$141>>2]|0;
       $143 = $134&255;
       $144 = $143 >>> 1;
       $145 = $136 ? $144 : $142;
       (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($133,$140,$145)|0);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($1);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($s1);
       $$19 = $108;
       break;
      }
      $146 = (__ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_typeINS0_2DbEEEPKcS4_S4_RT_($30,$last,$db)|0);
      $147 = ($146|0)==($30|0);
      if (!($147)) {
       $148 = (__ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($146,$last,$db)|0);
       $149 = ($148|0)==($146|0);
       if ($149) {
        $t$2 = $146;
       } else {
        $150 = ((($db)) + 4|0);
        $151 = HEAP32[$150>>2]|0;
        $152 = HEAP32[$db>>2]|0;
        $153 = $151;
        $154 = $152;
        $155 = (($153) - ($154))|0;
        $156 = (($155|0) / 24)&-1;
        $157 = ($156>>>0)<(2);
        if ($157) {
         $$19 = $first;
         break;
        }
        $158 = ((($151)) + -24|0);
        __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($args3,$158);
        $159 = HEAP32[$150>>2]|0;
        $160 = ((($159)) + -24|0);
        $162 = $159;
        while(1) {
         $161 = ((($162)) + -24|0);
         HEAP32[$150>>2] = $161;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($161);
         $$pre$i30 = HEAP32[$150>>2]|0;
         $163 = ($$pre$i30|0)==($160|0);
         if ($163) {
          break;
         } else {
          $162 = $$pre$i30;
         }
        }
        $164 = ((($159)) + -48|0);
        $165 = HEAP8[$args3>>0]|0;
        $166 = $165 & 1;
        $167 = ($166<<24>>24)==(0);
        $168 = ((($args3)) + 8|0);
        $169 = HEAP32[$168>>2]|0;
        $170 = ((($args3)) + 1|0);
        $171 = $167 ? $170 : $169;
        $172 = ((($args3)) + 4|0);
        $173 = HEAP32[$172>>2]|0;
        $174 = $165&255;
        $175 = $174 >>> 1;
        $176 = $167 ? $175 : $173;
        (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($164,$171,$176)|0);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($args3);
        $t$2 = $148;
       }
       $177 = (__ZN10__cxxabiv112_GLOBAL__N_126parse_base_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($t$2,$last,$db)|0);
       $178 = ($177|0)==($t$2|0);
       if ($178) {
        $179 = HEAP32[$db>>2]|0;
        $180 = ((($db)) + 4|0);
        $181 = HEAP32[$180>>2]|0;
        $182 = ($179|0)==($181|0);
        if ($182) {
         $$19 = $first;
         break;
        }
        $183 = ((($181)) + -24|0);
        $185 = $181;
        while(1) {
         $184 = ((($185)) + -24|0);
         HEAP32[$180>>2] = $184;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($184);
         $$pre$i34 = HEAP32[$180>>2]|0;
         $186 = ($$pre$i34|0)==($183|0);
         if ($186) {
          $$19 = $first;
          break L1;
         } else {
          $185 = $$pre$i34;
         }
        }
       }
       $187 = ((($db)) + 4|0);
       $188 = HEAP32[$187>>2]|0;
       $189 = HEAP32[$db>>2]|0;
       $190 = $188;
       $191 = $189;
       $192 = (($190) - ($191))|0;
       $193 = (($192|0) / 24)&-1;
       $194 = ($193>>>0)<(2);
       if ($194) {
        $$19 = $first;
        break;
       }
       $195 = ((($188)) + -24|0);
       __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($s4,$195);
       $196 = HEAP32[$187>>2]|0;
       $197 = ((($196)) + -24|0);
       $199 = $196;
       while(1) {
        $198 = ((($199)) + -24|0);
        HEAP32[$187>>2] = $198;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($198);
        $$pre$i36 = HEAP32[$187>>2]|0;
        $200 = ($$pre$i36|0)==($197|0);
        if ($200) {
         break;
        } else {
         $199 = $$pre$i36;
        }
       }
       $201 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($s4,0,1794)|0);
       ;HEAP32[$2>>2]=HEAP32[$201>>2]|0;HEAP32[$2+4>>2]=HEAP32[$201+4>>2]|0;HEAP32[$2+8>>2]=HEAP32[$201+8>>2]|0;
       HEAP32[$201>>2] = 0;
       $202 = ((($201)) + 4|0);
       HEAP32[$202>>2] = 0;
       $203 = ((($201)) + 8|0);
       HEAP32[$203>>2] = 0;
       $204 = ((($196)) + -48|0);
       $205 = HEAP8[$2>>0]|0;
       $206 = $205 & 1;
       $207 = ($206<<24>>24)==(0);
       $208 = ((($2)) + 8|0);
       $209 = HEAP32[$208>>2]|0;
       $210 = ((($2)) + 1|0);
       $211 = $207 ? $210 : $209;
       $212 = ((($2)) + 4|0);
       $213 = HEAP32[$212>>2]|0;
       $214 = $205&255;
       $215 = $214 >>> 1;
       $216 = $207 ? $215 : $213;
       (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($204,$211,$216)|0);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($2);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($s4);
       $$19 = $177;
       break;
      }
      $217 = (__ZN10__cxxabiv112_GLOBAL__N_115parse_simple_idINS0_2DbEEEPKcS4_S4_RT_($30,$last,$db)|0);
      $218 = ($217|0)==($30|0);
      $219 = ($217|0)==($last|0);
      $or$cond12 = $218 | $219;
      if ($or$cond12) {
       $$19 = $first;
      } else {
       if ($global$0$off0) {
        $220 = HEAP32[$db>>2]|0;
        $221 = ((($db)) + 4|0);
        $222 = HEAP32[$221>>2]|0;
        $223 = ($220|0)==($222|0);
        if ($223) {
         $$19 = $first;
         break;
        }
        $224 = ((($222)) + -24|0);
        (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($224,0,1794)|0);
        $$pre$phi82Z2D = $221;$$pre$phi84Z2D = $db;
       } else {
        $$pre81 = ((($db)) + 4|0);
        $$pre$phi82Z2D = $$pre81;$$pre$phi84Z2D = $db;
       }
       $225 = ((($3)) + 8|0);
       $226 = ((($3)) + 1|0);
       $227 = ((($3)) + 4|0);
       $228 = HEAP8[$217>>0]|0;
       $229 = ($228<<24>>24)==(69);
       if ($229) {
        $t$3$lcssa = $217;
       } else {
        $t$3110 = $217;
        while(1) {
         $230 = (__ZN10__cxxabiv112_GLOBAL__N_115parse_simple_idINS0_2DbEEEPKcS4_S4_RT_($t$3110,$last,$db)|0);
         $231 = ($230|0)==($t$3110|0);
         $232 = ($230|0)==($last|0);
         $or$cond13 = $231 | $232;
         if ($or$cond13) {
          $$19 = $first;
          break L1;
         }
         $233 = HEAP32[$$pre$phi82Z2D>>2]|0;
         $234 = HEAP32[$$pre$phi84Z2D>>2]|0;
         $235 = $233;
         $236 = $234;
         $237 = (($235) - ($236))|0;
         $238 = (($237|0) / 24)&-1;
         $239 = ($238>>>0)<(2);
         if ($239) {
          $$19 = $first;
          break L1;
         }
         $240 = ((($233)) + -24|0);
         __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($s5,$240);
         $241 = HEAP32[$$pre$phi82Z2D>>2]|0;
         $242 = ((($241)) + -24|0);
         $244 = $241;
         while(1) {
          $243 = ((($244)) + -24|0);
          HEAP32[$$pre$phi82Z2D>>2] = $243;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($243);
          $$pre$i44 = HEAP32[$$pre$phi82Z2D>>2]|0;
          $245 = ($$pre$i44|0)==($242|0);
          if ($245) {
           break;
          } else {
           $244 = $$pre$i44;
          }
         }
         $246 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($s5,0,1794)|0);
         ;HEAP32[$3>>2]=HEAP32[$246>>2]|0;HEAP32[$3+4>>2]=HEAP32[$246+4>>2]|0;HEAP32[$3+8>>2]=HEAP32[$246+8>>2]|0;
         HEAP32[$246>>2] = 0;
         $247 = ((($246)) + 4|0);
         HEAP32[$247>>2] = 0;
         $248 = ((($246)) + 8|0);
         HEAP32[$248>>2] = 0;
         $249 = ((($241)) + -48|0);
         $250 = HEAP8[$3>>0]|0;
         $251 = $250 & 1;
         $252 = ($251<<24>>24)==(0);
         $253 = HEAP32[$225>>2]|0;
         $254 = $252 ? $226 : $253;
         $255 = HEAP32[$227>>2]|0;
         $256 = $250&255;
         $257 = $256 >>> 1;
         $258 = $252 ? $257 : $255;
         (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($249,$254,$258)|0);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($s5);
         $259 = HEAP8[$230>>0]|0;
         $260 = ($259<<24>>24)==(69);
         if ($260) {
          $t$3$lcssa = $230;
          break;
         } else {
          $t$3110 = $230;
         }
        }
       }
       $261 = ((($t$3$lcssa)) + 1|0);
       $262 = (__ZN10__cxxabiv112_GLOBAL__N_126parse_base_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($261,$last,$db)|0);
       $263 = ($262|0)==($261|0);
       if ($263) {
        $264 = HEAP32[$$pre$phi84Z2D>>2]|0;
        $265 = HEAP32[$$pre$phi82Z2D>>2]|0;
        $266 = ($264|0)==($265|0);
        if ($266) {
         $$19 = $first;
         break;
        }
        $267 = ((($265)) + -24|0);
        $269 = $265;
        while(1) {
         $268 = ((($269)) + -24|0);
         HEAP32[$$pre$phi82Z2D>>2] = $268;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($268);
         $$pre$i52 = HEAP32[$$pre$phi82Z2D>>2]|0;
         $270 = ($$pre$i52|0)==($267|0);
         if ($270) {
          $$19 = $first;
          break L1;
         } else {
          $269 = $$pre$i52;
         }
        }
       }
       $271 = HEAP32[$$pre$phi82Z2D>>2]|0;
       $272 = HEAP32[$$pre$phi84Z2D>>2]|0;
       $273 = $271;
       $274 = $272;
       $275 = (($273) - ($274))|0;
       $276 = (($275|0) / 24)&-1;
       $277 = ($276>>>0)<(2);
       if ($277) {
        $$19 = $first;
       } else {
        $278 = ((($271)) + -24|0);
        __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($s6,$278);
        $279 = HEAP32[$$pre$phi82Z2D>>2]|0;
        $280 = ((($279)) + -24|0);
        $282 = $279;
        while(1) {
         $281 = ((($282)) + -24|0);
         HEAP32[$$pre$phi82Z2D>>2] = $281;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($281);
         $$pre$i54 = HEAP32[$$pre$phi82Z2D>>2]|0;
         $283 = ($$pre$i54|0)==($280|0);
         if ($283) {
          break;
         } else {
          $282 = $$pre$i54;
         }
        }
        $284 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($s6,0,1794)|0);
        ;HEAP32[$4>>2]=HEAP32[$284>>2]|0;HEAP32[$4+4>>2]=HEAP32[$284+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[$284+8>>2]|0;
        HEAP32[$284>>2] = 0;
        $285 = ((($284)) + 4|0);
        HEAP32[$285>>2] = 0;
        $286 = ((($284)) + 8|0);
        HEAP32[$286>>2] = 0;
        $287 = ((($279)) + -48|0);
        $288 = HEAP8[$4>>0]|0;
        $289 = $288 & 1;
        $290 = ($289<<24>>24)==(0);
        $291 = ((($4)) + 8|0);
        $292 = HEAP32[$291>>2]|0;
        $293 = ((($4)) + 1|0);
        $294 = $290 ? $293 : $292;
        $295 = ((($4)) + 4|0);
        $296 = HEAP32[$295>>2]|0;
        $297 = $288&255;
        $298 = $297 >>> 1;
        $299 = $290 ? $298 : $296;
        (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($287,$294,$299)|0);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($s6);
        $$19 = $262;
       }
      }
     } else {
      $$19 = $first;
     }
    } else {
     $$19 = $first;
    }
   } else {
    $$19 = $first;
   }
  } else {
   $$19 = $first;
  }
 } while(0);
 STACKTOP = sp;return ($$19|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_126parse_base_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db) {
 $first = $first|0;
 $last = $last|0;
 $db = $db|0;
 var $$0 = 0, $$0$i = 0, $$pre$i = 0, $$pre$i4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, $args = 0, $args3 = 0, $first$ = 0, $t$0$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args = sp + 12|0;
 $args3 = sp;
 $0 = $last;
 $1 = $first;
 $2 = (($0) - ($1))|0;
 $3 = ($2|0)>(1);
 L1: do {
  if ($3) {
   $4 = HEAP8[$first>>0]|0;
   switch ($4<<24>>24) {
   case 100: case 111:  {
    $5 = ((($first)) + 1|0);
    $6 = HEAP8[$5>>0]|0;
    $7 = ($6<<24>>24)==(110);
    if ($7) {
     $8 = ($4<<24>>24)==(111);
     $9 = ((($first)) + 2|0);
     if ($8) {
      $10 = (__ZN10__cxxabiv112_GLOBAL__N_119parse_operator_nameINS0_2DbEEEPKcS4_S4_RT_($9,$last,$db)|0);
      $11 = ($10|0)==($9|0);
      if ($11) {
       $$0 = $first;
       break L1;
      }
      $12 = (__ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($10,$last,$db)|0);
      $13 = ($12|0)==($10|0);
      if ($13) {
       $$0 = $10;
       break L1;
      }
      $14 = ((($db)) + 4|0);
      $15 = HEAP32[$14>>2]|0;
      $16 = HEAP32[$db>>2]|0;
      $17 = $15;
      $18 = $16;
      $19 = (($17) - ($18))|0;
      $20 = (($19|0) / 24)&-1;
      $21 = ($20>>>0)<(2);
      if ($21) {
       $$0 = $12;
       break L1;
      }
      $22 = ((($15)) + -24|0);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($args,$22);
      $23 = HEAP32[$14>>2]|0;
      $24 = ((($23)) + -24|0);
      $26 = $23;
      while(1) {
       $25 = ((($26)) + -24|0);
       HEAP32[$14>>2] = $25;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($25);
       $$pre$i = HEAP32[$14>>2]|0;
       $27 = ($$pre$i|0)==($24|0);
       if ($27) {
        break;
       } else {
        $26 = $$pre$i;
       }
      }
      $28 = ((($23)) + -48|0);
      $29 = HEAP8[$args>>0]|0;
      $30 = $29 & 1;
      $31 = ($30<<24>>24)==(0);
      $32 = ((($args)) + 8|0);
      $33 = HEAP32[$32>>2]|0;
      $34 = ((($args)) + 1|0);
      $35 = $31 ? $34 : $33;
      $36 = ((($args)) + 4|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = $29&255;
      $39 = $38 >>> 1;
      $40 = $31 ? $39 : $37;
      (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($28,$35,$40)|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($args);
      $$0 = $12;
      break L1;
     }
     $41 = ($9|0)==($last|0);
     if ($41) {
      $$0$i = $last;
     } else {
      $42 = (__ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_typeINS0_2DbEEEPKcS4_S4_RT_($9,$last,$db)|0);
      $43 = ($42|0)==($9|0);
      if ($43) {
       $44 = (__ZN10__cxxabiv112_GLOBAL__N_115parse_simple_idINS0_2DbEEEPKcS4_S4_RT_($9,$last,$db)|0);
       $t$0$i = $44;
      } else {
       $t$0$i = $42;
      }
      $45 = ($t$0$i|0)==($9|0);
      if ($45) {
       $$0$i = $9;
      } else {
       $46 = HEAP32[$db>>2]|0;
       $47 = ((($db)) + 4|0);
       $48 = HEAP32[$47>>2]|0;
       $49 = ($46|0)==($48|0);
       if ($49) {
        $$0$i = $9;
       } else {
        $50 = ((($48)) + -24|0);
        (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($50,0,1820)|0);
        $$0$i = $t$0$i;
       }
      }
     }
     $51 = ($$0$i|0)==($9|0);
     $first$ = $51 ? $first : $$0$i;
     STACKTOP = sp;return ($first$|0);
    }
    break;
   }
   default: {
   }
   }
   $52 = (__ZN10__cxxabiv112_GLOBAL__N_115parse_simple_idINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db)|0);
   $53 = ($52|0)==($first|0);
   if ($53) {
    $54 = (__ZN10__cxxabiv112_GLOBAL__N_119parse_operator_nameINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db)|0);
    $55 = ($54|0)==($first|0);
    if ($55) {
     $$0 = $first;
    } else {
     $56 = (__ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($54,$last,$db)|0);
     $57 = ($56|0)==($54|0);
     if ($57) {
      $$0 = $54;
     } else {
      $58 = ((($db)) + 4|0);
      $59 = HEAP32[$58>>2]|0;
      $60 = HEAP32[$db>>2]|0;
      $61 = $59;
      $62 = $60;
      $63 = (($61) - ($62))|0;
      $64 = (($63|0) / 24)&-1;
      $65 = ($64>>>0)<(2);
      if ($65) {
       $$0 = $56;
      } else {
       $66 = ((($59)) + -24|0);
       __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($args3,$66);
       $67 = HEAP32[$58>>2]|0;
       $68 = ((($67)) + -24|0);
       $70 = $67;
       while(1) {
        $69 = ((($70)) + -24|0);
        HEAP32[$58>>2] = $69;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($69);
        $$pre$i4 = HEAP32[$58>>2]|0;
        $71 = ($$pre$i4|0)==($68|0);
        if ($71) {
         break;
        } else {
         $70 = $$pre$i4;
        }
       }
       $72 = ((($67)) + -48|0);
       $73 = HEAP8[$args3>>0]|0;
       $74 = $73 & 1;
       $75 = ($74<<24>>24)==(0);
       $76 = ((($args3)) + 8|0);
       $77 = HEAP32[$76>>2]|0;
       $78 = ((($args3)) + 1|0);
       $79 = $75 ? $78 : $77;
       $80 = ((($args3)) + 4|0);
       $81 = HEAP32[$80>>2]|0;
       $82 = $73&255;
       $83 = $82 >>> 1;
       $84 = $75 ? $83 : $81;
       (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($72,$79,$84)|0);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($args3);
       $$0 = $56;
      }
     }
    }
   } else {
    $$0 = $52;
   }
  } else {
   $$0 = $first;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_typeINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db) {
 $first = $first|0;
 $last = $last|0;
 $db = $db|0;
 var $$0$i$i$i = 0, $$0$i$i$i11 = 0, $$0$i$i$i6 = 0, $$02 = 0, $$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__v$i$i10 = 0, $k1$015 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__v$i$i10 = sp + 68|0;
 $0 = sp;
 $1 = sp + 16|0;
 $2 = sp + 24|0;
 $3 = sp + 40|0;
 $4 = sp + 48|0;
 $5 = sp + 64|0;
 $6 = ($first|0)==($last|0);
 L1: do {
  if ($6) {
   $$02 = $first;
  } else {
   $7 = HEAP8[$first>>0]|0;
   $8 = $7 << 24 >> 24;
   switch ($8|0) {
   case 84:  {
    $9 = ((($db)) + 4|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = HEAP32[$db>>2]|0;
    $12 = $10;
    $13 = $11;
    $14 = (($12) - ($13))|0;
    $15 = (($14|0) / 24)&-1;
    $16 = (__ZN10__cxxabiv112_GLOBAL__N_120parse_template_paramINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db)|0);
    $17 = HEAP32[$9>>2]|0;
    $18 = HEAP32[$db>>2]|0;
    $19 = $17;
    $20 = $18;
    $21 = (($19) - ($20))|0;
    $22 = (($21|0) / 24)&-1;
    $23 = ($16|0)!=($first|0);
    $24 = (($15) + 1)|0;
    $25 = ($22|0)==($24|0);
    $or$cond = $23 & $25;
    if (!($or$cond)) {
     $26 = ($22|0)==($15|0);
     if ($26) {
      $$02 = $first;
      break L1;
     } else {
      $77 = $17;$k1$015 = $22;
     }
     while(1) {
      $76 = ((($77)) + -24|0);
      $79 = $77;
      while(1) {
       $78 = ((($79)) + -24|0);
       HEAP32[$9>>2] = $78;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($78);
       $$pre$i = HEAP32[$9>>2]|0;
       $80 = ($$pre$i|0)==($76|0);
       if ($80) {
        break;
       } else {
        $79 = $$pre$i;
       }
      }
      $81 = (($k1$015) + -1)|0;
      $82 = ($81|0)==($15|0);
      if ($82) {
       $$02 = $first;
       break L1;
      } else {
       $77 = $76;$k1$015 = $81;
      }
     }
    }
    $27 = ((($db)) + 16|0);
    $28 = ((($17)) + -24|0);
    $29 = ((($db)) + 12|0);
    $30 = HEAP32[$29>>2]|0;
    HEAP32[$1>>2] = $30;
    __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($0,$28,$1);
    $31 = ((($db)) + 20|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = ((($db)) + 24|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = ($32>>>0)<($34>>>0);
    if ($35) {
     $36 = ((($0)) + 12|0);
     $37 = ((($32)) + 4|0);
     $38 = HEAP32[$36>>2]|0;
     $39 = ((($32)) + 12|0);
     HEAP32[$39>>2] = $38;
     $40 = HEAP32[$0>>2]|0;
     HEAP32[$32>>2] = $40;
     $41 = ((($0)) + 4|0);
     $42 = HEAP32[$41>>2]|0;
     HEAP32[$37>>2] = $42;
     $43 = ((($0)) + 8|0);
     $44 = HEAP32[$43>>2]|0;
     $45 = ((($32)) + 8|0);
     HEAP32[$45>>2] = $44;
     HEAP32[$43>>2] = 0;
     HEAP32[$41>>2] = 0;
     HEAP32[$0>>2] = 0;
     $46 = HEAP32[$31>>2]|0;
     $47 = ((($46)) + 16|0);
     HEAP32[$31>>2] = $47;
    } else {
     $48 = ((($db)) + 28|0);
     $49 = HEAP32[$27>>2]|0;
     $50 = $32;
     $51 = $49;
     $52 = (($50) - ($51))|0;
     $53 = $52 >> 4;
     $54 = (($53) + 1)|0;
     $55 = ($52|0)<(-16);
     if ($55) {
      __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($27);
      // unreachable;
     }
     $56 = $34;
     $57 = (($56) - ($51))|0;
     $58 = $57 >> 4;
     $59 = ($58>>>0)<(1073741823);
     if ($59) {
      $60 = $57 >> 3;
      $61 = ($60>>>0)<($54>>>0);
      $62 = $61 ? $54 : $60;
      $$0$i$i$i = $62;
     } else {
      $$0$i$i$i = 2147483647;
     }
     __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i10,$$0$i$i$i,$53,$48);
     $63 = ((($__v$i$i10)) + 8|0);
     $64 = HEAP32[$63>>2]|0;
     $65 = ((($0)) + 12|0);
     $66 = ((($64)) + 4|0);
     $67 = HEAP32[$65>>2]|0;
     $68 = ((($64)) + 12|0);
     HEAP32[$68>>2] = $67;
     $69 = HEAP32[$0>>2]|0;
     HEAP32[$64>>2] = $69;
     $70 = ((($0)) + 4|0);
     $71 = HEAP32[$70>>2]|0;
     HEAP32[$66>>2] = $71;
     $72 = ((($0)) + 8|0);
     $73 = HEAP32[$72>>2]|0;
     $74 = ((($64)) + 8|0);
     HEAP32[$74>>2] = $73;
     HEAP32[$72>>2] = 0;
     HEAP32[$70>>2] = 0;
     HEAP32[$0>>2] = 0;
     $75 = ((($64)) + 16|0);
     HEAP32[$63>>2] = $75;
     __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($27,$__v$i$i10);
     __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i10);
    }
    __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($0);
    $$02 = $16;
    break L1;
    break;
   }
   case 68:  {
    $83 = (__ZN10__cxxabiv112_GLOBAL__N_114parse_decltypeINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db)|0);
    $84 = ($83|0)==($first|0);
    if ($84) {
     $$02 = $first;
     break L1;
    }
    $85 = HEAP32[$db>>2]|0;
    $86 = ((($db)) + 4|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($85|0)==($87|0);
    if ($88) {
     $$02 = $first;
     break L1;
    }
    $89 = ((($db)) + 16|0);
    $90 = ((($87)) + -24|0);
    $91 = ((($db)) + 12|0);
    $92 = HEAP32[$91>>2]|0;
    HEAP32[$3>>2] = $92;
    __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($2,$90,$3);
    $93 = ((($db)) + 20|0);
    $94 = HEAP32[$93>>2]|0;
    $95 = ((($db)) + 24|0);
    $96 = HEAP32[$95>>2]|0;
    $97 = ($94>>>0)<($96>>>0);
    if ($97) {
     $98 = ((($2)) + 12|0);
     $99 = ((($94)) + 4|0);
     $100 = HEAP32[$98>>2]|0;
     $101 = ((($94)) + 12|0);
     HEAP32[$101>>2] = $100;
     $102 = HEAP32[$2>>2]|0;
     HEAP32[$94>>2] = $102;
     $103 = ((($2)) + 4|0);
     $104 = HEAP32[$103>>2]|0;
     HEAP32[$99>>2] = $104;
     $105 = ((($2)) + 8|0);
     $106 = HEAP32[$105>>2]|0;
     $107 = ((($94)) + 8|0);
     HEAP32[$107>>2] = $106;
     HEAP32[$105>>2] = 0;
     HEAP32[$103>>2] = 0;
     HEAP32[$2>>2] = 0;
     $108 = HEAP32[$93>>2]|0;
     $109 = ((($108)) + 16|0);
     HEAP32[$93>>2] = $109;
    } else {
     $110 = ((($db)) + 28|0);
     $111 = HEAP32[$89>>2]|0;
     $112 = $94;
     $113 = $111;
     $114 = (($112) - ($113))|0;
     $115 = $114 >> 4;
     $116 = (($115) + 1)|0;
     $117 = ($114|0)<(-16);
     if ($117) {
      __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($89);
      // unreachable;
     }
     $118 = $96;
     $119 = (($118) - ($113))|0;
     $120 = $119 >> 4;
     $121 = ($120>>>0)<(1073741823);
     if ($121) {
      $122 = $119 >> 3;
      $123 = ($122>>>0)<($116>>>0);
      $124 = $123 ? $116 : $122;
      $$0$i$i$i6 = $124;
     } else {
      $$0$i$i$i6 = 2147483647;
     }
     __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i10,$$0$i$i$i6,$115,$110);
     $125 = ((($__v$i$i10)) + 8|0);
     $126 = HEAP32[$125>>2]|0;
     $127 = ((($2)) + 12|0);
     $128 = ((($126)) + 4|0);
     $129 = HEAP32[$127>>2]|0;
     $130 = ((($126)) + 12|0);
     HEAP32[$130>>2] = $129;
     $131 = HEAP32[$2>>2]|0;
     HEAP32[$126>>2] = $131;
     $132 = ((($2)) + 4|0);
     $133 = HEAP32[$132>>2]|0;
     HEAP32[$128>>2] = $133;
     $134 = ((($2)) + 8|0);
     $135 = HEAP32[$134>>2]|0;
     $136 = ((($126)) + 8|0);
     HEAP32[$136>>2] = $135;
     HEAP32[$134>>2] = 0;
     HEAP32[$132>>2] = 0;
     HEAP32[$2>>2] = 0;
     $137 = ((($126)) + 16|0);
     HEAP32[$125>>2] = $137;
     __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($89,$__v$i$i10);
     __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i10);
    }
    __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($2);
    $$02 = $83;
    break L1;
    break;
   }
   case 83:  {
    $138 = (__ZN10__cxxabiv112_GLOBAL__N_118parse_substitutionINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db)|0);
    $139 = ($138|0)==($first|0);
    if (!($139)) {
     $$02 = $138;
     break L1;
    }
    $140 = $last;
    $141 = $first;
    $142 = (($140) - ($141))|0;
    $143 = ($142|0)>(2);
    if (!($143)) {
     $$02 = $first;
     break L1;
    }
    $144 = ((($first)) + 1|0);
    $145 = HEAP8[$144>>0]|0;
    $146 = ($145<<24>>24)==(116);
    if (!($146)) {
     $$02 = $first;
     break L1;
    }
    $147 = ((($first)) + 2|0);
    $148 = (__ZN10__cxxabiv112_GLOBAL__N_122parse_unqualified_nameINS0_2DbEEEPKcS4_S4_RT_($147,$last,$db)|0);
    $149 = ($148|0)==($147|0);
    if ($149) {
     $$02 = $first;
     break L1;
    }
    $150 = HEAP32[$db>>2]|0;
    $151 = ((($db)) + 4|0);
    $152 = HEAP32[$151>>2]|0;
    $153 = ($150|0)==($152|0);
    if ($153) {
     $$02 = $first;
     break L1;
    }
    $154 = ((($152)) + -24|0);
    (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($154,0,1814)|0);
    $155 = ((($db)) + 16|0);
    $156 = HEAP32[$151>>2]|0;
    $157 = ((($156)) + -24|0);
    $158 = ((($db)) + 12|0);
    $159 = HEAP32[$158>>2]|0;
    HEAP32[$5>>2] = $159;
    __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($4,$157,$5);
    $160 = ((($db)) + 20|0);
    $161 = HEAP32[$160>>2]|0;
    $162 = ((($db)) + 24|0);
    $163 = HEAP32[$162>>2]|0;
    $164 = ($161>>>0)<($163>>>0);
    if ($164) {
     $165 = ((($4)) + 12|0);
     $166 = ((($161)) + 4|0);
     $167 = HEAP32[$165>>2]|0;
     $168 = ((($161)) + 12|0);
     HEAP32[$168>>2] = $167;
     $169 = HEAP32[$4>>2]|0;
     HEAP32[$161>>2] = $169;
     $170 = ((($4)) + 4|0);
     $171 = HEAP32[$170>>2]|0;
     HEAP32[$166>>2] = $171;
     $172 = ((($4)) + 8|0);
     $173 = HEAP32[$172>>2]|0;
     $174 = ((($161)) + 8|0);
     HEAP32[$174>>2] = $173;
     HEAP32[$172>>2] = 0;
     HEAP32[$170>>2] = 0;
     HEAP32[$4>>2] = 0;
     $175 = HEAP32[$160>>2]|0;
     $176 = ((($175)) + 16|0);
     HEAP32[$160>>2] = $176;
    } else {
     $177 = ((($db)) + 28|0);
     $178 = HEAP32[$155>>2]|0;
     $179 = $161;
     $180 = $178;
     $181 = (($179) - ($180))|0;
     $182 = $181 >> 4;
     $183 = (($182) + 1)|0;
     $184 = ($181|0)<(-16);
     if ($184) {
      __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($155);
      // unreachable;
     }
     $185 = $163;
     $186 = (($185) - ($180))|0;
     $187 = $186 >> 4;
     $188 = ($187>>>0)<(1073741823);
     if ($188) {
      $189 = $186 >> 3;
      $190 = ($189>>>0)<($183>>>0);
      $191 = $190 ? $183 : $189;
      $$0$i$i$i11 = $191;
     } else {
      $$0$i$i$i11 = 2147483647;
     }
     __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i10,$$0$i$i$i11,$182,$177);
     $192 = ((($__v$i$i10)) + 8|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = ((($4)) + 12|0);
     $195 = ((($193)) + 4|0);
     $196 = HEAP32[$194>>2]|0;
     $197 = ((($193)) + 12|0);
     HEAP32[$197>>2] = $196;
     $198 = HEAP32[$4>>2]|0;
     HEAP32[$193>>2] = $198;
     $199 = ((($4)) + 4|0);
     $200 = HEAP32[$199>>2]|0;
     HEAP32[$195>>2] = $200;
     $201 = ((($4)) + 8|0);
     $202 = HEAP32[$201>>2]|0;
     $203 = ((($193)) + 8|0);
     HEAP32[$203>>2] = $202;
     HEAP32[$201>>2] = 0;
     HEAP32[$199>>2] = 0;
     HEAP32[$4>>2] = 0;
     $204 = ((($193)) + 16|0);
     HEAP32[$192>>2] = $204;
     __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($155,$__v$i$i10);
     __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i10);
    }
    __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($4);
    $$02 = $148;
    break L1;
    break;
   }
   default: {
    $$02 = $first;
    break L1;
   }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$02|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_115parse_simple_idINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db) {
 $first = $first|0;
 $last = $last|0;
 $db = $db|0;
 var $$0 = 0, $$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $args = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args = sp;
 $0 = ($first|0)==($last|0);
 if ($0) {
  $$0 = $first;
 } else {
  $1 = (__ZN10__cxxabiv112_GLOBAL__N_117parse_source_nameINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db)|0);
  $2 = ($1|0)==($first|0);
  if ($2) {
   $$0 = $first;
  } else {
   $3 = (__ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($1,$last,$db)|0);
   $4 = ($3|0)==($1|0);
   if ($4) {
    $$0 = $1;
   } else {
    $5 = ((($db)) + 4|0);
    $6 = HEAP32[$5>>2]|0;
    $7 = HEAP32[$db>>2]|0;
    $8 = $6;
    $9 = $7;
    $10 = (($8) - ($9))|0;
    $11 = (($10|0) / 24)&-1;
    $12 = ($11>>>0)<(2);
    if ($12) {
     $$0 = $first;
    } else {
     $13 = ((($6)) + -24|0);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($args,$13);
     $14 = HEAP32[$5>>2]|0;
     $15 = ((($14)) + -24|0);
     $17 = $14;
     while(1) {
      $16 = ((($17)) + -24|0);
      HEAP32[$5>>2] = $16;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($16);
      $$pre$i = HEAP32[$5>>2]|0;
      $18 = ($$pre$i|0)==($15|0);
      if ($18) {
       break;
      } else {
       $17 = $$pre$i;
      }
     }
     $19 = ((($14)) + -48|0);
     $20 = HEAP8[$args>>0]|0;
     $21 = $20 & 1;
     $22 = ($21<<24>>24)==(0);
     $23 = ((($args)) + 8|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ((($args)) + 1|0);
     $26 = $22 ? $25 : $24;
     $27 = ((($args)) + 4|0);
     $28 = HEAP32[$27>>2]|0;
     $29 = $20&255;
     $30 = $29 >>> 1;
     $31 = $22 ? $30 : $28;
     (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($19,$26,$31)|0);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($args);
     $$0 = $3;
    }
   }
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__121__basic_string_commonILb1EE20__throw_out_of_rangeEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___assert_fail((3044|0),(1427|0),1175,(3073|0));
 // unreachable;
}
function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj4EEERAT__Kc($this,$s) {
 $this = $this|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$this>>0] = 6;
 $0 = ((($this)) + 1|0);
 ;HEAP8[$0>>0]=HEAP8[$s>>0]|0;HEAP8[$0+1>>0]=HEAP8[$s+1>>0]|0;HEAP8[$0+2>>0]=HEAP8[$s+2>>0]|0;
 $1 = ((($this)) + 4|0);
 HEAP8[$1>>0] = 0;
 $2 = ((($this)) + 12|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($2)) + 4|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($2)) + 8|0);
 HEAP32[$4>>2] = 0;
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj9EEERAT__Kc($this,$s) {
 $this = $this|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$this>>0] = 16;
 $0 = ((($this)) + 1|0);
 $1 = $s;
 $2 = $1;
 $3 = HEAPU8[$2>>0]|(HEAPU8[$2+1>>0]<<8)|(HEAPU8[$2+2>>0]<<16)|(HEAPU8[$2+3>>0]<<24);
 $4 = (($1) + 4)|0;
 $5 = $4;
 $6 = HEAPU8[$5>>0]|(HEAPU8[$5+1>>0]<<8)|(HEAPU8[$5+2>>0]<<16)|(HEAPU8[$5+3>>0]<<24);
 $7 = $0;
 $8 = $7;
 HEAP8[$8>>0]=$3&255;HEAP8[$8+1>>0]=($3>>8)&255;HEAP8[$8+2>>0]=($3>>16)&255;HEAP8[$8+3>>0]=$3>>24;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP8[$10>>0]=$6&255;HEAP8[$10+1>>0]=($6>>8)&255;HEAP8[$10+2>>0]=($6>>16)&255;HEAP8[$10+3>>0]=$6>>24;
 $11 = ((($this)) + 9|0);
 HEAP8[$11>>0] = 0;
 $12 = ((($this)) + 12|0);
 HEAP32[$12>>2] = 0;
 $13 = ((($12)) + 4|0);
 HEAP32[$13>>2] = 0;
 $14 = ((($12)) + 8|0);
 HEAP32[$14>>2] = 0;
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_117parse_call_offsetEPKcS2_($first,$last) {
 $first = $first|0;
 $last = $last|0;
 var $$0 = 0, $$first = 0, $$first3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond1 = 0, $or$cond2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($first|0)==($last|0);
 L1: do {
  if ($0) {
   $$0 = $first;
  } else {
   $1 = HEAP8[$first>>0]|0;
   $2 = $1 << 24 >> 24;
   switch ($2|0) {
   case 104:  {
    $3 = ((($first)) + 1|0);
    $4 = (__ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($3,$last)|0);
    $5 = ($4|0)==($3|0);
    $6 = ($4|0)==($last|0);
    $or$cond = $5 | $6;
    if ($or$cond) {
     $$0 = $first;
     break L1;
    }
    $7 = HEAP8[$4>>0]|0;
    $8 = ($7<<24>>24)==(95);
    $9 = ((($4)) + 1|0);
    $$first = $8 ? $9 : $first;
    $$0 = $$first;
    break L1;
    break;
   }
   case 118:  {
    break;
   }
   default: {
    $$0 = $first;
    break L1;
   }
   }
   $10 = ((($first)) + 1|0);
   $11 = (__ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($10,$last)|0);
   $12 = ($11|0)==($10|0);
   $13 = ($11|0)==($last|0);
   $or$cond1 = $12 | $13;
   if ($or$cond1) {
    $$0 = $first;
   } else {
    $14 = HEAP8[$11>>0]|0;
    $15 = ($14<<24>>24)==(95);
    if ($15) {
     $16 = ((($11)) + 1|0);
     $17 = (__ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($16,$last)|0);
     $18 = ($17|0)==($16|0);
     $19 = ($17|0)==($last|0);
     $or$cond2 = $18 | $19;
     if ($or$cond2) {
      $$0 = $first;
     } else {
      $20 = HEAP8[$17>>0]|0;
      $21 = ($20<<24>>24)==(95);
      $22 = ((($17)) + 1|0);
      $$first3 = $21 ? $22 : $first;
      return ($$first3|0);
     }
    } else {
     $$0 = $first;
    }
   }
  }
 } while(0);
 return ($$0|0);
}
function _isupper($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($c) + -65)|0;
 $1 = ($0>>>0)<(26);
 $2 = $1&1;
 return ($2|0);
}
function _isxdigit($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $isdigit = 0, $isdigittmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isdigittmp = (($c) + -48)|0;
 $isdigit = ($isdigittmp>>>0)<(10);
 if ($isdigit) {
  $4 = 1;
  $3 = $4&1;
  return ($3|0);
 }
 $0 = $c | 32;
 $1 = (($0) + -97)|0;
 $2 = ($1>>>0)<(6);
 $4 = $2;
 $3 = $4&1;
 return ($3|0);
}
function _frexp($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $$0 = 0.0, $$01 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $3 = tempRet0;
 $4 = $2 & 2047;
 switch ($4|0) {
 case 0:  {
  $5 = $x != 0.0;
  if ($5) {
   $6 = $x * 1.8446744073709552E+19;
   $7 = (+_frexp($6,$e));
   $8 = HEAP32[$e>>2]|0;
   $9 = (($8) + -64)|0;
   $$01 = $7;$storemerge = $9;
  } else {
   $$01 = $x;$storemerge = 0;
  }
  HEAP32[$e>>2] = $storemerge;
  $$0 = $$01;
  return (+$$0);
  break;
 }
 case 2047:  {
  $$0 = $x;
  return (+$$0);
  break;
 }
 default: {
  $10 = (($4) + -1022)|0;
  HEAP32[$e>>2] = $10;
  $11 = $1 & -2146435073;
  $12 = $11 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $12;$13 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $13;
  return (+$$0);
 }
 }
 return +(0.0);
}
function _frexpl($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_frexp($x,$e));
 return (+$0);
}
function _wctomb($s,$wc) {
 $s = $s|0;
 $wc = $wc|0;
 var $$0 = 0, $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $$0 = 0;
 } else {
  $1 = (_wcrtomb($s,$wc,0)|0);
  $$0 = $1;
 }
 return ($$0|0);
}
function _wcrtomb($s,$wc,$st) {
 $s = $s|0;
 $wc = $wc|0;
 $st = $st|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $$0 = 1;
  return ($$0|0);
 }
 $1 = ($wc>>>0)<(128);
 if ($1) {
  $2 = $wc&255;
  HEAP8[$s>>0] = $2;
  $$0 = 1;
  return ($$0|0);
 }
 $3 = ($wc>>>0)<(2048);
 if ($3) {
  $4 = $wc >>> 6;
  $5 = $4 | 192;
  $6 = $5&255;
  $7 = ((($s)) + 1|0);
  HEAP8[$s>>0] = $6;
  $8 = $wc & 63;
  $9 = $8 | 128;
  $10 = $9&255;
  HEAP8[$7>>0] = $10;
  $$0 = 2;
  return ($$0|0);
 }
 $11 = ($wc>>>0)<(55296);
 $12 = $wc & -8192;
 $13 = ($12|0)==(57344);
 $or$cond = $11 | $13;
 if ($or$cond) {
  $14 = $wc >>> 12;
  $15 = $14 | 224;
  $16 = $15&255;
  $17 = ((($s)) + 1|0);
  HEAP8[$s>>0] = $16;
  $18 = $wc >>> 6;
  $19 = $18 & 63;
  $20 = $19 | 128;
  $21 = $20&255;
  $22 = ((($s)) + 2|0);
  HEAP8[$17>>0] = $21;
  $23 = $wc & 63;
  $24 = $23 | 128;
  $25 = $24&255;
  HEAP8[$22>>0] = $25;
  $$0 = 3;
  return ($$0|0);
 }
 $26 = (($wc) + -65536)|0;
 $27 = ($26>>>0)<(1048576);
 if ($27) {
  $28 = $wc >>> 18;
  $29 = $28 | 240;
  $30 = $29&255;
  $31 = ((($s)) + 1|0);
  HEAP8[$s>>0] = $30;
  $32 = $wc >>> 12;
  $33 = $32 & 63;
  $34 = $33 | 128;
  $35 = $34&255;
  $36 = ((($s)) + 2|0);
  HEAP8[$31>>0] = $35;
  $37 = $wc >>> 6;
  $38 = $37 & 63;
  $39 = $38 | 128;
  $40 = $39&255;
  $41 = ((($s)) + 3|0);
  HEAP8[$36>>0] = $40;
  $42 = $wc & 63;
  $43 = $42 | 128;
  $44 = $43&255;
  HEAP8[$41>>0] = $44;
  $$0 = 4;
  return ($$0|0);
 } else {
  $45 = (___errno_location()|0);
  HEAP32[$45>>2] = 84;
  $$0 = -1;
  return ($$0|0);
 }
 return (0)|0;
}
function ___towrite($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 74|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = HEAP32[$f>>2]|0;
 $7 = $6 & 8;
 $8 = ($7|0)==(0);
 if ($8) {
  $10 = ((($f)) + 8|0);
  HEAP32[$10>>2] = 0;
  $11 = ((($f)) + 4|0);
  HEAP32[$11>>2] = 0;
  $12 = ((($f)) + 44|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ((($f)) + 28|0);
  HEAP32[$14>>2] = $13;
  $15 = ((($f)) + 20|0);
  HEAP32[$15>>2] = $13;
  $16 = $13;
  $17 = ((($f)) + 48|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($16) + ($18)|0);
  $20 = ((($f)) + 16|0);
  HEAP32[$20>>2] = $19;
  $$0 = 0;
  return ($$0|0);
 } else {
  $9 = $6 | 32;
  HEAP32[$f>>2] = $9;
  $$0 = -1;
  return ($$0|0);
 }
 return (0)|0;
}
function ___fwritex($s,$l,$f) {
 $s = $s|0;
 $l = $l|0;
 $f = $f|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$pre = 0, $$pre6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, $i$0$lcssa10 = 0;
 var $i$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 do {
  if ($2) {
   $3 = (___towrite($f)|0);
   $4 = ($3|0)==(0);
   if ($4) {
    $$pre = HEAP32[$0>>2]|0;
    $7 = $$pre;
    break;
   } else {
    $$0 = 0;
    return ($$0|0);
   }
  } else {
   $7 = $1;
  }
 } while(0);
 $5 = ((($f)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $8 = $7;
 $9 = $6;
 $10 = (($8) - ($9))|0;
 $11 = ($10>>>0)<($l>>>0);
 if ($11) {
  $12 = ((($f)) + 36|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (FUNCTION_TABLE_iiii[$13 & 63]($f,$s,$l)|0);
  $$0 = $14;
  return ($$0|0);
 }
 $15 = ((($f)) + 75|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = ($16<<24>>24)>(-1);
 L11: do {
  if ($17) {
   $i$0 = $l;
   while(1) {
    $18 = ($i$0|0)==(0);
    if ($18) {
     $$01 = $l;$$02 = $s;$29 = $6;$i$1 = 0;
     break L11;
    }
    $19 = (($i$0) + -1)|0;
    $20 = (($s) + ($19)|0);
    $21 = HEAP8[$20>>0]|0;
    $22 = ($21<<24>>24)==(10);
    if ($22) {
     $i$0$lcssa10 = $i$0;
     break;
    } else {
     $i$0 = $19;
    }
   }
   $23 = ((($f)) + 36|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = (FUNCTION_TABLE_iiii[$24 & 63]($f,$s,$i$0$lcssa10)|0);
   $26 = ($25>>>0)<($i$0$lcssa10>>>0);
   if ($26) {
    $$0 = $i$0$lcssa10;
    return ($$0|0);
   } else {
    $27 = (($s) + ($i$0$lcssa10)|0);
    $28 = (($l) - ($i$0$lcssa10))|0;
    $$pre6 = HEAP32[$5>>2]|0;
    $$01 = $28;$$02 = $27;$29 = $$pre6;$i$1 = $i$0$lcssa10;
    break;
   }
  } else {
   $$01 = $l;$$02 = $s;$29 = $6;$i$1 = 0;
  }
 } while(0);
 _memcpy(($29|0),($$02|0),($$01|0))|0;
 $30 = HEAP32[$5>>2]|0;
 $31 = (($30) + ($$01)|0);
 HEAP32[$5>>2] = $31;
 $32 = (($i$1) + ($$01))|0;
 $$0 = $32;
 return ($$0|0);
}
function _snprintf($s,$n,$fmt,$varargs) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vsnprintf($s,$n,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _MUSL_vfprintf($f,$fmt,$ap) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $ap2 = 0, $internal_buf = 0, $nl_arg = 0, $nl_type = 0, $ret$1 = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap2 = sp + 120|0;
 $nl_type = sp + 80|0;
 $nl_arg = sp;
 $internal_buf = sp + 136|0;
 dest=$nl_type; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$ap>>2]|0;
 HEAP32[$ap2>>2] = $vacopy_currentptr;
 $0 = (_printf_core(0,$fmt,$ap2,$nl_arg,$nl_type)|0);
 $1 = ($0|0)<(0);
 if ($1) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = ((($f)) + 48|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  $6 = ((($f)) + 44|0);
  $7 = HEAP32[$6>>2]|0;
  HEAP32[$6>>2] = $internal_buf;
  $8 = ((($f)) + 28|0);
  HEAP32[$8>>2] = $internal_buf;
  $9 = ((($f)) + 20|0);
  HEAP32[$9>>2] = $internal_buf;
  HEAP32[$2>>2] = 80;
  $10 = ((($internal_buf)) + 80|0);
  $11 = ((($f)) + 16|0);
  HEAP32[$11>>2] = $10;
  $12 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
  $13 = ($7|0)==(0|0);
  if ($13) {
   $ret$1 = $12;
  } else {
   $14 = ((($f)) + 36|0);
   $15 = HEAP32[$14>>2]|0;
   (FUNCTION_TABLE_iiii[$15 & 63]($f,0,0)|0);
   $16 = HEAP32[$9>>2]|0;
   $17 = ($16|0)==(0|0);
   $$ = $17 ? -1 : $12;
   HEAP32[$6>>2] = $7;
   HEAP32[$2>>2] = 0;
   HEAP32[$11>>2] = 0;
   HEAP32[$8>>2] = 0;
   HEAP32[$9>>2] = 0;
   $ret$1 = $$;
  }
 } else {
  $5 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
  $ret$1 = $5;
 }
 $$0 = $ret$1;
 STACKTOP = sp;return ($$0|0);
}
function _vsnprintf($s,$n,$fmt,$ap) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$$02 = 0, $$0 = 0, $$01 = 0, $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $f = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $b = sp + 112|0;
 $f = sp;
 dest=$f; src=236; stop=dest+112|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $0 = (($n) + -1)|0;
 $1 = ($0>>>0)>(2147483646);
 if ($1) {
  $2 = ($n|0)==(0);
  if ($2) {
   $$01 = $b;$$02 = 1;
  } else {
   $3 = (___errno_location()|0);
   HEAP32[$3>>2] = 75;
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
 } else {
  $$01 = $s;$$02 = $n;
 }
 $4 = $$01;
 $5 = (-2 - ($4))|0;
 $6 = ($$02>>>0)>($5>>>0);
 $$$02 = $6 ? $5 : $$02;
 $7 = ((($f)) + 48|0);
 HEAP32[$7>>2] = $$$02;
 $8 = ((($f)) + 20|0);
 HEAP32[$8>>2] = $$01;
 $9 = ((($f)) + 44|0);
 HEAP32[$9>>2] = $$01;
 $10 = (($$01) + ($$$02)|0);
 $11 = ((($f)) + 16|0);
 HEAP32[$11>>2] = $10;
 $12 = ((($f)) + 28|0);
 HEAP32[$12>>2] = $10;
 $13 = (_MUSL_vfprintf($f,$fmt,$ap)|0);
 $14 = ($$$02|0)==(0);
 if ($14) {
  $$0 = $13;
  STACKTOP = sp;return ($$0|0);
 }
 $15 = HEAP32[$8>>2]|0;
 $16 = HEAP32[$11>>2]|0;
 $17 = ($15|0)==($16|0);
 $18 = $17 << 31 >> 31;
 $19 = (($15) + ($18)|0);
 HEAP8[$19>>0] = 0;
 $$0 = $13;
 STACKTOP = sp;return ($$0|0);
}
function _memchr($src,$c,$n) {
 $src = $src|0;
 $c = $c|0;
 $n = $n|0;
 var $$0$lcssa = 0, $$0$lcssa44 = 0, $$019 = 0, $$1$lcssa = 0, $$110 = 0, $$110$lcssa = 0, $$24 = 0, $$3 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond18 = 0, $s$0$lcssa = 0, $s$0$lcssa43 = 0, $s$020 = 0, $s$15 = 0, $s$2 = 0, $w$0$lcssa = 0, $w$011 = 0, $w$011$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = $src;
 $2 = $1 & 3;
 $3 = ($2|0)!=(0);
 $4 = ($n|0)!=(0);
 $or$cond18 = $4 & $3;
 L1: do {
  if ($or$cond18) {
   $5 = $c&255;
   $$019 = $n;$s$020 = $src;
   while(1) {
    $6 = HEAP8[$s$020>>0]|0;
    $7 = ($6<<24>>24)==($5<<24>>24);
    if ($7) {
     $$0$lcssa44 = $$019;$s$0$lcssa43 = $s$020;
     label = 6;
     break L1;
    }
    $8 = ((($s$020)) + 1|0);
    $9 = (($$019) + -1)|0;
    $10 = $8;
    $11 = $10 & 3;
    $12 = ($11|0)!=(0);
    $13 = ($9|0)!=(0);
    $or$cond = $13 & $12;
    if ($or$cond) {
     $$019 = $9;$s$020 = $8;
    } else {
     $$0$lcssa = $9;$$lcssa = $13;$s$0$lcssa = $8;
     label = 5;
     break;
    }
   }
  } else {
   $$0$lcssa = $n;$$lcssa = $4;$s$0$lcssa = $src;
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  if ($$lcssa) {
   $$0$lcssa44 = $$0$lcssa;$s$0$lcssa43 = $s$0$lcssa;
   label = 6;
  } else {
   $$3 = 0;$s$2 = $s$0$lcssa;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $14 = HEAP8[$s$0$lcssa43>>0]|0;
   $15 = $c&255;
   $16 = ($14<<24>>24)==($15<<24>>24);
   if ($16) {
    $$3 = $$0$lcssa44;$s$2 = $s$0$lcssa43;
   } else {
    $17 = Math_imul($0, 16843009)|0;
    $18 = ($$0$lcssa44>>>0)>(3);
    L11: do {
     if ($18) {
      $$110 = $$0$lcssa44;$w$011 = $s$0$lcssa43;
      while(1) {
       $19 = HEAP32[$w$011>>2]|0;
       $20 = $19 ^ $17;
       $21 = (($20) + -16843009)|0;
       $22 = $20 & -2139062144;
       $23 = $22 ^ -2139062144;
       $24 = $23 & $21;
       $25 = ($24|0)==(0);
       if (!($25)) {
        $$110$lcssa = $$110;$w$011$lcssa = $w$011;
        break;
       }
       $26 = ((($w$011)) + 4|0);
       $27 = (($$110) + -4)|0;
       $28 = ($27>>>0)>(3);
       if ($28) {
        $$110 = $27;$w$011 = $26;
       } else {
        $$1$lcssa = $27;$w$0$lcssa = $26;
        label = 11;
        break L11;
       }
      }
      $$24 = $$110$lcssa;$s$15 = $w$011$lcssa;
     } else {
      $$1$lcssa = $$0$lcssa44;$w$0$lcssa = $s$0$lcssa43;
      label = 11;
     }
    } while(0);
    if ((label|0) == 11) {
     $29 = ($$1$lcssa|0)==(0);
     if ($29) {
      $$3 = 0;$s$2 = $w$0$lcssa;
      break;
     } else {
      $$24 = $$1$lcssa;$s$15 = $w$0$lcssa;
     }
    }
    while(1) {
     $30 = HEAP8[$s$15>>0]|0;
     $31 = ($30<<24>>24)==($15<<24>>24);
     if ($31) {
      $$3 = $$24;$s$2 = $s$15;
      break L8;
     }
     $32 = ((($s$15)) + 1|0);
     $33 = (($$24) + -1)|0;
     $34 = ($33|0)==(0);
     if ($34) {
      $$3 = 0;$s$2 = $32;
      break;
     } else {
      $$24 = $33;$s$15 = $32;
     }
    }
   }
  }
 } while(0);
 $35 = ($$3|0)!=(0);
 $36 = $35 ? $s$2 : 0;
 return ($36|0);
}
function _memcmp($vl,$vr,$n) {
 $vl = $vl|0;
 $vr = $vr|0;
 $n = $n|0;
 var $$03 = 0, $$lcssa = 0, $$lcssa19 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$04 = 0, $r$05 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 if ($0) {
  $11 = 0;
  return ($11|0);
 } else {
  $$03 = $n;$l$04 = $vl;$r$05 = $vr;
 }
 while(1) {
  $1 = HEAP8[$l$04>>0]|0;
  $2 = HEAP8[$r$05>>0]|0;
  $3 = ($1<<24>>24)==($2<<24>>24);
  if (!($3)) {
   $$lcssa = $1;$$lcssa19 = $2;
   break;
  }
  $4 = (($$03) + -1)|0;
  $5 = ((($l$04)) + 1|0);
  $6 = ((($r$05)) + 1|0);
  $7 = ($4|0)==(0);
  if ($7) {
   $11 = 0;
   label = 5;
   break;
  } else {
   $$03 = $4;$l$04 = $5;$r$05 = $6;
  }
 }
 if ((label|0) == 5) {
  return ($11|0);
 }
 $8 = $$lcssa&255;
 $9 = $$lcssa19&255;
 $10 = (($8) - ($9))|0;
 $11 = $10;
 return ($11|0);
}
function _printf_core($f,$fmt,$ap,$nl_arg,$nl_type) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 $nl_arg = $nl_arg|0;
 $nl_type = $nl_type|0;
 var $$ = 0, $$$i = 0, $$0 = 0, $$0$i = 0, $$0$lcssa$i = 0, $$0$lcssa$i$i = 0, $$0$lcssa$i104$i = 0, $$0$lcssa$i128$i = 0, $$0$lcssa$i143$i = 0, $$0$lcssa$i39$i = 0, $$0$lcssa$i46 = 0, $$0$lcssa$i46$i = 0, $$0$lcssa$i48$i = 0, $$0$lcssa$i51 = 0, $$0$lcssa$i53 = 0, $$0$lcssa$i56$i = 0, $$0$lcssa$i61 = 0, $$0$lcssa$i63$i = 0, $$0$lcssa$i68 = 0, $$0$lcssa$i69$i = 0;
 var $$0$lcssa$i75 = 0, $$0$lcssa$i76$i = 0, $$0$lcssa$i84$i = 0, $$0$lcssa$i85 = 0, $$0$lcssa$i97$i = 0, $$01$i = 0, $$01$i$i = 0, $$01$i102$i = 0, $$01$i126$i = 0, $$01$i141$i = 0, $$01$i37$i = 0, $$01$i44 = 0, $$01$i44$i = 0, $$01$i54$i = 0, $$01$i59 = 0, $$01$i61$i = 0, $$01$i66 = 0, $$01$i67$i = 0, $$01$i73 = 0, $$01$i74$i = 0;
 var $$01$i83 = 0, $$01$i95$i = 0, $$01$lcssa$off0$i = 0, $$01$lcssa$off0$i$i = 0, $$01$lcssa$off0$i85$i = 0, $$012$i = 0, $$013$i = 0, $$03$i48 = 0, $$05$i = 0, $$05$i$i = 0, $$05$i79$i = 0, $$07$i = 0.0, $$1$i = 0.0, $$1$lcssa$i$i = 0, $$1$lcssa$i112$i = 0, $$100 = 0, $$114$i = 0, $$12$i = 0, $$12$i$i = 0, $$12$i110$i = 0;
 var $$12$i119$i = 0, $$12$i134$i = 0, $$12$i134$i$lcssa = 0, $$12$i87$i = 0, $$2$i = 0.0, $$2$us$i = 0.0, $$2$us$us$i = 0.0, $$20$i = 0.0, $$21$i = 0, $$210$$22$i = 0, $$210$$24$i = 0, $$210$i = 0, $$23$i = 0, $$24 = 0, $$25 = 0, $$3$i = 0.0, $$31$i = 0, $$311$i = 0, $$4$i = 0.0, $$412$lcssa$i = 0;
 var $$412184$i = 0, $$5196$i = 0, $$a$3$i = 0, $$a$3$us$i = 0, $$a$3$us303$i = 0, $$a$3$us304$i = 0, $$a$3305$i = 0, $$a$3306$i = 0, $$fl$4 = 0, $$l10n$0 = 0, $$lcssa = 0, $$lcssa275$i = 0, $$lcssa443 = 0, $$lcssa448 = 0, $$lcssa449 = 0, $$lcssa450 = 0, $$lcssa451 = 0, $$lcssa452 = 0, $$lcssa454 = 0, $$lcssa455 = 0;
 var $$lcssa461 = 0, $$lcssa465 = 0, $$lcssa467 = 0, $$lcssa470 = 0, $$lcssa471 = 0, $$lcssa474 = 0.0, $$lcssa475 = 0, $$lcssa478 = 0, $$lcssa482 = 0, $$mask$i = 0, $$mask$i38 = 0, $$mask1$i = 0, $$mask1$i37 = 0, $$neg151$i = 0, $$neg152$i = 0, $$p$$i = 0, $$p$5 = 0, $$p$i = 0, $$pn$i = 0, $$pr$i = 0;
 var $$pr146$i = 0, $$pre = 0, $$pre$i = 0, $$pre$phi302$iZ2D = 0, $$pre272 = 0, $$pre300$i = 0, $$pre301$i = 0, $$sum$i = 0, $$sum15$i = 0, $$sum16$i = 0, $$z$3$i = 0, $$z$4$i = 0, $$z$4$us$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0;
 var $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0;
 var $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0;
 var $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0;
 var $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0;
 var $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0;
 var $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0;
 var $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0;
 var $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0;
 var $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0.0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0.0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0;
 var $1165$phi = 0, $1166 = 0, $1166$phi = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
 var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0;
 var $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0;
 var $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0.0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0.0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
 var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0;
 var $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0;
 var $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0;
 var $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0;
 var $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0;
 var $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0;
 var $425 = 0, $426 = 0.0, $427 = 0, $428 = 0.0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0;
 var $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0;
 var $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0.0, $468 = 0.0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0;
 var $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0.0, $484 = 0, $485 = 0, $486 = 0, $487 = 0.0, $488 = 0.0, $489 = 0.0, $49 = 0, $490 = 0.0, $491 = 0.0, $492 = 0.0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0;
 var $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0;
 var $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0;
 var $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0.0, $541 = 0.0, $542 = 0.0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0;
 var $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0.0, $556 = 0.0, $557 = 0.0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0;
 var $57 = 0, $570 = 0.0, $571 = 0.0, $572 = 0.0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0;
 var $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0;
 var $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0;
 var $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0.0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0.0, $636 = 0.0, $637 = 0.0, $638 = 0, $639 = 0, $64 = 0, $640 = 0;
 var $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0;
 var $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0;
 var $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0;
 var $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0;
 var $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0;
 var $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0;
 var $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0;
 var $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0.0, $777 = 0.0, $778 = 0, $779 = 0.0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0;
 var $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0;
 var $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0;
 var $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0;
 var $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0;
 var $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0;
 var $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0;
 var $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0;
 var $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0;
 var $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0;
 var $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0;
 var $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0;
 var $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $a$0 = 0, $a$1 = 0, $a$1$lcssa$i = 0;
 var $a$1253$i = 0, $a$2 = 0, $a$2$ph$i = 0, $a$3$lcssa$i = 0, $a$3240$i = 0, $a$3240$us$i = 0, $a$5$lcssa$i = 0, $a$5215$i = 0, $a$6$i = 0, $a$7$i = 0, $a$8$ph$i = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0, $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current29 = 0;
 var $arglist_current32 = 0, $arglist_current35 = 0, $arglist_current38 = 0, $arglist_current41 = 0, $arglist_current44 = 0, $arglist_current47 = 0, $arglist_current5 = 0, $arglist_current50 = 0, $arglist_current53 = 0, $arglist_current56 = 0, $arglist_current59 = 0, $arglist_current62 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0;
 var $arglist_next3 = 0, $arglist_next30 = 0, $arglist_next33 = 0, $arglist_next36 = 0, $arglist_next39 = 0, $arglist_next42 = 0, $arglist_next45 = 0, $arglist_next48 = 0, $arglist_next51 = 0, $arglist_next54 = 0, $arglist_next57 = 0, $arglist_next6 = 0, $arglist_next60 = 0, $arglist_next63 = 0, $arglist_next9 = 0, $argpos$0 = 0, $big$i = 0, $buf = 0, $buf$i = 0, $carry$0246$i = 0;
 var $carry3$0234$i = 0, $carry3$0234$us$i = 0, $cnt$0 = 0, $cnt$1 = 0, $cnt$1$lcssa = 0, $d$0$i = 0, $d$0245$i = 0, $d$0247$i = 0, $d$1233$i = 0, $d$1233$us$i = 0, $d$2$lcssa$i = 0, $d$2214$i = 0, $d$3$i = 0, $d$4191$i = 0, $d$5183$i = 0, $d$6195$i = 0, $e$0229$i = 0, $e$1$i = 0, $e$2210$i = 0, $e$3$i = 0;
 var $e$4$ph$i = 0, $e2$i = 0, $ebuf0$i = 0, $estr$0$i = 0, $estr$1$lcssa$i = 0, $estr$1$ph$i = 0, $estr$1201$i = 0, $estr$2$i = 0, $exitcond$i = 0, $expanded = 0, $expanded101 = 0, $expanded102 = 0, $expanded103 = 0, $expanded105 = 0, $expanded106 = 0, $expanded108 = 0, $expanded109 = 0, $expanded110 = 0, $expanded112 = 0, $expanded113 = 0;
 var $expanded115 = 0, $expanded116 = 0, $expanded117 = 0, $expanded119 = 0, $expanded120 = 0, $expanded122 = 0, $expanded123 = 0, $expanded124 = 0, $expanded126 = 0, $expanded127 = 0, $expanded129 = 0, $expanded130 = 0, $expanded131 = 0, $expanded133 = 0, $expanded134 = 0, $expanded136 = 0, $expanded137 = 0, $expanded138 = 0, $expanded140 = 0, $expanded141 = 0;
 var $expanded143 = 0, $expanded144 = 0, $expanded145 = 0, $expanded147 = 0, $expanded148 = 0, $expanded150 = 0, $expanded151 = 0, $expanded152 = 0, $expanded154 = 0, $expanded155 = 0, $expanded157 = 0, $expanded158 = 0, $expanded159 = 0, $expanded161 = 0, $expanded162 = 0, $expanded164 = 0, $expanded165 = 0, $expanded166 = 0, $expanded168 = 0, $expanded169 = 0;
 var $expanded171 = 0, $expanded172 = 0, $expanded173 = 0, $expanded175 = 0, $expanded176 = 0, $expanded178 = 0, $expanded179 = 0, $expanded180 = 0, $expanded182 = 0, $expanded183 = 0, $expanded185 = 0, $expanded186 = 0, $expanded187 = 0, $expanded189 = 0, $expanded190 = 0, $expanded192 = 0, $expanded193 = 0, $expanded194 = 0, $expanded196 = 0, $expanded197 = 0;
 var $expanded199 = 0, $expanded200 = 0, $expanded201 = 0, $expanded203 = 0, $expanded204 = 0, $expanded206 = 0, $expanded207 = 0, $expanded208 = 0, $expanded210 = 0, $expanded211 = 0, $expanded213 = 0, $expanded214 = 0, $expanded215 = 0, $expanded64 = 0, $expanded66 = 0, $expanded67 = 0, $expanded68 = 0, $expanded70 = 0, $expanded71 = 0, $expanded73 = 0;
 var $expanded74 = 0, $expanded75 = 0, $expanded77 = 0, $expanded78 = 0, $expanded80 = 0, $expanded81 = 0, $expanded82 = 0, $expanded84 = 0, $expanded85 = 0, $expanded87 = 0, $expanded88 = 0, $expanded89 = 0, $expanded91 = 0, $expanded92 = 0, $expanded94 = 0, $expanded95 = 0, $expanded96 = 0, $expanded98 = 0, $expanded99 = 0, $fl$0115 = 0;
 var $fl$0175 = 0, $fl$1 = 0, $fl$1$ = 0, $fl$3 = 0, $fl$4 = 0, $fl$6 = 0, $fmt87$lcssa = 0, $fmt87167 = 0, $fmt88 = 0, $fmt89 = 0, $fmt90 = 0, $fmt92 = 0, $fmt92$lcssa446 = 0, $fmt93 = 0, $i$0$lcssa = 0, $i$0$lcssa275 = 0, $i$0180 = 0, $i$0228$i = 0, $i$03$i = 0, $i$03$i30 = 0;
 var $i$1$lcssa$i = 0, $i$1191 = 0, $i$1222$i = 0, $i$2166 = 0, $i$2166$lcssa = 0, $i$2209$i = 0, $i$3164 = 0, $i$3205$i = 0, $isdigit = 0, $isdigit$i = 0, $isdigit$i32 = 0, $isdigit10 = 0, $isdigit12 = 0, $isdigit2$i = 0, $isdigit2$i28 = 0, $isdigittmp = 0, $isdigittmp$ = 0, $isdigittmp$i = 0, $isdigittmp$i31 = 0, $isdigittmp1$i = 0;
 var $isdigittmp1$i27 = 0, $isdigittmp11 = 0, $isdigittmp4$i = 0, $isdigittmp4$i29 = 0, $isdigittmp9 = 0, $j$0$i = 0, $j$0221$i = 0, $j$0223$i = 0, $j$1206$i = 0, $j$2$i = 0, $l$0 = 0, $l$0$i = 0, $l$1$i = 0, $l$1179 = 0, $l$2 = 0, $l10n$0 = 0, $l10n$0$lcssa = 0, $l10n$0$phi = 0, $l10n$1 = 0, $l10n$2 = 0;
 var $l10n$3 = 0, $mb = 0, $notlhs$us$us$i = 0, $notrhs$i = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i$i = 0, $or$cond$i100$i = 0, $or$cond$i35$i = 0, $or$cond$i42$i = 0, $or$cond$i52$i = 0, $or$cond$i57 = 0, $or$cond$i59$i = 0, $or$cond$i64 = 0, $or$cond$i71 = 0, $or$cond$i72$i = 0, $or$cond$i79 = 0, $or$cond$i81 = 0, $or$cond$i93$i = 0, $or$cond15 = 0;
 var $or$cond19 = 0, $or$cond22 = 0, $or$cond29$i = 0, $or$cond331 = 0, $or$cond6$i = 0, $p$0 = 0, $p$1 = 0, $p$2 = 0, $p$2$ = 0, $p$3 = 0, $p$4274 = 0, $p$5 = 0, $pad$i = 0, $pl$0 = 0, $pl$0$i = 0, $pl$1 = 0, $pl$1$i = 0, $pl$2 = 0, $prefix$0 = 0, $prefix$0$$i = 0;
 var $prefix$0$i = 0, $prefix$1 = 0, $prefix$2 = 0, $r$0$a$8$i = 0, $re$1179$i = 0, $round$0178$i = 0.0, $round6$1$i = 0.0, $s$0$i = 0, $s$0$us$i = 0, $s$0$us$us$i = 0, $s$1$i = 0, $s$1$lcssa$i = 0, $s$1$us$i = 0, $s$1$us$us$i = 0, $s1$0$i = 0, $s7$0188$i = 0, $s7$1$i = 0, $s8$0$lcssa$i = 0, $s8$0180$i = 0, $s9$0$i = 0;
 var $s9$1192$i = 0, $s9$2$i = 0, $sext = 0, $sext101 = 0, $small$0$i = 0.0, $small$1$i = 0.0, $st$0 = 0, $st$0$lcssa447 = 0, $storemerge = 0, $storemerge13 = 0, $storemerge8113 = 0, $storemerge8174 = 0, $t$0 = 0, $t$1 = 0, $w$$i = 0, $w$0 = 0, $w$1 = 0, $w$2 = 0, $w$30$i = 0, $wc = 0;
 var $ws$0181 = 0, $ws$1192 = 0, $y$03$i = 0, $y$03$i$i = 0, $y$03$i109$i = 0, $y$03$i118$i = 0, $y$03$i133$i = 0, $y$03$i86$i = 0, $z$0$i = 0, $z$0$lcssa = 0, $z$0168 = 0, $z$1 = 0, $z$1$lcssa$i = 0, $z$1252$i = 0, $z$2 = 0, $z$2$i = 0, $z$2$i$lcssa = 0, $z$3$lcssa$i = 0, $z$3239$i = 0, $z$3239$us$i = 0;
 var $z$4$i = 0, $z$4$us$i = 0, $z$6$$i = 0, $z$6$i = 0, $z$6$i$lcssa = 0, $z$6$ph$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 864|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $big$i = sp + 16|0;
 $e2$i = sp;
 $buf$i = sp + 832|0;
 $0 = $buf$i;
 $ebuf0$i = sp + 816|0;
 $pad$i = sp + 520|0;
 $buf = sp + 776|0;
 $wc = sp + 8|0;
 $mb = sp + 828|0;
 $1 = ($f|0)!=(0|0);
 $2 = ((($buf)) + 40|0);
 $3 = $2;
 $4 = ((($buf)) + 39|0);
 $5 = ((($wc)) + 4|0);
 $6 = $wc;
 $7 = ((($ebuf0$i)) + 12|0);
 $8 = ((($ebuf0$i)) + 11|0);
 $9 = $7;
 $10 = (($9) - ($0))|0;
 $11 = (-2 - ($0))|0;
 $12 = (($9) + 2)|0;
 $13 = ((($big$i)) + 288|0);
 $14 = ((($buf$i)) + 9|0);
 $15 = $14;
 $16 = ((($buf$i)) + 8|0);
 $1165 = 0;$1166 = 0;$cnt$0 = 0;$fmt89 = $fmt;$l$0 = 0;$l10n$0 = 0;
 L1: while(1) {
  $17 = ($cnt$0|0)>(-1);
  do {
   if ($17) {
    $18 = (2147483647 - ($cnt$0))|0;
    $19 = ($l$0|0)>($18|0);
    if ($19) {
     $20 = (___errno_location()|0);
     HEAP32[$20>>2] = 75;
     $cnt$1 = -1;
     break;
    } else {
     $21 = (($l$0) + ($cnt$0))|0;
     $cnt$1 = $21;
     break;
    }
   } else {
    $cnt$1 = $cnt$0;
   }
  } while(0);
  $22 = HEAP8[$fmt89>>0]|0;
  $23 = ($22<<24>>24)==(0);
  if ($23) {
   $cnt$1$lcssa = $cnt$1;$l10n$0$lcssa = $l10n$0;
   label = 344;
   break;
  } else {
   $24 = $22;$fmt88 = $fmt89;
  }
  L9: while(1) {
   switch ($24<<24>>24) {
   case 37:  {
    $fmt87167 = $fmt88;$z$0168 = $fmt88;
    label = 9;
    break L9;
    break;
   }
   case 0:  {
    $fmt87$lcssa = $fmt88;$z$0$lcssa = $fmt88;
    break L9;
    break;
   }
   default: {
   }
   }
   $25 = ((($fmt88)) + 1|0);
   $$pre = HEAP8[$25>>0]|0;
   $24 = $$pre;$fmt88 = $25;
  }
  L12: do {
   if ((label|0) == 9) {
    while(1) {
     label = 0;
     $26 = ((($fmt87167)) + 1|0);
     $27 = HEAP8[$26>>0]|0;
     $28 = ($27<<24>>24)==(37);
     if (!($28)) {
      $fmt87$lcssa = $fmt87167;$z$0$lcssa = $z$0168;
      break L12;
     }
     $29 = ((($z$0168)) + 1|0);
     $30 = ((($fmt87167)) + 2|0);
     $31 = HEAP8[$30>>0]|0;
     $32 = ($31<<24>>24)==(37);
     if ($32) {
      $fmt87167 = $30;$z$0168 = $29;
      label = 9;
     } else {
      $fmt87$lcssa = $30;$z$0$lcssa = $29;
      break;
     }
    }
   }
  } while(0);
  $33 = $z$0$lcssa;
  $34 = $fmt89;
  $35 = (($33) - ($34))|0;
  if ($1) {
   (___fwritex($fmt89,$35,$f)|0);
  }
  $36 = ($z$0$lcssa|0)==($fmt89|0);
  if (!($36)) {
   $l10n$0$phi = $l10n$0;$1166$phi = $1166;$1165$phi = $1165;$cnt$0 = $cnt$1;$fmt89 = $fmt87$lcssa;$l$0 = $35;$l10n$0 = $l10n$0$phi;$1166 = $1166$phi;$1165 = $1165$phi;
   continue;
  }
  $37 = ((($fmt87$lcssa)) + 1|0);
  $38 = HEAP8[$37>>0]|0;
  $39 = $38 << 24 >> 24;
  $isdigittmp = (($39) + -48)|0;
  $isdigit = ($isdigittmp>>>0)<(10);
  if ($isdigit) {
   $40 = ((($fmt87$lcssa)) + 2|0);
   $41 = HEAP8[$40>>0]|0;
   $42 = ($41<<24>>24)==(36);
   $43 = ((($fmt87$lcssa)) + 3|0);
   $$100 = $42 ? $43 : $37;
   $$l10n$0 = $42 ? 1 : $l10n$0;
   $isdigittmp$ = $42 ? $isdigittmp : -1;
   $$pre272 = HEAP8[$$100>>0]|0;
   $45 = $$pre272;$argpos$0 = $isdigittmp$;$l10n$1 = $$l10n$0;$storemerge = $$100;
  } else {
   $45 = $38;$argpos$0 = -1;$l10n$1 = $l10n$0;$storemerge = $37;
  }
  $44 = $45 << 24 >> 24;
  $46 = $44 & -32;
  $47 = ($46|0)==(32);
  L24: do {
   if ($47) {
    $49 = $44;$54 = $45;$fl$0175 = 0;$storemerge8174 = $storemerge;
    while(1) {
     $48 = (($49) + -32)|0;
     $50 = 1 << $48;
     $51 = $50 & 75913;
     $52 = ($51|0)==(0);
     if ($52) {
      $63 = $54;$fl$0115 = $fl$0175;$storemerge8113 = $storemerge8174;
      break L24;
     }
     $53 = $54 << 24 >> 24;
     $55 = (($53) + -32)|0;
     $56 = 1 << $55;
     $57 = $56 | $fl$0175;
     $58 = ((($storemerge8174)) + 1|0);
     $59 = HEAP8[$58>>0]|0;
     $60 = $59 << 24 >> 24;
     $61 = $60 & -32;
     $62 = ($61|0)==(32);
     if ($62) {
      $49 = $60;$54 = $59;$fl$0175 = $57;$storemerge8174 = $58;
     } else {
      $63 = $59;$fl$0115 = $57;$storemerge8113 = $58;
      break;
     }
    }
   } else {
    $63 = $45;$fl$0115 = 0;$storemerge8113 = $storemerge;
   }
  } while(0);
  $64 = ($63<<24>>24)==(42);
  do {
   if ($64) {
    $65 = ((($storemerge8113)) + 1|0);
    $66 = HEAP8[$65>>0]|0;
    $67 = $66 << 24 >> 24;
    $isdigittmp11 = (($67) + -48)|0;
    $isdigit12 = ($isdigittmp11>>>0)<(10);
    if ($isdigit12) {
     $68 = ((($storemerge8113)) + 2|0);
     $69 = HEAP8[$68>>0]|0;
     $70 = ($69<<24>>24)==(36);
     if ($70) {
      $71 = (($nl_type) + ($isdigittmp11<<2)|0);
      HEAP32[$71>>2] = 10;
      $72 = HEAP8[$65>>0]|0;
      $73 = $72 << 24 >> 24;
      $74 = (($73) + -48)|0;
      $75 = (($nl_arg) + ($74<<3)|0);
      $76 = $75;
      $77 = $76;
      $78 = HEAP32[$77>>2]|0;
      $79 = (($76) + 4)|0;
      $80 = $79;
      $81 = HEAP32[$80>>2]|0;
      $82 = ((($storemerge8113)) + 3|0);
      $l10n$2 = 1;$storemerge13 = $82;$w$0 = $78;
     } else {
      label = 23;
     }
    } else {
     label = 23;
    }
    if ((label|0) == 23) {
     label = 0;
     $83 = ($l10n$1|0)==(0);
     if (!($83)) {
      $$0 = -1;
      label = 363;
      break L1;
     }
     if (!($1)) {
      $fl$1 = $fl$0115;$fmt90 = $65;$l10n$3 = 0;$w$1 = 0;
      break;
     }
     $arglist_current = HEAP32[$ap>>2]|0;
     $84 = $arglist_current;
     $85 = ((0) + 4|0);
     $expanded64 = $85;
     $expanded = (($expanded64) - 1)|0;
     $86 = (($84) + ($expanded))|0;
     $87 = ((0) + 4|0);
     $expanded68 = $87;
     $expanded67 = (($expanded68) - 1)|0;
     $expanded66 = $expanded67 ^ -1;
     $88 = $86 & $expanded66;
     $89 = $88;
     $90 = HEAP32[$89>>2]|0;
     $arglist_next = ((($89)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next;
     $l10n$2 = 0;$storemerge13 = $65;$w$0 = $90;
    }
    $91 = ($w$0|0)<(0);
    if ($91) {
     $92 = $fl$0115 | 8192;
     $93 = (0 - ($w$0))|0;
     $fl$1 = $92;$fmt90 = $storemerge13;$l10n$3 = $l10n$2;$w$1 = $93;
    } else {
     $fl$1 = $fl$0115;$fmt90 = $storemerge13;$l10n$3 = $l10n$2;$w$1 = $w$0;
    }
   } else {
    $94 = $63 << 24 >> 24;
    $isdigittmp1$i = (($94) + -48)|0;
    $isdigit2$i = ($isdigittmp1$i>>>0)<(10);
    if ($isdigit2$i) {
     $98 = $storemerge8113;$i$03$i = 0;$isdigittmp4$i = $isdigittmp1$i;
     while(1) {
      $95 = ($i$03$i*10)|0;
      $96 = (($95) + ($isdigittmp4$i))|0;
      $97 = ((($98)) + 1|0);
      $99 = HEAP8[$97>>0]|0;
      $100 = $99 << 24 >> 24;
      $isdigittmp$i = (($100) + -48)|0;
      $isdigit$i = ($isdigittmp$i>>>0)<(10);
      if ($isdigit$i) {
       $98 = $97;$i$03$i = $96;$isdigittmp4$i = $isdigittmp$i;
      } else {
       $$lcssa = $96;$$lcssa443 = $97;
       break;
      }
     }
     $101 = ($$lcssa|0)<(0);
     if ($101) {
      $$0 = -1;
      label = 363;
      break L1;
     } else {
      $fl$1 = $fl$0115;$fmt90 = $$lcssa443;$l10n$3 = $l10n$1;$w$1 = $$lcssa;
     }
    } else {
     $fl$1 = $fl$0115;$fmt90 = $storemerge8113;$l10n$3 = $l10n$1;$w$1 = 0;
    }
   }
  } while(0);
  $102 = HEAP8[$fmt90>>0]|0;
  $103 = ($102<<24>>24)==(46);
  L45: do {
   if ($103) {
    $104 = ((($fmt90)) + 1|0);
    $105 = HEAP8[$104>>0]|0;
    $106 = ($105<<24>>24)==(42);
    if (!($106)) {
     $133 = $105 << 24 >> 24;
     $isdigittmp1$i27 = (($133) + -48)|0;
     $isdigit2$i28 = ($isdigittmp1$i27>>>0)<(10);
     if ($isdigit2$i28) {
      $137 = $104;$i$03$i30 = 0;$isdigittmp4$i29 = $isdigittmp1$i27;
     } else {
      $fmt93 = $104;$p$0 = 0;
      break;
     }
     while(1) {
      $134 = ($i$03$i30*10)|0;
      $135 = (($134) + ($isdigittmp4$i29))|0;
      $136 = ((($137)) + 1|0);
      $138 = HEAP8[$136>>0]|0;
      $139 = $138 << 24 >> 24;
      $isdigittmp$i31 = (($139) + -48)|0;
      $isdigit$i32 = ($isdigittmp$i31>>>0)<(10);
      if ($isdigit$i32) {
       $137 = $136;$i$03$i30 = $135;$isdigittmp4$i29 = $isdigittmp$i31;
      } else {
       $fmt93 = $136;$p$0 = $135;
       break L45;
      }
     }
    }
    $107 = ((($fmt90)) + 2|0);
    $108 = HEAP8[$107>>0]|0;
    $109 = $108 << 24 >> 24;
    $isdigittmp9 = (($109) + -48)|0;
    $isdigit10 = ($isdigittmp9>>>0)<(10);
    if ($isdigit10) {
     $110 = ((($fmt90)) + 3|0);
     $111 = HEAP8[$110>>0]|0;
     $112 = ($111<<24>>24)==(36);
     if ($112) {
      $113 = (($nl_type) + ($isdigittmp9<<2)|0);
      HEAP32[$113>>2] = 10;
      $114 = HEAP8[$107>>0]|0;
      $115 = $114 << 24 >> 24;
      $116 = (($115) + -48)|0;
      $117 = (($nl_arg) + ($116<<3)|0);
      $118 = $117;
      $119 = $118;
      $120 = HEAP32[$119>>2]|0;
      $121 = (($118) + 4)|0;
      $122 = $121;
      $123 = HEAP32[$122>>2]|0;
      $124 = ((($fmt90)) + 4|0);
      $fmt93 = $124;$p$0 = $120;
      break;
     }
    }
    $125 = ($l10n$3|0)==(0);
    if (!($125)) {
     $$0 = -1;
     label = 363;
     break L1;
    }
    if ($1) {
     $arglist_current2 = HEAP32[$ap>>2]|0;
     $126 = $arglist_current2;
     $127 = ((0) + 4|0);
     $expanded71 = $127;
     $expanded70 = (($expanded71) - 1)|0;
     $128 = (($126) + ($expanded70))|0;
     $129 = ((0) + 4|0);
     $expanded75 = $129;
     $expanded74 = (($expanded75) - 1)|0;
     $expanded73 = $expanded74 ^ -1;
     $130 = $128 & $expanded73;
     $131 = $130;
     $132 = HEAP32[$131>>2]|0;
     $arglist_next3 = ((($131)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next3;
     $fmt93 = $107;$p$0 = $132;
    } else {
     $fmt93 = $107;$p$0 = 0;
    }
   } else {
    $fmt93 = $fmt90;$p$0 = -1;
   }
  } while(0);
  $fmt92 = $fmt93;$st$0 = 0;
  while(1) {
   $140 = HEAP8[$fmt92>>0]|0;
   $141 = $140 << 24 >> 24;
   $142 = (($141) + -65)|0;
   $143 = ($142>>>0)>(57);
   if ($143) {
    $$0 = -1;
    label = 363;
    break L1;
   }
   $144 = ((($fmt92)) + 1|0);
   $145 = ((3712 + (($st$0*58)|0)|0) + ($142)|0);
   $146 = HEAP8[$145>>0]|0;
   $147 = $146&255;
   $148 = (($147) + -1)|0;
   $149 = ($148>>>0)<(8);
   if ($149) {
    $fmt92 = $144;$st$0 = $147;
   } else {
    $$lcssa448 = $144;$$lcssa449 = $146;$$lcssa450 = $147;$fmt92$lcssa446 = $fmt92;$st$0$lcssa447 = $st$0;
    break;
   }
  }
  $150 = ($$lcssa449<<24>>24)==(0);
  if ($150) {
   $$0 = -1;
   label = 363;
   break;
  }
  $151 = ($$lcssa449<<24>>24)==(19);
  $152 = ($argpos$0|0)>(-1);
  L64: do {
   if ($151) {
    if ($152) {
     $$0 = -1;
     label = 363;
     break L1;
    } else {
     $1167 = $1165;$1168 = $1166;
     label = 62;
    }
   } else {
    if ($152) {
     $153 = (($nl_type) + ($argpos$0<<2)|0);
     HEAP32[$153>>2] = $$lcssa450;
     $154 = (($nl_arg) + ($argpos$0<<3)|0);
     $155 = HEAP32[$154>>2]|0;
     $156 = ((($154)) + 4|0);
     $157 = HEAP32[$156>>2]|0;
     $1167 = $157;$1168 = $155;
     label = 62;
     break;
    }
    if (!($1)) {
     $$0 = 0;
     label = 363;
     break L1;
    }
    $158 = ($$lcssa449&255)>(20);
    if ($158) {
     $260 = $1166;$287 = $1165;
    } else {
     do {
      switch ($$lcssa450|0) {
      case 9:  {
       $arglist_current5 = HEAP32[$ap>>2]|0;
       $159 = $arglist_current5;
       $160 = ((0) + 4|0);
       $expanded78 = $160;
       $expanded77 = (($expanded78) - 1)|0;
       $161 = (($159) + ($expanded77))|0;
       $162 = ((0) + 4|0);
       $expanded82 = $162;
       $expanded81 = (($expanded82) - 1)|0;
       $expanded80 = $expanded81 ^ -1;
       $163 = $161 & $expanded80;
       $164 = $163;
       $165 = HEAP32[$164>>2]|0;
       $arglist_next6 = ((($164)) + 4|0);
       HEAP32[$ap>>2] = $arglist_next6;
       $166 = $165;
       $260 = $166;$287 = $1165;
       break L64;
       break;
      }
      case 10:  {
       $arglist_current8 = HEAP32[$ap>>2]|0;
       $167 = $arglist_current8;
       $168 = ((0) + 4|0);
       $expanded85 = $168;
       $expanded84 = (($expanded85) - 1)|0;
       $169 = (($167) + ($expanded84))|0;
       $170 = ((0) + 4|0);
       $expanded89 = $170;
       $expanded88 = (($expanded89) - 1)|0;
       $expanded87 = $expanded88 ^ -1;
       $171 = $169 & $expanded87;
       $172 = $171;
       $173 = HEAP32[$172>>2]|0;
       $arglist_next9 = ((($172)) + 4|0);
       HEAP32[$ap>>2] = $arglist_next9;
       $174 = ($173|0)<(0);
       $175 = $174 << 31 >> 31;
       $260 = $173;$287 = $175;
       break L64;
       break;
      }
      case 11:  {
       $arglist_current11 = HEAP32[$ap>>2]|0;
       $176 = $arglist_current11;
       $177 = ((0) + 4|0);
       $expanded92 = $177;
       $expanded91 = (($expanded92) - 1)|0;
       $178 = (($176) + ($expanded91))|0;
       $179 = ((0) + 4|0);
       $expanded96 = $179;
       $expanded95 = (($expanded96) - 1)|0;
       $expanded94 = $expanded95 ^ -1;
       $180 = $178 & $expanded94;
       $181 = $180;
       $182 = HEAP32[$181>>2]|0;
       $arglist_next12 = ((($181)) + 4|0);
       HEAP32[$ap>>2] = $arglist_next12;
       $260 = $182;$287 = 0;
       break L64;
       break;
      }
      case 12:  {
       $arglist_current14 = HEAP32[$ap>>2]|0;
       $183 = $arglist_current14;
       $184 = ((0) + 8|0);
       $expanded99 = $184;
       $expanded98 = (($expanded99) - 1)|0;
       $185 = (($183) + ($expanded98))|0;
       $186 = ((0) + 8|0);
       $expanded103 = $186;
       $expanded102 = (($expanded103) - 1)|0;
       $expanded101 = $expanded102 ^ -1;
       $187 = $185 & $expanded101;
       $188 = $187;
       $189 = $188;
       $190 = $189;
       $191 = HEAP32[$190>>2]|0;
       $192 = (($189) + 4)|0;
       $193 = $192;
       $194 = HEAP32[$193>>2]|0;
       $arglist_next15 = ((($188)) + 8|0);
       HEAP32[$ap>>2] = $arglist_next15;
       $260 = $191;$287 = $194;
       break L64;
       break;
      }
      case 13:  {
       $arglist_current17 = HEAP32[$ap>>2]|0;
       $195 = $arglist_current17;
       $196 = ((0) + 4|0);
       $expanded106 = $196;
       $expanded105 = (($expanded106) - 1)|0;
       $197 = (($195) + ($expanded105))|0;
       $198 = ((0) + 4|0);
       $expanded110 = $198;
       $expanded109 = (($expanded110) - 1)|0;
       $expanded108 = $expanded109 ^ -1;
       $199 = $197 & $expanded108;
       $200 = $199;
       $201 = HEAP32[$200>>2]|0;
       $arglist_next18 = ((($200)) + 4|0);
       HEAP32[$ap>>2] = $arglist_next18;
       $202 = $201&65535;
       $203 = $202 << 16 >> 16;
       $204 = ($203|0)<(0);
       $205 = $204 << 31 >> 31;
       $sext101 = $201 << 16;
       $206 = $sext101 >> 16;
       $260 = $206;$287 = $205;
       break L64;
       break;
      }
      case 14:  {
       $arglist_current20 = HEAP32[$ap>>2]|0;
       $207 = $arglist_current20;
       $208 = ((0) + 4|0);
       $expanded113 = $208;
       $expanded112 = (($expanded113) - 1)|0;
       $209 = (($207) + ($expanded112))|0;
       $210 = ((0) + 4|0);
       $expanded117 = $210;
       $expanded116 = (($expanded117) - 1)|0;
       $expanded115 = $expanded116 ^ -1;
       $211 = $209 & $expanded115;
       $212 = $211;
       $213 = HEAP32[$212>>2]|0;
       $arglist_next21 = ((($212)) + 4|0);
       HEAP32[$ap>>2] = $arglist_next21;
       $$mask1$i37 = $213 & 65535;
       $260 = $$mask1$i37;$287 = 0;
       break L64;
       break;
      }
      case 15:  {
       $arglist_current23 = HEAP32[$ap>>2]|0;
       $214 = $arglist_current23;
       $215 = ((0) + 4|0);
       $expanded120 = $215;
       $expanded119 = (($expanded120) - 1)|0;
       $216 = (($214) + ($expanded119))|0;
       $217 = ((0) + 4|0);
       $expanded124 = $217;
       $expanded123 = (($expanded124) - 1)|0;
       $expanded122 = $expanded123 ^ -1;
       $218 = $216 & $expanded122;
       $219 = $218;
       $220 = HEAP32[$219>>2]|0;
       $arglist_next24 = ((($219)) + 4|0);
       HEAP32[$ap>>2] = $arglist_next24;
       $221 = $220&255;
       $222 = $221 << 24 >> 24;
       $223 = ($222|0)<(0);
       $224 = $223 << 31 >> 31;
       $sext = $220 << 24;
       $225 = $sext >> 24;
       $260 = $225;$287 = $224;
       break L64;
       break;
      }
      case 16:  {
       $arglist_current26 = HEAP32[$ap>>2]|0;
       $226 = $arglist_current26;
       $227 = ((0) + 4|0);
       $expanded127 = $227;
       $expanded126 = (($expanded127) - 1)|0;
       $228 = (($226) + ($expanded126))|0;
       $229 = ((0) + 4|0);
       $expanded131 = $229;
       $expanded130 = (($expanded131) - 1)|0;
       $expanded129 = $expanded130 ^ -1;
       $230 = $228 & $expanded129;
       $231 = $230;
       $232 = HEAP32[$231>>2]|0;
       $arglist_next27 = ((($231)) + 4|0);
       HEAP32[$ap>>2] = $arglist_next27;
       $$mask$i38 = $232 & 255;
       $260 = $$mask$i38;$287 = 0;
       break L64;
       break;
      }
      case 17:  {
       $arglist_current29 = HEAP32[$ap>>2]|0;
       $233 = $arglist_current29;
       $234 = ((0) + 8|0);
       $expanded134 = $234;
       $expanded133 = (($expanded134) - 1)|0;
       $235 = (($233) + ($expanded133))|0;
       $236 = ((0) + 8|0);
       $expanded138 = $236;
       $expanded137 = (($expanded138) - 1)|0;
       $expanded136 = $expanded137 ^ -1;
       $237 = $235 & $expanded136;
       $238 = $237;
       $239 = +HEAPF64[$238>>3];
       $arglist_next30 = ((($238)) + 8|0);
       HEAP32[$ap>>2] = $arglist_next30;
       HEAPF64[tempDoublePtr>>3] = $239;$240 = HEAP32[tempDoublePtr>>2]|0;
       $241 = HEAP32[tempDoublePtr+4>>2]|0;
       $260 = $240;$287 = $241;
       break L64;
       break;
      }
      case 18:  {
       $arglist_current32 = HEAP32[$ap>>2]|0;
       $242 = $arglist_current32;
       $243 = ((0) + 8|0);
       $expanded141 = $243;
       $expanded140 = (($expanded141) - 1)|0;
       $244 = (($242) + ($expanded140))|0;
       $245 = ((0) + 8|0);
       $expanded145 = $245;
       $expanded144 = (($expanded145) - 1)|0;
       $expanded143 = $expanded144 ^ -1;
       $246 = $244 & $expanded143;
       $247 = $246;
       $248 = +HEAPF64[$247>>3];
       $arglist_next33 = ((($247)) + 8|0);
       HEAP32[$ap>>2] = $arglist_next33;
       HEAPF64[tempDoublePtr>>3] = $248;$249 = HEAP32[tempDoublePtr>>2]|0;
       $250 = HEAP32[tempDoublePtr+4>>2]|0;
       $260 = $249;$287 = $250;
       break L64;
       break;
      }
      default: {
       $260 = $1166;$287 = $1165;
       break L64;
      }
      }
     } while(0);
    }
   }
  } while(0);
  if ((label|0) == 62) {
   label = 0;
   if ($1) {
    $260 = $1168;$287 = $1167;
   } else {
    $1165 = $1167;$1166 = $1168;$cnt$0 = $cnt$1;$fmt89 = $$lcssa448;$l$0 = $35;$l10n$0 = $l10n$3;
    continue;
   }
  }
  $251 = HEAP8[$fmt92$lcssa446>>0]|0;
  $252 = $251 << 24 >> 24;
  $253 = ($st$0$lcssa447|0)!=(0);
  $254 = $252 & 15;
  $255 = ($254|0)==(3);
  $or$cond15 = $253 & $255;
  $256 = $252 & -33;
  $t$0 = $or$cond15 ? $256 : $252;
  $257 = $fl$1 & 8192;
  $258 = ($257|0)==(0);
  $259 = $fl$1 & -65537;
  $fl$1$ = $258 ? $fl$1 : $259;
  L86: do {
   switch ($t$0|0) {
   case 110:  {
    switch ($st$0$lcssa447|0) {
    case 0:  {
     $261 = $260;
     HEAP32[$261>>2] = $cnt$1;
     $1165 = $287;$1166 = $260;$cnt$0 = $cnt$1;$fmt89 = $$lcssa448;$l$0 = $35;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 1:  {
     $262 = $260;
     HEAP32[$262>>2] = $cnt$1;
     $1165 = $287;$1166 = $260;$cnt$0 = $cnt$1;$fmt89 = $$lcssa448;$l$0 = $35;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 2:  {
     $263 = ($cnt$1|0)<(0);
     $264 = $263 << 31 >> 31;
     $265 = $260;
     $266 = $265;
     $267 = $266;
     HEAP32[$267>>2] = $cnt$1;
     $268 = (($266) + 4)|0;
     $269 = $268;
     HEAP32[$269>>2] = $264;
     $1165 = $287;$1166 = $260;$cnt$0 = $cnt$1;$fmt89 = $$lcssa448;$l$0 = $35;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 3:  {
     $270 = $cnt$1&65535;
     $271 = $260;
     HEAP16[$271>>1] = $270;
     $1165 = $287;$1166 = $260;$cnt$0 = $cnt$1;$fmt89 = $$lcssa448;$l$0 = $35;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 4:  {
     $272 = $cnt$1&255;
     $273 = $260;
     HEAP8[$273>>0] = $272;
     $1165 = $287;$1166 = $260;$cnt$0 = $cnt$1;$fmt89 = $$lcssa448;$l$0 = $35;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 6:  {
     $274 = $260;
     HEAP32[$274>>2] = $cnt$1;
     $1165 = $287;$1166 = $260;$cnt$0 = $cnt$1;$fmt89 = $$lcssa448;$l$0 = $35;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 7:  {
     $275 = ($cnt$1|0)<(0);
     $276 = $275 << 31 >> 31;
     $277 = $260;
     $278 = $277;
     $279 = $278;
     HEAP32[$279>>2] = $cnt$1;
     $280 = (($278) + 4)|0;
     $281 = $280;
     HEAP32[$281>>2] = $276;
     $1165 = $287;$1166 = $260;$cnt$0 = $cnt$1;$fmt89 = $$lcssa448;$l$0 = $35;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    default: {
     $1165 = $287;$1166 = $260;$cnt$0 = $cnt$1;$fmt89 = $$lcssa448;$l$0 = $35;$l10n$0 = $l10n$3;
     continue L1;
    }
    }
    break;
   }
   case 112:  {
    $282 = ($p$0>>>0)>(8);
    $283 = $282 ? $p$0 : 8;
    $284 = $fl$1$ | 8;
    $fl$3 = $284;$p$1 = $283;$t$1 = 120;
    label = 73;
    break;
   }
   case 88: case 120:  {
    $fl$3 = $fl$1$;$p$1 = $p$0;$t$1 = $t$0;
    label = 73;
    break;
   }
   case 111:  {
    $308 = ($260|0)==(0);
    $309 = ($287|0)==(0);
    $310 = $308 & $309;
    if ($310) {
     $$0$lcssa$i51 = $2;
    } else {
     $$03$i48 = $2;$312 = $260;$316 = $287;
     while(1) {
      $311 = $312 & 7;
      $313 = $311 | 48;
      $314 = $313&255;
      $315 = ((($$03$i48)) + -1|0);
      HEAP8[$315>>0] = $314;
      $317 = (_bitshift64Lshr(($312|0),($316|0),3)|0);
      $318 = tempRet0;
      $319 = ($317|0)==(0);
      $320 = ($318|0)==(0);
      $321 = $319 & $320;
      if ($321) {
       $$0$lcssa$i51 = $315;
       break;
      } else {
       $$03$i48 = $315;$312 = $317;$316 = $318;
      }
     }
    }
    $322 = $fl$1$ & 8;
    $323 = ($322|0)==(0);
    $or$cond19 = $323 | $310;
    $$24 = $or$cond19 ? 4192 : (4197);
    $324 = $or$cond19&1;
    $$25 = $324 ^ 1;
    $362 = $260;$364 = $287;$a$0 = $$0$lcssa$i51;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $$25;$prefix$1 = $$24;
    label = 89;
    break;
   }
   case 105: case 100:  {
    $325 = ($287|0)<(0);
    if ($325) {
     $326 = (_i64Subtract(0,0,($260|0),($287|0))|0);
     $327 = tempRet0;
     $332 = $327;$334 = $326;$pl$0 = 1;$prefix$0 = 4192;
     label = 84;
     break L86;
    }
    $328 = $fl$1$ & 2048;
    $329 = ($328|0)==(0);
    if ($329) {
     $330 = $fl$1$ & 1;
     $331 = ($330|0)==(0);
     $$ = $331 ? 4192 : (4194);
     $332 = $287;$334 = $260;$pl$0 = $330;$prefix$0 = $$;
     label = 84;
    } else {
     $332 = $287;$334 = $260;$pl$0 = 1;$prefix$0 = (4193);
     label = 84;
    }
    break;
   }
   case 117:  {
    $332 = $287;$334 = $260;$pl$0 = 0;$prefix$0 = 4192;
    label = 84;
    break;
   }
   case 99:  {
    $374 = $260&255;
    HEAP8[$4>>0] = $374;
    $1169 = $287;$1170 = $260;$a$2 = $4;$fl$6 = $259;$p$5 = 1;$pl$2 = 0;$prefix$2 = 4192;$z$2 = $2;
    break;
   }
   case 109:  {
    $375 = (___errno_location()|0);
    $376 = HEAP32[$375>>2]|0;
    $377 = (_strerror(($376|0))|0);
    $a$1 = $377;
    label = 94;
    break;
   }
   case 115:  {
    $378 = $260;
    $379 = ($260|0)!=(0);
    $380 = $379 ? $378 : 4202;
    $a$1 = $380;
    label = 94;
    break;
   }
   case 67:  {
    HEAP32[$wc>>2] = $260;
    HEAP32[$5>>2] = 0;
    $1173 = $wc;$1174 = $6;$p$4274 = -1;
    label = 97;
    break;
   }
   case 83:  {
    $387 = $260;
    $388 = ($p$0|0)==(0);
    if ($388) {
     $1175 = $260;$1176 = $387;$i$0$lcssa275 = 0;
     label = 102;
    } else {
     $1173 = $387;$1174 = $260;$p$4274 = $p$0;
     label = 97;
    }
    break;
   }
   case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
    HEAP32[tempDoublePtr>>2] = $260;HEAP32[tempDoublePtr+4>>2] = $287;$426 = +HEAPF64[tempDoublePtr>>3];
    HEAP32[$e2$i>>2] = 0;
    $427 = ($287|0)<(0);
    if ($427) {
     $428 = -$426;
     $$07$i = $428;$pl$0$i = 1;$prefix$0$i = 4209;
    } else {
     $429 = $fl$1$ & 2048;
     $430 = ($429|0)==(0);
     if ($430) {
      $431 = $fl$1$ & 1;
      $432 = ($431|0)==(0);
      $$$i = $432 ? (4210) : (4215);
      $$07$i = $426;$pl$0$i = $431;$prefix$0$i = $$$i;
     } else {
      $$07$i = $426;$pl$0$i = 1;$prefix$0$i = (4212);
     }
    }
    HEAPF64[tempDoublePtr>>3] = $$07$i;$433 = HEAP32[tempDoublePtr>>2]|0;
    $434 = HEAP32[tempDoublePtr+4>>2]|0;
    $435 = $434 & 2146435072;
    $436 = ($435>>>0)<(2146435072);
    $437 = (0)<(0);
    $438 = ($435|0)==(2146435072);
    $439 = $438 & $437;
    $440 = $436 | $439;
    do {
     if ($440) {
      $467 = (+_frexpl($$07$i,$e2$i));
      $468 = $467 * 2.0;
      $469 = $468 != 0.0;
      if ($469) {
       $470 = HEAP32[$e2$i>>2]|0;
       $471 = (($470) + -1)|0;
       HEAP32[$e2$i>>2] = $471;
      }
      $472 = $t$0 | 32;
      $473 = ($472|0)==(97);
      if ($473) {
       $474 = $t$0 & 32;
       $475 = ($474|0)==(0);
       $476 = ((($prefix$0$i)) + 9|0);
       $prefix$0$$i = $475 ? $prefix$0$i : $476;
       $477 = $pl$0$i | 2;
       $478 = ($p$0>>>0)>(11);
       $479 = (12 - ($p$0))|0;
       $480 = ($479|0)==(0);
       $481 = $478 | $480;
       do {
        if ($481) {
         $$1$i = $468;
        } else {
         $re$1179$i = $479;$round$0178$i = 8.0;
         while(1) {
          $482 = (($re$1179$i) + -1)|0;
          $483 = $round$0178$i * 16.0;
          $484 = ($482|0)==(0);
          if ($484) {
           $$lcssa474 = $483;
           break;
          } else {
           $re$1179$i = $482;$round$0178$i = $483;
          }
         }
         $485 = HEAP8[$prefix$0$$i>>0]|0;
         $486 = ($485<<24>>24)==(45);
         if ($486) {
          $487 = -$468;
          $488 = $487 - $$lcssa474;
          $489 = $$lcssa474 + $488;
          $490 = -$489;
          $$1$i = $490;
          break;
         } else {
          $491 = $468 + $$lcssa474;
          $492 = $491 - $$lcssa474;
          $$1$i = $492;
          break;
         }
        }
       } while(0);
       $493 = HEAP32[$e2$i>>2]|0;
       $494 = ($493|0)<(0);
       $495 = (0 - ($493))|0;
       $496 = $494 ? $495 : $493;
       $497 = ($496|0)<(0);
       if ($497) {
        $498 = ($496|0)<(0);
        $499 = $498 << 31 >> 31;
        $$05$i$i = $7;$500 = $496;$501 = $499;
        while(1) {
         $502 = (___uremdi3(($500|0),($501|0),10,0)|0);
         $503 = tempRet0;
         $504 = $502 | 48;
         $505 = $504&255;
         $506 = ((($$05$i$i)) + -1|0);
         HEAP8[$506>>0] = $505;
         $507 = (___udivdi3(($500|0),($501|0),10,0)|0);
         $508 = tempRet0;
         $509 = ($501>>>0)>(9);
         $510 = ($500>>>0)>(4294967295);
         $511 = ($501|0)==(9);
         $512 = $511 & $510;
         $513 = $509 | $512;
         if ($513) {
          $$05$i$i = $506;$500 = $507;$501 = $508;
         } else {
          $$lcssa475 = $506;$1177 = $507;$1178 = $508;
          break;
         }
        }
        $$0$lcssa$i48$i = $$lcssa475;$$01$lcssa$off0$i$i = $1177;
       } else {
        $$0$lcssa$i48$i = $7;$$01$lcssa$off0$i$i = $496;
       }
       $514 = ($$01$lcssa$off0$i$i|0)==(0);
       if ($514) {
        $$1$lcssa$i$i = $$0$lcssa$i48$i;
       } else {
        $$12$i$i = $$0$lcssa$i48$i;$y$03$i$i = $$01$lcssa$off0$i$i;
        while(1) {
         $515 = (($y$03$i$i>>>0) % 10)&-1;
         $516 = $515 | 48;
         $517 = $516&255;
         $518 = ((($$12$i$i)) + -1|0);
         HEAP8[$518>>0] = $517;
         $519 = (($y$03$i$i>>>0) / 10)&-1;
         $520 = ($y$03$i$i>>>0)<(10);
         if ($520) {
          $$1$lcssa$i$i = $518;
          break;
         } else {
          $$12$i$i = $518;$y$03$i$i = $519;
         }
        }
       }
       $521 = ($$1$lcssa$i$i|0)==($7|0);
       if ($521) {
        HEAP8[$8>>0] = 48;
        $estr$0$i = $8;
       } else {
        $estr$0$i = $$1$lcssa$i$i;
       }
       $522 = HEAP32[$e2$i>>2]|0;
       $523 = $522 >> 31;
       $524 = $523 & 2;
       $525 = (($524) + 43)|0;
       $526 = $525&255;
       $527 = ((($estr$0$i)) + -1|0);
       HEAP8[$527>>0] = $526;
       $528 = (($t$0) + 15)|0;
       $529 = $528&255;
       $530 = ((($estr$0$i)) + -2|0);
       HEAP8[$530>>0] = $529;
       $531 = $fl$1$ & 8;
       $532 = ($531|0)==(0);
       if ($532) {
        $notrhs$i = ($p$0|0)<(1);
        if ($notrhs$i) {
         $$2$us$us$i = $$1$i;$s$0$us$us$i = $buf$i;
         while(1) {
          $533 = (~~(($$2$us$us$i)));
          $534 = (4176 + ($533)|0);
          $535 = HEAP8[$534>>0]|0;
          $536 = $535&255;
          $537 = $536 | $474;
          $538 = $537&255;
          $539 = ((($s$0$us$us$i)) + 1|0);
          HEAP8[$s$0$us$us$i>>0] = $538;
          $540 = (+($533|0));
          $541 = $$2$us$us$i - $540;
          $542 = $541 * 16.0;
          $543 = $539;
          $544 = (($543) - ($0))|0;
          $545 = ($544|0)!=(1);
          $notlhs$us$us$i = $542 == 0.0;
          $or$cond$i79 = $545 | $notlhs$us$us$i;
          if ($or$cond$i79) {
           $s$1$us$us$i = $539;
          } else {
           $546 = ((($s$0$us$us$i)) + 2|0);
           HEAP8[$539>>0] = 46;
           $s$1$us$us$i = $546;
          }
          $547 = $542 != 0.0;
          if ($547) {
           $$2$us$us$i = $542;$s$0$us$us$i = $s$1$us$us$i;
          } else {
           $s$1$lcssa$i = $s$1$us$us$i;
           break;
          }
         }
        } else {
         $$2$us$i = $$1$i;$s$0$us$i = $buf$i;
         while(1) {
          $548 = (~~(($$2$us$i)));
          $549 = (4176 + ($548)|0);
          $550 = HEAP8[$549>>0]|0;
          $551 = $550&255;
          $552 = $551 | $474;
          $553 = $552&255;
          $554 = ((($s$0$us$i)) + 1|0);
          HEAP8[$s$0$us$i>>0] = $553;
          $555 = (+($548|0));
          $556 = $$2$us$i - $555;
          $557 = $556 * 16.0;
          $558 = $554;
          $559 = (($558) - ($0))|0;
          $560 = ($559|0)==(1);
          if ($560) {
           $561 = ((($s$0$us$i)) + 2|0);
           HEAP8[$554>>0] = 46;
           $s$1$us$i = $561;
          } else {
           $s$1$us$i = $554;
          }
          $562 = $557 != 0.0;
          if ($562) {
           $$2$us$i = $557;$s$0$us$i = $s$1$us$i;
          } else {
           $s$1$lcssa$i = $s$1$us$i;
           break;
          }
         }
        }
       } else {
        $$2$i = $$1$i;$s$0$i = $buf$i;
        while(1) {
         $563 = (~~(($$2$i)));
         $564 = (4176 + ($563)|0);
         $565 = HEAP8[$564>>0]|0;
         $566 = $565&255;
         $567 = $566 | $474;
         $568 = $567&255;
         $569 = ((($s$0$i)) + 1|0);
         HEAP8[$s$0$i>>0] = $568;
         $570 = (+($563|0));
         $571 = $$2$i - $570;
         $572 = $571 * 16.0;
         $573 = $569;
         $574 = (($573) - ($0))|0;
         $575 = ($574|0)==(1);
         if ($575) {
          $576 = ((($s$0$i)) + 2|0);
          HEAP8[$569>>0] = 46;
          $s$1$i = $576;
         } else {
          $s$1$i = $569;
         }
         $577 = $572 != 0.0;
         if ($577) {
          $$2$i = $572;$s$0$i = $s$1$i;
         } else {
          $s$1$lcssa$i = $s$1$i;
          break;
         }
        }
       }
       $578 = ($p$0|0)!=(0);
       $$pre300$i = $s$1$lcssa$i;
       $579 = (($11) + ($$pre300$i))|0;
       $580 = ($579|0)<($p$0|0);
       $or$cond331 = $578 & $580;
       $581 = $530;
       $582 = (($12) + ($p$0))|0;
       $583 = (($582) - ($581))|0;
       $584 = $530;
       $585 = (($10) - ($584))|0;
       $586 = (($585) + ($$pre300$i))|0;
       $l$0$i = $or$cond331 ? $583 : $586;
       $587 = (($l$0$i) + ($477))|0;
       $588 = $fl$1$ & 73728;
       $589 = ($588|0)==(0);
       $590 = ($w$1|0)>($587|0);
       $or$cond$i52$i = $589 & $590;
       if ($or$cond$i52$i) {
        $591 = (($w$1) - ($587))|0;
        $592 = ($591>>>0)>(256);
        $593 = $592 ? 256 : $591;
        _memset(($pad$i|0),32,($593|0))|0;
        $594 = ($591>>>0)>(255);
        if ($594) {
         $$01$i54$i = $591;
         while(1) {
          (___fwritex($pad$i,256,$f)|0);
          $595 = (($$01$i54$i) + -256)|0;
          $596 = ($595>>>0)>(255);
          if ($596) {
           $$01$i54$i = $595;
          } else {
           break;
          }
         }
         $597 = $591 & 255;
         $$0$lcssa$i56$i = $597;
        } else {
         $$0$lcssa$i56$i = $591;
        }
        (___fwritex($pad$i,$$0$lcssa$i56$i,$f)|0);
       }
       (___fwritex($prefix$0$$i,$477,$f)|0);
       $598 = ($588|0)==(65536);
       $or$cond$i59$i = $598 & $590;
       if ($or$cond$i59$i) {
        $599 = (($w$1) - ($587))|0;
        $600 = ($599>>>0)>(256);
        $601 = $600 ? 256 : $599;
        _memset(($pad$i|0),48,($601|0))|0;
        $602 = ($599>>>0)>(255);
        if ($602) {
         $$01$i61$i = $599;
         while(1) {
          (___fwritex($pad$i,256,$f)|0);
          $603 = (($$01$i61$i) + -256)|0;
          $604 = ($603>>>0)>(255);
          if ($604) {
           $$01$i61$i = $603;
          } else {
           break;
          }
         }
         $605 = $599 & 255;
         $$0$lcssa$i63$i = $605;
        } else {
         $$0$lcssa$i63$i = $599;
        }
        (___fwritex($pad$i,$$0$lcssa$i63$i,$f)|0);
       }
       $606 = (($$pre300$i) - ($0))|0;
       (___fwritex($buf$i,$606,$f)|0);
       $607 = $530;
       $608 = (($9) - ($607))|0;
       $609 = (($l$0$i) - ($608))|0;
       $610 = (($609) - ($606))|0;
       $611 = ($610|0)>(0);
       if ($611) {
        $612 = ($610>>>0)>(256);
        $613 = $612 ? 256 : $610;
        _memset(($pad$i|0),48,($613|0))|0;
        $614 = ($610>>>0)>(255);
        if ($614) {
         $$01$i67$i = $610;
         while(1) {
          (___fwritex($pad$i,256,$f)|0);
          $615 = (($$01$i67$i) + -256)|0;
          $616 = ($615>>>0)>(255);
          if ($616) {
           $$01$i67$i = $615;
          } else {
           break;
          }
         }
         $617 = $610 & 255;
         $$0$lcssa$i69$i = $617;
        } else {
         $$0$lcssa$i69$i = $610;
        }
        (___fwritex($pad$i,$$0$lcssa$i69$i,$f)|0);
       }
       (___fwritex($530,$608,$f)|0);
       $618 = ($588|0)==(8192);
       $or$cond$i72$i = $618 & $590;
       if ($or$cond$i72$i) {
        $619 = (($w$1) - ($587))|0;
        $620 = ($619>>>0)>(256);
        $621 = $620 ? 256 : $619;
        _memset(($pad$i|0),32,($621|0))|0;
        $622 = ($619>>>0)>(255);
        if ($622) {
         $$01$i74$i = $619;
         while(1) {
          (___fwritex($pad$i,256,$f)|0);
          $623 = (($$01$i74$i) + -256)|0;
          $624 = ($623>>>0)>(255);
          if ($624) {
           $$01$i74$i = $623;
          } else {
           break;
          }
         }
         $625 = $619 & 255;
         $$0$lcssa$i76$i = $625;
        } else {
         $$0$lcssa$i76$i = $619;
        }
        (___fwritex($pad$i,$$0$lcssa$i76$i,$f)|0);
       }
       $w$$i = $590 ? $w$1 : $587;
       $$0$i = $w$$i;
       break;
      }
      $626 = ($p$0|0)<(0);
      $$p$i = $626 ? 6 : $p$0;
      if ($469) {
       $627 = $468 * 268435456.0;
       $628 = HEAP32[$e2$i>>2]|0;
       $629 = (($628) + -28)|0;
       HEAP32[$e2$i>>2] = $629;
       $$3$i = $627;$630 = $629;
      } else {
       $$pre$i = HEAP32[$e2$i>>2]|0;
       $$3$i = $468;$630 = $$pre$i;
      }
      $631 = ($630|0)<(0);
      $$31$i = $631 ? $big$i : $13;
      $632 = $$31$i;
      $$4$i = $$3$i;$z$0$i = $$31$i;
      while(1) {
       $633 = (~~(($$4$i))>>>0);
       HEAP32[$z$0$i>>2] = $633;
       $634 = ((($z$0$i)) + 4|0);
       $635 = (+($633>>>0));
       $636 = $$4$i - $635;
       $637 = $636 * 1.0E+9;
       $638 = $637 != 0.0;
       if ($638) {
        $$4$i = $637;$z$0$i = $634;
       } else {
        $$lcssa451 = $634;
        break;
       }
      }
      $$pr$i = HEAP32[$e2$i>>2]|0;
      $639 = ($$pr$i|0)>(0);
      if ($639) {
       $640 = $$pr$i;$a$1253$i = $$31$i;$z$1252$i = $$lcssa451;
       while(1) {
        $641 = ($640|0)>(29);
        $642 = $641 ? 29 : $640;
        $d$0245$i = ((($z$1252$i)) + -4|0);
        $643 = ($d$0245$i>>>0)<($a$1253$i>>>0);
        do {
         if ($643) {
          $a$2$ph$i = $a$1253$i;
         } else {
          $carry$0246$i = 0;$d$0247$i = $d$0245$i;
          while(1) {
           $644 = HEAP32[$d$0247$i>>2]|0;
           $645 = (_bitshift64Shl(($644|0),0,($642|0))|0);
           $646 = tempRet0;
           $647 = (_i64Add(($645|0),($646|0),($carry$0246$i|0),0)|0);
           $648 = tempRet0;
           $649 = (___uremdi3(($647|0),($648|0),1000000000,0)|0);
           $650 = tempRet0;
           HEAP32[$d$0247$i>>2] = $649;
           $651 = (___udivdi3(($647|0),($648|0),1000000000,0)|0);
           $652 = tempRet0;
           $d$0$i = ((($d$0247$i)) + -4|0);
           $653 = ($d$0$i>>>0)<($a$1253$i>>>0);
           if ($653) {
            $$lcssa452 = $651;
            break;
           } else {
            $carry$0246$i = $651;$d$0247$i = $d$0$i;
           }
          }
          $654 = ($$lcssa452|0)==(0);
          if ($654) {
           $a$2$ph$i = $a$1253$i;
           break;
          }
          $655 = ((($a$1253$i)) + -4|0);
          HEAP32[$655>>2] = $$lcssa452;
          $a$2$ph$i = $655;
         }
        } while(0);
        $z$2$i = $z$1252$i;
        while(1) {
         $656 = ($z$2$i>>>0)>($a$2$ph$i>>>0);
         if (!($656)) {
          $z$2$i$lcssa = $z$2$i;
          break;
         }
         $657 = ((($z$2$i)) + -4|0);
         $658 = HEAP32[$657>>2]|0;
         $659 = ($658|0)==(0);
         if ($659) {
          $z$2$i = $657;
         } else {
          $z$2$i$lcssa = $z$2$i;
          break;
         }
        }
        $660 = HEAP32[$e2$i>>2]|0;
        $661 = (($660) - ($642))|0;
        HEAP32[$e2$i>>2] = $661;
        $662 = ($661|0)>(0);
        if ($662) {
         $640 = $661;$a$1253$i = $a$2$ph$i;$z$1252$i = $z$2$i$lcssa;
        } else {
         $$pr146$i = $661;$a$1$lcssa$i = $a$2$ph$i;$z$1$lcssa$i = $z$2$i$lcssa;
         break;
        }
       }
      } else {
       $$pr146$i = $$pr$i;$a$1$lcssa$i = $$31$i;$z$1$lcssa$i = $$lcssa451;
      }
      $663 = ($$pr146$i|0)<(0);
      L220: do {
       if ($663) {
        $664 = (($$p$i) + 25)|0;
        $665 = (($664|0) / 9)&-1;
        $666 = (($665) + 1)|0;
        $667 = ($472|0)==(102);
        if (!($667)) {
         $700 = $$pr146$i;$a$3240$i = $a$1$lcssa$i;$z$3239$i = $z$1$lcssa$i;
         while(1) {
          $699 = (0 - ($700))|0;
          $701 = ($699|0)>(9);
          $702 = $701 ? 9 : $699;
          $703 = ($a$3240$i>>>0)<($z$3239$i>>>0);
          do {
           if ($703) {
            $707 = 1 << $702;
            $708 = (($707) + -1)|0;
            $709 = 1000000000 >>> $702;
            $carry3$0234$i = 0;$d$1233$i = $a$3240$i;
            while(1) {
             $710 = HEAP32[$d$1233$i>>2]|0;
             $711 = $710 & $708;
             $712 = $710 >>> $702;
             $713 = (($712) + ($carry3$0234$i))|0;
             HEAP32[$d$1233$i>>2] = $713;
             $714 = Math_imul($711, $709)|0;
             $715 = ((($d$1233$i)) + 4|0);
             $716 = ($715>>>0)<($z$3239$i>>>0);
             if ($716) {
              $carry3$0234$i = $714;$d$1233$i = $715;
             } else {
              $$lcssa454 = $714;
              break;
             }
            }
            $717 = HEAP32[$a$3240$i>>2]|0;
            $718 = ($717|0)==(0);
            $719 = ((($a$3240$i)) + 4|0);
            $$a$3$i = $718 ? $719 : $a$3240$i;
            $720 = ($$lcssa454|0)==(0);
            if ($720) {
             $$a$3306$i = $$a$3$i;$z$4$i = $z$3239$i;
             break;
            }
            $721 = ((($z$3239$i)) + 4|0);
            HEAP32[$z$3239$i>>2] = $$lcssa454;
            $$a$3306$i = $$a$3$i;$z$4$i = $721;
           } else {
            $704 = HEAP32[$a$3240$i>>2]|0;
            $705 = ($704|0)==(0);
            $706 = ((($a$3240$i)) + 4|0);
            $$a$3305$i = $705 ? $706 : $a$3240$i;
            $$a$3306$i = $$a$3305$i;$z$4$i = $z$3239$i;
           }
          } while(0);
          $722 = $z$4$i;
          $723 = $$a$3306$i;
          $724 = (($722) - ($723))|0;
          $725 = $724 >> 2;
          $726 = ($725|0)>($666|0);
          $727 = (($$a$3306$i) + ($666<<2)|0);
          $$z$4$i = $726 ? $727 : $z$4$i;
          $728 = HEAP32[$e2$i>>2]|0;
          $729 = (($728) + ($702))|0;
          HEAP32[$e2$i>>2] = $729;
          $730 = ($729|0)<(0);
          if ($730) {
           $700 = $729;$a$3240$i = $$a$3306$i;$z$3239$i = $$z$4$i;
          } else {
           $a$3$lcssa$i = $$a$3306$i;$z$3$lcssa$i = $$z$4$i;
           break L220;
          }
         }
        }
        $668 = (($$31$i) + ($666<<2)|0);
        $670 = $$pr146$i;$a$3240$us$i = $a$1$lcssa$i;$z$3239$us$i = $z$1$lcssa$i;
        while(1) {
         $669 = (0 - ($670))|0;
         $671 = ($669|0)>(9);
         $672 = $671 ? 9 : $669;
         $673 = ($a$3240$us$i>>>0)<($z$3239$us$i>>>0);
         do {
          if ($673) {
           $698 = 1 << $672;
           $691 = (($698) + -1)|0;
           $695 = 1000000000 >>> $672;
           $carry3$0234$us$i = 0;$d$1233$us$i = $a$3240$us$i;
           while(1) {
            $689 = HEAP32[$d$1233$us$i>>2]|0;
            $690 = $689 & $691;
            $692 = $689 >>> $672;
            $693 = (($692) + ($carry3$0234$us$i))|0;
            HEAP32[$d$1233$us$i>>2] = $693;
            $694 = Math_imul($690, $695)|0;
            $696 = ((($d$1233$us$i)) + 4|0);
            $697 = ($696>>>0)<($z$3239$us$i>>>0);
            if ($697) {
             $carry3$0234$us$i = $694;$d$1233$us$i = $696;
            } else {
             $$lcssa455 = $694;
             break;
            }
           }
           $677 = HEAP32[$a$3240$us$i>>2]|0;
           $678 = ($677|0)==(0);
           $679 = ((($a$3240$us$i)) + 4|0);
           $$a$3$us$i = $678 ? $679 : $a$3240$us$i;
           $680 = ($$lcssa455|0)==(0);
           if ($680) {
            $$a$3$us304$i = $$a$3$us$i;$z$4$us$i = $z$3239$us$i;
            break;
           }
           $681 = ((($z$3239$us$i)) + 4|0);
           HEAP32[$z$3239$us$i>>2] = $$lcssa455;
           $$a$3$us304$i = $$a$3$us$i;$z$4$us$i = $681;
          } else {
           $674 = HEAP32[$a$3240$us$i>>2]|0;
           $675 = ($674|0)==(0);
           $676 = ((($a$3240$us$i)) + 4|0);
           $$a$3$us303$i = $675 ? $676 : $a$3240$us$i;
           $$a$3$us304$i = $$a$3$us303$i;$z$4$us$i = $z$3239$us$i;
          }
         } while(0);
         $682 = $z$4$us$i;
         $683 = (($682) - ($632))|0;
         $684 = $683 >> 2;
         $685 = ($684|0)>($666|0);
         $$z$4$us$i = $685 ? $668 : $z$4$us$i;
         $686 = HEAP32[$e2$i>>2]|0;
         $687 = (($686) + ($672))|0;
         HEAP32[$e2$i>>2] = $687;
         $688 = ($687|0)<(0);
         if ($688) {
          $670 = $687;$a$3240$us$i = $$a$3$us304$i;$z$3239$us$i = $$z$4$us$i;
         } else {
          $a$3$lcssa$i = $$a$3$us304$i;$z$3$lcssa$i = $$z$4$us$i;
          break;
         }
        }
       } else {
        $a$3$lcssa$i = $a$1$lcssa$i;$z$3$lcssa$i = $z$1$lcssa$i;
       }
      } while(0);
      $731 = ($a$3$lcssa$i>>>0)<($z$3$lcssa$i>>>0);
      do {
       if ($731) {
        $732 = $a$3$lcssa$i;
        $733 = (($632) - ($732))|0;
        $734 = $733 >> 2;
        $735 = ($734*9)|0;
        $736 = HEAP32[$a$3$lcssa$i>>2]|0;
        $737 = ($736>>>0)<(10);
        if ($737) {
         $e$1$i = $735;
         break;
        } else {
         $e$0229$i = $735;$i$0228$i = 10;
        }
        while(1) {
         $738 = ($i$0228$i*10)|0;
         $739 = (($e$0229$i) + 1)|0;
         $740 = ($736>>>0)<($738>>>0);
         if ($740) {
          $e$1$i = $739;
          break;
         } else {
          $e$0229$i = $739;$i$0228$i = $738;
         }
        }
       } else {
        $e$1$i = 0;
       }
      } while(0);
      $741 = ($472|0)!=(102);
      $742 = $741 ? $e$1$i : 0;
      $743 = (($$p$i) - ($742))|0;
      $744 = ($472|0)==(103);
      $745 = ($$p$i|0)!=(0);
      $746 = $745 & $744;
      $$neg151$i = $746 << 31 >> 31;
      $747 = (($743) + ($$neg151$i))|0;
      $748 = $z$3$lcssa$i;
      $749 = (($748) - ($632))|0;
      $750 = $749 >> 2;
      $751 = ($750*9)|0;
      $752 = (($751) + -9)|0;
      $753 = ($747|0)<($752|0);
      if ($753) {
       $754 = (($747) + 9216)|0;
       $755 = (($754|0) / 9)&-1;
       $$sum$i = (($755) + -1023)|0;
       $756 = (($$31$i) + ($$sum$i<<2)|0);
       $757 = (($754|0) % 9)&-1;
       $j$0221$i = (($757) + 1)|0;
       $758 = ($j$0221$i|0)<(9);
       if ($758) {
        $i$1222$i = 10;$j$0223$i = $j$0221$i;
        while(1) {
         $759 = ($i$1222$i*10)|0;
         $j$0$i = (($j$0223$i) + 1)|0;
         $exitcond$i = ($j$0$i|0)==(9);
         if ($exitcond$i) {
          $i$1$lcssa$i = $759;
          break;
         } else {
          $i$1222$i = $759;$j$0223$i = $j$0$i;
         }
        }
       } else {
        $i$1$lcssa$i = 10;
       }
       $760 = HEAP32[$756>>2]|0;
       $761 = (($760>>>0) % ($i$1$lcssa$i>>>0))&-1;
       $762 = ($761|0)==(0);
       if ($762) {
        $$sum15$i = (($755) + -1022)|0;
        $763 = (($$31$i) + ($$sum15$i<<2)|0);
        $764 = ($763|0)==($z$3$lcssa$i|0);
        if ($764) {
         $a$7$i = $a$3$lcssa$i;$d$3$i = $756;$e$3$i = $e$1$i;
        } else {
         label = 221;
        }
       } else {
        label = 221;
       }
       do {
        if ((label|0) == 221) {
         label = 0;
         $765 = (($760>>>0) / ($i$1$lcssa$i>>>0))&-1;
         $766 = $765 & 1;
         $767 = ($766|0)==(0);
         $$20$i = $767 ? 9007199254740992.0 : 9007199254740994.0;
         $768 = (($i$1$lcssa$i|0) / 2)&-1;
         $769 = ($761>>>0)<($768>>>0);
         do {
          if ($769) {
           $small$0$i = 0.5;
          } else {
           $770 = ($761|0)==($768|0);
           if ($770) {
            $$sum16$i = (($755) + -1022)|0;
            $771 = (($$31$i) + ($$sum16$i<<2)|0);
            $772 = ($771|0)==($z$3$lcssa$i|0);
            if ($772) {
             $small$0$i = 1.0;
             break;
            }
           }
           $small$0$i = 1.5;
          }
         } while(0);
         $773 = ($pl$0$i|0)==(0);
         do {
          if ($773) {
           $round6$1$i = $$20$i;$small$1$i = $small$0$i;
          } else {
           $774 = HEAP8[$prefix$0$i>>0]|0;
           $775 = ($774<<24>>24)==(45);
           if (!($775)) {
            $round6$1$i = $$20$i;$small$1$i = $small$0$i;
            break;
           }
           $776 = -$$20$i;
           $777 = -$small$0$i;
           $round6$1$i = $776;$small$1$i = $777;
          }
         } while(0);
         $778 = (($760) - ($761))|0;
         HEAP32[$756>>2] = $778;
         $779 = $round6$1$i + $small$1$i;
         $780 = $779 != $round6$1$i;
         if (!($780)) {
          $a$7$i = $a$3$lcssa$i;$d$3$i = $756;$e$3$i = $e$1$i;
          break;
         }
         $781 = (($778) + ($i$1$lcssa$i))|0;
         HEAP32[$756>>2] = $781;
         $782 = ($781>>>0)>(999999999);
         if ($782) {
          $a$5215$i = $a$3$lcssa$i;$d$2214$i = $756;
          while(1) {
           $783 = ((($d$2214$i)) + -4|0);
           HEAP32[$d$2214$i>>2] = 0;
           $784 = ($783>>>0)<($a$5215$i>>>0);
           if ($784) {
            $785 = ((($a$5215$i)) + -4|0);
            HEAP32[$785>>2] = 0;
            $a$6$i = $785;
           } else {
            $a$6$i = $a$5215$i;
           }
           $786 = HEAP32[$783>>2]|0;
           $787 = (($786) + 1)|0;
           HEAP32[$783>>2] = $787;
           $788 = ($787>>>0)>(999999999);
           if ($788) {
            $a$5215$i = $a$6$i;$d$2214$i = $783;
           } else {
            $a$5$lcssa$i = $a$6$i;$d$2$lcssa$i = $783;
            break;
           }
          }
         } else {
          $a$5$lcssa$i = $a$3$lcssa$i;$d$2$lcssa$i = $756;
         }
         $789 = $a$5$lcssa$i;
         $790 = (($632) - ($789))|0;
         $791 = $790 >> 2;
         $792 = ($791*9)|0;
         $793 = HEAP32[$a$5$lcssa$i>>2]|0;
         $794 = ($793>>>0)<(10);
         if ($794) {
          $a$7$i = $a$5$lcssa$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $792;
          break;
         } else {
          $e$2210$i = $792;$i$2209$i = 10;
         }
         while(1) {
          $795 = ($i$2209$i*10)|0;
          $796 = (($e$2210$i) + 1)|0;
          $797 = ($793>>>0)<($795>>>0);
          if ($797) {
           $a$7$i = $a$5$lcssa$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $796;
           break;
          } else {
           $e$2210$i = $796;$i$2209$i = $795;
          }
         }
        }
       } while(0);
       $798 = ((($d$3$i)) + 4|0);
       $799 = ($z$3$lcssa$i>>>0)>($798>>>0);
       $$z$3$i = $799 ? $798 : $z$3$lcssa$i;
       $a$8$ph$i = $a$7$i;$e$4$ph$i = $e$3$i;$z$6$ph$i = $$z$3$i;
      } else {
       $a$8$ph$i = $a$3$lcssa$i;$e$4$ph$i = $e$1$i;$z$6$ph$i = $z$3$lcssa$i;
      }
      $800 = (0 - ($e$4$ph$i))|0;
      $z$6$i = $z$6$ph$i;
      while(1) {
       $801 = ($z$6$i>>>0)>($a$8$ph$i>>>0);
       if (!($801)) {
        $$lcssa275$i = 0;$z$6$i$lcssa = $z$6$i;
        break;
       }
       $802 = ((($z$6$i)) + -4|0);
       $803 = HEAP32[$802>>2]|0;
       $804 = ($803|0)==(0);
       if ($804) {
        $z$6$i = $802;
       } else {
        $$lcssa275$i = 1;$z$6$i$lcssa = $z$6$i;
        break;
       }
      }
      do {
       if ($744) {
        $805 = $745&1;
        $806 = $805 ^ 1;
        $$p$$i = (($806) + ($$p$i))|0;
        $807 = ($$p$$i|0)>($e$4$ph$i|0);
        $808 = ($e$4$ph$i|0)>(-5);
        $or$cond6$i = $807 & $808;
        if ($or$cond6$i) {
         $809 = (($t$0) + -1)|0;
         $$neg152$i = (($$p$$i) + -1)|0;
         $810 = (($$neg152$i) - ($e$4$ph$i))|0;
         $$013$i = $809;$$210$i = $810;
        } else {
         $811 = (($t$0) + -2)|0;
         $812 = (($$p$$i) + -1)|0;
         $$013$i = $811;$$210$i = $812;
        }
        $813 = $fl$1$ & 8;
        $814 = ($813|0)==(0);
        if (!($814)) {
         $$114$i = $$013$i;$$311$i = $$210$i;$$pre$phi302$iZ2D = $813;
         break;
        }
        do {
         if ($$lcssa275$i) {
          $815 = ((($z$6$i$lcssa)) + -4|0);
          $816 = HEAP32[$815>>2]|0;
          $817 = ($816|0)==(0);
          if ($817) {
           $j$2$i = 9;
           break;
          }
          $818 = (($816>>>0) % 10)&-1;
          $819 = ($818|0)==(0);
          if ($819) {
           $i$3205$i = 10;$j$1206$i = 0;
          } else {
           $j$2$i = 0;
           break;
          }
          while(1) {
           $820 = ($i$3205$i*10)|0;
           $821 = (($j$1206$i) + 1)|0;
           $822 = (($816>>>0) % ($820>>>0))&-1;
           $823 = ($822|0)==(0);
           if ($823) {
            $i$3205$i = $820;$j$1206$i = $821;
           } else {
            $j$2$i = $821;
            break;
           }
          }
         } else {
          $j$2$i = 9;
         }
        } while(0);
        $824 = $$013$i | 32;
        $825 = ($824|0)==(102);
        $826 = $z$6$i$lcssa;
        $827 = (($826) - ($632))|0;
        $828 = $827 >> 2;
        $829 = ($828*9)|0;
        $830 = (($829) + -9)|0;
        if ($825) {
         $831 = (($830) - ($j$2$i))|0;
         $832 = ($831|0)<(0);
         $$21$i = $832 ? 0 : $831;
         $833 = ($$210$i|0)<($$21$i|0);
         $$210$$22$i = $833 ? $$210$i : $$21$i;
         $$114$i = $$013$i;$$311$i = $$210$$22$i;$$pre$phi302$iZ2D = 0;
         break;
        } else {
         $834 = (($830) + ($e$4$ph$i))|0;
         $835 = (($834) - ($j$2$i))|0;
         $836 = ($835|0)<(0);
         $$23$i = $836 ? 0 : $835;
         $837 = ($$210$i|0)<($$23$i|0);
         $$210$$24$i = $837 ? $$210$i : $$23$i;
         $$114$i = $$013$i;$$311$i = $$210$$24$i;$$pre$phi302$iZ2D = 0;
         break;
        }
       } else {
        $$pre301$i = $fl$1$ & 8;
        $$114$i = $t$0;$$311$i = $$p$i;$$pre$phi302$iZ2D = $$pre301$i;
       }
      } while(0);
      $838 = $$311$i | $$pre$phi302$iZ2D;
      $839 = ($838|0)!=(0);
      $840 = $839&1;
      $841 = $$114$i | 32;
      $842 = ($841|0)==(102);
      if ($842) {
       $843 = ($e$4$ph$i|0)>(0);
       $844 = $843 ? $e$4$ph$i : 0;
       $$pn$i = $844;$estr$2$i = 0;
      } else {
       $845 = ($e$4$ph$i|0)<(0);
       $846 = $845 ? $800 : $e$4$ph$i;
       $847 = ($846|0)<(0);
       if ($847) {
        $848 = ($846|0)<(0);
        $849 = $848 << 31 >> 31;
        $$05$i79$i = $7;$850 = $846;$851 = $849;
        while(1) {
         $852 = (___uremdi3(($850|0),($851|0),10,0)|0);
         $853 = tempRet0;
         $854 = $852 | 48;
         $855 = $854&255;
         $856 = ((($$05$i79$i)) + -1|0);
         HEAP8[$856>>0] = $855;
         $857 = (___udivdi3(($850|0),($851|0),10,0)|0);
         $858 = tempRet0;
         $859 = ($851>>>0)>(9);
         $860 = ($850>>>0)>(4294967295);
         $861 = ($851|0)==(9);
         $862 = $861 & $860;
         $863 = $859 | $862;
         if ($863) {
          $$05$i79$i = $856;$850 = $857;$851 = $858;
         } else {
          $$lcssa461 = $856;$1179 = $857;$1180 = $858;
          break;
         }
        }
        $$0$lcssa$i84$i = $$lcssa461;$$01$lcssa$off0$i85$i = $1179;
       } else {
        $$0$lcssa$i84$i = $7;$$01$lcssa$off0$i85$i = $846;
       }
       $864 = ($$01$lcssa$off0$i85$i|0)==(0);
       if ($864) {
        $estr$1$ph$i = $$0$lcssa$i84$i;
       } else {
        $$12$i87$i = $$0$lcssa$i84$i;$y$03$i86$i = $$01$lcssa$off0$i85$i;
        while(1) {
         $865 = (($y$03$i86$i>>>0) % 10)&-1;
         $866 = $865 | 48;
         $867 = $866&255;
         $868 = ((($$12$i87$i)) + -1|0);
         HEAP8[$868>>0] = $867;
         $869 = (($y$03$i86$i>>>0) / 10)&-1;
         $870 = ($y$03$i86$i>>>0)<(10);
         if ($870) {
          $estr$1$ph$i = $868;
          break;
         } else {
          $$12$i87$i = $868;$y$03$i86$i = $869;
         }
        }
       }
       $871 = $estr$1$ph$i;
       $872 = (($9) - ($871))|0;
       $873 = ($872|0)<(2);
       if ($873) {
        $estr$1201$i = $estr$1$ph$i;
        while(1) {
         $874 = ((($estr$1201$i)) + -1|0);
         HEAP8[$874>>0] = 48;
         $875 = $874;
         $876 = (($9) - ($875))|0;
         $877 = ($876|0)<(2);
         if ($877) {
          $estr$1201$i = $874;
         } else {
          $estr$1$lcssa$i = $874;
          break;
         }
        }
       } else {
        $estr$1$lcssa$i = $estr$1$ph$i;
       }
       $878 = $e$4$ph$i >> 31;
       $879 = $878 & 2;
       $880 = (($879) + 43)|0;
       $881 = $880&255;
       $882 = ((($estr$1$lcssa$i)) + -1|0);
       HEAP8[$882>>0] = $881;
       $883 = $$114$i&255;
       $884 = ((($estr$1$lcssa$i)) + -2|0);
       HEAP8[$884>>0] = $883;
       $885 = $884;
       $886 = (($9) - ($885))|0;
       $$pn$i = $886;$estr$2$i = $884;
      }
      $887 = (($pl$0$i) + 1)|0;
      $888 = (($887) + ($$311$i))|0;
      $l$1$i = (($888) + ($840))|0;
      $889 = (($l$1$i) + ($$pn$i))|0;
      $890 = $fl$1$ & 73728;
      $891 = ($890|0)==(0);
      $892 = ($w$1|0)>($889|0);
      $or$cond$i93$i = $891 & $892;
      if ($or$cond$i93$i) {
       $893 = (($w$1) - ($889))|0;
       $894 = ($893>>>0)>(256);
       $895 = $894 ? 256 : $893;
       _memset(($pad$i|0),32,($895|0))|0;
       $896 = ($893>>>0)>(255);
       if ($896) {
        $$01$i95$i = $893;
        while(1) {
         (___fwritex($pad$i,256,$f)|0);
         $897 = (($$01$i95$i) + -256)|0;
         $898 = ($897>>>0)>(255);
         if ($898) {
          $$01$i95$i = $897;
         } else {
          break;
         }
        }
        $899 = $893 & 255;
        $$0$lcssa$i97$i = $899;
       } else {
        $$0$lcssa$i97$i = $893;
       }
       (___fwritex($pad$i,$$0$lcssa$i97$i,$f)|0);
      }
      (___fwritex($prefix$0$i,$pl$0$i,$f)|0);
      $900 = ($890|0)==(65536);
      $or$cond$i100$i = $900 & $892;
      if ($or$cond$i100$i) {
       $901 = (($w$1) - ($889))|0;
       $902 = ($901>>>0)>(256);
       $903 = $902 ? 256 : $901;
       _memset(($pad$i|0),48,($903|0))|0;
       $904 = ($901>>>0)>(255);
       if ($904) {
        $$01$i102$i = $901;
        while(1) {
         (___fwritex($pad$i,256,$f)|0);
         $905 = (($$01$i102$i) + -256)|0;
         $906 = ($905>>>0)>(255);
         if ($906) {
          $$01$i102$i = $905;
         } else {
          break;
         }
        }
        $907 = $901 & 255;
        $$0$lcssa$i104$i = $907;
       } else {
        $$0$lcssa$i104$i = $901;
       }
       (___fwritex($pad$i,$$0$lcssa$i104$i,$f)|0);
      }
      if ($842) {
       $908 = ($a$8$ph$i>>>0)>($$31$i>>>0);
       $r$0$a$8$i = $908 ? $$31$i : $a$8$ph$i;
       $d$4191$i = $r$0$a$8$i;
       while(1) {
        $909 = HEAP32[$d$4191$i>>2]|0;
        $910 = ($909|0)==(0);
        if ($910) {
         $$1$lcssa$i112$i = $14;
        } else {
         $$12$i110$i = $14;$y$03$i109$i = $909;
         while(1) {
          $911 = (($y$03$i109$i>>>0) % 10)&-1;
          $912 = $911 | 48;
          $913 = $912&255;
          $914 = ((($$12$i110$i)) + -1|0);
          HEAP8[$914>>0] = $913;
          $915 = (($y$03$i109$i>>>0) / 10)&-1;
          $916 = ($y$03$i109$i>>>0)<(10);
          if ($916) {
           $$1$lcssa$i112$i = $914;
           break;
          } else {
           $$12$i110$i = $914;$y$03$i109$i = $915;
          }
         }
        }
        $917 = ($d$4191$i|0)==($r$0$a$8$i|0);
        do {
         if ($917) {
          $921 = ($$1$lcssa$i112$i|0)==($14|0);
          if (!($921)) {
           $s7$1$i = $$1$lcssa$i112$i;
           break;
          }
          HEAP8[$16>>0] = 48;
          $s7$1$i = $16;
         } else {
          $918 = ($$1$lcssa$i112$i>>>0)>($buf$i>>>0);
          if ($918) {
           $s7$0188$i = $$1$lcssa$i112$i;
          } else {
           $s7$1$i = $$1$lcssa$i112$i;
           break;
          }
          while(1) {
           $919 = ((($s7$0188$i)) + -1|0);
           HEAP8[$919>>0] = 48;
           $920 = ($919>>>0)>($buf$i>>>0);
           if ($920) {
            $s7$0188$i = $919;
           } else {
            $s7$1$i = $919;
            break;
           }
          }
         }
        } while(0);
        $922 = $s7$1$i;
        $923 = (($15) - ($922))|0;
        (___fwritex($s7$1$i,$923,$f)|0);
        $924 = ((($d$4191$i)) + 4|0);
        $925 = ($924>>>0)>($$31$i>>>0);
        if ($925) {
         $$lcssa470 = $924;
         break;
        } else {
         $d$4191$i = $924;
        }
       }
       $926 = ($838|0)==(0);
       if (!($926)) {
        (___fwritex(4244,1,$f)|0);
       }
       $927 = ($$lcssa470>>>0)<($z$6$i$lcssa>>>0);
       $928 = ($$311$i|0)>(0);
       $929 = $928 & $927;
       if ($929) {
        $$412184$i = $$311$i;$d$5183$i = $$lcssa470;
        while(1) {
         $930 = HEAP32[$d$5183$i>>2]|0;
         $931 = ($930|0)==(0);
         if ($931) {
          $s8$0180$i = $14;
          label = 289;
         } else {
          $$12$i119$i = $14;$y$03$i118$i = $930;
          while(1) {
           $932 = (($y$03$i118$i>>>0) % 10)&-1;
           $933 = $932 | 48;
           $934 = $933&255;
           $935 = ((($$12$i119$i)) + -1|0);
           HEAP8[$935>>0] = $934;
           $936 = (($y$03$i118$i>>>0) / 10)&-1;
           $937 = ($y$03$i118$i>>>0)<(10);
           if ($937) {
            $$lcssa471 = $935;
            break;
           } else {
            $$12$i119$i = $935;$y$03$i118$i = $936;
           }
          }
          $938 = ($$lcssa471>>>0)>($buf$i>>>0);
          if ($938) {
           $s8$0180$i = $$lcssa471;
           label = 289;
          } else {
           $s8$0$lcssa$i = $$lcssa471;
          }
         }
         if ((label|0) == 289) {
          while(1) {
           label = 0;
           $939 = ((($s8$0180$i)) + -1|0);
           HEAP8[$939>>0] = 48;
           $940 = ($939>>>0)>($buf$i>>>0);
           if ($940) {
            $s8$0180$i = $939;
            label = 289;
           } else {
            $s8$0$lcssa$i = $939;
            break;
           }
          }
         }
         $941 = ($$412184$i|0)>(9);
         $942 = $941 ? 9 : $$412184$i;
         (___fwritex($s8$0$lcssa$i,$942,$f)|0);
         $943 = ((($d$5183$i)) + 4|0);
         $944 = (($$412184$i) + -9)|0;
         $945 = ($943>>>0)<($z$6$i$lcssa>>>0);
         $946 = $941 & $945;
         if ($946) {
          $$412184$i = $944;$d$5183$i = $943;
         } else {
          $$412$lcssa$i = $944;
          break;
         }
        }
       } else {
        $$412$lcssa$i = $$311$i;
       }
       $947 = ($$412$lcssa$i|0)>(0);
       if ($947) {
        $948 = ($$412$lcssa$i>>>0)>(256);
        $949 = $948 ? 256 : $$412$lcssa$i;
        _memset(($pad$i|0),48,($949|0))|0;
        $950 = ($$412$lcssa$i>>>0)>(255);
        if ($950) {
         $$01$i126$i = $$412$lcssa$i;
         while(1) {
          (___fwritex($pad$i,256,$f)|0);
          $951 = (($$01$i126$i) + -256)|0;
          $952 = ($951>>>0)>(255);
          if ($952) {
           $$01$i126$i = $951;
          } else {
           break;
          }
         }
         $953 = $$412$lcssa$i & 255;
         $$0$lcssa$i128$i = $953;
        } else {
         $$0$lcssa$i128$i = $$412$lcssa$i;
        }
        (___fwritex($pad$i,$$0$lcssa$i128$i,$f)|0);
       }
      } else {
       $954 = ((($a$8$ph$i)) + 4|0);
       $z$6$$i = $$lcssa275$i ? $z$6$i$lcssa : $954;
       $955 = ($$311$i|0)>(-1);
       do {
        if ($955) {
         $956 = ($$pre$phi302$iZ2D|0)==(0);
         $$5196$i = $$311$i;$d$6195$i = $a$8$ph$i;
         while(1) {
          $957 = HEAP32[$d$6195$i>>2]|0;
          $958 = ($957|0)==(0);
          if ($958) {
           label = 303;
          } else {
           $$12$i134$i = $14;$y$03$i133$i = $957;
           while(1) {
            $959 = (($y$03$i133$i>>>0) % 10)&-1;
            $960 = $959 | 48;
            $961 = $960&255;
            $962 = ((($$12$i134$i)) + -1|0);
            HEAP8[$962>>0] = $961;
            $963 = (($y$03$i133$i>>>0) / 10)&-1;
            $964 = ($y$03$i133$i>>>0)<(10);
            if ($964) {
             $$12$i134$i$lcssa = $$12$i134$i;$$lcssa465 = $962;
             break;
            } else {
             $$12$i134$i = $962;$y$03$i133$i = $963;
            }
           }
           $965 = ($$lcssa465|0)==($14|0);
           if ($965) {
            label = 303;
           } else {
            $1181 = $$12$i134$i$lcssa;$s9$0$i = $$lcssa465;
           }
          }
          if ((label|0) == 303) {
           label = 0;
           HEAP8[$16>>0] = 48;
           $1181 = $14;$s9$0$i = $16;
          }
          $966 = ($d$6195$i|0)==($a$8$ph$i|0);
          do {
           if ($966) {
            (___fwritex($s9$0$i,1,$f)|0);
            $970 = ($$5196$i|0)<(1);
            $or$cond29$i = $956 & $970;
            if ($or$cond29$i) {
             $s9$2$i = $1181;
             break;
            }
            (___fwritex(4244,1,$f)|0);
            $s9$2$i = $1181;
           } else {
            $967 = ($s9$0$i>>>0)>($buf$i>>>0);
            if ($967) {
             $s9$1192$i = $s9$0$i;
            } else {
             $s9$2$i = $s9$0$i;
             break;
            }
            while(1) {
             $968 = ((($s9$1192$i)) + -1|0);
             HEAP8[$968>>0] = 48;
             $969 = ($968>>>0)>($buf$i>>>0);
             if ($969) {
              $s9$1192$i = $968;
             } else {
              $s9$2$i = $968;
              break;
             }
            }
           }
          } while(0);
          $971 = $s9$2$i;
          $972 = (($15) - ($971))|0;
          $973 = ($$5196$i|0)>($972|0);
          $974 = $973 ? $972 : $$5196$i;
          (___fwritex($s9$2$i,$974,$f)|0);
          $975 = (($$5196$i) - ($972))|0;
          $976 = ((($d$6195$i)) + 4|0);
          $977 = ($976>>>0)<($z$6$$i>>>0);
          $978 = ($975|0)>(-1);
          $979 = $977 & $978;
          if ($979) {
           $$5196$i = $975;$d$6195$i = $976;
          } else {
           $$lcssa467 = $975;
           break;
          }
         }
         $980 = ($$lcssa467|0)>(0);
         if (!($980)) {
          break;
         }
         $981 = ($$lcssa467>>>0)>(256);
         $982 = $981 ? 256 : $$lcssa467;
         _memset(($pad$i|0),48,($982|0))|0;
         $983 = ($$lcssa467>>>0)>(255);
         if ($983) {
          $$01$i141$i = $$lcssa467;
          while(1) {
           (___fwritex($pad$i,256,$f)|0);
           $984 = (($$01$i141$i) + -256)|0;
           $985 = ($984>>>0)>(255);
           if ($985) {
            $$01$i141$i = $984;
           } else {
            break;
           }
          }
          $986 = $$lcssa467 & 255;
          $$0$lcssa$i143$i = $986;
         } else {
          $$0$lcssa$i143$i = $$lcssa467;
         }
         (___fwritex($pad$i,$$0$lcssa$i143$i,$f)|0);
        } else {
        }
       } while(0);
       $987 = $estr$2$i;
       $988 = (($9) - ($987))|0;
       (___fwritex($estr$2$i,$988,$f)|0);
      }
      $989 = ($890|0)==(8192);
      $or$cond$i$i = $989 & $892;
      if ($or$cond$i$i) {
       $990 = (($w$1) - ($889))|0;
       $991 = ($990>>>0)>(256);
       $992 = $991 ? 256 : $990;
       _memset(($pad$i|0),32,($992|0))|0;
       $993 = ($990>>>0)>(255);
       if ($993) {
        $$01$i$i = $990;
        while(1) {
         (___fwritex($pad$i,256,$f)|0);
         $994 = (($$01$i$i) + -256)|0;
         $995 = ($994>>>0)>(255);
         if ($995) {
          $$01$i$i = $994;
         } else {
          break;
         }
        }
        $996 = $990 & 255;
        $$0$lcssa$i$i = $996;
       } else {
        $$0$lcssa$i$i = $990;
       }
       (___fwritex($pad$i,$$0$lcssa$i$i,$f)|0);
      }
      $w$30$i = $892 ? $w$1 : $889;
      $$0$i = $w$30$i;
     } else {
      $441 = $t$0 & 32;
      $442 = ($441|0)!=(0);
      $443 = $442 ? 4228 : 4232;
      $444 = ($$07$i != $$07$i) | (0.0 != 0.0);
      $445 = $442 ? 4236 : 4240;
      $pl$1$i = $444 ? 0 : $pl$0$i;
      $s1$0$i = $444 ? $445 : $443;
      $446 = (($pl$1$i) + 3)|0;
      $447 = $fl$1$ & 8192;
      $448 = ($447|0)==(0);
      $449 = ($w$1|0)>($446|0);
      $or$cond$i35$i = $448 & $449;
      if ($or$cond$i35$i) {
       $450 = (($w$1) - ($446))|0;
       $451 = ($450>>>0)>(256);
       $452 = $451 ? 256 : $450;
       _memset(($pad$i|0),32,($452|0))|0;
       $453 = ($450>>>0)>(255);
       if ($453) {
        $$01$i37$i = $450;
        while(1) {
         (___fwritex($pad$i,256,$f)|0);
         $454 = (($$01$i37$i) + -256)|0;
         $455 = ($454>>>0)>(255);
         if ($455) {
          $$01$i37$i = $454;
         } else {
          break;
         }
        }
        $456 = $450 & 255;
        $$0$lcssa$i39$i = $456;
       } else {
        $$0$lcssa$i39$i = $450;
       }
       (___fwritex($pad$i,$$0$lcssa$i39$i,$f)|0);
      }
      (___fwritex($prefix$0$i,$pl$1$i,$f)|0);
      (___fwritex($s1$0$i,3,$f)|0);
      $457 = $fl$1$ & 73728;
      $458 = ($457|0)==(8192);
      $or$cond$i42$i = $458 & $449;
      if ($or$cond$i42$i) {
       $459 = (($w$1) - ($446))|0;
       $460 = ($459>>>0)>(256);
       $461 = $460 ? 256 : $459;
       _memset(($pad$i|0),32,($461|0))|0;
       $462 = ($459>>>0)>(255);
       if ($462) {
        $$01$i44$i = $459;
        while(1) {
         (___fwritex($pad$i,256,$f)|0);
         $463 = (($$01$i44$i) + -256)|0;
         $464 = ($463>>>0)>(255);
         if ($464) {
          $$01$i44$i = $463;
         } else {
          break;
         }
        }
        $465 = $459 & 255;
        $$0$lcssa$i46$i = $465;
       } else {
        $$0$lcssa$i46$i = $459;
       }
       (___fwritex($pad$i,$$0$lcssa$i46$i,$f)|0);
      }
      $466 = $449 ? $w$1 : $446;
      $$0$i = $466;
     }
    } while(0);
    $1165 = $287;$1166 = $260;$cnt$0 = $cnt$1;$fmt89 = $$lcssa448;$l$0 = $$0$i;$l10n$0 = $l10n$3;
    continue L1;
    break;
   }
   default: {
    $1169 = $287;$1170 = $260;$a$2 = $fmt89;$fl$6 = $fl$1$;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 4192;$z$2 = $2;
   }
   }
  } while(0);
  if ((label|0) == 73) {
   label = 0;
   $285 = $t$1 & 32;
   $286 = ($260|0)==(0);
   $288 = ($287|0)==(0);
   $289 = $286 & $288;
   if ($289) {
    $362 = $260;$364 = $287;$a$0 = $2;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 4192;
    label = 89;
   } else {
    $$012$i = $2;$291 = $260;$298 = $287;
    while(1) {
     $290 = $291 & 15;
     $292 = (4176 + ($290)|0);
     $293 = HEAP8[$292>>0]|0;
     $294 = $293&255;
     $295 = $294 | $285;
     $296 = $295&255;
     $297 = ((($$012$i)) + -1|0);
     HEAP8[$297>>0] = $296;
     $299 = (_bitshift64Lshr(($291|0),($298|0),4)|0);
     $300 = tempRet0;
     $301 = ($299|0)==(0);
     $302 = ($300|0)==(0);
     $303 = $301 & $302;
     if ($303) {
      $$lcssa482 = $297;
      break;
     } else {
      $$012$i = $297;$291 = $299;$298 = $300;
     }
    }
    $304 = $fl$3 & 8;
    $305 = ($304|0)==(0);
    if ($305) {
     $362 = $260;$364 = $287;$a$0 = $$lcssa482;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 4192;
     label = 89;
    } else {
     $306 = $t$1 >> 4;
     $307 = (4192 + ($306)|0);
     $362 = $260;$364 = $287;$a$0 = $$lcssa482;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 2;$prefix$1 = $307;
     label = 89;
    }
   }
  }
  else if ((label|0) == 84) {
   label = 0;
   $333 = ($332>>>0)>(0);
   $335 = ($334>>>0)>(4294967295);
   $336 = ($332|0)==(0);
   $337 = $336 & $335;
   $338 = $333 | $337;
   if ($338) {
    $$05$i = $2;$339 = $334;$340 = $332;
    while(1) {
     $341 = (___uremdi3(($339|0),($340|0),10,0)|0);
     $342 = tempRet0;
     $343 = $341 | 48;
     $344 = $343&255;
     $345 = ((($$05$i)) + -1|0);
     HEAP8[$345>>0] = $344;
     $346 = (___udivdi3(($339|0),($340|0),10,0)|0);
     $347 = tempRet0;
     $348 = ($340>>>0)>(9);
     $349 = ($339>>>0)>(4294967295);
     $350 = ($340|0)==(9);
     $351 = $350 & $349;
     $352 = $348 | $351;
     if ($352) {
      $$05$i = $345;$339 = $346;$340 = $347;
     } else {
      $$lcssa478 = $345;$1171 = $346;$1172 = $347;
      break;
     }
    }
    $$0$lcssa$i53 = $$lcssa478;$$01$lcssa$off0$i = $1171;
   } else {
    $$0$lcssa$i53 = $2;$$01$lcssa$off0$i = $334;
   }
   $353 = ($$01$lcssa$off0$i|0)==(0);
   if ($353) {
    $362 = $334;$364 = $332;$a$0 = $$0$lcssa$i53;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
    label = 89;
   } else {
    $$12$i = $$0$lcssa$i53;$y$03$i = $$01$lcssa$off0$i;
    while(1) {
     $354 = (($y$03$i>>>0) % 10)&-1;
     $355 = $354 | 48;
     $356 = $355&255;
     $357 = ((($$12$i)) + -1|0);
     HEAP8[$357>>0] = $356;
     $358 = (($y$03$i>>>0) / 10)&-1;
     $359 = ($y$03$i>>>0)<(10);
     if ($359) {
      $362 = $334;$364 = $332;$a$0 = $357;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
      label = 89;
      break;
     } else {
      $$12$i = $357;$y$03$i = $358;
     }
    }
   }
  }
  else if ((label|0) == 94) {
   label = 0;
   $381 = (_memchr($a$1,0,$p$0)|0);
   $382 = ($381|0)==(0|0);
   $383 = $381;
   $384 = $a$1;
   $385 = (($383) - ($384))|0;
   $386 = (($a$1) + ($p$0)|0);
   $z$1 = $382 ? $386 : $381;
   $p$3 = $382 ? $p$0 : $385;
   $1169 = $287;$1170 = $260;$a$2 = $a$1;$fl$6 = $259;$p$5 = $p$3;$pl$2 = 0;$prefix$2 = 4192;$z$2 = $z$1;
  }
  else if ((label|0) == 97) {
   label = 0;
   $i$0180 = 0;$l$1179 = 0;$ws$0181 = $1173;
   while(1) {
    $389 = HEAP32[$ws$0181>>2]|0;
    $390 = ($389|0)==(0);
    if ($390) {
     $i$0$lcssa = $i$0180;$l$2 = $l$1179;
     break;
    }
    $391 = (_wctomb($mb,$389)|0);
    $392 = ($391|0)<(0);
    $393 = (($p$4274) - ($i$0180))|0;
    $394 = ($391>>>0)>($393>>>0);
    $or$cond22 = $392 | $394;
    if ($or$cond22) {
     $i$0$lcssa = $i$0180;$l$2 = $391;
     break;
    }
    $395 = ((($ws$0181)) + 4|0);
    $396 = (($391) + ($i$0180))|0;
    $397 = ($p$4274>>>0)>($396>>>0);
    if ($397) {
     $i$0180 = $396;$l$1179 = $391;$ws$0181 = $395;
    } else {
     $i$0$lcssa = $396;$l$2 = $391;
     break;
    }
   }
   $398 = ($l$2|0)<(0);
   if ($398) {
    $$0 = -1;
    label = 363;
    break;
   } else {
    $1175 = $1174;$1176 = $1173;$i$0$lcssa275 = $i$0$lcssa;
    label = 102;
   }
  }
  if ((label|0) == 89) {
   label = 0;
   $360 = ($p$2|0)>(-1);
   $361 = $fl$4 & -65537;
   $$fl$4 = $360 ? $361 : $fl$4;
   $363 = ($362|0)!=(0);
   $365 = ($364|0)!=(0);
   $366 = $363 | $365;
   $367 = ($p$2|0)!=(0);
   $or$cond = $366 | $367;
   if ($or$cond) {
    $368 = $a$0;
    $369 = (($3) - ($368))|0;
    $370 = $366&1;
    $371 = $370 ^ 1;
    $372 = (($371) + ($369))|0;
    $373 = ($p$2|0)>($372|0);
    $p$2$ = $373 ? $p$2 : $372;
    $1169 = $364;$1170 = $362;$a$2 = $a$0;$fl$6 = $$fl$4;$p$5 = $p$2$;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $2;
   } else {
    $1169 = $364;$1170 = $362;$a$2 = $2;$fl$6 = $$fl$4;$p$5 = 0;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $2;
   }
  }
  else if ((label|0) == 102) {
   label = 0;
   $399 = $fl$1$ & 73728;
   $400 = ($399|0)==(0);
   $401 = ($w$1|0)>($i$0$lcssa275|0);
   $or$cond$i64 = $400 & $401;
   if ($or$cond$i64) {
    $402 = (($w$1) - ($i$0$lcssa275))|0;
    $403 = ($402>>>0)>(256);
    $404 = $403 ? 256 : $402;
    _memset(($pad$i|0),32,($404|0))|0;
    $405 = ($402>>>0)>(255);
    if ($405) {
     $$01$i66 = $402;
     while(1) {
      (___fwritex($pad$i,256,$f)|0);
      $406 = (($$01$i66) + -256)|0;
      $407 = ($406>>>0)>(255);
      if ($407) {
       $$01$i66 = $406;
      } else {
       break;
      }
     }
     $408 = $402 & 255;
     $$0$lcssa$i68 = $408;
    } else {
     $$0$lcssa$i68 = $402;
    }
    (___fwritex($pad$i,$$0$lcssa$i68,$f)|0);
   }
   $409 = ($i$0$lcssa275|0)==(0);
   L465: do {
    if (!($409)) {
     $i$1191 = 0;$ws$1192 = $1176;
     while(1) {
      $410 = HEAP32[$ws$1192>>2]|0;
      $411 = ($410|0)==(0);
      if ($411) {
       break L465;
      }
      $412 = (_wctomb($mb,$410)|0);
      $413 = (($412) + ($i$1191))|0;
      $414 = ($413|0)>($i$0$lcssa275|0);
      if ($414) {
       break L465;
      }
      $415 = ((($ws$1192)) + 4|0);
      (___fwritex($mb,$412,$f)|0);
      $416 = ($413>>>0)<($i$0$lcssa275>>>0);
      if ($416) {
       $i$1191 = $413;$ws$1192 = $415;
      } else {
       break;
      }
     }
    }
   } while(0);
   $417 = ($399|0)==(8192);
   $or$cond$i71 = $417 & $401;
   if ($or$cond$i71) {
    $418 = (($w$1) - ($i$0$lcssa275))|0;
    $419 = ($418>>>0)>(256);
    $420 = $419 ? 256 : $418;
    _memset(($pad$i|0),32,($420|0))|0;
    $421 = ($418>>>0)>(255);
    if ($421) {
     $$01$i73 = $418;
     while(1) {
      (___fwritex($pad$i,256,$f)|0);
      $422 = (($$01$i73) + -256)|0;
      $423 = ($422>>>0)>(255);
      if ($423) {
       $$01$i73 = $422;
      } else {
       break;
      }
     }
     $424 = $418 & 255;
     $$0$lcssa$i75 = $424;
    } else {
     $$0$lcssa$i75 = $418;
    }
    (___fwritex($pad$i,$$0$lcssa$i75,$f)|0);
   }
   $425 = $401 ? $w$1 : $i$0$lcssa275;
   $1165 = $287;$1166 = $1175;$cnt$0 = $cnt$1;$fmt89 = $$lcssa448;$l$0 = $425;$l10n$0 = $l10n$3;
   continue;
  }
  $997 = $z$2;
  $998 = $a$2;
  $999 = (($997) - ($998))|0;
  $1000 = ($p$5|0)<($999|0);
  $$p$5 = $1000 ? $999 : $p$5;
  $1001 = (($pl$2) + ($$p$5))|0;
  $1002 = ($w$1|0)<($1001|0);
  $w$2 = $1002 ? $1001 : $w$1;
  $1003 = $fl$6 & 73728;
  $1004 = ($1003|0)==(0);
  $1005 = ($w$2|0)>($1001|0);
  $or$cond$i81 = $1004 & $1005;
  if ($or$cond$i81) {
   $1006 = (($w$2) - ($1001))|0;
   $1007 = ($1006>>>0)>(256);
   $1008 = $1007 ? 256 : $1006;
   _memset(($pad$i|0),32,($1008|0))|0;
   $1009 = ($1006>>>0)>(255);
   if ($1009) {
    $$01$i83 = $1006;
    while(1) {
     (___fwritex($pad$i,256,$f)|0);
     $1010 = (($$01$i83) + -256)|0;
     $1011 = ($1010>>>0)>(255);
     if ($1011) {
      $$01$i83 = $1010;
     } else {
      break;
     }
    }
    $1012 = $1006 & 255;
    $$0$lcssa$i85 = $1012;
   } else {
    $$0$lcssa$i85 = $1006;
   }
   (___fwritex($pad$i,$$0$lcssa$i85,$f)|0);
  }
  (___fwritex($prefix$2,$pl$2,$f)|0);
  $1013 = ($1003|0)==(65536);
  $or$cond$i57 = $1013 & $1005;
  if ($or$cond$i57) {
   $1014 = (($w$2) - ($1001))|0;
   $1015 = ($1014>>>0)>(256);
   $1016 = $1015 ? 256 : $1014;
   _memset(($pad$i|0),48,($1016|0))|0;
   $1017 = ($1014>>>0)>(255);
   if ($1017) {
    $$01$i59 = $1014;
    while(1) {
     (___fwritex($pad$i,256,$f)|0);
     $1018 = (($$01$i59) + -256)|0;
     $1019 = ($1018>>>0)>(255);
     if ($1019) {
      $$01$i59 = $1018;
     } else {
      break;
     }
    }
    $1020 = $1014 & 255;
    $$0$lcssa$i61 = $1020;
   } else {
    $$0$lcssa$i61 = $1014;
   }
   (___fwritex($pad$i,$$0$lcssa$i61,$f)|0);
  }
  $1021 = ($$p$5|0)>($999|0);
  if ($1021) {
   $1022 = (($$p$5) - ($999))|0;
   $1023 = ($1022>>>0)>(256);
   $1024 = $1023 ? 256 : $1022;
   _memset(($pad$i|0),48,($1024|0))|0;
   $1025 = ($1022>>>0)>(255);
   if ($1025) {
    $$01$i44 = $1022;
    while(1) {
     (___fwritex($pad$i,256,$f)|0);
     $1026 = (($$01$i44) + -256)|0;
     $1027 = ($1026>>>0)>(255);
     if ($1027) {
      $$01$i44 = $1026;
     } else {
      break;
     }
    }
    $1028 = $1022 & 255;
    $$0$lcssa$i46 = $1028;
   } else {
    $$0$lcssa$i46 = $1022;
   }
   (___fwritex($pad$i,$$0$lcssa$i46,$f)|0);
  }
  (___fwritex($a$2,$999,$f)|0);
  $1029 = ($1003|0)==(8192);
  $or$cond$i = $1029 & $1005;
  if ($or$cond$i) {
   $1030 = (($w$2) - ($1001))|0;
   $1031 = ($1030>>>0)>(256);
   $1032 = $1031 ? 256 : $1030;
   _memset(($pad$i|0),32,($1032|0))|0;
   $1033 = ($1030>>>0)>(255);
   if ($1033) {
    $$01$i = $1030;
    while(1) {
     (___fwritex($pad$i,256,$f)|0);
     $1034 = (($$01$i) + -256)|0;
     $1035 = ($1034>>>0)>(255);
     if ($1035) {
      $$01$i = $1034;
     } else {
      break;
     }
    }
    $1036 = $1030 & 255;
    $$0$lcssa$i = $1036;
   } else {
    $$0$lcssa$i = $1030;
   }
   (___fwritex($pad$i,$$0$lcssa$i,$f)|0);
  }
  $1165 = $1169;$1166 = $1170;$cnt$0 = $cnt$1;$fmt89 = $$lcssa448;$l$0 = $w$2;$l10n$0 = $l10n$3;
 }
 if ((label|0) == 344) {
  $1037 = ($f|0)==(0|0);
  if (!($1037)) {
   $$0 = $cnt$1$lcssa;
   STACKTOP = sp;return ($$0|0);
  }
  $1038 = ($l10n$0$lcssa|0)==(0);
  if ($1038) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   $i$2166 = 1;
  }
  while(1) {
   $1039 = (($nl_type) + ($i$2166<<2)|0);
   $1040 = HEAP32[$1039>>2]|0;
   $1041 = ($1040|0)==(0);
   if ($1041) {
    $i$2166$lcssa = $i$2166;
    break;
   }
   $1043 = (($nl_arg) + ($i$2166<<3)|0);
   $1044 = ($1040>>>0)>(20);
   L523: do {
    if (!($1044)) {
     do {
      switch ($1040|0) {
      case 9:  {
       $arglist_current35 = HEAP32[$ap>>2]|0;
       $1045 = $arglist_current35;
       $1046 = ((0) + 4|0);
       $expanded148 = $1046;
       $expanded147 = (($expanded148) - 1)|0;
       $1047 = (($1045) + ($expanded147))|0;
       $1048 = ((0) + 4|0);
       $expanded152 = $1048;
       $expanded151 = (($expanded152) - 1)|0;
       $expanded150 = $expanded151 ^ -1;
       $1049 = $1047 & $expanded150;
       $1050 = $1049;
       $1051 = HEAP32[$1050>>2]|0;
       $arglist_next36 = ((($1050)) + 4|0);
       HEAP32[$ap>>2] = $arglist_next36;
       HEAP32[$1043>>2] = $1051;
       break L523;
       break;
      }
      case 10:  {
       $arglist_current38 = HEAP32[$ap>>2]|0;
       $1052 = $arglist_current38;
       $1053 = ((0) + 4|0);
       $expanded155 = $1053;
       $expanded154 = (($expanded155) - 1)|0;
       $1054 = (($1052) + ($expanded154))|0;
       $1055 = ((0) + 4|0);
       $expanded159 = $1055;
       $expanded158 = (($expanded159) - 1)|0;
       $expanded157 = $expanded158 ^ -1;
       $1056 = $1054 & $expanded157;
       $1057 = $1056;
       $1058 = HEAP32[$1057>>2]|0;
       $arglist_next39 = ((($1057)) + 4|0);
       HEAP32[$ap>>2] = $arglist_next39;
       $1059 = ($1058|0)<(0);
       $1060 = $1059 << 31 >> 31;
       $1061 = $1043;
       $1062 = $1061;
       HEAP32[$1062>>2] = $1058;
       $1063 = (($1061) + 4)|0;
       $1064 = $1063;
       HEAP32[$1064>>2] = $1060;
       break L523;
       break;
      }
      case 11:  {
       $arglist_current41 = HEAP32[$ap>>2]|0;
       $1065 = $arglist_current41;
       $1066 = ((0) + 4|0);
       $expanded162 = $1066;
       $expanded161 = (($expanded162) - 1)|0;
       $1067 = (($1065) + ($expanded161))|0;
       $1068 = ((0) + 4|0);
       $expanded166 = $1068;
       $expanded165 = (($expanded166) - 1)|0;
       $expanded164 = $expanded165 ^ -1;
       $1069 = $1067 & $expanded164;
       $1070 = $1069;
       $1071 = HEAP32[$1070>>2]|0;
       $arglist_next42 = ((($1070)) + 4|0);
       HEAP32[$ap>>2] = $arglist_next42;
       $1072 = $1043;
       $1073 = $1072;
       HEAP32[$1073>>2] = $1071;
       $1074 = (($1072) + 4)|0;
       $1075 = $1074;
       HEAP32[$1075>>2] = 0;
       break L523;
       break;
      }
      case 12:  {
       $arglist_current44 = HEAP32[$ap>>2]|0;
       $1076 = $arglist_current44;
       $1077 = ((0) + 8|0);
       $expanded169 = $1077;
       $expanded168 = (($expanded169) - 1)|0;
       $1078 = (($1076) + ($expanded168))|0;
       $1079 = ((0) + 8|0);
       $expanded173 = $1079;
       $expanded172 = (($expanded173) - 1)|0;
       $expanded171 = $expanded172 ^ -1;
       $1080 = $1078 & $expanded171;
       $1081 = $1080;
       $1082 = $1081;
       $1083 = $1082;
       $1084 = HEAP32[$1083>>2]|0;
       $1085 = (($1082) + 4)|0;
       $1086 = $1085;
       $1087 = HEAP32[$1086>>2]|0;
       $arglist_next45 = ((($1081)) + 8|0);
       HEAP32[$ap>>2] = $arglist_next45;
       $1088 = $1043;
       $1089 = $1088;
       HEAP32[$1089>>2] = $1084;
       $1090 = (($1088) + 4)|0;
       $1091 = $1090;
       HEAP32[$1091>>2] = $1087;
       break L523;
       break;
      }
      case 13:  {
       $arglist_current47 = HEAP32[$ap>>2]|0;
       $1092 = $arglist_current47;
       $1093 = ((0) + 4|0);
       $expanded176 = $1093;
       $expanded175 = (($expanded176) - 1)|0;
       $1094 = (($1092) + ($expanded175))|0;
       $1095 = ((0) + 4|0);
       $expanded180 = $1095;
       $expanded179 = (($expanded180) - 1)|0;
       $expanded178 = $expanded179 ^ -1;
       $1096 = $1094 & $expanded178;
       $1097 = $1096;
       $1098 = HEAP32[$1097>>2]|0;
       $arglist_next48 = ((($1097)) + 4|0);
       HEAP32[$ap>>2] = $arglist_next48;
       $1099 = $1098&65535;
       $1100 = $1099 << 16 >> 16;
       $1101 = ($1100|0)<(0);
       $1102 = $1101 << 31 >> 31;
       $1103 = $1043;
       $1104 = $1103;
       HEAP32[$1104>>2] = $1100;
       $1105 = (($1103) + 4)|0;
       $1106 = $1105;
       HEAP32[$1106>>2] = $1102;
       break L523;
       break;
      }
      case 14:  {
       $arglist_current50 = HEAP32[$ap>>2]|0;
       $1107 = $arglist_current50;
       $1108 = ((0) + 4|0);
       $expanded183 = $1108;
       $expanded182 = (($expanded183) - 1)|0;
       $1109 = (($1107) + ($expanded182))|0;
       $1110 = ((0) + 4|0);
       $expanded187 = $1110;
       $expanded186 = (($expanded187) - 1)|0;
       $expanded185 = $expanded186 ^ -1;
       $1111 = $1109 & $expanded185;
       $1112 = $1111;
       $1113 = HEAP32[$1112>>2]|0;
       $arglist_next51 = ((($1112)) + 4|0);
       HEAP32[$ap>>2] = $arglist_next51;
       $$mask1$i = $1113 & 65535;
       $1114 = $1043;
       $1115 = $1114;
       HEAP32[$1115>>2] = $$mask1$i;
       $1116 = (($1114) + 4)|0;
       $1117 = $1116;
       HEAP32[$1117>>2] = 0;
       break L523;
       break;
      }
      case 15:  {
       $arglist_current53 = HEAP32[$ap>>2]|0;
       $1118 = $arglist_current53;
       $1119 = ((0) + 4|0);
       $expanded190 = $1119;
       $expanded189 = (($expanded190) - 1)|0;
       $1120 = (($1118) + ($expanded189))|0;
       $1121 = ((0) + 4|0);
       $expanded194 = $1121;
       $expanded193 = (($expanded194) - 1)|0;
       $expanded192 = $expanded193 ^ -1;
       $1122 = $1120 & $expanded192;
       $1123 = $1122;
       $1124 = HEAP32[$1123>>2]|0;
       $arglist_next54 = ((($1123)) + 4|0);
       HEAP32[$ap>>2] = $arglist_next54;
       $1125 = $1124&255;
       $1126 = $1125 << 24 >> 24;
       $1127 = ($1126|0)<(0);
       $1128 = $1127 << 31 >> 31;
       $1129 = $1043;
       $1130 = $1129;
       HEAP32[$1130>>2] = $1126;
       $1131 = (($1129) + 4)|0;
       $1132 = $1131;
       HEAP32[$1132>>2] = $1128;
       break L523;
       break;
      }
      case 16:  {
       $arglist_current56 = HEAP32[$ap>>2]|0;
       $1133 = $arglist_current56;
       $1134 = ((0) + 4|0);
       $expanded197 = $1134;
       $expanded196 = (($expanded197) - 1)|0;
       $1135 = (($1133) + ($expanded196))|0;
       $1136 = ((0) + 4|0);
       $expanded201 = $1136;
       $expanded200 = (($expanded201) - 1)|0;
       $expanded199 = $expanded200 ^ -1;
       $1137 = $1135 & $expanded199;
       $1138 = $1137;
       $1139 = HEAP32[$1138>>2]|0;
       $arglist_next57 = ((($1138)) + 4|0);
       HEAP32[$ap>>2] = $arglist_next57;
       $$mask$i = $1139 & 255;
       $1140 = $1043;
       $1141 = $1140;
       HEAP32[$1141>>2] = $$mask$i;
       $1142 = (($1140) + 4)|0;
       $1143 = $1142;
       HEAP32[$1143>>2] = 0;
       break L523;
       break;
      }
      case 17:  {
       $arglist_current59 = HEAP32[$ap>>2]|0;
       $1144 = $arglist_current59;
       $1145 = ((0) + 8|0);
       $expanded204 = $1145;
       $expanded203 = (($expanded204) - 1)|0;
       $1146 = (($1144) + ($expanded203))|0;
       $1147 = ((0) + 8|0);
       $expanded208 = $1147;
       $expanded207 = (($expanded208) - 1)|0;
       $expanded206 = $expanded207 ^ -1;
       $1148 = $1146 & $expanded206;
       $1149 = $1148;
       $1150 = +HEAPF64[$1149>>3];
       $arglist_next60 = ((($1149)) + 8|0);
       HEAP32[$ap>>2] = $arglist_next60;
       HEAPF64[$1043>>3] = $1150;
       break L523;
       break;
      }
      case 18:  {
       $arglist_current62 = HEAP32[$ap>>2]|0;
       $1151 = $arglist_current62;
       $1152 = ((0) + 8|0);
       $expanded211 = $1152;
       $expanded210 = (($expanded211) - 1)|0;
       $1153 = (($1151) + ($expanded210))|0;
       $1154 = ((0) + 8|0);
       $expanded215 = $1154;
       $expanded214 = (($expanded215) - 1)|0;
       $expanded213 = $expanded214 ^ -1;
       $1155 = $1153 & $expanded213;
       $1156 = $1155;
       $1157 = +HEAPF64[$1156>>3];
       $arglist_next63 = ((($1156)) + 8|0);
       HEAP32[$ap>>2] = $arglist_next63;
       HEAPF64[$1043>>3] = $1157;
       break L523;
       break;
      }
      default: {
       break L523;
      }
      }
     } while(0);
    }
   } while(0);
   $1158 = (($i$2166) + 1)|0;
   $1159 = ($1158|0)<(10);
   if ($1159) {
    $i$2166 = $1158;
   } else {
    $$0 = 1;
    label = 363;
    break;
   }
  }
  if ((label|0) == 363) {
   STACKTOP = sp;return ($$0|0);
  }
  $1042 = ($i$2166$lcssa|0)<(10);
  if ($1042) {
   $i$3164 = $i$2166$lcssa;
  } else {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
  while(1) {
   $1162 = (($nl_type) + ($i$3164<<2)|0);
   $1163 = HEAP32[$1162>>2]|0;
   $1164 = ($1163|0)==(0);
   $1160 = (($i$3164) + 1)|0;
   if (!($1164)) {
    $$0 = -1;
    label = 363;
    break;
   }
   $1161 = ($1160|0)<(10);
   if ($1161) {
    $i$3164 = $1160;
   } else {
    $$0 = 1;
    label = 363;
    break;
   }
  }
  if ((label|0) == 363) {
   STACKTOP = sp;return ($$0|0);
  }
 }
 else if ((label|0) == 363) {
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _sn_write($f,$s,$l) {
 $f = $f|0;
 $s = $s|0;
 $l = $l|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($f)) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = $3;
 $6 = (($4) - ($5))|0;
 $7 = ($6>>>0)>($l>>>0);
 $l$ = $7 ? $l : $6;
 _memcpy(($3|0),($s|0),($l$|0))|0;
 $8 = HEAP32[$2>>2]|0;
 $9 = (($8) + ($l$)|0);
 HEAP32[$2>>2] = $9;
 return ($l|0);
}
function _malloc($bytes) {
 $bytes = $bytes|0;
 var $$3$i = 0, $$lcssa = 0, $$lcssa211 = 0, $$lcssa215 = 0, $$lcssa216 = 0, $$lcssa217 = 0, $$lcssa219 = 0, $$lcssa222 = 0, $$lcssa224 = 0, $$lcssa226 = 0, $$lcssa228 = 0, $$lcssa230 = 0, $$lcssa232 = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i22$i = 0, $$pre$i25 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i23$iZ2D = 0;
 var $$pre$phi$i26Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi58$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre105 = 0, $$pre106 = 0, $$pre14$i$i = 0, $$pre43$i = 0, $$pre56$i$i = 0, $$pre57$i$i = 0, $$pre8$i = 0, $$rsize$0$i = 0, $$rsize$3$i = 0, $$sum = 0, $$sum$i$i = 0, $$sum$i$i$i = 0, $$sum$i13$i = 0, $$sum$i14$i = 0, $$sum$i17$i = 0, $$sum$i19$i = 0;
 var $$sum$i2334 = 0, $$sum$i32 = 0, $$sum$i35 = 0, $$sum1 = 0, $$sum1$i = 0, $$sum1$i$i = 0, $$sum1$i15$i = 0, $$sum1$i20$i = 0, $$sum1$i24 = 0, $$sum10 = 0, $$sum10$i = 0, $$sum10$i$i = 0, $$sum11$i = 0, $$sum11$i$i = 0, $$sum1112 = 0, $$sum112$i = 0, $$sum113$i = 0, $$sum114$i = 0, $$sum115$i = 0, $$sum116$i = 0;
 var $$sum117$i = 0, $$sum118$i = 0, $$sum119$i = 0, $$sum12$i = 0, $$sum12$i$i = 0, $$sum120$i = 0, $$sum121$i = 0, $$sum122$i = 0, $$sum123$i = 0, $$sum124$i = 0, $$sum125$i = 0, $$sum13$i = 0, $$sum13$i$i = 0, $$sum14$i$i = 0, $$sum15$i = 0, $$sum15$i$i = 0, $$sum16$i = 0, $$sum16$i$i = 0, $$sum17$i = 0, $$sum17$i$i = 0;
 var $$sum18$i = 0, $$sum1819$i$i = 0, $$sum2 = 0, $$sum2$i = 0, $$sum2$i$i = 0, $$sum2$i$i$i = 0, $$sum2$i16$i = 0, $$sum2$i18$i = 0, $$sum2$i21$i = 0, $$sum20$i$i = 0, $$sum21$i$i = 0, $$sum22$i$i = 0, $$sum23$i$i = 0, $$sum24$i$i = 0, $$sum25$i$i = 0, $$sum27$i$i = 0, $$sum28$i$i = 0, $$sum29$i$i = 0, $$sum3$i = 0, $$sum3$i27 = 0;
 var $$sum30$i$i = 0, $$sum3132$i$i = 0, $$sum34$i$i = 0, $$sum3536$i$i = 0, $$sum3738$i$i = 0, $$sum39$i$i = 0, $$sum4 = 0, $$sum4$i = 0, $$sum4$i$i = 0, $$sum4$i28 = 0, $$sum40$i$i = 0, $$sum41$i$i = 0, $$sum42$i$i = 0, $$sum5$i = 0, $$sum5$i$i = 0, $$sum56 = 0, $$sum6$i = 0, $$sum67$i$i = 0, $$sum7$i = 0, $$sum8$i = 0;
 var $$sum9 = 0, $$sum9$i = 0, $$sum9$i$i = 0, $$tsize$1$i = 0, $$v$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0;
 var $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0;
 var $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0;
 var $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0;
 var $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0;
 var $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0;
 var $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0;
 var $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0;
 var $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0;
 var $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0;
 var $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0;
 var $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0;
 var $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0;
 var $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0;
 var $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0;
 var $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0;
 var $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0;
 var $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0;
 var $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0;
 var $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0;
 var $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0;
 var $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0;
 var $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0;
 var $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0;
 var $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0;
 var $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0;
 var $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0;
 var $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0;
 var $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0;
 var $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0;
 var $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0;
 var $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0;
 var $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0;
 var $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0;
 var $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0;
 var $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0;
 var $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0;
 var $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0;
 var $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0;
 var $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0;
 var $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0;
 var $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0;
 var $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0;
 var $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0;
 var $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0;
 var $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $F$0$i$i = 0, $F1$0$i = 0, $F4$0 = 0, $F4$0$i$i = 0;
 var $F5$0$i = 0, $I1$0$i$i = 0, $I7$0$i = 0, $I7$0$i$i = 0, $K12$029$i = 0, $K2$07$i$i = 0, $K8$051$i$i = 0, $R$0$i = 0, $R$0$i$i = 0, $R$0$i$i$lcssa = 0, $R$0$i$lcssa = 0, $R$0$i18 = 0, $R$0$i18$lcssa = 0, $R$1$i = 0, $R$1$i$i = 0, $R$1$i20 = 0, $RP$0$i = 0, $RP$0$i$i = 0, $RP$0$i$i$lcssa = 0, $RP$0$i$lcssa = 0;
 var $RP$0$i17 = 0, $RP$0$i17$lcssa = 0, $T$0$lcssa$i = 0, $T$0$lcssa$i$i = 0, $T$0$lcssa$i25$i = 0, $T$028$i = 0, $T$028$i$lcssa = 0, $T$050$i$i = 0, $T$050$i$i$lcssa = 0, $T$06$i$i = 0, $T$06$i$i$lcssa = 0, $br$0$ph$i = 0, $cond$i = 0, $cond$i$i = 0, $cond$i21 = 0, $exitcond$i$i = 0, $i$02$i$i = 0, $idx$0$i = 0, $mem$0 = 0, $nb$0 = 0;
 var $not$$i = 0, $not$$i$i = 0, $not$$i26$i = 0, $oldfirst$0$i$i = 0, $or$cond$i = 0, $or$cond$i30 = 0, $or$cond1$i = 0, $or$cond19$i = 0, $or$cond2$i = 0, $or$cond3$i = 0, $or$cond5$i = 0, $or$cond57$i = 0, $or$cond6$i = 0, $or$cond8$i = 0, $or$cond9$i = 0, $qsize$0$i$i = 0, $rsize$0$i = 0, $rsize$0$i$lcssa = 0, $rsize$0$i15 = 0, $rsize$1$i = 0;
 var $rsize$2$i = 0, $rsize$3$lcssa$i = 0, $rsize$331$i = 0, $rst$0$i = 0, $rst$1$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$084$i = 0, $sp$084$i$lcssa = 0, $sp$183$i = 0, $sp$183$i$lcssa = 0, $ssize$0$$i = 0, $ssize$0$i = 0, $ssize$1$ph$i = 0, $ssize$2$i = 0, $t$0$i = 0, $t$0$i14 = 0, $t$1$i = 0, $t$2$ph$i = 0;
 var $t$2$v$3$i = 0, $t$230$i = 0, $tbase$255$i = 0, $tsize$0$ph$i = 0, $tsize$0323944$i = 0, $tsize$1$i = 0, $tsize$254$i = 0, $v$0$i = 0, $v$0$i$lcssa = 0, $v$0$i16 = 0, $v$1$i = 0, $v$2$i = 0, $v$3$lcssa$i = 0, $v$3$ph$i = 0, $v$332$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($bytes>>>0)<(245);
 do {
  if ($0) {
   $1 = ($bytes>>>0)<(11);
   $2 = (($bytes) + 11)|0;
   $3 = $2 & -8;
   $4 = $1 ? 16 : $3;
   $5 = $4 >>> 3;
   $6 = HEAP32[348>>2]|0;
   $7 = $6 >>> $5;
   $8 = $7 & 3;
   $9 = ($8|0)==(0);
   if (!($9)) {
    $10 = $7 & 1;
    $11 = $10 ^ 1;
    $12 = (($11) + ($5))|0;
    $13 = $12 << 1;
    $14 = (388 + ($13<<2)|0);
    $$sum10 = (($13) + 2)|0;
    $15 = (388 + ($$sum10<<2)|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ((($16)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($14|0)==($18|0);
    do {
     if ($19) {
      $20 = 1 << $12;
      $21 = $20 ^ -1;
      $22 = $6 & $21;
      HEAP32[348>>2] = $22;
     } else {
      $23 = HEAP32[(364)>>2]|0;
      $24 = ($18>>>0)<($23>>>0);
      if ($24) {
       _abort();
       // unreachable;
      }
      $25 = ((($18)) + 12|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = ($26|0)==($16|0);
      if ($27) {
       HEAP32[$25>>2] = $14;
       HEAP32[$15>>2] = $18;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $28 = $12 << 3;
    $29 = $28 | 3;
    $30 = ((($16)) + 4|0);
    HEAP32[$30>>2] = $29;
    $$sum1112 = $28 | 4;
    $31 = (($16) + ($$sum1112)|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = $32 | 1;
    HEAP32[$31>>2] = $33;
    $mem$0 = $17;
    return ($mem$0|0);
   }
   $34 = HEAP32[(356)>>2]|0;
   $35 = ($4>>>0)>($34>>>0);
   if ($35) {
    $36 = ($7|0)==(0);
    if (!($36)) {
     $37 = $7 << $5;
     $38 = 2 << $5;
     $39 = (0 - ($38))|0;
     $40 = $38 | $39;
     $41 = $37 & $40;
     $42 = (0 - ($41))|0;
     $43 = $41 & $42;
     $44 = (($43) + -1)|0;
     $45 = $44 >>> 12;
     $46 = $45 & 16;
     $47 = $44 >>> $46;
     $48 = $47 >>> 5;
     $49 = $48 & 8;
     $50 = $49 | $46;
     $51 = $47 >>> $49;
     $52 = $51 >>> 2;
     $53 = $52 & 4;
     $54 = $50 | $53;
     $55 = $51 >>> $53;
     $56 = $55 >>> 1;
     $57 = $56 & 2;
     $58 = $54 | $57;
     $59 = $55 >>> $57;
     $60 = $59 >>> 1;
     $61 = $60 & 1;
     $62 = $58 | $61;
     $63 = $59 >>> $61;
     $64 = (($62) + ($63))|0;
     $65 = $64 << 1;
     $66 = (388 + ($65<<2)|0);
     $$sum4 = (($65) + 2)|0;
     $67 = (388 + ($$sum4<<2)|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = ((($68)) + 8|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = ($66|0)==($70|0);
     do {
      if ($71) {
       $72 = 1 << $64;
       $73 = $72 ^ -1;
       $74 = $6 & $73;
       HEAP32[348>>2] = $74;
       $88 = $34;
      } else {
       $75 = HEAP32[(364)>>2]|0;
       $76 = ($70>>>0)<($75>>>0);
       if ($76) {
        _abort();
        // unreachable;
       }
       $77 = ((($70)) + 12|0);
       $78 = HEAP32[$77>>2]|0;
       $79 = ($78|0)==($68|0);
       if ($79) {
        HEAP32[$77>>2] = $66;
        HEAP32[$67>>2] = $70;
        $$pre = HEAP32[(356)>>2]|0;
        $88 = $$pre;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $80 = $64 << 3;
     $81 = (($80) - ($4))|0;
     $82 = $4 | 3;
     $83 = ((($68)) + 4|0);
     HEAP32[$83>>2] = $82;
     $84 = (($68) + ($4)|0);
     $85 = $81 | 1;
     $$sum56 = $4 | 4;
     $86 = (($68) + ($$sum56)|0);
     HEAP32[$86>>2] = $85;
     $87 = (($68) + ($80)|0);
     HEAP32[$87>>2] = $81;
     $89 = ($88|0)==(0);
     if (!($89)) {
      $90 = HEAP32[(368)>>2]|0;
      $91 = $88 >>> 3;
      $92 = $91 << 1;
      $93 = (388 + ($92<<2)|0);
      $94 = HEAP32[348>>2]|0;
      $95 = 1 << $91;
      $96 = $94 & $95;
      $97 = ($96|0)==(0);
      if ($97) {
       $98 = $94 | $95;
       HEAP32[348>>2] = $98;
       $$pre105 = (($92) + 2)|0;
       $$pre106 = (388 + ($$pre105<<2)|0);
       $$pre$phiZ2D = $$pre106;$F4$0 = $93;
      } else {
       $$sum9 = (($92) + 2)|0;
       $99 = (388 + ($$sum9<<2)|0);
       $100 = HEAP32[$99>>2]|0;
       $101 = HEAP32[(364)>>2]|0;
       $102 = ($100>>>0)<($101>>>0);
       if ($102) {
        _abort();
        // unreachable;
       } else {
        $$pre$phiZ2D = $99;$F4$0 = $100;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $90;
      $103 = ((($F4$0)) + 12|0);
      HEAP32[$103>>2] = $90;
      $104 = ((($90)) + 8|0);
      HEAP32[$104>>2] = $F4$0;
      $105 = ((($90)) + 12|0);
      HEAP32[$105>>2] = $93;
     }
     HEAP32[(356)>>2] = $81;
     HEAP32[(368)>>2] = $84;
     $mem$0 = $69;
     return ($mem$0|0);
    }
    $106 = HEAP32[(352)>>2]|0;
    $107 = ($106|0)==(0);
    if ($107) {
     $nb$0 = $4;
    } else {
     $108 = (0 - ($106))|0;
     $109 = $106 & $108;
     $110 = (($109) + -1)|0;
     $111 = $110 >>> 12;
     $112 = $111 & 16;
     $113 = $110 >>> $112;
     $114 = $113 >>> 5;
     $115 = $114 & 8;
     $116 = $115 | $112;
     $117 = $113 >>> $115;
     $118 = $117 >>> 2;
     $119 = $118 & 4;
     $120 = $116 | $119;
     $121 = $117 >>> $119;
     $122 = $121 >>> 1;
     $123 = $122 & 2;
     $124 = $120 | $123;
     $125 = $121 >>> $123;
     $126 = $125 >>> 1;
     $127 = $126 & 1;
     $128 = $124 | $127;
     $129 = $125 >>> $127;
     $130 = (($128) + ($129))|0;
     $131 = (652 + ($130<<2)|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = ((($132)) + 4|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = $134 & -8;
     $136 = (($135) - ($4))|0;
     $rsize$0$i = $136;$t$0$i = $132;$v$0$i = $132;
     while(1) {
      $137 = ((($t$0$i)) + 16|0);
      $138 = HEAP32[$137>>2]|0;
      $139 = ($138|0)==(0|0);
      if ($139) {
       $140 = ((($t$0$i)) + 20|0);
       $141 = HEAP32[$140>>2]|0;
       $142 = ($141|0)==(0|0);
       if ($142) {
        $rsize$0$i$lcssa = $rsize$0$i;$v$0$i$lcssa = $v$0$i;
        break;
       } else {
        $144 = $141;
       }
      } else {
       $144 = $138;
      }
      $143 = ((($144)) + 4|0);
      $145 = HEAP32[$143>>2]|0;
      $146 = $145 & -8;
      $147 = (($146) - ($4))|0;
      $148 = ($147>>>0)<($rsize$0$i>>>0);
      $$rsize$0$i = $148 ? $147 : $rsize$0$i;
      $$v$0$i = $148 ? $144 : $v$0$i;
      $rsize$0$i = $$rsize$0$i;$t$0$i = $144;$v$0$i = $$v$0$i;
     }
     $149 = HEAP32[(364)>>2]|0;
     $150 = ($v$0$i$lcssa>>>0)<($149>>>0);
     if ($150) {
      _abort();
      // unreachable;
     }
     $151 = (($v$0$i$lcssa) + ($4)|0);
     $152 = ($v$0$i$lcssa>>>0)<($151>>>0);
     if (!($152)) {
      _abort();
      // unreachable;
     }
     $153 = ((($v$0$i$lcssa)) + 24|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = ((($v$0$i$lcssa)) + 12|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = ($156|0)==($v$0$i$lcssa|0);
     do {
      if ($157) {
       $167 = ((($v$0$i$lcssa)) + 20|0);
       $168 = HEAP32[$167>>2]|0;
       $169 = ($168|0)==(0|0);
       if ($169) {
        $170 = ((($v$0$i$lcssa)) + 16|0);
        $171 = HEAP32[$170>>2]|0;
        $172 = ($171|0)==(0|0);
        if ($172) {
         $R$1$i = 0;
         break;
        } else {
         $R$0$i = $171;$RP$0$i = $170;
        }
       } else {
        $R$0$i = $168;$RP$0$i = $167;
       }
       while(1) {
        $173 = ((($R$0$i)) + 20|0);
        $174 = HEAP32[$173>>2]|0;
        $175 = ($174|0)==(0|0);
        if (!($175)) {
         $R$0$i = $174;$RP$0$i = $173;
         continue;
        }
        $176 = ((($R$0$i)) + 16|0);
        $177 = HEAP32[$176>>2]|0;
        $178 = ($177|0)==(0|0);
        if ($178) {
         $R$0$i$lcssa = $R$0$i;$RP$0$i$lcssa = $RP$0$i;
         break;
        } else {
         $R$0$i = $177;$RP$0$i = $176;
        }
       }
       $179 = ($RP$0$i$lcssa>>>0)<($149>>>0);
       if ($179) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$RP$0$i$lcssa>>2] = 0;
        $R$1$i = $R$0$i$lcssa;
        break;
       }
      } else {
       $158 = ((($v$0$i$lcssa)) + 8|0);
       $159 = HEAP32[$158>>2]|0;
       $160 = ($159>>>0)<($149>>>0);
       if ($160) {
        _abort();
        // unreachable;
       }
       $161 = ((($159)) + 12|0);
       $162 = HEAP32[$161>>2]|0;
       $163 = ($162|0)==($v$0$i$lcssa|0);
       if (!($163)) {
        _abort();
        // unreachable;
       }
       $164 = ((($156)) + 8|0);
       $165 = HEAP32[$164>>2]|0;
       $166 = ($165|0)==($v$0$i$lcssa|0);
       if ($166) {
        HEAP32[$161>>2] = $156;
        HEAP32[$164>>2] = $159;
        $R$1$i = $156;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $180 = ($154|0)==(0|0);
     do {
      if (!($180)) {
       $181 = ((($v$0$i$lcssa)) + 28|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = (652 + ($182<<2)|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = ($v$0$i$lcssa|0)==($184|0);
       if ($185) {
        HEAP32[$183>>2] = $R$1$i;
        $cond$i = ($R$1$i|0)==(0|0);
        if ($cond$i) {
         $186 = 1 << $182;
         $187 = $186 ^ -1;
         $188 = HEAP32[(352)>>2]|0;
         $189 = $188 & $187;
         HEAP32[(352)>>2] = $189;
         break;
        }
       } else {
        $190 = HEAP32[(364)>>2]|0;
        $191 = ($154>>>0)<($190>>>0);
        if ($191) {
         _abort();
         // unreachable;
        }
        $192 = ((($154)) + 16|0);
        $193 = HEAP32[$192>>2]|0;
        $194 = ($193|0)==($v$0$i$lcssa|0);
        if ($194) {
         HEAP32[$192>>2] = $R$1$i;
        } else {
         $195 = ((($154)) + 20|0);
         HEAP32[$195>>2] = $R$1$i;
        }
        $196 = ($R$1$i|0)==(0|0);
        if ($196) {
         break;
        }
       }
       $197 = HEAP32[(364)>>2]|0;
       $198 = ($R$1$i>>>0)<($197>>>0);
       if ($198) {
        _abort();
        // unreachable;
       }
       $199 = ((($R$1$i)) + 24|0);
       HEAP32[$199>>2] = $154;
       $200 = ((($v$0$i$lcssa)) + 16|0);
       $201 = HEAP32[$200>>2]|0;
       $202 = ($201|0)==(0|0);
       do {
        if (!($202)) {
         $203 = ($201>>>0)<($197>>>0);
         if ($203) {
          _abort();
          // unreachable;
         } else {
          $204 = ((($R$1$i)) + 16|0);
          HEAP32[$204>>2] = $201;
          $205 = ((($201)) + 24|0);
          HEAP32[$205>>2] = $R$1$i;
          break;
         }
        }
       } while(0);
       $206 = ((($v$0$i$lcssa)) + 20|0);
       $207 = HEAP32[$206>>2]|0;
       $208 = ($207|0)==(0|0);
       if (!($208)) {
        $209 = HEAP32[(364)>>2]|0;
        $210 = ($207>>>0)<($209>>>0);
        if ($210) {
         _abort();
         // unreachable;
        } else {
         $211 = ((($R$1$i)) + 20|0);
         HEAP32[$211>>2] = $207;
         $212 = ((($207)) + 24|0);
         HEAP32[$212>>2] = $R$1$i;
         break;
        }
       }
      }
     } while(0);
     $213 = ($rsize$0$i$lcssa>>>0)<(16);
     if ($213) {
      $214 = (($rsize$0$i$lcssa) + ($4))|0;
      $215 = $214 | 3;
      $216 = ((($v$0$i$lcssa)) + 4|0);
      HEAP32[$216>>2] = $215;
      $$sum4$i = (($214) + 4)|0;
      $217 = (($v$0$i$lcssa) + ($$sum4$i)|0);
      $218 = HEAP32[$217>>2]|0;
      $219 = $218 | 1;
      HEAP32[$217>>2] = $219;
     } else {
      $220 = $4 | 3;
      $221 = ((($v$0$i$lcssa)) + 4|0);
      HEAP32[$221>>2] = $220;
      $222 = $rsize$0$i$lcssa | 1;
      $$sum$i35 = $4 | 4;
      $223 = (($v$0$i$lcssa) + ($$sum$i35)|0);
      HEAP32[$223>>2] = $222;
      $$sum1$i = (($rsize$0$i$lcssa) + ($4))|0;
      $224 = (($v$0$i$lcssa) + ($$sum1$i)|0);
      HEAP32[$224>>2] = $rsize$0$i$lcssa;
      $225 = HEAP32[(356)>>2]|0;
      $226 = ($225|0)==(0);
      if (!($226)) {
       $227 = HEAP32[(368)>>2]|0;
       $228 = $225 >>> 3;
       $229 = $228 << 1;
       $230 = (388 + ($229<<2)|0);
       $231 = HEAP32[348>>2]|0;
       $232 = 1 << $228;
       $233 = $231 & $232;
       $234 = ($233|0)==(0);
       if ($234) {
        $235 = $231 | $232;
        HEAP32[348>>2] = $235;
        $$pre$i = (($229) + 2)|0;
        $$pre8$i = (388 + ($$pre$i<<2)|0);
        $$pre$phi$iZ2D = $$pre8$i;$F1$0$i = $230;
       } else {
        $$sum3$i = (($229) + 2)|0;
        $236 = (388 + ($$sum3$i<<2)|0);
        $237 = HEAP32[$236>>2]|0;
        $238 = HEAP32[(364)>>2]|0;
        $239 = ($237>>>0)<($238>>>0);
        if ($239) {
         _abort();
         // unreachable;
        } else {
         $$pre$phi$iZ2D = $236;$F1$0$i = $237;
        }
       }
       HEAP32[$$pre$phi$iZ2D>>2] = $227;
       $240 = ((($F1$0$i)) + 12|0);
       HEAP32[$240>>2] = $227;
       $241 = ((($227)) + 8|0);
       HEAP32[$241>>2] = $F1$0$i;
       $242 = ((($227)) + 12|0);
       HEAP32[$242>>2] = $230;
      }
      HEAP32[(356)>>2] = $rsize$0$i$lcssa;
      HEAP32[(368)>>2] = $151;
     }
     $243 = ((($v$0$i$lcssa)) + 8|0);
     $mem$0 = $243;
     return ($mem$0|0);
    }
   } else {
    $nb$0 = $4;
   }
  } else {
   $244 = ($bytes>>>0)>(4294967231);
   if ($244) {
    $nb$0 = -1;
   } else {
    $245 = (($bytes) + 11)|0;
    $246 = $245 & -8;
    $247 = HEAP32[(352)>>2]|0;
    $248 = ($247|0)==(0);
    if ($248) {
     $nb$0 = $246;
    } else {
     $249 = (0 - ($246))|0;
     $250 = $245 >>> 8;
     $251 = ($250|0)==(0);
     if ($251) {
      $idx$0$i = 0;
     } else {
      $252 = ($246>>>0)>(16777215);
      if ($252) {
       $idx$0$i = 31;
      } else {
       $253 = (($250) + 1048320)|0;
       $254 = $253 >>> 16;
       $255 = $254 & 8;
       $256 = $250 << $255;
       $257 = (($256) + 520192)|0;
       $258 = $257 >>> 16;
       $259 = $258 & 4;
       $260 = $259 | $255;
       $261 = $256 << $259;
       $262 = (($261) + 245760)|0;
       $263 = $262 >>> 16;
       $264 = $263 & 2;
       $265 = $260 | $264;
       $266 = (14 - ($265))|0;
       $267 = $261 << $264;
       $268 = $267 >>> 15;
       $269 = (($266) + ($268))|0;
       $270 = $269 << 1;
       $271 = (($269) + 7)|0;
       $272 = $246 >>> $271;
       $273 = $272 & 1;
       $274 = $273 | $270;
       $idx$0$i = $274;
      }
     }
     $275 = (652 + ($idx$0$i<<2)|0);
     $276 = HEAP32[$275>>2]|0;
     $277 = ($276|0)==(0|0);
     L123: do {
      if ($277) {
       $rsize$2$i = $249;$t$1$i = 0;$v$2$i = 0;
       label = 86;
      } else {
       $278 = ($idx$0$i|0)==(31);
       $279 = $idx$0$i >>> 1;
       $280 = (25 - ($279))|0;
       $281 = $278 ? 0 : $280;
       $282 = $246 << $281;
       $rsize$0$i15 = $249;$rst$0$i = 0;$sizebits$0$i = $282;$t$0$i14 = $276;$v$0$i16 = 0;
       while(1) {
        $283 = ((($t$0$i14)) + 4|0);
        $284 = HEAP32[$283>>2]|0;
        $285 = $284 & -8;
        $286 = (($285) - ($246))|0;
        $287 = ($286>>>0)<($rsize$0$i15>>>0);
        if ($287) {
         $288 = ($285|0)==($246|0);
         if ($288) {
          $rsize$331$i = $286;$t$230$i = $t$0$i14;$v$332$i = $t$0$i14;
          label = 90;
          break L123;
         } else {
          $rsize$1$i = $286;$v$1$i = $t$0$i14;
         }
        } else {
         $rsize$1$i = $rsize$0$i15;$v$1$i = $v$0$i16;
        }
        $289 = ((($t$0$i14)) + 20|0);
        $290 = HEAP32[$289>>2]|0;
        $291 = $sizebits$0$i >>> 31;
        $292 = (((($t$0$i14)) + 16|0) + ($291<<2)|0);
        $293 = HEAP32[$292>>2]|0;
        $294 = ($290|0)==(0|0);
        $295 = ($290|0)==($293|0);
        $or$cond19$i = $294 | $295;
        $rst$1$i = $or$cond19$i ? $rst$0$i : $290;
        $296 = ($293|0)==(0|0);
        $297 = $sizebits$0$i << 1;
        if ($296) {
         $rsize$2$i = $rsize$1$i;$t$1$i = $rst$1$i;$v$2$i = $v$1$i;
         label = 86;
         break;
        } else {
         $rsize$0$i15 = $rsize$1$i;$rst$0$i = $rst$1$i;$sizebits$0$i = $297;$t$0$i14 = $293;$v$0$i16 = $v$1$i;
        }
       }
      }
     } while(0);
     if ((label|0) == 86) {
      $298 = ($t$1$i|0)==(0|0);
      $299 = ($v$2$i|0)==(0|0);
      $or$cond$i = $298 & $299;
      if ($or$cond$i) {
       $300 = 2 << $idx$0$i;
       $301 = (0 - ($300))|0;
       $302 = $300 | $301;
       $303 = $247 & $302;
       $304 = ($303|0)==(0);
       if ($304) {
        $nb$0 = $246;
        break;
       }
       $305 = (0 - ($303))|0;
       $306 = $303 & $305;
       $307 = (($306) + -1)|0;
       $308 = $307 >>> 12;
       $309 = $308 & 16;
       $310 = $307 >>> $309;
       $311 = $310 >>> 5;
       $312 = $311 & 8;
       $313 = $312 | $309;
       $314 = $310 >>> $312;
       $315 = $314 >>> 2;
       $316 = $315 & 4;
       $317 = $313 | $316;
       $318 = $314 >>> $316;
       $319 = $318 >>> 1;
       $320 = $319 & 2;
       $321 = $317 | $320;
       $322 = $318 >>> $320;
       $323 = $322 >>> 1;
       $324 = $323 & 1;
       $325 = $321 | $324;
       $326 = $322 >>> $324;
       $327 = (($325) + ($326))|0;
       $328 = (652 + ($327<<2)|0);
       $329 = HEAP32[$328>>2]|0;
       $t$2$ph$i = $329;$v$3$ph$i = 0;
      } else {
       $t$2$ph$i = $t$1$i;$v$3$ph$i = $v$2$i;
      }
      $330 = ($t$2$ph$i|0)==(0|0);
      if ($330) {
       $rsize$3$lcssa$i = $rsize$2$i;$v$3$lcssa$i = $v$3$ph$i;
      } else {
       $rsize$331$i = $rsize$2$i;$t$230$i = $t$2$ph$i;$v$332$i = $v$3$ph$i;
       label = 90;
      }
     }
     if ((label|0) == 90) {
      while(1) {
       label = 0;
       $331 = ((($t$230$i)) + 4|0);
       $332 = HEAP32[$331>>2]|0;
       $333 = $332 & -8;
       $334 = (($333) - ($246))|0;
       $335 = ($334>>>0)<($rsize$331$i>>>0);
       $$rsize$3$i = $335 ? $334 : $rsize$331$i;
       $t$2$v$3$i = $335 ? $t$230$i : $v$332$i;
       $336 = ((($t$230$i)) + 16|0);
       $337 = HEAP32[$336>>2]|0;
       $338 = ($337|0)==(0|0);
       if (!($338)) {
        $rsize$331$i = $$rsize$3$i;$t$230$i = $337;$v$332$i = $t$2$v$3$i;
        label = 90;
        continue;
       }
       $339 = ((($t$230$i)) + 20|0);
       $340 = HEAP32[$339>>2]|0;
       $341 = ($340|0)==(0|0);
       if ($341) {
        $rsize$3$lcssa$i = $$rsize$3$i;$v$3$lcssa$i = $t$2$v$3$i;
        break;
       } else {
        $rsize$331$i = $$rsize$3$i;$t$230$i = $340;$v$332$i = $t$2$v$3$i;
        label = 90;
       }
      }
     }
     $342 = ($v$3$lcssa$i|0)==(0|0);
     if ($342) {
      $nb$0 = $246;
     } else {
      $343 = HEAP32[(356)>>2]|0;
      $344 = (($343) - ($246))|0;
      $345 = ($rsize$3$lcssa$i>>>0)<($344>>>0);
      if ($345) {
       $346 = HEAP32[(364)>>2]|0;
       $347 = ($v$3$lcssa$i>>>0)<($346>>>0);
       if ($347) {
        _abort();
        // unreachable;
       }
       $348 = (($v$3$lcssa$i) + ($246)|0);
       $349 = ($v$3$lcssa$i>>>0)<($348>>>0);
       if (!($349)) {
        _abort();
        // unreachable;
       }
       $350 = ((($v$3$lcssa$i)) + 24|0);
       $351 = HEAP32[$350>>2]|0;
       $352 = ((($v$3$lcssa$i)) + 12|0);
       $353 = HEAP32[$352>>2]|0;
       $354 = ($353|0)==($v$3$lcssa$i|0);
       do {
        if ($354) {
         $364 = ((($v$3$lcssa$i)) + 20|0);
         $365 = HEAP32[$364>>2]|0;
         $366 = ($365|0)==(0|0);
         if ($366) {
          $367 = ((($v$3$lcssa$i)) + 16|0);
          $368 = HEAP32[$367>>2]|0;
          $369 = ($368|0)==(0|0);
          if ($369) {
           $R$1$i20 = 0;
           break;
          } else {
           $R$0$i18 = $368;$RP$0$i17 = $367;
          }
         } else {
          $R$0$i18 = $365;$RP$0$i17 = $364;
         }
         while(1) {
          $370 = ((($R$0$i18)) + 20|0);
          $371 = HEAP32[$370>>2]|0;
          $372 = ($371|0)==(0|0);
          if (!($372)) {
           $R$0$i18 = $371;$RP$0$i17 = $370;
           continue;
          }
          $373 = ((($R$0$i18)) + 16|0);
          $374 = HEAP32[$373>>2]|0;
          $375 = ($374|0)==(0|0);
          if ($375) {
           $R$0$i18$lcssa = $R$0$i18;$RP$0$i17$lcssa = $RP$0$i17;
           break;
          } else {
           $R$0$i18 = $374;$RP$0$i17 = $373;
          }
         }
         $376 = ($RP$0$i17$lcssa>>>0)<($346>>>0);
         if ($376) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$RP$0$i17$lcssa>>2] = 0;
          $R$1$i20 = $R$0$i18$lcssa;
          break;
         }
        } else {
         $355 = ((($v$3$lcssa$i)) + 8|0);
         $356 = HEAP32[$355>>2]|0;
         $357 = ($356>>>0)<($346>>>0);
         if ($357) {
          _abort();
          // unreachable;
         }
         $358 = ((($356)) + 12|0);
         $359 = HEAP32[$358>>2]|0;
         $360 = ($359|0)==($v$3$lcssa$i|0);
         if (!($360)) {
          _abort();
          // unreachable;
         }
         $361 = ((($353)) + 8|0);
         $362 = HEAP32[$361>>2]|0;
         $363 = ($362|0)==($v$3$lcssa$i|0);
         if ($363) {
          HEAP32[$358>>2] = $353;
          HEAP32[$361>>2] = $356;
          $R$1$i20 = $353;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $377 = ($351|0)==(0|0);
       do {
        if (!($377)) {
         $378 = ((($v$3$lcssa$i)) + 28|0);
         $379 = HEAP32[$378>>2]|0;
         $380 = (652 + ($379<<2)|0);
         $381 = HEAP32[$380>>2]|0;
         $382 = ($v$3$lcssa$i|0)==($381|0);
         if ($382) {
          HEAP32[$380>>2] = $R$1$i20;
          $cond$i21 = ($R$1$i20|0)==(0|0);
          if ($cond$i21) {
           $383 = 1 << $379;
           $384 = $383 ^ -1;
           $385 = HEAP32[(352)>>2]|0;
           $386 = $385 & $384;
           HEAP32[(352)>>2] = $386;
           break;
          }
         } else {
          $387 = HEAP32[(364)>>2]|0;
          $388 = ($351>>>0)<($387>>>0);
          if ($388) {
           _abort();
           // unreachable;
          }
          $389 = ((($351)) + 16|0);
          $390 = HEAP32[$389>>2]|0;
          $391 = ($390|0)==($v$3$lcssa$i|0);
          if ($391) {
           HEAP32[$389>>2] = $R$1$i20;
          } else {
           $392 = ((($351)) + 20|0);
           HEAP32[$392>>2] = $R$1$i20;
          }
          $393 = ($R$1$i20|0)==(0|0);
          if ($393) {
           break;
          }
         }
         $394 = HEAP32[(364)>>2]|0;
         $395 = ($R$1$i20>>>0)<($394>>>0);
         if ($395) {
          _abort();
          // unreachable;
         }
         $396 = ((($R$1$i20)) + 24|0);
         HEAP32[$396>>2] = $351;
         $397 = ((($v$3$lcssa$i)) + 16|0);
         $398 = HEAP32[$397>>2]|0;
         $399 = ($398|0)==(0|0);
         do {
          if (!($399)) {
           $400 = ($398>>>0)<($394>>>0);
           if ($400) {
            _abort();
            // unreachable;
           } else {
            $401 = ((($R$1$i20)) + 16|0);
            HEAP32[$401>>2] = $398;
            $402 = ((($398)) + 24|0);
            HEAP32[$402>>2] = $R$1$i20;
            break;
           }
          }
         } while(0);
         $403 = ((($v$3$lcssa$i)) + 20|0);
         $404 = HEAP32[$403>>2]|0;
         $405 = ($404|0)==(0|0);
         if (!($405)) {
          $406 = HEAP32[(364)>>2]|0;
          $407 = ($404>>>0)<($406>>>0);
          if ($407) {
           _abort();
           // unreachable;
          } else {
           $408 = ((($R$1$i20)) + 20|0);
           HEAP32[$408>>2] = $404;
           $409 = ((($404)) + 24|0);
           HEAP32[$409>>2] = $R$1$i20;
           break;
          }
         }
        }
       } while(0);
       $410 = ($rsize$3$lcssa$i>>>0)<(16);
       L199: do {
        if ($410) {
         $411 = (($rsize$3$lcssa$i) + ($246))|0;
         $412 = $411 | 3;
         $413 = ((($v$3$lcssa$i)) + 4|0);
         HEAP32[$413>>2] = $412;
         $$sum18$i = (($411) + 4)|0;
         $414 = (($v$3$lcssa$i) + ($$sum18$i)|0);
         $415 = HEAP32[$414>>2]|0;
         $416 = $415 | 1;
         HEAP32[$414>>2] = $416;
        } else {
         $417 = $246 | 3;
         $418 = ((($v$3$lcssa$i)) + 4|0);
         HEAP32[$418>>2] = $417;
         $419 = $rsize$3$lcssa$i | 1;
         $$sum$i2334 = $246 | 4;
         $420 = (($v$3$lcssa$i) + ($$sum$i2334)|0);
         HEAP32[$420>>2] = $419;
         $$sum1$i24 = (($rsize$3$lcssa$i) + ($246))|0;
         $421 = (($v$3$lcssa$i) + ($$sum1$i24)|0);
         HEAP32[$421>>2] = $rsize$3$lcssa$i;
         $422 = $rsize$3$lcssa$i >>> 3;
         $423 = ($rsize$3$lcssa$i>>>0)<(256);
         if ($423) {
          $424 = $422 << 1;
          $425 = (388 + ($424<<2)|0);
          $426 = HEAP32[348>>2]|0;
          $427 = 1 << $422;
          $428 = $426 & $427;
          $429 = ($428|0)==(0);
          if ($429) {
           $430 = $426 | $427;
           HEAP32[348>>2] = $430;
           $$pre$i25 = (($424) + 2)|0;
           $$pre43$i = (388 + ($$pre$i25<<2)|0);
           $$pre$phi$i26Z2D = $$pre43$i;$F5$0$i = $425;
          } else {
           $$sum17$i = (($424) + 2)|0;
           $431 = (388 + ($$sum17$i<<2)|0);
           $432 = HEAP32[$431>>2]|0;
           $433 = HEAP32[(364)>>2]|0;
           $434 = ($432>>>0)<($433>>>0);
           if ($434) {
            _abort();
            // unreachable;
           } else {
            $$pre$phi$i26Z2D = $431;$F5$0$i = $432;
           }
          }
          HEAP32[$$pre$phi$i26Z2D>>2] = $348;
          $435 = ((($F5$0$i)) + 12|0);
          HEAP32[$435>>2] = $348;
          $$sum15$i = (($246) + 8)|0;
          $436 = (($v$3$lcssa$i) + ($$sum15$i)|0);
          HEAP32[$436>>2] = $F5$0$i;
          $$sum16$i = (($246) + 12)|0;
          $437 = (($v$3$lcssa$i) + ($$sum16$i)|0);
          HEAP32[$437>>2] = $425;
          break;
         }
         $438 = $rsize$3$lcssa$i >>> 8;
         $439 = ($438|0)==(0);
         if ($439) {
          $I7$0$i = 0;
         } else {
          $440 = ($rsize$3$lcssa$i>>>0)>(16777215);
          if ($440) {
           $I7$0$i = 31;
          } else {
           $441 = (($438) + 1048320)|0;
           $442 = $441 >>> 16;
           $443 = $442 & 8;
           $444 = $438 << $443;
           $445 = (($444) + 520192)|0;
           $446 = $445 >>> 16;
           $447 = $446 & 4;
           $448 = $447 | $443;
           $449 = $444 << $447;
           $450 = (($449) + 245760)|0;
           $451 = $450 >>> 16;
           $452 = $451 & 2;
           $453 = $448 | $452;
           $454 = (14 - ($453))|0;
           $455 = $449 << $452;
           $456 = $455 >>> 15;
           $457 = (($454) + ($456))|0;
           $458 = $457 << 1;
           $459 = (($457) + 7)|0;
           $460 = $rsize$3$lcssa$i >>> $459;
           $461 = $460 & 1;
           $462 = $461 | $458;
           $I7$0$i = $462;
          }
         }
         $463 = (652 + ($I7$0$i<<2)|0);
         $$sum2$i = (($246) + 28)|0;
         $464 = (($v$3$lcssa$i) + ($$sum2$i)|0);
         HEAP32[$464>>2] = $I7$0$i;
         $$sum3$i27 = (($246) + 16)|0;
         $465 = (($v$3$lcssa$i) + ($$sum3$i27)|0);
         $$sum4$i28 = (($246) + 20)|0;
         $466 = (($v$3$lcssa$i) + ($$sum4$i28)|0);
         HEAP32[$466>>2] = 0;
         HEAP32[$465>>2] = 0;
         $467 = HEAP32[(352)>>2]|0;
         $468 = 1 << $I7$0$i;
         $469 = $467 & $468;
         $470 = ($469|0)==(0);
         if ($470) {
          $471 = $467 | $468;
          HEAP32[(352)>>2] = $471;
          HEAP32[$463>>2] = $348;
          $$sum5$i = (($246) + 24)|0;
          $472 = (($v$3$lcssa$i) + ($$sum5$i)|0);
          HEAP32[$472>>2] = $463;
          $$sum6$i = (($246) + 12)|0;
          $473 = (($v$3$lcssa$i) + ($$sum6$i)|0);
          HEAP32[$473>>2] = $348;
          $$sum7$i = (($246) + 8)|0;
          $474 = (($v$3$lcssa$i) + ($$sum7$i)|0);
          HEAP32[$474>>2] = $348;
          break;
         }
         $475 = HEAP32[$463>>2]|0;
         $476 = ((($475)) + 4|0);
         $477 = HEAP32[$476>>2]|0;
         $478 = $477 & -8;
         $479 = ($478|0)==($rsize$3$lcssa$i|0);
         L217: do {
          if ($479) {
           $T$0$lcssa$i = $475;
          } else {
           $480 = ($I7$0$i|0)==(31);
           $481 = $I7$0$i >>> 1;
           $482 = (25 - ($481))|0;
           $483 = $480 ? 0 : $482;
           $484 = $rsize$3$lcssa$i << $483;
           $K12$029$i = $484;$T$028$i = $475;
           while(1) {
            $491 = $K12$029$i >>> 31;
            $492 = (((($T$028$i)) + 16|0) + ($491<<2)|0);
            $487 = HEAP32[$492>>2]|0;
            $493 = ($487|0)==(0|0);
            if ($493) {
             $$lcssa232 = $492;$T$028$i$lcssa = $T$028$i;
             break;
            }
            $485 = $K12$029$i << 1;
            $486 = ((($487)) + 4|0);
            $488 = HEAP32[$486>>2]|0;
            $489 = $488 & -8;
            $490 = ($489|0)==($rsize$3$lcssa$i|0);
            if ($490) {
             $T$0$lcssa$i = $487;
             break L217;
            } else {
             $K12$029$i = $485;$T$028$i = $487;
            }
           }
           $494 = HEAP32[(364)>>2]|0;
           $495 = ($$lcssa232>>>0)<($494>>>0);
           if ($495) {
            _abort();
            // unreachable;
           } else {
            HEAP32[$$lcssa232>>2] = $348;
            $$sum11$i = (($246) + 24)|0;
            $496 = (($v$3$lcssa$i) + ($$sum11$i)|0);
            HEAP32[$496>>2] = $T$028$i$lcssa;
            $$sum12$i = (($246) + 12)|0;
            $497 = (($v$3$lcssa$i) + ($$sum12$i)|0);
            HEAP32[$497>>2] = $348;
            $$sum13$i = (($246) + 8)|0;
            $498 = (($v$3$lcssa$i) + ($$sum13$i)|0);
            HEAP32[$498>>2] = $348;
            break L199;
           }
          }
         } while(0);
         $499 = ((($T$0$lcssa$i)) + 8|0);
         $500 = HEAP32[$499>>2]|0;
         $501 = HEAP32[(364)>>2]|0;
         $502 = ($500>>>0)>=($501>>>0);
         $not$$i = ($T$0$lcssa$i>>>0)>=($501>>>0);
         $503 = $502 & $not$$i;
         if ($503) {
          $504 = ((($500)) + 12|0);
          HEAP32[$504>>2] = $348;
          HEAP32[$499>>2] = $348;
          $$sum8$i = (($246) + 8)|0;
          $505 = (($v$3$lcssa$i) + ($$sum8$i)|0);
          HEAP32[$505>>2] = $500;
          $$sum9$i = (($246) + 12)|0;
          $506 = (($v$3$lcssa$i) + ($$sum9$i)|0);
          HEAP32[$506>>2] = $T$0$lcssa$i;
          $$sum10$i = (($246) + 24)|0;
          $507 = (($v$3$lcssa$i) + ($$sum10$i)|0);
          HEAP32[$507>>2] = 0;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $508 = ((($v$3$lcssa$i)) + 8|0);
       $mem$0 = $508;
       return ($mem$0|0);
      } else {
       $nb$0 = $246;
      }
     }
    }
   }
  }
 } while(0);
 $509 = HEAP32[(356)>>2]|0;
 $510 = ($509>>>0)<($nb$0>>>0);
 if (!($510)) {
  $511 = (($509) - ($nb$0))|0;
  $512 = HEAP32[(368)>>2]|0;
  $513 = ($511>>>0)>(15);
  if ($513) {
   $514 = (($512) + ($nb$0)|0);
   HEAP32[(368)>>2] = $514;
   HEAP32[(356)>>2] = $511;
   $515 = $511 | 1;
   $$sum2 = (($nb$0) + 4)|0;
   $516 = (($512) + ($$sum2)|0);
   HEAP32[$516>>2] = $515;
   $517 = (($512) + ($509)|0);
   HEAP32[$517>>2] = $511;
   $518 = $nb$0 | 3;
   $519 = ((($512)) + 4|0);
   HEAP32[$519>>2] = $518;
  } else {
   HEAP32[(356)>>2] = 0;
   HEAP32[(368)>>2] = 0;
   $520 = $509 | 3;
   $521 = ((($512)) + 4|0);
   HEAP32[$521>>2] = $520;
   $$sum1 = (($509) + 4)|0;
   $522 = (($512) + ($$sum1)|0);
   $523 = HEAP32[$522>>2]|0;
   $524 = $523 | 1;
   HEAP32[$522>>2] = $524;
  }
  $525 = ((($512)) + 8|0);
  $mem$0 = $525;
  return ($mem$0|0);
 }
 $526 = HEAP32[(360)>>2]|0;
 $527 = ($526>>>0)>($nb$0>>>0);
 if ($527) {
  $528 = (($526) - ($nb$0))|0;
  HEAP32[(360)>>2] = $528;
  $529 = HEAP32[(372)>>2]|0;
  $530 = (($529) + ($nb$0)|0);
  HEAP32[(372)>>2] = $530;
  $531 = $528 | 1;
  $$sum = (($nb$0) + 4)|0;
  $532 = (($529) + ($$sum)|0);
  HEAP32[$532>>2] = $531;
  $533 = $nb$0 | 3;
  $534 = ((($529)) + 4|0);
  HEAP32[$534>>2] = $533;
  $535 = ((($529)) + 8|0);
  $mem$0 = $535;
  return ($mem$0|0);
 }
 $536 = HEAP32[820>>2]|0;
 $537 = ($536|0)==(0);
 do {
  if ($537) {
   $538 = (_sysconf(30)|0);
   $539 = (($538) + -1)|0;
   $540 = $539 & $538;
   $541 = ($540|0)==(0);
   if ($541) {
    HEAP32[(828)>>2] = $538;
    HEAP32[(824)>>2] = $538;
    HEAP32[(832)>>2] = -1;
    HEAP32[(836)>>2] = -1;
    HEAP32[(840)>>2] = 0;
    HEAP32[(792)>>2] = 0;
    $542 = (_time((0|0))|0);
    $543 = $542 & -16;
    $544 = $543 ^ 1431655768;
    HEAP32[820>>2] = $544;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $545 = (($nb$0) + 48)|0;
 $546 = HEAP32[(828)>>2]|0;
 $547 = (($nb$0) + 47)|0;
 $548 = (($546) + ($547))|0;
 $549 = (0 - ($546))|0;
 $550 = $548 & $549;
 $551 = ($550>>>0)>($nb$0>>>0);
 if (!($551)) {
  $mem$0 = 0;
  return ($mem$0|0);
 }
 $552 = HEAP32[(788)>>2]|0;
 $553 = ($552|0)==(0);
 if (!($553)) {
  $554 = HEAP32[(780)>>2]|0;
  $555 = (($554) + ($550))|0;
  $556 = ($555>>>0)<=($554>>>0);
  $557 = ($555>>>0)>($552>>>0);
  $or$cond1$i = $556 | $557;
  if ($or$cond1$i) {
   $mem$0 = 0;
   return ($mem$0|0);
  }
 }
 $558 = HEAP32[(792)>>2]|0;
 $559 = $558 & 4;
 $560 = ($559|0)==(0);
 L258: do {
  if ($560) {
   $561 = HEAP32[(372)>>2]|0;
   $562 = ($561|0)==(0|0);
   L260: do {
    if ($562) {
     label = 174;
    } else {
     $sp$0$i$i = (796);
     while(1) {
      $563 = HEAP32[$sp$0$i$i>>2]|0;
      $564 = ($563>>>0)>($561>>>0);
      if (!($564)) {
       $565 = ((($sp$0$i$i)) + 4|0);
       $566 = HEAP32[$565>>2]|0;
       $567 = (($563) + ($566)|0);
       $568 = ($567>>>0)>($561>>>0);
       if ($568) {
        $$lcssa228 = $sp$0$i$i;$$lcssa230 = $565;
        break;
       }
      }
      $569 = ((($sp$0$i$i)) + 8|0);
      $570 = HEAP32[$569>>2]|0;
      $571 = ($570|0)==(0|0);
      if ($571) {
       label = 174;
       break L260;
      } else {
       $sp$0$i$i = $570;
      }
     }
     $594 = HEAP32[(360)>>2]|0;
     $595 = (($548) - ($594))|0;
     $596 = $595 & $549;
     $597 = ($596>>>0)<(2147483647);
     if ($597) {
      $598 = (_sbrk(($596|0))|0);
      $599 = HEAP32[$$lcssa228>>2]|0;
      $600 = HEAP32[$$lcssa230>>2]|0;
      $601 = (($599) + ($600)|0);
      $602 = ($598|0)==($601|0);
      $$3$i = $602 ? $596 : 0;
      if ($602) {
       $603 = ($598|0)==((-1)|0);
       if ($603) {
        $tsize$0323944$i = $$3$i;
       } else {
        $tbase$255$i = $598;$tsize$254$i = $$3$i;
        label = 194;
        break L258;
       }
      } else {
       $br$0$ph$i = $598;$ssize$1$ph$i = $596;$tsize$0$ph$i = $$3$i;
       label = 184;
      }
     } else {
      $tsize$0323944$i = 0;
     }
    }
   } while(0);
   do {
    if ((label|0) == 174) {
     $572 = (_sbrk(0)|0);
     $573 = ($572|0)==((-1)|0);
     if ($573) {
      $tsize$0323944$i = 0;
     } else {
      $574 = $572;
      $575 = HEAP32[(824)>>2]|0;
      $576 = (($575) + -1)|0;
      $577 = $576 & $574;
      $578 = ($577|0)==(0);
      if ($578) {
       $ssize$0$i = $550;
      } else {
       $579 = (($576) + ($574))|0;
       $580 = (0 - ($575))|0;
       $581 = $579 & $580;
       $582 = (($550) - ($574))|0;
       $583 = (($582) + ($581))|0;
       $ssize$0$i = $583;
      }
      $584 = HEAP32[(780)>>2]|0;
      $585 = (($584) + ($ssize$0$i))|0;
      $586 = ($ssize$0$i>>>0)>($nb$0>>>0);
      $587 = ($ssize$0$i>>>0)<(2147483647);
      $or$cond$i30 = $586 & $587;
      if ($or$cond$i30) {
       $588 = HEAP32[(788)>>2]|0;
       $589 = ($588|0)==(0);
       if (!($589)) {
        $590 = ($585>>>0)<=($584>>>0);
        $591 = ($585>>>0)>($588>>>0);
        $or$cond2$i = $590 | $591;
        if ($or$cond2$i) {
         $tsize$0323944$i = 0;
         break;
        }
       }
       $592 = (_sbrk(($ssize$0$i|0))|0);
       $593 = ($592|0)==($572|0);
       $ssize$0$$i = $593 ? $ssize$0$i : 0;
       if ($593) {
        $tbase$255$i = $572;$tsize$254$i = $ssize$0$$i;
        label = 194;
        break L258;
       } else {
        $br$0$ph$i = $592;$ssize$1$ph$i = $ssize$0$i;$tsize$0$ph$i = $ssize$0$$i;
        label = 184;
       }
      } else {
       $tsize$0323944$i = 0;
      }
     }
    }
   } while(0);
   L280: do {
    if ((label|0) == 184) {
     $604 = (0 - ($ssize$1$ph$i))|0;
     $605 = ($br$0$ph$i|0)!=((-1)|0);
     $606 = ($ssize$1$ph$i>>>0)<(2147483647);
     $or$cond5$i = $606 & $605;
     $607 = ($545>>>0)>($ssize$1$ph$i>>>0);
     $or$cond6$i = $607 & $or$cond5$i;
     do {
      if ($or$cond6$i) {
       $608 = HEAP32[(828)>>2]|0;
       $609 = (($547) - ($ssize$1$ph$i))|0;
       $610 = (($609) + ($608))|0;
       $611 = (0 - ($608))|0;
       $612 = $610 & $611;
       $613 = ($612>>>0)<(2147483647);
       if ($613) {
        $614 = (_sbrk(($612|0))|0);
        $615 = ($614|0)==((-1)|0);
        if ($615) {
         (_sbrk(($604|0))|0);
         $tsize$0323944$i = $tsize$0$ph$i;
         break L280;
        } else {
         $616 = (($612) + ($ssize$1$ph$i))|0;
         $ssize$2$i = $616;
         break;
        }
       } else {
        $ssize$2$i = $ssize$1$ph$i;
       }
      } else {
       $ssize$2$i = $ssize$1$ph$i;
      }
     } while(0);
     $617 = ($br$0$ph$i|0)==((-1)|0);
     if ($617) {
      $tsize$0323944$i = $tsize$0$ph$i;
     } else {
      $tbase$255$i = $br$0$ph$i;$tsize$254$i = $ssize$2$i;
      label = 194;
      break L258;
     }
    }
   } while(0);
   $618 = HEAP32[(792)>>2]|0;
   $619 = $618 | 4;
   HEAP32[(792)>>2] = $619;
   $tsize$1$i = $tsize$0323944$i;
   label = 191;
  } else {
   $tsize$1$i = 0;
   label = 191;
  }
 } while(0);
 if ((label|0) == 191) {
  $620 = ($550>>>0)<(2147483647);
  if ($620) {
   $621 = (_sbrk(($550|0))|0);
   $622 = (_sbrk(0)|0);
   $623 = ($621|0)!=((-1)|0);
   $624 = ($622|0)!=((-1)|0);
   $or$cond3$i = $623 & $624;
   $625 = ($621>>>0)<($622>>>0);
   $or$cond8$i = $625 & $or$cond3$i;
   if ($or$cond8$i) {
    $626 = $622;
    $627 = $621;
    $628 = (($626) - ($627))|0;
    $629 = (($nb$0) + 40)|0;
    $630 = ($628>>>0)>($629>>>0);
    $$tsize$1$i = $630 ? $628 : $tsize$1$i;
    if ($630) {
     $tbase$255$i = $621;$tsize$254$i = $$tsize$1$i;
     label = 194;
    }
   }
  }
 }
 if ((label|0) == 194) {
  $631 = HEAP32[(780)>>2]|0;
  $632 = (($631) + ($tsize$254$i))|0;
  HEAP32[(780)>>2] = $632;
  $633 = HEAP32[(784)>>2]|0;
  $634 = ($632>>>0)>($633>>>0);
  if ($634) {
   HEAP32[(784)>>2] = $632;
  }
  $635 = HEAP32[(372)>>2]|0;
  $636 = ($635|0)==(0|0);
  L299: do {
   if ($636) {
    $637 = HEAP32[(364)>>2]|0;
    $638 = ($637|0)==(0|0);
    $639 = ($tbase$255$i>>>0)<($637>>>0);
    $or$cond9$i = $638 | $639;
    if ($or$cond9$i) {
     HEAP32[(364)>>2] = $tbase$255$i;
    }
    HEAP32[(796)>>2] = $tbase$255$i;
    HEAP32[(800)>>2] = $tsize$254$i;
    HEAP32[(808)>>2] = 0;
    $640 = HEAP32[820>>2]|0;
    HEAP32[(384)>>2] = $640;
    HEAP32[(380)>>2] = -1;
    $i$02$i$i = 0;
    while(1) {
     $641 = $i$02$i$i << 1;
     $642 = (388 + ($641<<2)|0);
     $$sum$i$i = (($641) + 3)|0;
     $643 = (388 + ($$sum$i$i<<2)|0);
     HEAP32[$643>>2] = $642;
     $$sum1$i$i = (($641) + 2)|0;
     $644 = (388 + ($$sum1$i$i<<2)|0);
     HEAP32[$644>>2] = $642;
     $645 = (($i$02$i$i) + 1)|0;
     $exitcond$i$i = ($645|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $i$02$i$i = $645;
     }
    }
    $646 = (($tsize$254$i) + -40)|0;
    $647 = ((($tbase$255$i)) + 8|0);
    $648 = $647;
    $649 = $648 & 7;
    $650 = ($649|0)==(0);
    $651 = (0 - ($648))|0;
    $652 = $651 & 7;
    $653 = $650 ? 0 : $652;
    $654 = (($tbase$255$i) + ($653)|0);
    $655 = (($646) - ($653))|0;
    HEAP32[(372)>>2] = $654;
    HEAP32[(360)>>2] = $655;
    $656 = $655 | 1;
    $$sum$i13$i = (($653) + 4)|0;
    $657 = (($tbase$255$i) + ($$sum$i13$i)|0);
    HEAP32[$657>>2] = $656;
    $$sum2$i$i = (($tsize$254$i) + -36)|0;
    $658 = (($tbase$255$i) + ($$sum2$i$i)|0);
    HEAP32[$658>>2] = 40;
    $659 = HEAP32[(836)>>2]|0;
    HEAP32[(376)>>2] = $659;
   } else {
    $sp$084$i = (796);
    while(1) {
     $660 = HEAP32[$sp$084$i>>2]|0;
     $661 = ((($sp$084$i)) + 4|0);
     $662 = HEAP32[$661>>2]|0;
     $663 = (($660) + ($662)|0);
     $664 = ($tbase$255$i|0)==($663|0);
     if ($664) {
      $$lcssa222 = $660;$$lcssa224 = $661;$$lcssa226 = $662;$sp$084$i$lcssa = $sp$084$i;
      label = 204;
      break;
     }
     $665 = ((($sp$084$i)) + 8|0);
     $666 = HEAP32[$665>>2]|0;
     $667 = ($666|0)==(0|0);
     if ($667) {
      break;
     } else {
      $sp$084$i = $666;
     }
    }
    if ((label|0) == 204) {
     $668 = ((($sp$084$i$lcssa)) + 12|0);
     $669 = HEAP32[$668>>2]|0;
     $670 = $669 & 8;
     $671 = ($670|0)==(0);
     if ($671) {
      $672 = ($635>>>0)>=($$lcssa222>>>0);
      $673 = ($635>>>0)<($tbase$255$i>>>0);
      $or$cond57$i = $673 & $672;
      if ($or$cond57$i) {
       $674 = (($$lcssa226) + ($tsize$254$i))|0;
       HEAP32[$$lcssa224>>2] = $674;
       $675 = HEAP32[(360)>>2]|0;
       $676 = (($675) + ($tsize$254$i))|0;
       $677 = ((($635)) + 8|0);
       $678 = $677;
       $679 = $678 & 7;
       $680 = ($679|0)==(0);
       $681 = (0 - ($678))|0;
       $682 = $681 & 7;
       $683 = $680 ? 0 : $682;
       $684 = (($635) + ($683)|0);
       $685 = (($676) - ($683))|0;
       HEAP32[(372)>>2] = $684;
       HEAP32[(360)>>2] = $685;
       $686 = $685 | 1;
       $$sum$i17$i = (($683) + 4)|0;
       $687 = (($635) + ($$sum$i17$i)|0);
       HEAP32[$687>>2] = $686;
       $$sum2$i18$i = (($676) + 4)|0;
       $688 = (($635) + ($$sum2$i18$i)|0);
       HEAP32[$688>>2] = 40;
       $689 = HEAP32[(836)>>2]|0;
       HEAP32[(376)>>2] = $689;
       break;
      }
     }
    }
    $690 = HEAP32[(364)>>2]|0;
    $691 = ($tbase$255$i>>>0)<($690>>>0);
    if ($691) {
     HEAP32[(364)>>2] = $tbase$255$i;
     $755 = $tbase$255$i;
    } else {
     $755 = $690;
    }
    $692 = (($tbase$255$i) + ($tsize$254$i)|0);
    $sp$183$i = (796);
    while(1) {
     $693 = HEAP32[$sp$183$i>>2]|0;
     $694 = ($693|0)==($692|0);
     if ($694) {
      $$lcssa219 = $sp$183$i;$sp$183$i$lcssa = $sp$183$i;
      label = 212;
      break;
     }
     $695 = ((($sp$183$i)) + 8|0);
     $696 = HEAP32[$695>>2]|0;
     $697 = ($696|0)==(0|0);
     if ($697) {
      $sp$0$i$i$i = (796);
      break;
     } else {
      $sp$183$i = $696;
     }
    }
    if ((label|0) == 212) {
     $698 = ((($sp$183$i$lcssa)) + 12|0);
     $699 = HEAP32[$698>>2]|0;
     $700 = $699 & 8;
     $701 = ($700|0)==(0);
     if ($701) {
      HEAP32[$$lcssa219>>2] = $tbase$255$i;
      $702 = ((($sp$183$i$lcssa)) + 4|0);
      $703 = HEAP32[$702>>2]|0;
      $704 = (($703) + ($tsize$254$i))|0;
      HEAP32[$702>>2] = $704;
      $705 = ((($tbase$255$i)) + 8|0);
      $706 = $705;
      $707 = $706 & 7;
      $708 = ($707|0)==(0);
      $709 = (0 - ($706))|0;
      $710 = $709 & 7;
      $711 = $708 ? 0 : $710;
      $712 = (($tbase$255$i) + ($711)|0);
      $$sum112$i = (($tsize$254$i) + 8)|0;
      $713 = (($tbase$255$i) + ($$sum112$i)|0);
      $714 = $713;
      $715 = $714 & 7;
      $716 = ($715|0)==(0);
      $717 = (0 - ($714))|0;
      $718 = $717 & 7;
      $719 = $716 ? 0 : $718;
      $$sum113$i = (($719) + ($tsize$254$i))|0;
      $720 = (($tbase$255$i) + ($$sum113$i)|0);
      $721 = $720;
      $722 = $712;
      $723 = (($721) - ($722))|0;
      $$sum$i19$i = (($711) + ($nb$0))|0;
      $724 = (($tbase$255$i) + ($$sum$i19$i)|0);
      $725 = (($723) - ($nb$0))|0;
      $726 = $nb$0 | 3;
      $$sum1$i20$i = (($711) + 4)|0;
      $727 = (($tbase$255$i) + ($$sum1$i20$i)|0);
      HEAP32[$727>>2] = $726;
      $728 = ($720|0)==($635|0);
      L324: do {
       if ($728) {
        $729 = HEAP32[(360)>>2]|0;
        $730 = (($729) + ($725))|0;
        HEAP32[(360)>>2] = $730;
        HEAP32[(372)>>2] = $724;
        $731 = $730 | 1;
        $$sum42$i$i = (($$sum$i19$i) + 4)|0;
        $732 = (($tbase$255$i) + ($$sum42$i$i)|0);
        HEAP32[$732>>2] = $731;
       } else {
        $733 = HEAP32[(368)>>2]|0;
        $734 = ($720|0)==($733|0);
        if ($734) {
         $735 = HEAP32[(356)>>2]|0;
         $736 = (($735) + ($725))|0;
         HEAP32[(356)>>2] = $736;
         HEAP32[(368)>>2] = $724;
         $737 = $736 | 1;
         $$sum40$i$i = (($$sum$i19$i) + 4)|0;
         $738 = (($tbase$255$i) + ($$sum40$i$i)|0);
         HEAP32[$738>>2] = $737;
         $$sum41$i$i = (($736) + ($$sum$i19$i))|0;
         $739 = (($tbase$255$i) + ($$sum41$i$i)|0);
         HEAP32[$739>>2] = $736;
         break;
        }
        $$sum2$i21$i = (($tsize$254$i) + 4)|0;
        $$sum114$i = (($$sum2$i21$i) + ($719))|0;
        $740 = (($tbase$255$i) + ($$sum114$i)|0);
        $741 = HEAP32[$740>>2]|0;
        $742 = $741 & 3;
        $743 = ($742|0)==(1);
        if ($743) {
         $744 = $741 & -8;
         $745 = $741 >>> 3;
         $746 = ($741>>>0)<(256);
         L332: do {
          if ($746) {
           $$sum3738$i$i = $719 | 8;
           $$sum124$i = (($$sum3738$i$i) + ($tsize$254$i))|0;
           $747 = (($tbase$255$i) + ($$sum124$i)|0);
           $748 = HEAP32[$747>>2]|0;
           $$sum39$i$i = (($tsize$254$i) + 12)|0;
           $$sum125$i = (($$sum39$i$i) + ($719))|0;
           $749 = (($tbase$255$i) + ($$sum125$i)|0);
           $750 = HEAP32[$749>>2]|0;
           $751 = $745 << 1;
           $752 = (388 + ($751<<2)|0);
           $753 = ($748|0)==($752|0);
           do {
            if (!($753)) {
             $754 = ($748>>>0)<($755>>>0);
             if ($754) {
              _abort();
              // unreachable;
             }
             $756 = ((($748)) + 12|0);
             $757 = HEAP32[$756>>2]|0;
             $758 = ($757|0)==($720|0);
             if ($758) {
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $759 = ($750|0)==($748|0);
           if ($759) {
            $760 = 1 << $745;
            $761 = $760 ^ -1;
            $762 = HEAP32[348>>2]|0;
            $763 = $762 & $761;
            HEAP32[348>>2] = $763;
            break;
           }
           $764 = ($750|0)==($752|0);
           do {
            if ($764) {
             $$pre57$i$i = ((($750)) + 8|0);
             $$pre$phi58$i$iZ2D = $$pre57$i$i;
            } else {
             $765 = ($750>>>0)<($755>>>0);
             if ($765) {
              _abort();
              // unreachable;
             }
             $766 = ((($750)) + 8|0);
             $767 = HEAP32[$766>>2]|0;
             $768 = ($767|0)==($720|0);
             if ($768) {
              $$pre$phi58$i$iZ2D = $766;
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $769 = ((($748)) + 12|0);
           HEAP32[$769>>2] = $750;
           HEAP32[$$pre$phi58$i$iZ2D>>2] = $748;
          } else {
           $$sum34$i$i = $719 | 24;
           $$sum115$i = (($$sum34$i$i) + ($tsize$254$i))|0;
           $770 = (($tbase$255$i) + ($$sum115$i)|0);
           $771 = HEAP32[$770>>2]|0;
           $$sum5$i$i = (($tsize$254$i) + 12)|0;
           $$sum116$i = (($$sum5$i$i) + ($719))|0;
           $772 = (($tbase$255$i) + ($$sum116$i)|0);
           $773 = HEAP32[$772>>2]|0;
           $774 = ($773|0)==($720|0);
           do {
            if ($774) {
             $$sum67$i$i = $719 | 16;
             $$sum122$i = (($$sum2$i21$i) + ($$sum67$i$i))|0;
             $784 = (($tbase$255$i) + ($$sum122$i)|0);
             $785 = HEAP32[$784>>2]|0;
             $786 = ($785|0)==(0|0);
             if ($786) {
              $$sum123$i = (($$sum67$i$i) + ($tsize$254$i))|0;
              $787 = (($tbase$255$i) + ($$sum123$i)|0);
              $788 = HEAP32[$787>>2]|0;
              $789 = ($788|0)==(0|0);
              if ($789) {
               $R$1$i$i = 0;
               break;
              } else {
               $R$0$i$i = $788;$RP$0$i$i = $787;
              }
             } else {
              $R$0$i$i = $785;$RP$0$i$i = $784;
             }
             while(1) {
              $790 = ((($R$0$i$i)) + 20|0);
              $791 = HEAP32[$790>>2]|0;
              $792 = ($791|0)==(0|0);
              if (!($792)) {
               $R$0$i$i = $791;$RP$0$i$i = $790;
               continue;
              }
              $793 = ((($R$0$i$i)) + 16|0);
              $794 = HEAP32[$793>>2]|0;
              $795 = ($794|0)==(0|0);
              if ($795) {
               $R$0$i$i$lcssa = $R$0$i$i;$RP$0$i$i$lcssa = $RP$0$i$i;
               break;
              } else {
               $R$0$i$i = $794;$RP$0$i$i = $793;
              }
             }
             $796 = ($RP$0$i$i$lcssa>>>0)<($755>>>0);
             if ($796) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$RP$0$i$i$lcssa>>2] = 0;
              $R$1$i$i = $R$0$i$i$lcssa;
              break;
             }
            } else {
             $$sum3536$i$i = $719 | 8;
             $$sum117$i = (($$sum3536$i$i) + ($tsize$254$i))|0;
             $775 = (($tbase$255$i) + ($$sum117$i)|0);
             $776 = HEAP32[$775>>2]|0;
             $777 = ($776>>>0)<($755>>>0);
             if ($777) {
              _abort();
              // unreachable;
             }
             $778 = ((($776)) + 12|0);
             $779 = HEAP32[$778>>2]|0;
             $780 = ($779|0)==($720|0);
             if (!($780)) {
              _abort();
              // unreachable;
             }
             $781 = ((($773)) + 8|0);
             $782 = HEAP32[$781>>2]|0;
             $783 = ($782|0)==($720|0);
             if ($783) {
              HEAP32[$778>>2] = $773;
              HEAP32[$781>>2] = $776;
              $R$1$i$i = $773;
              break;
             } else {
              _abort();
              // unreachable;
             }
            }
           } while(0);
           $797 = ($771|0)==(0|0);
           if ($797) {
            break;
           }
           $$sum30$i$i = (($tsize$254$i) + 28)|0;
           $$sum118$i = (($$sum30$i$i) + ($719))|0;
           $798 = (($tbase$255$i) + ($$sum118$i)|0);
           $799 = HEAP32[$798>>2]|0;
           $800 = (652 + ($799<<2)|0);
           $801 = HEAP32[$800>>2]|0;
           $802 = ($720|0)==($801|0);
           do {
            if ($802) {
             HEAP32[$800>>2] = $R$1$i$i;
             $cond$i$i = ($R$1$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $803 = 1 << $799;
             $804 = $803 ^ -1;
             $805 = HEAP32[(352)>>2]|0;
             $806 = $805 & $804;
             HEAP32[(352)>>2] = $806;
             break L332;
            } else {
             $807 = HEAP32[(364)>>2]|0;
             $808 = ($771>>>0)<($807>>>0);
             if ($808) {
              _abort();
              // unreachable;
             }
             $809 = ((($771)) + 16|0);
             $810 = HEAP32[$809>>2]|0;
             $811 = ($810|0)==($720|0);
             if ($811) {
              HEAP32[$809>>2] = $R$1$i$i;
             } else {
              $812 = ((($771)) + 20|0);
              HEAP32[$812>>2] = $R$1$i$i;
             }
             $813 = ($R$1$i$i|0)==(0|0);
             if ($813) {
              break L332;
             }
            }
           } while(0);
           $814 = HEAP32[(364)>>2]|0;
           $815 = ($R$1$i$i>>>0)<($814>>>0);
           if ($815) {
            _abort();
            // unreachable;
           }
           $816 = ((($R$1$i$i)) + 24|0);
           HEAP32[$816>>2] = $771;
           $$sum3132$i$i = $719 | 16;
           $$sum119$i = (($$sum3132$i$i) + ($tsize$254$i))|0;
           $817 = (($tbase$255$i) + ($$sum119$i)|0);
           $818 = HEAP32[$817>>2]|0;
           $819 = ($818|0)==(0|0);
           do {
            if (!($819)) {
             $820 = ($818>>>0)<($814>>>0);
             if ($820) {
              _abort();
              // unreachable;
             } else {
              $821 = ((($R$1$i$i)) + 16|0);
              HEAP32[$821>>2] = $818;
              $822 = ((($818)) + 24|0);
              HEAP32[$822>>2] = $R$1$i$i;
              break;
             }
            }
           } while(0);
           $$sum120$i = (($$sum2$i21$i) + ($$sum3132$i$i))|0;
           $823 = (($tbase$255$i) + ($$sum120$i)|0);
           $824 = HEAP32[$823>>2]|0;
           $825 = ($824|0)==(0|0);
           if ($825) {
            break;
           }
           $826 = HEAP32[(364)>>2]|0;
           $827 = ($824>>>0)<($826>>>0);
           if ($827) {
            _abort();
            // unreachable;
           } else {
            $828 = ((($R$1$i$i)) + 20|0);
            HEAP32[$828>>2] = $824;
            $829 = ((($824)) + 24|0);
            HEAP32[$829>>2] = $R$1$i$i;
            break;
           }
          }
         } while(0);
         $$sum9$i$i = $744 | $719;
         $$sum121$i = (($$sum9$i$i) + ($tsize$254$i))|0;
         $830 = (($tbase$255$i) + ($$sum121$i)|0);
         $831 = (($744) + ($725))|0;
         $oldfirst$0$i$i = $830;$qsize$0$i$i = $831;
        } else {
         $oldfirst$0$i$i = $720;$qsize$0$i$i = $725;
        }
        $832 = ((($oldfirst$0$i$i)) + 4|0);
        $833 = HEAP32[$832>>2]|0;
        $834 = $833 & -2;
        HEAP32[$832>>2] = $834;
        $835 = $qsize$0$i$i | 1;
        $$sum10$i$i = (($$sum$i19$i) + 4)|0;
        $836 = (($tbase$255$i) + ($$sum10$i$i)|0);
        HEAP32[$836>>2] = $835;
        $$sum11$i$i = (($qsize$0$i$i) + ($$sum$i19$i))|0;
        $837 = (($tbase$255$i) + ($$sum11$i$i)|0);
        HEAP32[$837>>2] = $qsize$0$i$i;
        $838 = $qsize$0$i$i >>> 3;
        $839 = ($qsize$0$i$i>>>0)<(256);
        if ($839) {
         $840 = $838 << 1;
         $841 = (388 + ($840<<2)|0);
         $842 = HEAP32[348>>2]|0;
         $843 = 1 << $838;
         $844 = $842 & $843;
         $845 = ($844|0)==(0);
         do {
          if ($845) {
           $846 = $842 | $843;
           HEAP32[348>>2] = $846;
           $$pre$i22$i = (($840) + 2)|0;
           $$pre56$i$i = (388 + ($$pre$i22$i<<2)|0);
           $$pre$phi$i23$iZ2D = $$pre56$i$i;$F4$0$i$i = $841;
          } else {
           $$sum29$i$i = (($840) + 2)|0;
           $847 = (388 + ($$sum29$i$i<<2)|0);
           $848 = HEAP32[$847>>2]|0;
           $849 = HEAP32[(364)>>2]|0;
           $850 = ($848>>>0)<($849>>>0);
           if (!($850)) {
            $$pre$phi$i23$iZ2D = $847;$F4$0$i$i = $848;
            break;
           }
           _abort();
           // unreachable;
          }
         } while(0);
         HEAP32[$$pre$phi$i23$iZ2D>>2] = $724;
         $851 = ((($F4$0$i$i)) + 12|0);
         HEAP32[$851>>2] = $724;
         $$sum27$i$i = (($$sum$i19$i) + 8)|0;
         $852 = (($tbase$255$i) + ($$sum27$i$i)|0);
         HEAP32[$852>>2] = $F4$0$i$i;
         $$sum28$i$i = (($$sum$i19$i) + 12)|0;
         $853 = (($tbase$255$i) + ($$sum28$i$i)|0);
         HEAP32[$853>>2] = $841;
         break;
        }
        $854 = $qsize$0$i$i >>> 8;
        $855 = ($854|0)==(0);
        do {
         if ($855) {
          $I7$0$i$i = 0;
         } else {
          $856 = ($qsize$0$i$i>>>0)>(16777215);
          if ($856) {
           $I7$0$i$i = 31;
           break;
          }
          $857 = (($854) + 1048320)|0;
          $858 = $857 >>> 16;
          $859 = $858 & 8;
          $860 = $854 << $859;
          $861 = (($860) + 520192)|0;
          $862 = $861 >>> 16;
          $863 = $862 & 4;
          $864 = $863 | $859;
          $865 = $860 << $863;
          $866 = (($865) + 245760)|0;
          $867 = $866 >>> 16;
          $868 = $867 & 2;
          $869 = $864 | $868;
          $870 = (14 - ($869))|0;
          $871 = $865 << $868;
          $872 = $871 >>> 15;
          $873 = (($870) + ($872))|0;
          $874 = $873 << 1;
          $875 = (($873) + 7)|0;
          $876 = $qsize$0$i$i >>> $875;
          $877 = $876 & 1;
          $878 = $877 | $874;
          $I7$0$i$i = $878;
         }
        } while(0);
        $879 = (652 + ($I7$0$i$i<<2)|0);
        $$sum12$i$i = (($$sum$i19$i) + 28)|0;
        $880 = (($tbase$255$i) + ($$sum12$i$i)|0);
        HEAP32[$880>>2] = $I7$0$i$i;
        $$sum13$i$i = (($$sum$i19$i) + 16)|0;
        $881 = (($tbase$255$i) + ($$sum13$i$i)|0);
        $$sum14$i$i = (($$sum$i19$i) + 20)|0;
        $882 = (($tbase$255$i) + ($$sum14$i$i)|0);
        HEAP32[$882>>2] = 0;
        HEAP32[$881>>2] = 0;
        $883 = HEAP32[(352)>>2]|0;
        $884 = 1 << $I7$0$i$i;
        $885 = $883 & $884;
        $886 = ($885|0)==(0);
        if ($886) {
         $887 = $883 | $884;
         HEAP32[(352)>>2] = $887;
         HEAP32[$879>>2] = $724;
         $$sum15$i$i = (($$sum$i19$i) + 24)|0;
         $888 = (($tbase$255$i) + ($$sum15$i$i)|0);
         HEAP32[$888>>2] = $879;
         $$sum16$i$i = (($$sum$i19$i) + 12)|0;
         $889 = (($tbase$255$i) + ($$sum16$i$i)|0);
         HEAP32[$889>>2] = $724;
         $$sum17$i$i = (($$sum$i19$i) + 8)|0;
         $890 = (($tbase$255$i) + ($$sum17$i$i)|0);
         HEAP32[$890>>2] = $724;
         break;
        }
        $891 = HEAP32[$879>>2]|0;
        $892 = ((($891)) + 4|0);
        $893 = HEAP32[$892>>2]|0;
        $894 = $893 & -8;
        $895 = ($894|0)==($qsize$0$i$i|0);
        L418: do {
         if ($895) {
          $T$0$lcssa$i25$i = $891;
         } else {
          $896 = ($I7$0$i$i|0)==(31);
          $897 = $I7$0$i$i >>> 1;
          $898 = (25 - ($897))|0;
          $899 = $896 ? 0 : $898;
          $900 = $qsize$0$i$i << $899;
          $K8$051$i$i = $900;$T$050$i$i = $891;
          while(1) {
           $907 = $K8$051$i$i >>> 31;
           $908 = (((($T$050$i$i)) + 16|0) + ($907<<2)|0);
           $903 = HEAP32[$908>>2]|0;
           $909 = ($903|0)==(0|0);
           if ($909) {
            $$lcssa = $908;$T$050$i$i$lcssa = $T$050$i$i;
            break;
           }
           $901 = $K8$051$i$i << 1;
           $902 = ((($903)) + 4|0);
           $904 = HEAP32[$902>>2]|0;
           $905 = $904 & -8;
           $906 = ($905|0)==($qsize$0$i$i|0);
           if ($906) {
            $T$0$lcssa$i25$i = $903;
            break L418;
           } else {
            $K8$051$i$i = $901;$T$050$i$i = $903;
           }
          }
          $910 = HEAP32[(364)>>2]|0;
          $911 = ($$lcssa>>>0)<($910>>>0);
          if ($911) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$$lcssa>>2] = $724;
           $$sum23$i$i = (($$sum$i19$i) + 24)|0;
           $912 = (($tbase$255$i) + ($$sum23$i$i)|0);
           HEAP32[$912>>2] = $T$050$i$i$lcssa;
           $$sum24$i$i = (($$sum$i19$i) + 12)|0;
           $913 = (($tbase$255$i) + ($$sum24$i$i)|0);
           HEAP32[$913>>2] = $724;
           $$sum25$i$i = (($$sum$i19$i) + 8)|0;
           $914 = (($tbase$255$i) + ($$sum25$i$i)|0);
           HEAP32[$914>>2] = $724;
           break L324;
          }
         }
        } while(0);
        $915 = ((($T$0$lcssa$i25$i)) + 8|0);
        $916 = HEAP32[$915>>2]|0;
        $917 = HEAP32[(364)>>2]|0;
        $918 = ($916>>>0)>=($917>>>0);
        $not$$i26$i = ($T$0$lcssa$i25$i>>>0)>=($917>>>0);
        $919 = $918 & $not$$i26$i;
        if ($919) {
         $920 = ((($916)) + 12|0);
         HEAP32[$920>>2] = $724;
         HEAP32[$915>>2] = $724;
         $$sum20$i$i = (($$sum$i19$i) + 8)|0;
         $921 = (($tbase$255$i) + ($$sum20$i$i)|0);
         HEAP32[$921>>2] = $916;
         $$sum21$i$i = (($$sum$i19$i) + 12)|0;
         $922 = (($tbase$255$i) + ($$sum21$i$i)|0);
         HEAP32[$922>>2] = $T$0$lcssa$i25$i;
         $$sum22$i$i = (($$sum$i19$i) + 24)|0;
         $923 = (($tbase$255$i) + ($$sum22$i$i)|0);
         HEAP32[$923>>2] = 0;
         break;
        } else {
         _abort();
         // unreachable;
        }
       }
      } while(0);
      $$sum1819$i$i = $711 | 8;
      $924 = (($tbase$255$i) + ($$sum1819$i$i)|0);
      $mem$0 = $924;
      return ($mem$0|0);
     } else {
      $sp$0$i$i$i = (796);
     }
    }
    while(1) {
     $925 = HEAP32[$sp$0$i$i$i>>2]|0;
     $926 = ($925>>>0)>($635>>>0);
     if (!($926)) {
      $927 = ((($sp$0$i$i$i)) + 4|0);
      $928 = HEAP32[$927>>2]|0;
      $929 = (($925) + ($928)|0);
      $930 = ($929>>>0)>($635>>>0);
      if ($930) {
       $$lcssa215 = $925;$$lcssa216 = $928;$$lcssa217 = $929;
       break;
      }
     }
     $931 = ((($sp$0$i$i$i)) + 8|0);
     $932 = HEAP32[$931>>2]|0;
     $sp$0$i$i$i = $932;
    }
    $$sum$i14$i = (($$lcssa216) + -47)|0;
    $$sum1$i15$i = (($$lcssa216) + -39)|0;
    $933 = (($$lcssa215) + ($$sum1$i15$i)|0);
    $934 = $933;
    $935 = $934 & 7;
    $936 = ($935|0)==(0);
    $937 = (0 - ($934))|0;
    $938 = $937 & 7;
    $939 = $936 ? 0 : $938;
    $$sum2$i16$i = (($$sum$i14$i) + ($939))|0;
    $940 = (($$lcssa215) + ($$sum2$i16$i)|0);
    $941 = ((($635)) + 16|0);
    $942 = ($940>>>0)<($941>>>0);
    $943 = $942 ? $635 : $940;
    $944 = ((($943)) + 8|0);
    $945 = (($tsize$254$i) + -40)|0;
    $946 = ((($tbase$255$i)) + 8|0);
    $947 = $946;
    $948 = $947 & 7;
    $949 = ($948|0)==(0);
    $950 = (0 - ($947))|0;
    $951 = $950 & 7;
    $952 = $949 ? 0 : $951;
    $953 = (($tbase$255$i) + ($952)|0);
    $954 = (($945) - ($952))|0;
    HEAP32[(372)>>2] = $953;
    HEAP32[(360)>>2] = $954;
    $955 = $954 | 1;
    $$sum$i$i$i = (($952) + 4)|0;
    $956 = (($tbase$255$i) + ($$sum$i$i$i)|0);
    HEAP32[$956>>2] = $955;
    $$sum2$i$i$i = (($tsize$254$i) + -36)|0;
    $957 = (($tbase$255$i) + ($$sum2$i$i$i)|0);
    HEAP32[$957>>2] = 40;
    $958 = HEAP32[(836)>>2]|0;
    HEAP32[(376)>>2] = $958;
    $959 = ((($943)) + 4|0);
    HEAP32[$959>>2] = 27;
    ;HEAP32[$944>>2]=HEAP32[(796)>>2]|0;HEAP32[$944+4>>2]=HEAP32[(796)+4>>2]|0;HEAP32[$944+8>>2]=HEAP32[(796)+8>>2]|0;HEAP32[$944+12>>2]=HEAP32[(796)+12>>2]|0;
    HEAP32[(796)>>2] = $tbase$255$i;
    HEAP32[(800)>>2] = $tsize$254$i;
    HEAP32[(808)>>2] = 0;
    HEAP32[(804)>>2] = $944;
    $960 = ((($943)) + 28|0);
    HEAP32[$960>>2] = 7;
    $961 = ((($943)) + 32|0);
    $962 = ($961>>>0)<($$lcssa217>>>0);
    if ($962) {
     $964 = $960;
     while(1) {
      $963 = ((($964)) + 4|0);
      HEAP32[$963>>2] = 7;
      $965 = ((($964)) + 8|0);
      $966 = ($965>>>0)<($$lcssa217>>>0);
      if ($966) {
       $964 = $963;
      } else {
       break;
      }
     }
    }
    $967 = ($943|0)==($635|0);
    if (!($967)) {
     $968 = $943;
     $969 = $635;
     $970 = (($968) - ($969))|0;
     $971 = HEAP32[$959>>2]|0;
     $972 = $971 & -2;
     HEAP32[$959>>2] = $972;
     $973 = $970 | 1;
     $974 = ((($635)) + 4|0);
     HEAP32[$974>>2] = $973;
     HEAP32[$943>>2] = $970;
     $975 = $970 >>> 3;
     $976 = ($970>>>0)<(256);
     if ($976) {
      $977 = $975 << 1;
      $978 = (388 + ($977<<2)|0);
      $979 = HEAP32[348>>2]|0;
      $980 = 1 << $975;
      $981 = $979 & $980;
      $982 = ($981|0)==(0);
      if ($982) {
       $983 = $979 | $980;
       HEAP32[348>>2] = $983;
       $$pre$i$i = (($977) + 2)|0;
       $$pre14$i$i = (388 + ($$pre$i$i<<2)|0);
       $$pre$phi$i$iZ2D = $$pre14$i$i;$F$0$i$i = $978;
      } else {
       $$sum4$i$i = (($977) + 2)|0;
       $984 = (388 + ($$sum4$i$i<<2)|0);
       $985 = HEAP32[$984>>2]|0;
       $986 = HEAP32[(364)>>2]|0;
       $987 = ($985>>>0)<($986>>>0);
       if ($987) {
        _abort();
        // unreachable;
       } else {
        $$pre$phi$i$iZ2D = $984;$F$0$i$i = $985;
       }
      }
      HEAP32[$$pre$phi$i$iZ2D>>2] = $635;
      $988 = ((($F$0$i$i)) + 12|0);
      HEAP32[$988>>2] = $635;
      $989 = ((($635)) + 8|0);
      HEAP32[$989>>2] = $F$0$i$i;
      $990 = ((($635)) + 12|0);
      HEAP32[$990>>2] = $978;
      break;
     }
     $991 = $970 >>> 8;
     $992 = ($991|0)==(0);
     if ($992) {
      $I1$0$i$i = 0;
     } else {
      $993 = ($970>>>0)>(16777215);
      if ($993) {
       $I1$0$i$i = 31;
      } else {
       $994 = (($991) + 1048320)|0;
       $995 = $994 >>> 16;
       $996 = $995 & 8;
       $997 = $991 << $996;
       $998 = (($997) + 520192)|0;
       $999 = $998 >>> 16;
       $1000 = $999 & 4;
       $1001 = $1000 | $996;
       $1002 = $997 << $1000;
       $1003 = (($1002) + 245760)|0;
       $1004 = $1003 >>> 16;
       $1005 = $1004 & 2;
       $1006 = $1001 | $1005;
       $1007 = (14 - ($1006))|0;
       $1008 = $1002 << $1005;
       $1009 = $1008 >>> 15;
       $1010 = (($1007) + ($1009))|0;
       $1011 = $1010 << 1;
       $1012 = (($1010) + 7)|0;
       $1013 = $970 >>> $1012;
       $1014 = $1013 & 1;
       $1015 = $1014 | $1011;
       $I1$0$i$i = $1015;
      }
     }
     $1016 = (652 + ($I1$0$i$i<<2)|0);
     $1017 = ((($635)) + 28|0);
     HEAP32[$1017>>2] = $I1$0$i$i;
     $1018 = ((($635)) + 20|0);
     HEAP32[$1018>>2] = 0;
     HEAP32[$941>>2] = 0;
     $1019 = HEAP32[(352)>>2]|0;
     $1020 = 1 << $I1$0$i$i;
     $1021 = $1019 & $1020;
     $1022 = ($1021|0)==(0);
     if ($1022) {
      $1023 = $1019 | $1020;
      HEAP32[(352)>>2] = $1023;
      HEAP32[$1016>>2] = $635;
      $1024 = ((($635)) + 24|0);
      HEAP32[$1024>>2] = $1016;
      $1025 = ((($635)) + 12|0);
      HEAP32[$1025>>2] = $635;
      $1026 = ((($635)) + 8|0);
      HEAP32[$1026>>2] = $635;
      break;
     }
     $1027 = HEAP32[$1016>>2]|0;
     $1028 = ((($1027)) + 4|0);
     $1029 = HEAP32[$1028>>2]|0;
     $1030 = $1029 & -8;
     $1031 = ($1030|0)==($970|0);
     L459: do {
      if ($1031) {
       $T$0$lcssa$i$i = $1027;
      } else {
       $1032 = ($I1$0$i$i|0)==(31);
       $1033 = $I1$0$i$i >>> 1;
       $1034 = (25 - ($1033))|0;
       $1035 = $1032 ? 0 : $1034;
       $1036 = $970 << $1035;
       $K2$07$i$i = $1036;$T$06$i$i = $1027;
       while(1) {
        $1043 = $K2$07$i$i >>> 31;
        $1044 = (((($T$06$i$i)) + 16|0) + ($1043<<2)|0);
        $1039 = HEAP32[$1044>>2]|0;
        $1045 = ($1039|0)==(0|0);
        if ($1045) {
         $$lcssa211 = $1044;$T$06$i$i$lcssa = $T$06$i$i;
         break;
        }
        $1037 = $K2$07$i$i << 1;
        $1038 = ((($1039)) + 4|0);
        $1040 = HEAP32[$1038>>2]|0;
        $1041 = $1040 & -8;
        $1042 = ($1041|0)==($970|0);
        if ($1042) {
         $T$0$lcssa$i$i = $1039;
         break L459;
        } else {
         $K2$07$i$i = $1037;$T$06$i$i = $1039;
        }
       }
       $1046 = HEAP32[(364)>>2]|0;
       $1047 = ($$lcssa211>>>0)<($1046>>>0);
       if ($1047) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$$lcssa211>>2] = $635;
        $1048 = ((($635)) + 24|0);
        HEAP32[$1048>>2] = $T$06$i$i$lcssa;
        $1049 = ((($635)) + 12|0);
        HEAP32[$1049>>2] = $635;
        $1050 = ((($635)) + 8|0);
        HEAP32[$1050>>2] = $635;
        break L299;
       }
      }
     } while(0);
     $1051 = ((($T$0$lcssa$i$i)) + 8|0);
     $1052 = HEAP32[$1051>>2]|0;
     $1053 = HEAP32[(364)>>2]|0;
     $1054 = ($1052>>>0)>=($1053>>>0);
     $not$$i$i = ($T$0$lcssa$i$i>>>0)>=($1053>>>0);
     $1055 = $1054 & $not$$i$i;
     if ($1055) {
      $1056 = ((($1052)) + 12|0);
      HEAP32[$1056>>2] = $635;
      HEAP32[$1051>>2] = $635;
      $1057 = ((($635)) + 8|0);
      HEAP32[$1057>>2] = $1052;
      $1058 = ((($635)) + 12|0);
      HEAP32[$1058>>2] = $T$0$lcssa$i$i;
      $1059 = ((($635)) + 24|0);
      HEAP32[$1059>>2] = 0;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   }
  } while(0);
  $1060 = HEAP32[(360)>>2]|0;
  $1061 = ($1060>>>0)>($nb$0>>>0);
  if ($1061) {
   $1062 = (($1060) - ($nb$0))|0;
   HEAP32[(360)>>2] = $1062;
   $1063 = HEAP32[(372)>>2]|0;
   $1064 = (($1063) + ($nb$0)|0);
   HEAP32[(372)>>2] = $1064;
   $1065 = $1062 | 1;
   $$sum$i32 = (($nb$0) + 4)|0;
   $1066 = (($1063) + ($$sum$i32)|0);
   HEAP32[$1066>>2] = $1065;
   $1067 = $nb$0 | 3;
   $1068 = ((($1063)) + 4|0);
   HEAP32[$1068>>2] = $1067;
   $1069 = ((($1063)) + 8|0);
   $mem$0 = $1069;
   return ($mem$0|0);
  }
 }
 $1070 = (___errno_location()|0);
 HEAP32[$1070>>2] = 12;
 $mem$0 = 0;
 return ($mem$0|0);
}
function _free($mem) {
 $mem = $mem|0;
 var $$lcssa = 0, $$pre = 0, $$pre$phi59Z2D = 0, $$pre$phi61Z2D = 0, $$pre$phiZ2D = 0, $$pre57 = 0, $$pre58 = 0, $$pre60 = 0, $$sum = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum1718 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0;
 var $$sum25 = 0, $$sum26 = 0, $$sum27 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum30 = 0, $$sum31 = 0, $$sum5 = 0, $$sum67 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
 var $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0;
 var $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0;
 var $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0;
 var $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0;
 var $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0;
 var $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0;
 var $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
 var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0;
 var $321 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I18$0 = 0, $K19$052 = 0, $R$0 = 0, $R$0$lcssa = 0, $R$1 = 0;
 var $R7$0 = 0, $R7$0$lcssa = 0, $R7$1 = 0, $RP$0 = 0, $RP$0$lcssa = 0, $RP9$0 = 0, $RP9$0$lcssa = 0, $T$0$lcssa = 0, $T$051 = 0, $T$051$lcssa = 0, $cond = 0, $cond47 = 0, $not$ = 0, $p$0 = 0, $psize$0 = 0, $psize$1 = 0, $sp$0$i = 0, $sp$0$in$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($mem|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ((($mem)) + -8|0);
 $2 = HEAP32[(364)>>2]|0;
 $3 = ($1>>>0)<($2>>>0);
 if ($3) {
  _abort();
  // unreachable;
 }
 $4 = ((($mem)) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 3;
 $7 = ($6|0)==(1);
 if ($7) {
  _abort();
  // unreachable;
 }
 $8 = $5 & -8;
 $$sum = (($8) + -8)|0;
 $9 = (($mem) + ($$sum)|0);
 $10 = $5 & 1;
 $11 = ($10|0)==(0);
 do {
  if ($11) {
   $12 = HEAP32[$1>>2]|0;
   $13 = ($6|0)==(0);
   if ($13) {
    return;
   }
   $$sum2 = (-8 - ($12))|0;
   $14 = (($mem) + ($$sum2)|0);
   $15 = (($12) + ($8))|0;
   $16 = ($14>>>0)<($2>>>0);
   if ($16) {
    _abort();
    // unreachable;
   }
   $17 = HEAP32[(368)>>2]|0;
   $18 = ($14|0)==($17|0);
   if ($18) {
    $$sum3 = (($8) + -4)|0;
    $103 = (($mem) + ($$sum3)|0);
    $104 = HEAP32[$103>>2]|0;
    $105 = $104 & 3;
    $106 = ($105|0)==(3);
    if (!($106)) {
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    HEAP32[(356)>>2] = $15;
    $107 = $104 & -2;
    HEAP32[$103>>2] = $107;
    $108 = $15 | 1;
    $$sum20 = (($$sum2) + 4)|0;
    $109 = (($mem) + ($$sum20)|0);
    HEAP32[$109>>2] = $108;
    HEAP32[$9>>2] = $15;
    return;
   }
   $19 = $12 >>> 3;
   $20 = ($12>>>0)<(256);
   if ($20) {
    $$sum30 = (($$sum2) + 8)|0;
    $21 = (($mem) + ($$sum30)|0);
    $22 = HEAP32[$21>>2]|0;
    $$sum31 = (($$sum2) + 12)|0;
    $23 = (($mem) + ($$sum31)|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = $19 << 1;
    $26 = (388 + ($25<<2)|0);
    $27 = ($22|0)==($26|0);
    if (!($27)) {
     $28 = ($22>>>0)<($2>>>0);
     if ($28) {
      _abort();
      // unreachable;
     }
     $29 = ((($22)) + 12|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = ($30|0)==($14|0);
     if (!($31)) {
      _abort();
      // unreachable;
     }
    }
    $32 = ($24|0)==($22|0);
    if ($32) {
     $33 = 1 << $19;
     $34 = $33 ^ -1;
     $35 = HEAP32[348>>2]|0;
     $36 = $35 & $34;
     HEAP32[348>>2] = $36;
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    $37 = ($24|0)==($26|0);
    if ($37) {
     $$pre60 = ((($24)) + 8|0);
     $$pre$phi61Z2D = $$pre60;
    } else {
     $38 = ($24>>>0)<($2>>>0);
     if ($38) {
      _abort();
      // unreachable;
     }
     $39 = ((($24)) + 8|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = ($40|0)==($14|0);
     if ($41) {
      $$pre$phi61Z2D = $39;
     } else {
      _abort();
      // unreachable;
     }
    }
    $42 = ((($22)) + 12|0);
    HEAP32[$42>>2] = $24;
    HEAP32[$$pre$phi61Z2D>>2] = $22;
    $p$0 = $14;$psize$0 = $15;
    break;
   }
   $$sum22 = (($$sum2) + 24)|0;
   $43 = (($mem) + ($$sum22)|0);
   $44 = HEAP32[$43>>2]|0;
   $$sum23 = (($$sum2) + 12)|0;
   $45 = (($mem) + ($$sum23)|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ($46|0)==($14|0);
   do {
    if ($47) {
     $$sum25 = (($$sum2) + 20)|0;
     $57 = (($mem) + ($$sum25)|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = ($58|0)==(0|0);
     if ($59) {
      $$sum24 = (($$sum2) + 16)|0;
      $60 = (($mem) + ($$sum24)|0);
      $61 = HEAP32[$60>>2]|0;
      $62 = ($61|0)==(0|0);
      if ($62) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $61;$RP$0 = $60;
      }
     } else {
      $R$0 = $58;$RP$0 = $57;
     }
     while(1) {
      $63 = ((($R$0)) + 20|0);
      $64 = HEAP32[$63>>2]|0;
      $65 = ($64|0)==(0|0);
      if (!($65)) {
       $R$0 = $64;$RP$0 = $63;
       continue;
      }
      $66 = ((($R$0)) + 16|0);
      $67 = HEAP32[$66>>2]|0;
      $68 = ($67|0)==(0|0);
      if ($68) {
       $R$0$lcssa = $R$0;$RP$0$lcssa = $RP$0;
       break;
      } else {
       $R$0 = $67;$RP$0 = $66;
      }
     }
     $69 = ($RP$0$lcssa>>>0)<($2>>>0);
     if ($69) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0$lcssa>>2] = 0;
      $R$1 = $R$0$lcssa;
      break;
     }
    } else {
     $$sum29 = (($$sum2) + 8)|0;
     $48 = (($mem) + ($$sum29)|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = ($49>>>0)<($2>>>0);
     if ($50) {
      _abort();
      // unreachable;
     }
     $51 = ((($49)) + 12|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = ($52|0)==($14|0);
     if (!($53)) {
      _abort();
      // unreachable;
     }
     $54 = ((($46)) + 8|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ($55|0)==($14|0);
     if ($56) {
      HEAP32[$51>>2] = $46;
      HEAP32[$54>>2] = $49;
      $R$1 = $46;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $70 = ($44|0)==(0|0);
   if ($70) {
    $p$0 = $14;$psize$0 = $15;
   } else {
    $$sum26 = (($$sum2) + 28)|0;
    $71 = (($mem) + ($$sum26)|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = (652 + ($72<<2)|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = ($14|0)==($74|0);
    if ($75) {
     HEAP32[$73>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $76 = 1 << $72;
      $77 = $76 ^ -1;
      $78 = HEAP32[(352)>>2]|0;
      $79 = $78 & $77;
      HEAP32[(352)>>2] = $79;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    } else {
     $80 = HEAP32[(364)>>2]|0;
     $81 = ($44>>>0)<($80>>>0);
     if ($81) {
      _abort();
      // unreachable;
     }
     $82 = ((($44)) + 16|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = ($83|0)==($14|0);
     if ($84) {
      HEAP32[$82>>2] = $R$1;
     } else {
      $85 = ((($44)) + 20|0);
      HEAP32[$85>>2] = $R$1;
     }
     $86 = ($R$1|0)==(0|0);
     if ($86) {
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
    $87 = HEAP32[(364)>>2]|0;
    $88 = ($R$1>>>0)<($87>>>0);
    if ($88) {
     _abort();
     // unreachable;
    }
    $89 = ((($R$1)) + 24|0);
    HEAP32[$89>>2] = $44;
    $$sum27 = (($$sum2) + 16)|0;
    $90 = (($mem) + ($$sum27)|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = ($91|0)==(0|0);
    do {
     if (!($92)) {
      $93 = ($91>>>0)<($87>>>0);
      if ($93) {
       _abort();
       // unreachable;
      } else {
       $94 = ((($R$1)) + 16|0);
       HEAP32[$94>>2] = $91;
       $95 = ((($91)) + 24|0);
       HEAP32[$95>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum28 = (($$sum2) + 20)|0;
    $96 = (($mem) + ($$sum28)|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = ($97|0)==(0|0);
    if ($98) {
     $p$0 = $14;$psize$0 = $15;
    } else {
     $99 = HEAP32[(364)>>2]|0;
     $100 = ($97>>>0)<($99>>>0);
     if ($100) {
      _abort();
      // unreachable;
     } else {
      $101 = ((($R$1)) + 20|0);
      HEAP32[$101>>2] = $97;
      $102 = ((($97)) + 24|0);
      HEAP32[$102>>2] = $R$1;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
   }
  } else {
   $p$0 = $1;$psize$0 = $8;
  }
 } while(0);
 $110 = ($p$0>>>0)<($9>>>0);
 if (!($110)) {
  _abort();
  // unreachable;
 }
 $$sum19 = (($8) + -4)|0;
 $111 = (($mem) + ($$sum19)|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = $112 & 1;
 $114 = ($113|0)==(0);
 if ($114) {
  _abort();
  // unreachable;
 }
 $115 = $112 & 2;
 $116 = ($115|0)==(0);
 if ($116) {
  $117 = HEAP32[(372)>>2]|0;
  $118 = ($9|0)==($117|0);
  if ($118) {
   $119 = HEAP32[(360)>>2]|0;
   $120 = (($119) + ($psize$0))|0;
   HEAP32[(360)>>2] = $120;
   HEAP32[(372)>>2] = $p$0;
   $121 = $120 | 1;
   $122 = ((($p$0)) + 4|0);
   HEAP32[$122>>2] = $121;
   $123 = HEAP32[(368)>>2]|0;
   $124 = ($p$0|0)==($123|0);
   if (!($124)) {
    return;
   }
   HEAP32[(368)>>2] = 0;
   HEAP32[(356)>>2] = 0;
   return;
  }
  $125 = HEAP32[(368)>>2]|0;
  $126 = ($9|0)==($125|0);
  if ($126) {
   $127 = HEAP32[(356)>>2]|0;
   $128 = (($127) + ($psize$0))|0;
   HEAP32[(356)>>2] = $128;
   HEAP32[(368)>>2] = $p$0;
   $129 = $128 | 1;
   $130 = ((($p$0)) + 4|0);
   HEAP32[$130>>2] = $129;
   $131 = (($p$0) + ($128)|0);
   HEAP32[$131>>2] = $128;
   return;
  }
  $132 = $112 & -8;
  $133 = (($132) + ($psize$0))|0;
  $134 = $112 >>> 3;
  $135 = ($112>>>0)<(256);
  do {
   if ($135) {
    $136 = (($mem) + ($8)|0);
    $137 = HEAP32[$136>>2]|0;
    $$sum1718 = $8 | 4;
    $138 = (($mem) + ($$sum1718)|0);
    $139 = HEAP32[$138>>2]|0;
    $140 = $134 << 1;
    $141 = (388 + ($140<<2)|0);
    $142 = ($137|0)==($141|0);
    if (!($142)) {
     $143 = HEAP32[(364)>>2]|0;
     $144 = ($137>>>0)<($143>>>0);
     if ($144) {
      _abort();
      // unreachable;
     }
     $145 = ((($137)) + 12|0);
     $146 = HEAP32[$145>>2]|0;
     $147 = ($146|0)==($9|0);
     if (!($147)) {
      _abort();
      // unreachable;
     }
    }
    $148 = ($139|0)==($137|0);
    if ($148) {
     $149 = 1 << $134;
     $150 = $149 ^ -1;
     $151 = HEAP32[348>>2]|0;
     $152 = $151 & $150;
     HEAP32[348>>2] = $152;
     break;
    }
    $153 = ($139|0)==($141|0);
    if ($153) {
     $$pre58 = ((($139)) + 8|0);
     $$pre$phi59Z2D = $$pre58;
    } else {
     $154 = HEAP32[(364)>>2]|0;
     $155 = ($139>>>0)<($154>>>0);
     if ($155) {
      _abort();
      // unreachable;
     }
     $156 = ((($139)) + 8|0);
     $157 = HEAP32[$156>>2]|0;
     $158 = ($157|0)==($9|0);
     if ($158) {
      $$pre$phi59Z2D = $156;
     } else {
      _abort();
      // unreachable;
     }
    }
    $159 = ((($137)) + 12|0);
    HEAP32[$159>>2] = $139;
    HEAP32[$$pre$phi59Z2D>>2] = $137;
   } else {
    $$sum5 = (($8) + 16)|0;
    $160 = (($mem) + ($$sum5)|0);
    $161 = HEAP32[$160>>2]|0;
    $$sum67 = $8 | 4;
    $162 = (($mem) + ($$sum67)|0);
    $163 = HEAP32[$162>>2]|0;
    $164 = ($163|0)==($9|0);
    do {
     if ($164) {
      $$sum9 = (($8) + 12)|0;
      $175 = (($mem) + ($$sum9)|0);
      $176 = HEAP32[$175>>2]|0;
      $177 = ($176|0)==(0|0);
      if ($177) {
       $$sum8 = (($8) + 8)|0;
       $178 = (($mem) + ($$sum8)|0);
       $179 = HEAP32[$178>>2]|0;
       $180 = ($179|0)==(0|0);
       if ($180) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $179;$RP9$0 = $178;
       }
      } else {
       $R7$0 = $176;$RP9$0 = $175;
      }
      while(1) {
       $181 = ((($R7$0)) + 20|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = ($182|0)==(0|0);
       if (!($183)) {
        $R7$0 = $182;$RP9$0 = $181;
        continue;
       }
       $184 = ((($R7$0)) + 16|0);
       $185 = HEAP32[$184>>2]|0;
       $186 = ($185|0)==(0|0);
       if ($186) {
        $R7$0$lcssa = $R7$0;$RP9$0$lcssa = $RP9$0;
        break;
       } else {
        $R7$0 = $185;$RP9$0 = $184;
       }
      }
      $187 = HEAP32[(364)>>2]|0;
      $188 = ($RP9$0$lcssa>>>0)<($187>>>0);
      if ($188) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0$lcssa>>2] = 0;
       $R7$1 = $R7$0$lcssa;
       break;
      }
     } else {
      $165 = (($mem) + ($8)|0);
      $166 = HEAP32[$165>>2]|0;
      $167 = HEAP32[(364)>>2]|0;
      $168 = ($166>>>0)<($167>>>0);
      if ($168) {
       _abort();
       // unreachable;
      }
      $169 = ((($166)) + 12|0);
      $170 = HEAP32[$169>>2]|0;
      $171 = ($170|0)==($9|0);
      if (!($171)) {
       _abort();
       // unreachable;
      }
      $172 = ((($163)) + 8|0);
      $173 = HEAP32[$172>>2]|0;
      $174 = ($173|0)==($9|0);
      if ($174) {
       HEAP32[$169>>2] = $163;
       HEAP32[$172>>2] = $166;
       $R7$1 = $163;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $189 = ($161|0)==(0|0);
    if (!($189)) {
     $$sum12 = (($8) + 20)|0;
     $190 = (($mem) + ($$sum12)|0);
     $191 = HEAP32[$190>>2]|0;
     $192 = (652 + ($191<<2)|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = ($9|0)==($193|0);
     if ($194) {
      HEAP32[$192>>2] = $R7$1;
      $cond47 = ($R7$1|0)==(0|0);
      if ($cond47) {
       $195 = 1 << $191;
       $196 = $195 ^ -1;
       $197 = HEAP32[(352)>>2]|0;
       $198 = $197 & $196;
       HEAP32[(352)>>2] = $198;
       break;
      }
     } else {
      $199 = HEAP32[(364)>>2]|0;
      $200 = ($161>>>0)<($199>>>0);
      if ($200) {
       _abort();
       // unreachable;
      }
      $201 = ((($161)) + 16|0);
      $202 = HEAP32[$201>>2]|0;
      $203 = ($202|0)==($9|0);
      if ($203) {
       HEAP32[$201>>2] = $R7$1;
      } else {
       $204 = ((($161)) + 20|0);
       HEAP32[$204>>2] = $R7$1;
      }
      $205 = ($R7$1|0)==(0|0);
      if ($205) {
       break;
      }
     }
     $206 = HEAP32[(364)>>2]|0;
     $207 = ($R7$1>>>0)<($206>>>0);
     if ($207) {
      _abort();
      // unreachable;
     }
     $208 = ((($R7$1)) + 24|0);
     HEAP32[$208>>2] = $161;
     $$sum13 = (($8) + 8)|0;
     $209 = (($mem) + ($$sum13)|0);
     $210 = HEAP32[$209>>2]|0;
     $211 = ($210|0)==(0|0);
     do {
      if (!($211)) {
       $212 = ($210>>>0)<($206>>>0);
       if ($212) {
        _abort();
        // unreachable;
       } else {
        $213 = ((($R7$1)) + 16|0);
        HEAP32[$213>>2] = $210;
        $214 = ((($210)) + 24|0);
        HEAP32[$214>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum14 = (($8) + 12)|0;
     $215 = (($mem) + ($$sum14)|0);
     $216 = HEAP32[$215>>2]|0;
     $217 = ($216|0)==(0|0);
     if (!($217)) {
      $218 = HEAP32[(364)>>2]|0;
      $219 = ($216>>>0)<($218>>>0);
      if ($219) {
       _abort();
       // unreachable;
      } else {
       $220 = ((($R7$1)) + 20|0);
       HEAP32[$220>>2] = $216;
       $221 = ((($216)) + 24|0);
       HEAP32[$221>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $222 = $133 | 1;
  $223 = ((($p$0)) + 4|0);
  HEAP32[$223>>2] = $222;
  $224 = (($p$0) + ($133)|0);
  HEAP32[$224>>2] = $133;
  $225 = HEAP32[(368)>>2]|0;
  $226 = ($p$0|0)==($225|0);
  if ($226) {
   HEAP32[(356)>>2] = $133;
   return;
  } else {
   $psize$1 = $133;
  }
 } else {
  $227 = $112 & -2;
  HEAP32[$111>>2] = $227;
  $228 = $psize$0 | 1;
  $229 = ((($p$0)) + 4|0);
  HEAP32[$229>>2] = $228;
  $230 = (($p$0) + ($psize$0)|0);
  HEAP32[$230>>2] = $psize$0;
  $psize$1 = $psize$0;
 }
 $231 = $psize$1 >>> 3;
 $232 = ($psize$1>>>0)<(256);
 if ($232) {
  $233 = $231 << 1;
  $234 = (388 + ($233<<2)|0);
  $235 = HEAP32[348>>2]|0;
  $236 = 1 << $231;
  $237 = $235 & $236;
  $238 = ($237|0)==(0);
  if ($238) {
   $239 = $235 | $236;
   HEAP32[348>>2] = $239;
   $$pre = (($233) + 2)|0;
   $$pre57 = (388 + ($$pre<<2)|0);
   $$pre$phiZ2D = $$pre57;$F16$0 = $234;
  } else {
   $$sum11 = (($233) + 2)|0;
   $240 = (388 + ($$sum11<<2)|0);
   $241 = HEAP32[$240>>2]|0;
   $242 = HEAP32[(364)>>2]|0;
   $243 = ($241>>>0)<($242>>>0);
   if ($243) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $240;$F16$0 = $241;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $p$0;
  $244 = ((($F16$0)) + 12|0);
  HEAP32[$244>>2] = $p$0;
  $245 = ((($p$0)) + 8|0);
  HEAP32[$245>>2] = $F16$0;
  $246 = ((($p$0)) + 12|0);
  HEAP32[$246>>2] = $234;
  return;
 }
 $247 = $psize$1 >>> 8;
 $248 = ($247|0)==(0);
 if ($248) {
  $I18$0 = 0;
 } else {
  $249 = ($psize$1>>>0)>(16777215);
  if ($249) {
   $I18$0 = 31;
  } else {
   $250 = (($247) + 1048320)|0;
   $251 = $250 >>> 16;
   $252 = $251 & 8;
   $253 = $247 << $252;
   $254 = (($253) + 520192)|0;
   $255 = $254 >>> 16;
   $256 = $255 & 4;
   $257 = $256 | $252;
   $258 = $253 << $256;
   $259 = (($258) + 245760)|0;
   $260 = $259 >>> 16;
   $261 = $260 & 2;
   $262 = $257 | $261;
   $263 = (14 - ($262))|0;
   $264 = $258 << $261;
   $265 = $264 >>> 15;
   $266 = (($263) + ($265))|0;
   $267 = $266 << 1;
   $268 = (($266) + 7)|0;
   $269 = $psize$1 >>> $268;
   $270 = $269 & 1;
   $271 = $270 | $267;
   $I18$0 = $271;
  }
 }
 $272 = (652 + ($I18$0<<2)|0);
 $273 = ((($p$0)) + 28|0);
 HEAP32[$273>>2] = $I18$0;
 $274 = ((($p$0)) + 16|0);
 $275 = ((($p$0)) + 20|0);
 HEAP32[$275>>2] = 0;
 HEAP32[$274>>2] = 0;
 $276 = HEAP32[(352)>>2]|0;
 $277 = 1 << $I18$0;
 $278 = $276 & $277;
 $279 = ($278|0)==(0);
 L199: do {
  if ($279) {
   $280 = $276 | $277;
   HEAP32[(352)>>2] = $280;
   HEAP32[$272>>2] = $p$0;
   $281 = ((($p$0)) + 24|0);
   HEAP32[$281>>2] = $272;
   $282 = ((($p$0)) + 12|0);
   HEAP32[$282>>2] = $p$0;
   $283 = ((($p$0)) + 8|0);
   HEAP32[$283>>2] = $p$0;
  } else {
   $284 = HEAP32[$272>>2]|0;
   $285 = ((($284)) + 4|0);
   $286 = HEAP32[$285>>2]|0;
   $287 = $286 & -8;
   $288 = ($287|0)==($psize$1|0);
   L202: do {
    if ($288) {
     $T$0$lcssa = $284;
    } else {
     $289 = ($I18$0|0)==(31);
     $290 = $I18$0 >>> 1;
     $291 = (25 - ($290))|0;
     $292 = $289 ? 0 : $291;
     $293 = $psize$1 << $292;
     $K19$052 = $293;$T$051 = $284;
     while(1) {
      $300 = $K19$052 >>> 31;
      $301 = (((($T$051)) + 16|0) + ($300<<2)|0);
      $296 = HEAP32[$301>>2]|0;
      $302 = ($296|0)==(0|0);
      if ($302) {
       $$lcssa = $301;$T$051$lcssa = $T$051;
       break;
      }
      $294 = $K19$052 << 1;
      $295 = ((($296)) + 4|0);
      $297 = HEAP32[$295>>2]|0;
      $298 = $297 & -8;
      $299 = ($298|0)==($psize$1|0);
      if ($299) {
       $T$0$lcssa = $296;
       break L202;
      } else {
       $K19$052 = $294;$T$051 = $296;
      }
     }
     $303 = HEAP32[(364)>>2]|0;
     $304 = ($$lcssa>>>0)<($303>>>0);
     if ($304) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$$lcssa>>2] = $p$0;
      $305 = ((($p$0)) + 24|0);
      HEAP32[$305>>2] = $T$051$lcssa;
      $306 = ((($p$0)) + 12|0);
      HEAP32[$306>>2] = $p$0;
      $307 = ((($p$0)) + 8|0);
      HEAP32[$307>>2] = $p$0;
      break L199;
     }
    }
   } while(0);
   $308 = ((($T$0$lcssa)) + 8|0);
   $309 = HEAP32[$308>>2]|0;
   $310 = HEAP32[(364)>>2]|0;
   $311 = ($309>>>0)>=($310>>>0);
   $not$ = ($T$0$lcssa>>>0)>=($310>>>0);
   $312 = $311 & $not$;
   if ($312) {
    $313 = ((($309)) + 12|0);
    HEAP32[$313>>2] = $p$0;
    HEAP32[$308>>2] = $p$0;
    $314 = ((($p$0)) + 8|0);
    HEAP32[$314>>2] = $309;
    $315 = ((($p$0)) + 12|0);
    HEAP32[$315>>2] = $T$0$lcssa;
    $316 = ((($p$0)) + 24|0);
    HEAP32[$316>>2] = 0;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $317 = HEAP32[(380)>>2]|0;
 $318 = (($317) + -1)|0;
 HEAP32[(380)>>2] = $318;
 $319 = ($318|0)==(0);
 if ($319) {
  $sp$0$in$i = (804);
 } else {
  return;
 }
 while(1) {
  $sp$0$i = HEAP32[$sp$0$in$i>>2]|0;
  $320 = ($sp$0$i|0)==(0|0);
  $321 = ((($sp$0$i)) + 8|0);
  if ($320) {
   break;
  } else {
   $sp$0$in$i = $321;
  }
 }
 HEAP32[(380)>>2] = -1;
 return;
}
function _realloc($oldmem,$bytes) {
 $oldmem = $oldmem|0;
 $bytes = $bytes|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $mem$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($oldmem|0)==(0|0);
 if ($0) {
  $1 = (_malloc($bytes)|0);
  $mem$0 = $1;
  return ($mem$0|0);
 }
 $2 = ($bytes>>>0)>(4294967231);
 if ($2) {
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = 12;
  $mem$0 = 0;
  return ($mem$0|0);
 }
 $4 = ($bytes>>>0)<(11);
 $5 = (($bytes) + 11)|0;
 $6 = $5 & -8;
 $7 = $4 ? 16 : $6;
 $8 = ((($oldmem)) + -8|0);
 $9 = (_try_realloc_chunk($8,$7)|0);
 $10 = ($9|0)==(0|0);
 if (!($10)) {
  $11 = ((($9)) + 8|0);
  $mem$0 = $11;
  return ($mem$0|0);
 }
 $12 = (_malloc($bytes)|0);
 $13 = ($12|0)==(0|0);
 if ($13) {
  $mem$0 = 0;
  return ($mem$0|0);
 }
 $14 = ((($oldmem)) + -4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $15 & -8;
 $17 = $15 & 3;
 $18 = ($17|0)==(0);
 $19 = $18 ? 8 : 4;
 $20 = (($16) - ($19))|0;
 $21 = ($20>>>0)<($bytes>>>0);
 $22 = $21 ? $20 : $bytes;
 _memcpy(($12|0),($oldmem|0),($22|0))|0;
 _free($oldmem);
 $mem$0 = $12;
 return ($mem$0|0);
}
function _try_realloc_chunk($p,$nb) {
 $p = $p|0;
 $nb = $nb|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $$sum = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum2728 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum78 = 0;
 var $$sum910 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $R$0 = 0, $R$0$lcssa = 0, $R$1 = 0, $RP$0 = 0, $RP$0$lcssa = 0, $cond = 0, $newp$0 = 0, $notlhs = 0;
 var $notrhs = 0, $or$cond$not = 0, $or$cond30 = 0, $storemerge = 0, $storemerge21 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($p)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & -8;
 $3 = (($p) + ($2)|0);
 $4 = HEAP32[(364)>>2]|0;
 $5 = $1 & 3;
 $notlhs = ($p>>>0)>=($4>>>0);
 $notrhs = ($5|0)!=(1);
 $or$cond$not = $notrhs & $notlhs;
 $6 = ($p>>>0)<($3>>>0);
 $or$cond30 = $or$cond$not & $6;
 if (!($or$cond30)) {
  _abort();
  // unreachable;
 }
 $$sum2728 = $2 | 4;
 $7 = (($p) + ($$sum2728)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 & 1;
 $10 = ($9|0)==(0);
 if ($10) {
  _abort();
  // unreachable;
 }
 $11 = ($5|0)==(0);
 if ($11) {
  $12 = ($nb>>>0)<(256);
  if ($12) {
   $newp$0 = 0;
   return ($newp$0|0);
  }
  $13 = (($nb) + 4)|0;
  $14 = ($2>>>0)<($13>>>0);
  if (!($14)) {
   $15 = (($2) - ($nb))|0;
   $16 = HEAP32[(828)>>2]|0;
   $17 = $16 << 1;
   $18 = ($15>>>0)>($17>>>0);
   if (!($18)) {
    $newp$0 = $p;
    return ($newp$0|0);
   }
  }
  $newp$0 = 0;
  return ($newp$0|0);
 }
 $19 = ($2>>>0)<($nb>>>0);
 if (!($19)) {
  $20 = (($2) - ($nb))|0;
  $21 = ($20>>>0)>(15);
  if (!($21)) {
   $newp$0 = $p;
   return ($newp$0|0);
  }
  $22 = (($p) + ($nb)|0);
  $23 = $1 & 1;
  $24 = $23 | $nb;
  $25 = $24 | 2;
  HEAP32[$0>>2] = $25;
  $$sum23 = (($nb) + 4)|0;
  $26 = (($p) + ($$sum23)|0);
  $27 = $20 | 3;
  HEAP32[$26>>2] = $27;
  $28 = HEAP32[$7>>2]|0;
  $29 = $28 | 1;
  HEAP32[$7>>2] = $29;
  _dispose_chunk($22,$20);
  $newp$0 = $p;
  return ($newp$0|0);
 }
 $30 = HEAP32[(372)>>2]|0;
 $31 = ($3|0)==($30|0);
 if ($31) {
  $32 = HEAP32[(360)>>2]|0;
  $33 = (($32) + ($2))|0;
  $34 = ($33>>>0)>($nb>>>0);
  if (!($34)) {
   $newp$0 = 0;
   return ($newp$0|0);
  }
  $35 = (($33) - ($nb))|0;
  $36 = (($p) + ($nb)|0);
  $37 = $1 & 1;
  $38 = $37 | $nb;
  $39 = $38 | 2;
  HEAP32[$0>>2] = $39;
  $$sum22 = (($nb) + 4)|0;
  $40 = (($p) + ($$sum22)|0);
  $41 = $35 | 1;
  HEAP32[$40>>2] = $41;
  HEAP32[(372)>>2] = $36;
  HEAP32[(360)>>2] = $35;
  $newp$0 = $p;
  return ($newp$0|0);
 }
 $42 = HEAP32[(368)>>2]|0;
 $43 = ($3|0)==($42|0);
 if ($43) {
  $44 = HEAP32[(356)>>2]|0;
  $45 = (($44) + ($2))|0;
  $46 = ($45>>>0)<($nb>>>0);
  if ($46) {
   $newp$0 = 0;
   return ($newp$0|0);
  }
  $47 = (($45) - ($nb))|0;
  $48 = ($47>>>0)>(15);
  if ($48) {
   $49 = (($p) + ($nb)|0);
   $50 = (($p) + ($45)|0);
   $51 = $1 & 1;
   $52 = $51 | $nb;
   $53 = $52 | 2;
   HEAP32[$0>>2] = $53;
   $$sum19 = (($nb) + 4)|0;
   $54 = (($p) + ($$sum19)|0);
   $55 = $47 | 1;
   HEAP32[$54>>2] = $55;
   HEAP32[$50>>2] = $47;
   $$sum20 = (($45) + 4)|0;
   $56 = (($p) + ($$sum20)|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = $57 & -2;
   HEAP32[$56>>2] = $58;
   $storemerge = $49;$storemerge21 = $47;
  } else {
   $59 = $1 & 1;
   $60 = $59 | $45;
   $61 = $60 | 2;
   HEAP32[$0>>2] = $61;
   $$sum17 = (($45) + 4)|0;
   $62 = (($p) + ($$sum17)|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = $63 | 1;
   HEAP32[$62>>2] = $64;
   $storemerge = 0;$storemerge21 = 0;
  }
  HEAP32[(356)>>2] = $storemerge21;
  HEAP32[(368)>>2] = $storemerge;
  $newp$0 = $p;
  return ($newp$0|0);
 }
 $65 = $8 & 2;
 $66 = ($65|0)==(0);
 if (!($66)) {
  $newp$0 = 0;
  return ($newp$0|0);
 }
 $67 = $8 & -8;
 $68 = (($67) + ($2))|0;
 $69 = ($68>>>0)<($nb>>>0);
 if ($69) {
  $newp$0 = 0;
  return ($newp$0|0);
 }
 $70 = (($68) - ($nb))|0;
 $71 = $8 >>> 3;
 $72 = ($8>>>0)<(256);
 do {
  if ($72) {
   $$sum15 = (($2) + 8)|0;
   $73 = (($p) + ($$sum15)|0);
   $74 = HEAP32[$73>>2]|0;
   $$sum16 = (($2) + 12)|0;
   $75 = (($p) + ($$sum16)|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = $71 << 1;
   $78 = (388 + ($77<<2)|0);
   $79 = ($74|0)==($78|0);
   if (!($79)) {
    $80 = ($74>>>0)<($4>>>0);
    if ($80) {
     _abort();
     // unreachable;
    }
    $81 = ((($74)) + 12|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($82|0)==($3|0);
    if (!($83)) {
     _abort();
     // unreachable;
    }
   }
   $84 = ($76|0)==($74|0);
   if ($84) {
    $85 = 1 << $71;
    $86 = $85 ^ -1;
    $87 = HEAP32[348>>2]|0;
    $88 = $87 & $86;
    HEAP32[348>>2] = $88;
    break;
   }
   $89 = ($76|0)==($78|0);
   if ($89) {
    $$pre = ((($76)) + 8|0);
    $$pre$phiZ2D = $$pre;
   } else {
    $90 = ($76>>>0)<($4>>>0);
    if ($90) {
     _abort();
     // unreachable;
    }
    $91 = ((($76)) + 8|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = ($92|0)==($3|0);
    if ($93) {
     $$pre$phiZ2D = $91;
    } else {
     _abort();
     // unreachable;
    }
   }
   $94 = ((($74)) + 12|0);
   HEAP32[$94>>2] = $76;
   HEAP32[$$pre$phiZ2D>>2] = $74;
  } else {
   $$sum = (($2) + 24)|0;
   $95 = (($p) + ($$sum)|0);
   $96 = HEAP32[$95>>2]|0;
   $$sum2 = (($2) + 12)|0;
   $97 = (($p) + ($$sum2)|0);
   $98 = HEAP32[$97>>2]|0;
   $99 = ($98|0)==($3|0);
   do {
    if ($99) {
     $$sum4 = (($2) + 20)|0;
     $109 = (($p) + ($$sum4)|0);
     $110 = HEAP32[$109>>2]|0;
     $111 = ($110|0)==(0|0);
     if ($111) {
      $$sum3 = (($2) + 16)|0;
      $112 = (($p) + ($$sum3)|0);
      $113 = HEAP32[$112>>2]|0;
      $114 = ($113|0)==(0|0);
      if ($114) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $113;$RP$0 = $112;
      }
     } else {
      $R$0 = $110;$RP$0 = $109;
     }
     while(1) {
      $115 = ((($R$0)) + 20|0);
      $116 = HEAP32[$115>>2]|0;
      $117 = ($116|0)==(0|0);
      if (!($117)) {
       $R$0 = $116;$RP$0 = $115;
       continue;
      }
      $118 = ((($R$0)) + 16|0);
      $119 = HEAP32[$118>>2]|0;
      $120 = ($119|0)==(0|0);
      if ($120) {
       $R$0$lcssa = $R$0;$RP$0$lcssa = $RP$0;
       break;
      } else {
       $R$0 = $119;$RP$0 = $118;
      }
     }
     $121 = ($RP$0$lcssa>>>0)<($4>>>0);
     if ($121) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0$lcssa>>2] = 0;
      $R$1 = $R$0$lcssa;
      break;
     }
    } else {
     $$sum14 = (($2) + 8)|0;
     $100 = (($p) + ($$sum14)|0);
     $101 = HEAP32[$100>>2]|0;
     $102 = ($101>>>0)<($4>>>0);
     if ($102) {
      _abort();
      // unreachable;
     }
     $103 = ((($101)) + 12|0);
     $104 = HEAP32[$103>>2]|0;
     $105 = ($104|0)==($3|0);
     if (!($105)) {
      _abort();
      // unreachable;
     }
     $106 = ((($98)) + 8|0);
     $107 = HEAP32[$106>>2]|0;
     $108 = ($107|0)==($3|0);
     if ($108) {
      HEAP32[$103>>2] = $98;
      HEAP32[$106>>2] = $101;
      $R$1 = $98;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $122 = ($96|0)==(0|0);
   if (!($122)) {
    $$sum11 = (($2) + 28)|0;
    $123 = (($p) + ($$sum11)|0);
    $124 = HEAP32[$123>>2]|0;
    $125 = (652 + ($124<<2)|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = ($3|0)==($126|0);
    if ($127) {
     HEAP32[$125>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $128 = 1 << $124;
      $129 = $128 ^ -1;
      $130 = HEAP32[(352)>>2]|0;
      $131 = $130 & $129;
      HEAP32[(352)>>2] = $131;
      break;
     }
    } else {
     $132 = HEAP32[(364)>>2]|0;
     $133 = ($96>>>0)<($132>>>0);
     if ($133) {
      _abort();
      // unreachable;
     }
     $134 = ((($96)) + 16|0);
     $135 = HEAP32[$134>>2]|0;
     $136 = ($135|0)==($3|0);
     if ($136) {
      HEAP32[$134>>2] = $R$1;
     } else {
      $137 = ((($96)) + 20|0);
      HEAP32[$137>>2] = $R$1;
     }
     $138 = ($R$1|0)==(0|0);
     if ($138) {
      break;
     }
    }
    $139 = HEAP32[(364)>>2]|0;
    $140 = ($R$1>>>0)<($139>>>0);
    if ($140) {
     _abort();
     // unreachable;
    }
    $141 = ((($R$1)) + 24|0);
    HEAP32[$141>>2] = $96;
    $$sum12 = (($2) + 16)|0;
    $142 = (($p) + ($$sum12)|0);
    $143 = HEAP32[$142>>2]|0;
    $144 = ($143|0)==(0|0);
    do {
     if (!($144)) {
      $145 = ($143>>>0)<($139>>>0);
      if ($145) {
       _abort();
       // unreachable;
      } else {
       $146 = ((($R$1)) + 16|0);
       HEAP32[$146>>2] = $143;
       $147 = ((($143)) + 24|0);
       HEAP32[$147>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum13 = (($2) + 20)|0;
    $148 = (($p) + ($$sum13)|0);
    $149 = HEAP32[$148>>2]|0;
    $150 = ($149|0)==(0|0);
    if (!($150)) {
     $151 = HEAP32[(364)>>2]|0;
     $152 = ($149>>>0)<($151>>>0);
     if ($152) {
      _abort();
      // unreachable;
     } else {
      $153 = ((($R$1)) + 20|0);
      HEAP32[$153>>2] = $149;
      $154 = ((($149)) + 24|0);
      HEAP32[$154>>2] = $R$1;
      break;
     }
    }
   }
  }
 } while(0);
 $155 = ($70>>>0)<(16);
 if ($155) {
  $156 = $1 & 1;
  $157 = $68 | $156;
  $158 = $157 | 2;
  HEAP32[$0>>2] = $158;
  $$sum910 = $68 | 4;
  $159 = (($p) + ($$sum910)|0);
  $160 = HEAP32[$159>>2]|0;
  $161 = $160 | 1;
  HEAP32[$159>>2] = $161;
  $newp$0 = $p;
  return ($newp$0|0);
 } else {
  $162 = (($p) + ($nb)|0);
  $163 = $1 & 1;
  $164 = $163 | $nb;
  $165 = $164 | 2;
  HEAP32[$0>>2] = $165;
  $$sum5 = (($nb) + 4)|0;
  $166 = (($p) + ($$sum5)|0);
  $167 = $70 | 3;
  HEAP32[$166>>2] = $167;
  $$sum78 = $68 | 4;
  $168 = (($p) + ($$sum78)|0);
  $169 = HEAP32[$168>>2]|0;
  $170 = $169 | 1;
  HEAP32[$168>>2] = $170;
  _dispose_chunk($162,$70);
  $newp$0 = $p;
  return ($newp$0|0);
 }
 return (0)|0;
}
function _dispose_chunk($p,$psize) {
 $p = $p|0;
 $psize = $psize|0;
 var $$0 = 0, $$02 = 0, $$1 = 0, $$lcssa = 0, $$pre = 0, $$pre$phi50Z2D = 0, $$pre$phi52Z2D = 0, $$pre$phiZ2D = 0, $$pre48 = 0, $$pre49 = 0, $$pre51 = 0, $$sum = 0, $$sum1 = 0, $$sum10 = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum16 = 0, $$sum17 = 0;
 var $$sum18 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum21 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0, $$sum25 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum7 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0;
 var $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
 var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0;
 var $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I19$0 = 0, $K20$043 = 0, $R$0 = 0, $R$0$lcssa = 0, $R$1 = 0, $R7$0 = 0, $R7$0$lcssa = 0, $R7$1 = 0, $RP$0 = 0, $RP$0$lcssa = 0, $RP9$0 = 0, $RP9$0$lcssa = 0, $T$0$lcssa = 0, $T$042 = 0, $T$042$lcssa = 0, $cond = 0;
 var $cond39 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + ($psize)|0);
 $1 = ((($p)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 1;
 $4 = ($3|0)==(0);
 do {
  if ($4) {
   $5 = HEAP32[$p>>2]|0;
   $6 = $2 & 3;
   $7 = ($6|0)==(0);
   if ($7) {
    return;
   }
   $8 = (0 - ($5))|0;
   $9 = (($p) + ($8)|0);
   $10 = (($5) + ($psize))|0;
   $11 = HEAP32[(364)>>2]|0;
   $12 = ($9>>>0)<($11>>>0);
   if ($12) {
    _abort();
    // unreachable;
   }
   $13 = HEAP32[(368)>>2]|0;
   $14 = ($9|0)==($13|0);
   if ($14) {
    $$sum = (($psize) + 4)|0;
    $99 = (($p) + ($$sum)|0);
    $100 = HEAP32[$99>>2]|0;
    $101 = $100 & 3;
    $102 = ($101|0)==(3);
    if (!($102)) {
     $$0 = $9;$$02 = $10;
     break;
    }
    HEAP32[(356)>>2] = $10;
    $103 = $100 & -2;
    HEAP32[$99>>2] = $103;
    $104 = $10 | 1;
    $$sum14 = (4 - ($5))|0;
    $105 = (($p) + ($$sum14)|0);
    HEAP32[$105>>2] = $104;
    HEAP32[$0>>2] = $10;
    return;
   }
   $15 = $5 >>> 3;
   $16 = ($5>>>0)<(256);
   if ($16) {
    $$sum24 = (8 - ($5))|0;
    $17 = (($p) + ($$sum24)|0);
    $18 = HEAP32[$17>>2]|0;
    $$sum25 = (12 - ($5))|0;
    $19 = (($p) + ($$sum25)|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = $15 << 1;
    $22 = (388 + ($21<<2)|0);
    $23 = ($18|0)==($22|0);
    if (!($23)) {
     $24 = ($18>>>0)<($11>>>0);
     if ($24) {
      _abort();
      // unreachable;
     }
     $25 = ((($18)) + 12|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($26|0)==($9|0);
     if (!($27)) {
      _abort();
      // unreachable;
     }
    }
    $28 = ($20|0)==($18|0);
    if ($28) {
     $29 = 1 << $15;
     $30 = $29 ^ -1;
     $31 = HEAP32[348>>2]|0;
     $32 = $31 & $30;
     HEAP32[348>>2] = $32;
     $$0 = $9;$$02 = $10;
     break;
    }
    $33 = ($20|0)==($22|0);
    if ($33) {
     $$pre51 = ((($20)) + 8|0);
     $$pre$phi52Z2D = $$pre51;
    } else {
     $34 = ($20>>>0)<($11>>>0);
     if ($34) {
      _abort();
      // unreachable;
     }
     $35 = ((($20)) + 8|0);
     $36 = HEAP32[$35>>2]|0;
     $37 = ($36|0)==($9|0);
     if ($37) {
      $$pre$phi52Z2D = $35;
     } else {
      _abort();
      // unreachable;
     }
    }
    $38 = ((($18)) + 12|0);
    HEAP32[$38>>2] = $20;
    HEAP32[$$pre$phi52Z2D>>2] = $18;
    $$0 = $9;$$02 = $10;
    break;
   }
   $$sum16 = (24 - ($5))|0;
   $39 = (($p) + ($$sum16)|0);
   $40 = HEAP32[$39>>2]|0;
   $$sum17 = (12 - ($5))|0;
   $41 = (($p) + ($$sum17)|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ($42|0)==($9|0);
   do {
    if ($43) {
     $$sum18 = (16 - ($5))|0;
     $$sum19 = (($$sum18) + 4)|0;
     $53 = (($p) + ($$sum19)|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = ($54|0)==(0|0);
     if ($55) {
      $56 = (($p) + ($$sum18)|0);
      $57 = HEAP32[$56>>2]|0;
      $58 = ($57|0)==(0|0);
      if ($58) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $57;$RP$0 = $56;
      }
     } else {
      $R$0 = $54;$RP$0 = $53;
     }
     while(1) {
      $59 = ((($R$0)) + 20|0);
      $60 = HEAP32[$59>>2]|0;
      $61 = ($60|0)==(0|0);
      if (!($61)) {
       $R$0 = $60;$RP$0 = $59;
       continue;
      }
      $62 = ((($R$0)) + 16|0);
      $63 = HEAP32[$62>>2]|0;
      $64 = ($63|0)==(0|0);
      if ($64) {
       $R$0$lcssa = $R$0;$RP$0$lcssa = $RP$0;
       break;
      } else {
       $R$0 = $63;$RP$0 = $62;
      }
     }
     $65 = ($RP$0$lcssa>>>0)<($11>>>0);
     if ($65) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0$lcssa>>2] = 0;
      $R$1 = $R$0$lcssa;
      break;
     }
    } else {
     $$sum23 = (8 - ($5))|0;
     $44 = (($p) + ($$sum23)|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = ($45>>>0)<($11>>>0);
     if ($46) {
      _abort();
      // unreachable;
     }
     $47 = ((($45)) + 12|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = ($48|0)==($9|0);
     if (!($49)) {
      _abort();
      // unreachable;
     }
     $50 = ((($42)) + 8|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($51|0)==($9|0);
     if ($52) {
      HEAP32[$47>>2] = $42;
      HEAP32[$50>>2] = $45;
      $R$1 = $42;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $66 = ($40|0)==(0|0);
   if ($66) {
    $$0 = $9;$$02 = $10;
   } else {
    $$sum20 = (28 - ($5))|0;
    $67 = (($p) + ($$sum20)|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = (652 + ($68<<2)|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ($9|0)==($70|0);
    if ($71) {
     HEAP32[$69>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $72 = 1 << $68;
      $73 = $72 ^ -1;
      $74 = HEAP32[(352)>>2]|0;
      $75 = $74 & $73;
      HEAP32[(352)>>2] = $75;
      $$0 = $9;$$02 = $10;
      break;
     }
    } else {
     $76 = HEAP32[(364)>>2]|0;
     $77 = ($40>>>0)<($76>>>0);
     if ($77) {
      _abort();
      // unreachable;
     }
     $78 = ((($40)) + 16|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = ($79|0)==($9|0);
     if ($80) {
      HEAP32[$78>>2] = $R$1;
     } else {
      $81 = ((($40)) + 20|0);
      HEAP32[$81>>2] = $R$1;
     }
     $82 = ($R$1|0)==(0|0);
     if ($82) {
      $$0 = $9;$$02 = $10;
      break;
     }
    }
    $83 = HEAP32[(364)>>2]|0;
    $84 = ($R$1>>>0)<($83>>>0);
    if ($84) {
     _abort();
     // unreachable;
    }
    $85 = ((($R$1)) + 24|0);
    HEAP32[$85>>2] = $40;
    $$sum21 = (16 - ($5))|0;
    $86 = (($p) + ($$sum21)|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($87|0)==(0|0);
    do {
     if (!($88)) {
      $89 = ($87>>>0)<($83>>>0);
      if ($89) {
       _abort();
       // unreachable;
      } else {
       $90 = ((($R$1)) + 16|0);
       HEAP32[$90>>2] = $87;
       $91 = ((($87)) + 24|0);
       HEAP32[$91>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum22 = (($$sum21) + 4)|0;
    $92 = (($p) + ($$sum22)|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = ($93|0)==(0|0);
    if ($94) {
     $$0 = $9;$$02 = $10;
    } else {
     $95 = HEAP32[(364)>>2]|0;
     $96 = ($93>>>0)<($95>>>0);
     if ($96) {
      _abort();
      // unreachable;
     } else {
      $97 = ((($R$1)) + 20|0);
      HEAP32[$97>>2] = $93;
      $98 = ((($93)) + 24|0);
      HEAP32[$98>>2] = $R$1;
      $$0 = $9;$$02 = $10;
      break;
     }
    }
   }
  } else {
   $$0 = $p;$$02 = $psize;
  }
 } while(0);
 $106 = HEAP32[(364)>>2]|0;
 $107 = ($0>>>0)<($106>>>0);
 if ($107) {
  _abort();
  // unreachable;
 }
 $$sum1 = (($psize) + 4)|0;
 $108 = (($p) + ($$sum1)|0);
 $109 = HEAP32[$108>>2]|0;
 $110 = $109 & 2;
 $111 = ($110|0)==(0);
 if ($111) {
  $112 = HEAP32[(372)>>2]|0;
  $113 = ($0|0)==($112|0);
  if ($113) {
   $114 = HEAP32[(360)>>2]|0;
   $115 = (($114) + ($$02))|0;
   HEAP32[(360)>>2] = $115;
   HEAP32[(372)>>2] = $$0;
   $116 = $115 | 1;
   $117 = ((($$0)) + 4|0);
   HEAP32[$117>>2] = $116;
   $118 = HEAP32[(368)>>2]|0;
   $119 = ($$0|0)==($118|0);
   if (!($119)) {
    return;
   }
   HEAP32[(368)>>2] = 0;
   HEAP32[(356)>>2] = 0;
   return;
  }
  $120 = HEAP32[(368)>>2]|0;
  $121 = ($0|0)==($120|0);
  if ($121) {
   $122 = HEAP32[(356)>>2]|0;
   $123 = (($122) + ($$02))|0;
   HEAP32[(356)>>2] = $123;
   HEAP32[(368)>>2] = $$0;
   $124 = $123 | 1;
   $125 = ((($$0)) + 4|0);
   HEAP32[$125>>2] = $124;
   $126 = (($$0) + ($123)|0);
   HEAP32[$126>>2] = $123;
   return;
  }
  $127 = $109 & -8;
  $128 = (($127) + ($$02))|0;
  $129 = $109 >>> 3;
  $130 = ($109>>>0)<(256);
  do {
   if ($130) {
    $$sum12 = (($psize) + 8)|0;
    $131 = (($p) + ($$sum12)|0);
    $132 = HEAP32[$131>>2]|0;
    $$sum13 = (($psize) + 12)|0;
    $133 = (($p) + ($$sum13)|0);
    $134 = HEAP32[$133>>2]|0;
    $135 = $129 << 1;
    $136 = (388 + ($135<<2)|0);
    $137 = ($132|0)==($136|0);
    if (!($137)) {
     $138 = ($132>>>0)<($106>>>0);
     if ($138) {
      _abort();
      // unreachable;
     }
     $139 = ((($132)) + 12|0);
     $140 = HEAP32[$139>>2]|0;
     $141 = ($140|0)==($0|0);
     if (!($141)) {
      _abort();
      // unreachable;
     }
    }
    $142 = ($134|0)==($132|0);
    if ($142) {
     $143 = 1 << $129;
     $144 = $143 ^ -1;
     $145 = HEAP32[348>>2]|0;
     $146 = $145 & $144;
     HEAP32[348>>2] = $146;
     break;
    }
    $147 = ($134|0)==($136|0);
    if ($147) {
     $$pre49 = ((($134)) + 8|0);
     $$pre$phi50Z2D = $$pre49;
    } else {
     $148 = ($134>>>0)<($106>>>0);
     if ($148) {
      _abort();
      // unreachable;
     }
     $149 = ((($134)) + 8|0);
     $150 = HEAP32[$149>>2]|0;
     $151 = ($150|0)==($0|0);
     if ($151) {
      $$pre$phi50Z2D = $149;
     } else {
      _abort();
      // unreachable;
     }
    }
    $152 = ((($132)) + 12|0);
    HEAP32[$152>>2] = $134;
    HEAP32[$$pre$phi50Z2D>>2] = $132;
   } else {
    $$sum2 = (($psize) + 24)|0;
    $153 = (($p) + ($$sum2)|0);
    $154 = HEAP32[$153>>2]|0;
    $$sum3 = (($psize) + 12)|0;
    $155 = (($p) + ($$sum3)|0);
    $156 = HEAP32[$155>>2]|0;
    $157 = ($156|0)==($0|0);
    do {
     if ($157) {
      $$sum5 = (($psize) + 20)|0;
      $167 = (($p) + ($$sum5)|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = ($168|0)==(0|0);
      if ($169) {
       $$sum4 = (($psize) + 16)|0;
       $170 = (($p) + ($$sum4)|0);
       $171 = HEAP32[$170>>2]|0;
       $172 = ($171|0)==(0|0);
       if ($172) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $171;$RP9$0 = $170;
       }
      } else {
       $R7$0 = $168;$RP9$0 = $167;
      }
      while(1) {
       $173 = ((($R7$0)) + 20|0);
       $174 = HEAP32[$173>>2]|0;
       $175 = ($174|0)==(0|0);
       if (!($175)) {
        $R7$0 = $174;$RP9$0 = $173;
        continue;
       }
       $176 = ((($R7$0)) + 16|0);
       $177 = HEAP32[$176>>2]|0;
       $178 = ($177|0)==(0|0);
       if ($178) {
        $R7$0$lcssa = $R7$0;$RP9$0$lcssa = $RP9$0;
        break;
       } else {
        $R7$0 = $177;$RP9$0 = $176;
       }
      }
      $179 = ($RP9$0$lcssa>>>0)<($106>>>0);
      if ($179) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0$lcssa>>2] = 0;
       $R7$1 = $R7$0$lcssa;
       break;
      }
     } else {
      $$sum11 = (($psize) + 8)|0;
      $158 = (($p) + ($$sum11)|0);
      $159 = HEAP32[$158>>2]|0;
      $160 = ($159>>>0)<($106>>>0);
      if ($160) {
       _abort();
       // unreachable;
      }
      $161 = ((($159)) + 12|0);
      $162 = HEAP32[$161>>2]|0;
      $163 = ($162|0)==($0|0);
      if (!($163)) {
       _abort();
       // unreachable;
      }
      $164 = ((($156)) + 8|0);
      $165 = HEAP32[$164>>2]|0;
      $166 = ($165|0)==($0|0);
      if ($166) {
       HEAP32[$161>>2] = $156;
       HEAP32[$164>>2] = $159;
       $R7$1 = $156;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $180 = ($154|0)==(0|0);
    if (!($180)) {
     $$sum8 = (($psize) + 28)|0;
     $181 = (($p) + ($$sum8)|0);
     $182 = HEAP32[$181>>2]|0;
     $183 = (652 + ($182<<2)|0);
     $184 = HEAP32[$183>>2]|0;
     $185 = ($0|0)==($184|0);
     if ($185) {
      HEAP32[$183>>2] = $R7$1;
      $cond39 = ($R7$1|0)==(0|0);
      if ($cond39) {
       $186 = 1 << $182;
       $187 = $186 ^ -1;
       $188 = HEAP32[(352)>>2]|0;
       $189 = $188 & $187;
       HEAP32[(352)>>2] = $189;
       break;
      }
     } else {
      $190 = HEAP32[(364)>>2]|0;
      $191 = ($154>>>0)<($190>>>0);
      if ($191) {
       _abort();
       // unreachable;
      }
      $192 = ((($154)) + 16|0);
      $193 = HEAP32[$192>>2]|0;
      $194 = ($193|0)==($0|0);
      if ($194) {
       HEAP32[$192>>2] = $R7$1;
      } else {
       $195 = ((($154)) + 20|0);
       HEAP32[$195>>2] = $R7$1;
      }
      $196 = ($R7$1|0)==(0|0);
      if ($196) {
       break;
      }
     }
     $197 = HEAP32[(364)>>2]|0;
     $198 = ($R7$1>>>0)<($197>>>0);
     if ($198) {
      _abort();
      // unreachable;
     }
     $199 = ((($R7$1)) + 24|0);
     HEAP32[$199>>2] = $154;
     $$sum9 = (($psize) + 16)|0;
     $200 = (($p) + ($$sum9)|0);
     $201 = HEAP32[$200>>2]|0;
     $202 = ($201|0)==(0|0);
     do {
      if (!($202)) {
       $203 = ($201>>>0)<($197>>>0);
       if ($203) {
        _abort();
        // unreachable;
       } else {
        $204 = ((($R7$1)) + 16|0);
        HEAP32[$204>>2] = $201;
        $205 = ((($201)) + 24|0);
        HEAP32[$205>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum10 = (($psize) + 20)|0;
     $206 = (($p) + ($$sum10)|0);
     $207 = HEAP32[$206>>2]|0;
     $208 = ($207|0)==(0|0);
     if (!($208)) {
      $209 = HEAP32[(364)>>2]|0;
      $210 = ($207>>>0)<($209>>>0);
      if ($210) {
       _abort();
       // unreachable;
      } else {
       $211 = ((($R7$1)) + 20|0);
       HEAP32[$211>>2] = $207;
       $212 = ((($207)) + 24|0);
       HEAP32[$212>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $213 = $128 | 1;
  $214 = ((($$0)) + 4|0);
  HEAP32[$214>>2] = $213;
  $215 = (($$0) + ($128)|0);
  HEAP32[$215>>2] = $128;
  $216 = HEAP32[(368)>>2]|0;
  $217 = ($$0|0)==($216|0);
  if ($217) {
   HEAP32[(356)>>2] = $128;
   return;
  } else {
   $$1 = $128;
  }
 } else {
  $218 = $109 & -2;
  HEAP32[$108>>2] = $218;
  $219 = $$02 | 1;
  $220 = ((($$0)) + 4|0);
  HEAP32[$220>>2] = $219;
  $221 = (($$0) + ($$02)|0);
  HEAP32[$221>>2] = $$02;
  $$1 = $$02;
 }
 $222 = $$1 >>> 3;
 $223 = ($$1>>>0)<(256);
 if ($223) {
  $224 = $222 << 1;
  $225 = (388 + ($224<<2)|0);
  $226 = HEAP32[348>>2]|0;
  $227 = 1 << $222;
  $228 = $226 & $227;
  $229 = ($228|0)==(0);
  if ($229) {
   $230 = $226 | $227;
   HEAP32[348>>2] = $230;
   $$pre = (($224) + 2)|0;
   $$pre48 = (388 + ($$pre<<2)|0);
   $$pre$phiZ2D = $$pre48;$F16$0 = $225;
  } else {
   $$sum7 = (($224) + 2)|0;
   $231 = (388 + ($$sum7<<2)|0);
   $232 = HEAP32[$231>>2]|0;
   $233 = HEAP32[(364)>>2]|0;
   $234 = ($232>>>0)<($233>>>0);
   if ($234) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $231;$F16$0 = $232;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$0;
  $235 = ((($F16$0)) + 12|0);
  HEAP32[$235>>2] = $$0;
  $236 = ((($$0)) + 8|0);
  HEAP32[$236>>2] = $F16$0;
  $237 = ((($$0)) + 12|0);
  HEAP32[$237>>2] = $225;
  return;
 }
 $238 = $$1 >>> 8;
 $239 = ($238|0)==(0);
 if ($239) {
  $I19$0 = 0;
 } else {
  $240 = ($$1>>>0)>(16777215);
  if ($240) {
   $I19$0 = 31;
  } else {
   $241 = (($238) + 1048320)|0;
   $242 = $241 >>> 16;
   $243 = $242 & 8;
   $244 = $238 << $243;
   $245 = (($244) + 520192)|0;
   $246 = $245 >>> 16;
   $247 = $246 & 4;
   $248 = $247 | $243;
   $249 = $244 << $247;
   $250 = (($249) + 245760)|0;
   $251 = $250 >>> 16;
   $252 = $251 & 2;
   $253 = $248 | $252;
   $254 = (14 - ($253))|0;
   $255 = $249 << $252;
   $256 = $255 >>> 15;
   $257 = (($254) + ($256))|0;
   $258 = $257 << 1;
   $259 = (($257) + 7)|0;
   $260 = $$1 >>> $259;
   $261 = $260 & 1;
   $262 = $261 | $258;
   $I19$0 = $262;
  }
 }
 $263 = (652 + ($I19$0<<2)|0);
 $264 = ((($$0)) + 28|0);
 HEAP32[$264>>2] = $I19$0;
 $265 = ((($$0)) + 16|0);
 $266 = ((($$0)) + 20|0);
 HEAP32[$266>>2] = 0;
 HEAP32[$265>>2] = 0;
 $267 = HEAP32[(352)>>2]|0;
 $268 = 1 << $I19$0;
 $269 = $267 & $268;
 $270 = ($269|0)==(0);
 if ($270) {
  $271 = $267 | $268;
  HEAP32[(352)>>2] = $271;
  HEAP32[$263>>2] = $$0;
  $272 = ((($$0)) + 24|0);
  HEAP32[$272>>2] = $263;
  $273 = ((($$0)) + 12|0);
  HEAP32[$273>>2] = $$0;
  $274 = ((($$0)) + 8|0);
  HEAP32[$274>>2] = $$0;
  return;
 }
 $275 = HEAP32[$263>>2]|0;
 $276 = ((($275)) + 4|0);
 $277 = HEAP32[$276>>2]|0;
 $278 = $277 & -8;
 $279 = ($278|0)==($$1|0);
 L191: do {
  if ($279) {
   $T$0$lcssa = $275;
  } else {
   $280 = ($I19$0|0)==(31);
   $281 = $I19$0 >>> 1;
   $282 = (25 - ($281))|0;
   $283 = $280 ? 0 : $282;
   $284 = $$1 << $283;
   $K20$043 = $284;$T$042 = $275;
   while(1) {
    $291 = $K20$043 >>> 31;
    $292 = (((($T$042)) + 16|0) + ($291<<2)|0);
    $287 = HEAP32[$292>>2]|0;
    $293 = ($287|0)==(0|0);
    if ($293) {
     $$lcssa = $292;$T$042$lcssa = $T$042;
     break;
    }
    $285 = $K20$043 << 1;
    $286 = ((($287)) + 4|0);
    $288 = HEAP32[$286>>2]|0;
    $289 = $288 & -8;
    $290 = ($289|0)==($$1|0);
    if ($290) {
     $T$0$lcssa = $287;
     break L191;
    } else {
     $K20$043 = $285;$T$042 = $287;
    }
   }
   $294 = HEAP32[(364)>>2]|0;
   $295 = ($$lcssa>>>0)<($294>>>0);
   if ($295) {
    _abort();
    // unreachable;
   }
   HEAP32[$$lcssa>>2] = $$0;
   $296 = ((($$0)) + 24|0);
   HEAP32[$296>>2] = $T$042$lcssa;
   $297 = ((($$0)) + 12|0);
   HEAP32[$297>>2] = $$0;
   $298 = ((($$0)) + 8|0);
   HEAP32[$298>>2] = $$0;
   return;
  }
 } while(0);
 $299 = ((($T$0$lcssa)) + 8|0);
 $300 = HEAP32[$299>>2]|0;
 $301 = HEAP32[(364)>>2]|0;
 $302 = ($300>>>0)>=($301>>>0);
 $not$ = ($T$0$lcssa>>>0)>=($301>>>0);
 $303 = $302 & $not$;
 if (!($303)) {
  _abort();
  // unreachable;
 }
 $304 = ((($300)) + 12|0);
 HEAP32[$304>>2] = $$0;
 HEAP32[$299>>2] = $$0;
 $305 = ((($$0)) + 8|0);
 HEAP32[$305>>2] = $300;
 $306 = ((($$0)) + 12|0);
 HEAP32[$306>>2] = $T$0$lcssa;
 $307 = ((($$0)) + 24|0);
 HEAP32[$307>>2] = 0;
 return;
}
function runPostSets() {

}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
    stop = (ptr + num)|0;
    if ((num|0) >= 20) {
      // This is unaligned, but quite large, so work hard to get to aligned settings
      value = value & 0xff;
      unaligned = ptr & 3;
      value4 = value | (value << 8) | (value << 16) | (value << 24);
      stop4 = stop & ~3;
      if (unaligned) {
        unaligned = (ptr + 4 - unaligned)|0;
        while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
          HEAP8[((ptr)>>0)]=value;
          ptr = (ptr+1)|0;
        }
      }
      while ((ptr|0) < (stop4|0)) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    while ((ptr|0) < (stop|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (ptr-num)|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _strlen(ptr) {
    ptr = ptr|0;
    var curr = 0;
    curr = ptr;
    while (((HEAP8[((curr)>>0)])|0)) {
      curr = (curr + 1)|0;
    }
    return (curr - ptr)|0;
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if ((num|0) >= 4096) return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    ret = dest|0;
    if ((dest&3) == (src&3)) {
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      while ((num|0) >= 4) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
        num = (num-4)|0;
      }
    }
    while ((num|0) > 0) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
      num = (num-1)|0;
    }
    return ret|0;
}
function _memmove(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
      // Unlikely case: Copy backwards in a safe manner
      ret = dest;
      src = (src + num)|0;
      dest = (dest + num)|0;
      while ((num|0) > 0) {
        dest = (dest - 1)|0;
        src = (src - 1)|0;
        num = (num - 1)|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      }
      dest = ret;
    } else {
      _memcpy(dest, src, num) | 0;
    }
    return dest | 0;
}
function _strcpy(pdest, psrc) {
    pdest = pdest|0; psrc = psrc|0;
    var i = 0;
    do {
      HEAP8[(((pdest+i)|0)>>0)]=HEAP8[(((psrc+i)|0)>>0)];
      i = (i+1)|0;
    } while (((HEAP8[(((psrc)+(i-1))>>0)])|0));
    return pdest|0;
}
function _bitshift64Ashr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = (high|0) < 0 ? -1 : 0;
    return (high >> (bits - 32))|0;
  }
function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
  }

// ======== compiled code from system/lib/compiler-rt , see readme therein
function ___muldsi3($a, $b) {
  $a = $a | 0;
  $b = $b | 0;
  var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
  $1 = $a & 65535;
  $2 = $b & 65535;
  $3 = Math_imul($2, $1) | 0;
  $6 = $a >>> 16;
  $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
  $11 = $b >>> 16;
  $12 = Math_imul($11, $1) | 0;
  return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___divdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $7$0 = 0, $7$1 = 0, $8$0 = 0, $10$0 = 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  $7$0 = $2$0 ^ $1$0;
  $7$1 = $2$1 ^ $1$1;
  $8$0 = ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, 0) | 0;
  $10$0 = _i64Subtract($8$0 ^ $7$0, tempRet0 ^ $7$1, $7$0, $7$1) | 0;
  return $10$0 | 0;
}
function ___remdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, $rem) | 0;
  $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0, HEAP32[$rem + 4 >> 2] ^ $1$1, $1$0, $1$1) | 0;
  $10$1 = tempRet0;
  STACKTOP = __stackBase__;
  return (tempRet0 = $10$1, $10$0) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
  $x_sroa_0_0_extract_trunc = $a$0;
  $y_sroa_0_0_extract_trunc = $b$0;
  $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
  $1$1 = tempRet0;
  $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
  return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0;
  $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
  return $1$0 | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
  STACKTOP = __stackBase__;
  return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  $rem = $rem | 0;
  var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
  $n_sroa_0_0_extract_trunc = $a$0;
  $n_sroa_1_4_extract_shift$0 = $a$1;
  $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
  $d_sroa_0_0_extract_trunc = $b$0;
  $d_sroa_1_4_extract_shift$0 = $b$1;
  $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
  if (($n_sroa_1_4_extract_trunc | 0) == 0) {
    $4 = ($rem | 0) != 0;
    if (($d_sroa_1_4_extract_trunc | 0) == 0) {
      if ($4) {
        HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
        HEAP32[$rem + 4 >> 2] = 0;
      }
      $_0$1 = 0;
      $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$4) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    }
  }
  $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
  do {
    if (($d_sroa_0_0_extract_trunc | 0) == 0) {
      if ($17) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      if (($n_sroa_0_0_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0;
          HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
      if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
        }
        $_0$1 = 0;
        $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
      $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
      if ($51 >>> 0 <= 30) {
        $57 = $51 + 1 | 0;
        $58 = 31 - $51 | 0;
        $sr_1_ph = $57;
        $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
        $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
        $q_sroa_0_1_ph = 0;
        $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
        break;
      }
      if (($rem | 0) == 0) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = 0 | $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$17) {
        $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
        $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($119 >>> 0 <= 31) {
          $125 = $119 + 1 | 0;
          $126 = 31 - $119 | 0;
          $130 = $119 - 31 >> 31;
          $sr_1_ph = $125;
          $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
      if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
        $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
        $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        $89 = 64 - $88 | 0;
        $91 = 32 - $88 | 0;
        $92 = $91 >> 31;
        $95 = $88 - 32 | 0;
        $105 = $95 >> 31;
        $sr_1_ph = $88;
        $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
        $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
        $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
        $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
        break;
      }
      if (($rem | 0) != 0) {
        HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
        HEAP32[$rem + 4 >> 2] = 0;
      }
      if (($d_sroa_0_0_extract_trunc | 0) == 1) {
        $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$0 = 0 | $a$0 & -1;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
        $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
        $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
  } while (0);
  if (($sr_1_ph | 0) == 0) {
    $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
    $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
    $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
    $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = 0;
  } else {
    $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
    $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
    $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
    $137$1 = tempRet0;
    $q_sroa_1_1198 = $q_sroa_1_1_ph;
    $q_sroa_0_1199 = $q_sroa_0_1_ph;
    $r_sroa_1_1200 = $r_sroa_1_1_ph;
    $r_sroa_0_1201 = $r_sroa_0_1_ph;
    $sr_1202 = $sr_1_ph;
    $carry_0203 = 0;
    while (1) {
      $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
      $149 = $carry_0203 | $q_sroa_0_1199 << 1;
      $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
      $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
      _i64Subtract($137$0, $137$1, $r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1) | 0;
      $150$1 = tempRet0;
      $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
      $152 = $151$0 & 1;
      $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1, $151$0 & $d_sroa_0_0_insert_insert99$0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1) | 0;
      $r_sroa_0_0_extract_trunc = $154$0;
      $r_sroa_1_4_extract_trunc = tempRet0;
      $155 = $sr_1202 - 1 | 0;
      if (($155 | 0) == 0) {
        break;
      } else {
        $q_sroa_1_1198 = $147;
        $q_sroa_0_1199 = $149;
        $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
        $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
        $sr_1202 = $155;
        $carry_0203 = $152;
      }
    }
    $q_sroa_1_1_lcssa = $147;
    $q_sroa_0_1_lcssa = $149;
    $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
    $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = $152;
  }
  $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
  $q_sroa_0_0_insert_ext75$1 = 0;
  $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
  if (($rem | 0) != 0) {
    HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
    HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
  }
  $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
  $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
  return (tempRet0 = $_0$1, $_0$0) | 0;
}
// =======================================================================



  
function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&63](a1|0,a2|0,a3|0)|0;
}


function jsCall_iiii_0(a1,a2,a3) {
  a1=a1|0; a2=a2|0; a3=a3|0;
  return jsCall_iiii(0,a1|0,a2|0,a3|0)|0;
}



function jsCall_iiii_1(a1,a2,a3) {
  a1=a1|0; a2=a2|0; a3=a3|0;
  return jsCall_iiii(1,a1|0,a2|0,a3|0)|0;
}



function jsCall_iiii_2(a1,a2,a3) {
  a1=a1|0; a2=a2|0; a3=a3|0;
  return jsCall_iiii(2,a1|0,a2|0,a3|0)|0;
}



function jsCall_iiii_3(a1,a2,a3) {
  a1=a1|0; a2=a2|0; a3=a3|0;
  return jsCall_iiii(3,a1|0,a2|0,a3|0)|0;
}



function jsCall_iiii_4(a1,a2,a3) {
  a1=a1|0; a2=a2|0; a3=a3|0;
  return jsCall_iiii(4,a1|0,a2|0,a3|0)|0;
}



function jsCall_iiii_5(a1,a2,a3) {
  a1=a1|0; a2=a2|0; a3=a3|0;
  return jsCall_iiii(5,a1|0,a2|0,a3|0)|0;
}



function jsCall_iiii_6(a1,a2,a3) {
  a1=a1|0; a2=a2|0; a3=a3|0;
  return jsCall_iiii(6,a1|0,a2|0,a3|0)|0;
}



function jsCall_iiii_7(a1,a2,a3) {
  a1=a1|0; a2=a2|0; a3=a3|0;
  return jsCall_iiii(7,a1|0,a2|0,a3|0)|0;
}



function jsCall_iiii_8(a1,a2,a3) {
  a1=a1|0; a2=a2|0; a3=a3|0;
  return jsCall_iiii(8,a1|0,a2|0,a3|0)|0;
}



function jsCall_iiii_9(a1,a2,a3) {
  a1=a1|0; a2=a2|0; a3=a3|0;
  return jsCall_iiii(9,a1|0,a2|0,a3|0)|0;
}



function jsCall_iiii_10(a1,a2,a3) {
  a1=a1|0; a2=a2|0; a3=a3|0;
  return jsCall_iiii(10,a1|0,a2|0,a3|0)|0;
}



function jsCall_iiii_11(a1,a2,a3) {
  a1=a1|0; a2=a2|0; a3=a3|0;
  return jsCall_iiii(11,a1|0,a2|0,a3|0)|0;
}



function jsCall_iiii_12(a1,a2,a3) {
  a1=a1|0; a2=a2|0; a3=a3|0;
  return jsCall_iiii(12,a1|0,a2|0,a3|0)|0;
}



function jsCall_iiii_13(a1,a2,a3) {
  a1=a1|0; a2=a2|0; a3=a3|0;
  return jsCall_iiii(13,a1|0,a2|0,a3|0)|0;
}



function jsCall_iiii_14(a1,a2,a3) {
  a1=a1|0; a2=a2|0; a3=a3|0;
  return jsCall_iiii(14,a1|0,a2|0,a3|0)|0;
}



function jsCall_iiii_15(a1,a2,a3) {
  a1=a1|0; a2=a2|0; a3=a3|0;
  return jsCall_iiii(15,a1|0,a2|0,a3|0)|0;
}



function jsCall_iiii_16(a1,a2,a3) {
  a1=a1|0; a2=a2|0; a3=a3|0;
  return jsCall_iiii(16,a1|0,a2|0,a3|0)|0;
}



function jsCall_iiii_17(a1,a2,a3) {
  a1=a1|0; a2=a2|0; a3=a3|0;
  return jsCall_iiii(17,a1|0,a2|0,a3|0)|0;
}



function jsCall_iiii_18(a1,a2,a3) {
  a1=a1|0; a2=a2|0; a3=a3|0;
  return jsCall_iiii(18,a1|0,a2|0,a3|0)|0;
}



function jsCall_iiii_19(a1,a2,a3) {
  a1=a1|0; a2=a2|0; a3=a3|0;
  return jsCall_iiii(19,a1|0,a2|0,a3|0)|0;
}



function dynCall_viiiii(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  FUNCTION_TABLE_viiiii[index&63](a1|0,a2|0,a3|0,a4|0,a5|0);
}


function jsCall_viiiii_0(a1,a2,a3,a4,a5) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  jsCall_viiiii(0,a1|0,a2|0,a3|0,a4|0,a5|0);
}



function jsCall_viiiii_1(a1,a2,a3,a4,a5) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  jsCall_viiiii(1,a1|0,a2|0,a3|0,a4|0,a5|0);
}



function jsCall_viiiii_2(a1,a2,a3,a4,a5) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  jsCall_viiiii(2,a1|0,a2|0,a3|0,a4|0,a5|0);
}



function jsCall_viiiii_3(a1,a2,a3,a4,a5) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  jsCall_viiiii(3,a1|0,a2|0,a3|0,a4|0,a5|0);
}



function jsCall_viiiii_4(a1,a2,a3,a4,a5) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  jsCall_viiiii(4,a1|0,a2|0,a3|0,a4|0,a5|0);
}



function jsCall_viiiii_5(a1,a2,a3,a4,a5) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  jsCall_viiiii(5,a1|0,a2|0,a3|0,a4|0,a5|0);
}



function jsCall_viiiii_6(a1,a2,a3,a4,a5) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  jsCall_viiiii(6,a1|0,a2|0,a3|0,a4|0,a5|0);
}



function jsCall_viiiii_7(a1,a2,a3,a4,a5) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  jsCall_viiiii(7,a1|0,a2|0,a3|0,a4|0,a5|0);
}



function jsCall_viiiii_8(a1,a2,a3,a4,a5) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  jsCall_viiiii(8,a1|0,a2|0,a3|0,a4|0,a5|0);
}



function jsCall_viiiii_9(a1,a2,a3,a4,a5) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  jsCall_viiiii(9,a1|0,a2|0,a3|0,a4|0,a5|0);
}



function jsCall_viiiii_10(a1,a2,a3,a4,a5) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  jsCall_viiiii(10,a1|0,a2|0,a3|0,a4|0,a5|0);
}



function jsCall_viiiii_11(a1,a2,a3,a4,a5) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  jsCall_viiiii(11,a1|0,a2|0,a3|0,a4|0,a5|0);
}



function jsCall_viiiii_12(a1,a2,a3,a4,a5) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  jsCall_viiiii(12,a1|0,a2|0,a3|0,a4|0,a5|0);
}



function jsCall_viiiii_13(a1,a2,a3,a4,a5) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  jsCall_viiiii(13,a1|0,a2|0,a3|0,a4|0,a5|0);
}



function jsCall_viiiii_14(a1,a2,a3,a4,a5) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  jsCall_viiiii(14,a1|0,a2|0,a3|0,a4|0,a5|0);
}



function jsCall_viiiii_15(a1,a2,a3,a4,a5) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  jsCall_viiiii(15,a1|0,a2|0,a3|0,a4|0,a5|0);
}



function jsCall_viiiii_16(a1,a2,a3,a4,a5) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  jsCall_viiiii(16,a1|0,a2|0,a3|0,a4|0,a5|0);
}



function jsCall_viiiii_17(a1,a2,a3,a4,a5) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  jsCall_viiiii(17,a1|0,a2|0,a3|0,a4|0,a5|0);
}



function jsCall_viiiii_18(a1,a2,a3,a4,a5) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  jsCall_viiiii(18,a1|0,a2|0,a3|0,a4|0,a5|0);
}



function jsCall_viiiii_19(a1,a2,a3,a4,a5) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  jsCall_viiiii(19,a1|0,a2|0,a3|0,a4|0,a5|0);
}



function dynCall_vi(index,a1) {
  index = index|0;
  a1=a1|0;
  FUNCTION_TABLE_vi[index&63](a1|0);
}


function jsCall_vi_0(a1) {
  a1=a1|0;
  jsCall_vi(0,a1|0);
}



function jsCall_vi_1(a1) {
  a1=a1|0;
  jsCall_vi(1,a1|0);
}



function jsCall_vi_2(a1) {
  a1=a1|0;
  jsCall_vi(2,a1|0);
}



function jsCall_vi_3(a1) {
  a1=a1|0;
  jsCall_vi(3,a1|0);
}



function jsCall_vi_4(a1) {
  a1=a1|0;
  jsCall_vi(4,a1|0);
}



function jsCall_vi_5(a1) {
  a1=a1|0;
  jsCall_vi(5,a1|0);
}



function jsCall_vi_6(a1) {
  a1=a1|0;
  jsCall_vi(6,a1|0);
}



function jsCall_vi_7(a1) {
  a1=a1|0;
  jsCall_vi(7,a1|0);
}



function jsCall_vi_8(a1) {
  a1=a1|0;
  jsCall_vi(8,a1|0);
}



function jsCall_vi_9(a1) {
  a1=a1|0;
  jsCall_vi(9,a1|0);
}



function jsCall_vi_10(a1) {
  a1=a1|0;
  jsCall_vi(10,a1|0);
}



function jsCall_vi_11(a1) {
  a1=a1|0;
  jsCall_vi(11,a1|0);
}



function jsCall_vi_12(a1) {
  a1=a1|0;
  jsCall_vi(12,a1|0);
}



function jsCall_vi_13(a1) {
  a1=a1|0;
  jsCall_vi(13,a1|0);
}



function jsCall_vi_14(a1) {
  a1=a1|0;
  jsCall_vi(14,a1|0);
}



function jsCall_vi_15(a1) {
  a1=a1|0;
  jsCall_vi(15,a1|0);
}



function jsCall_vi_16(a1) {
  a1=a1|0;
  jsCall_vi(16,a1|0);
}



function jsCall_vi_17(a1) {
  a1=a1|0;
  jsCall_vi(17,a1|0);
}



function jsCall_vi_18(a1) {
  a1=a1|0;
  jsCall_vi(18,a1|0);
}



function jsCall_vi_19(a1) {
  a1=a1|0;
  jsCall_vi(19,a1|0);
}



function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&63](a1|0)|0;
}


function jsCall_ii_0(a1) {
  a1=a1|0;
  return jsCall_ii(0,a1|0)|0;
}



function jsCall_ii_1(a1) {
  a1=a1|0;
  return jsCall_ii(1,a1|0)|0;
}



function jsCall_ii_2(a1) {
  a1=a1|0;
  return jsCall_ii(2,a1|0)|0;
}



function jsCall_ii_3(a1) {
  a1=a1|0;
  return jsCall_ii(3,a1|0)|0;
}



function jsCall_ii_4(a1) {
  a1=a1|0;
  return jsCall_ii(4,a1|0)|0;
}



function jsCall_ii_5(a1) {
  a1=a1|0;
  return jsCall_ii(5,a1|0)|0;
}



function jsCall_ii_6(a1) {
  a1=a1|0;
  return jsCall_ii(6,a1|0)|0;
}



function jsCall_ii_7(a1) {
  a1=a1|0;
  return jsCall_ii(7,a1|0)|0;
}



function jsCall_ii_8(a1) {
  a1=a1|0;
  return jsCall_ii(8,a1|0)|0;
}



function jsCall_ii_9(a1) {
  a1=a1|0;
  return jsCall_ii(9,a1|0)|0;
}



function jsCall_ii_10(a1) {
  a1=a1|0;
  return jsCall_ii(10,a1|0)|0;
}



function jsCall_ii_11(a1) {
  a1=a1|0;
  return jsCall_ii(11,a1|0)|0;
}



function jsCall_ii_12(a1) {
  a1=a1|0;
  return jsCall_ii(12,a1|0)|0;
}



function jsCall_ii_13(a1) {
  a1=a1|0;
  return jsCall_ii(13,a1|0)|0;
}



function jsCall_ii_14(a1) {
  a1=a1|0;
  return jsCall_ii(14,a1|0)|0;
}



function jsCall_ii_15(a1) {
  a1=a1|0;
  return jsCall_ii(15,a1|0)|0;
}



function jsCall_ii_16(a1) {
  a1=a1|0;
  return jsCall_ii(16,a1|0)|0;
}



function jsCall_ii_17(a1) {
  a1=a1|0;
  return jsCall_ii(17,a1|0)|0;
}



function jsCall_ii_18(a1) {
  a1=a1|0;
  return jsCall_ii(18,a1|0)|0;
}



function jsCall_ii_19(a1) {
  a1=a1|0;
  return jsCall_ii(19,a1|0)|0;
}



function dynCall_v(index) {
  index = index|0;
  
  FUNCTION_TABLE_v[index&63]();
}


function jsCall_v_0() {
  
  jsCall_v(0);
}



function jsCall_v_1() {
  
  jsCall_v(1);
}



function jsCall_v_2() {
  
  jsCall_v(2);
}



function jsCall_v_3() {
  
  jsCall_v(3);
}



function jsCall_v_4() {
  
  jsCall_v(4);
}



function jsCall_v_5() {
  
  jsCall_v(5);
}



function jsCall_v_6() {
  
  jsCall_v(6);
}



function jsCall_v_7() {
  
  jsCall_v(7);
}



function jsCall_v_8() {
  
  jsCall_v(8);
}



function jsCall_v_9() {
  
  jsCall_v(9);
}



function jsCall_v_10() {
  
  jsCall_v(10);
}



function jsCall_v_11() {
  
  jsCall_v(11);
}



function jsCall_v_12() {
  
  jsCall_v(12);
}



function jsCall_v_13() {
  
  jsCall_v(13);
}



function jsCall_v_14() {
  
  jsCall_v(14);
}



function jsCall_v_15() {
  
  jsCall_v(15);
}



function jsCall_v_16() {
  
  jsCall_v(16);
}



function jsCall_v_17() {
  
  jsCall_v(17);
}



function jsCall_v_18() {
  
  jsCall_v(18);
}



function jsCall_v_19() {
  
  jsCall_v(19);
}



function dynCall_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  FUNCTION_TABLE_viiiiii[index&63](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}


function jsCall_viiiiii_0(a1,a2,a3,a4,a5,a6) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  jsCall_viiiiii(0,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}



function jsCall_viiiiii_1(a1,a2,a3,a4,a5,a6) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  jsCall_viiiiii(1,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}



function jsCall_viiiiii_2(a1,a2,a3,a4,a5,a6) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  jsCall_viiiiii(2,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}



function jsCall_viiiiii_3(a1,a2,a3,a4,a5,a6) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  jsCall_viiiiii(3,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}



function jsCall_viiiiii_4(a1,a2,a3,a4,a5,a6) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  jsCall_viiiiii(4,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}



function jsCall_viiiiii_5(a1,a2,a3,a4,a5,a6) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  jsCall_viiiiii(5,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}



function jsCall_viiiiii_6(a1,a2,a3,a4,a5,a6) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  jsCall_viiiiii(6,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}



function jsCall_viiiiii_7(a1,a2,a3,a4,a5,a6) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  jsCall_viiiiii(7,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}



function jsCall_viiiiii_8(a1,a2,a3,a4,a5,a6) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  jsCall_viiiiii(8,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}



function jsCall_viiiiii_9(a1,a2,a3,a4,a5,a6) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  jsCall_viiiiii(9,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}



function jsCall_viiiiii_10(a1,a2,a3,a4,a5,a6) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  jsCall_viiiiii(10,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}



function jsCall_viiiiii_11(a1,a2,a3,a4,a5,a6) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  jsCall_viiiiii(11,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}



function jsCall_viiiiii_12(a1,a2,a3,a4,a5,a6) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  jsCall_viiiiii(12,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}



function jsCall_viiiiii_13(a1,a2,a3,a4,a5,a6) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  jsCall_viiiiii(13,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}



function jsCall_viiiiii_14(a1,a2,a3,a4,a5,a6) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  jsCall_viiiiii(14,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}



function jsCall_viiiiii_15(a1,a2,a3,a4,a5,a6) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  jsCall_viiiiii(15,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}



function jsCall_viiiiii_16(a1,a2,a3,a4,a5,a6) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  jsCall_viiiiii(16,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}



function jsCall_viiiiii_17(a1,a2,a3,a4,a5,a6) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  jsCall_viiiiii(17,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}



function jsCall_viiiiii_18(a1,a2,a3,a4,a5,a6) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  jsCall_viiiiii(18,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}



function jsCall_viiiiii_19(a1,a2,a3,a4,a5,a6) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  jsCall_viiiiii(19,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}



function dynCall_viiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  FUNCTION_TABLE_viiii[index&63](a1|0,a2|0,a3|0,a4|0);
}


function jsCall_viiii_0(a1,a2,a3,a4) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  jsCall_viiii(0,a1|0,a2|0,a3|0,a4|0);
}



function jsCall_viiii_1(a1,a2,a3,a4) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  jsCall_viiii(1,a1|0,a2|0,a3|0,a4|0);
}



function jsCall_viiii_2(a1,a2,a3,a4) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  jsCall_viiii(2,a1|0,a2|0,a3|0,a4|0);
}



function jsCall_viiii_3(a1,a2,a3,a4) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  jsCall_viiii(3,a1|0,a2|0,a3|0,a4|0);
}



function jsCall_viiii_4(a1,a2,a3,a4) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  jsCall_viiii(4,a1|0,a2|0,a3|0,a4|0);
}



function jsCall_viiii_5(a1,a2,a3,a4) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  jsCall_viiii(5,a1|0,a2|0,a3|0,a4|0);
}



function jsCall_viiii_6(a1,a2,a3,a4) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  jsCall_viiii(6,a1|0,a2|0,a3|0,a4|0);
}



function jsCall_viiii_7(a1,a2,a3,a4) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  jsCall_viiii(7,a1|0,a2|0,a3|0,a4|0);
}



function jsCall_viiii_8(a1,a2,a3,a4) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  jsCall_viiii(8,a1|0,a2|0,a3|0,a4|0);
}



function jsCall_viiii_9(a1,a2,a3,a4) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  jsCall_viiii(9,a1|0,a2|0,a3|0,a4|0);
}



function jsCall_viiii_10(a1,a2,a3,a4) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  jsCall_viiii(10,a1|0,a2|0,a3|0,a4|0);
}



function jsCall_viiii_11(a1,a2,a3,a4) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  jsCall_viiii(11,a1|0,a2|0,a3|0,a4|0);
}



function jsCall_viiii_12(a1,a2,a3,a4) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  jsCall_viiii(12,a1|0,a2|0,a3|0,a4|0);
}



function jsCall_viiii_13(a1,a2,a3,a4) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  jsCall_viiii(13,a1|0,a2|0,a3|0,a4|0);
}



function jsCall_viiii_14(a1,a2,a3,a4) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  jsCall_viiii(14,a1|0,a2|0,a3|0,a4|0);
}



function jsCall_viiii_15(a1,a2,a3,a4) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  jsCall_viiii(15,a1|0,a2|0,a3|0,a4|0);
}



function jsCall_viiii_16(a1,a2,a3,a4) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  jsCall_viiii(16,a1|0,a2|0,a3|0,a4|0);
}



function jsCall_viiii_17(a1,a2,a3,a4) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  jsCall_viiii(17,a1|0,a2|0,a3|0,a4|0);
}



function jsCall_viiii_18(a1,a2,a3,a4) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  jsCall_viiii(18,a1|0,a2|0,a3|0,a4|0);
}



function jsCall_viiii_19(a1,a2,a3,a4) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  jsCall_viiii(19,a1|0,a2|0,a3|0,a4|0);
}


function b1(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(0);return 0; }
function b2(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(1);return 0; }
function b3(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(3);return 0; }
function b4(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(5);return 0; }
function b5(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(7);return 0; }
function b6(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(9);return 0; }
function b7(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(11);return 0; }
function b8(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(13);return 0; }
function b9(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(15);return 0; }
function b10(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(17);return 0; }
function b11(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(19);return 0; }
function b12(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(21);return 0; }
function b13(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(23);return 0; }
function b14(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(25);return 0; }
function b15(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(27);return 0; }
function b16(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(29);return 0; }
function b17(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(31);return 0; }
function b18(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(33);return 0; }
function b19(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(35);return 0; }
function b20(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(37);return 0; }
function b21(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(39);return 0; }
function b22(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(41);return 0; }
function b23(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(44);return 0; }
function b24(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(45);return 0; }
function b25(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(46);return 0; }
function b26(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(47);return 0; }
function b27(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(48);return 0; }
function b28(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(49);return 0; }
function b29(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(50);return 0; }
function b30(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(51);return 0; }
function b31(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(52);return 0; }
function b32(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(53);return 0; }
function b33(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(54);return 0; }
function b34(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(55);return 0; }
function b35(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(56);return 0; }
function b36(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(57);return 0; }
function b37(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(58);return 0; }
function b38(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(59);return 0; }
function b39(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(60);return 0; }
function b40(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(61);return 0; }
function b41(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(62);return 0; }
function b42(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(63);return 0; }
function b44(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(0); }
function b45(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(1); }
function b46(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(3); }
function b47(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(5); }
function b48(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(7); }
function b49(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(9); }
function b50(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(11); }
function b51(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(13); }
function b52(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(15); }
function b53(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(17); }
function b54(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(19); }
function b55(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(21); }
function b56(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(23); }
function b57(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(25); }
function b58(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(27); }
function b59(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(29); }
function b60(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(31); }
function b61(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(33); }
function b62(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(35); }
function b63(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(37); }
function b64(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(39); }
function b65(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(41); }
function b66(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(44); }
function b67(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(45); }
function b68(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(46); }
function b69(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(47); }
function b70(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(48); }
function b71(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(49); }
function b72(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(50); }
function b73(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(51); }
function b74(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(52); }
function b75(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(53); }
function b76(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(54); }
function b77(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(55); }
function b78(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(56); }
function b79(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(57); }
function b80(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(58); }
function b81(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(59); }
function b82(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(60); }
function b83(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(61); }
function b84(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(62); }
function b85(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(63); }
function b87(p0) { p0 = p0|0; nullFunc_vi(0); }
function b88(p0) { p0 = p0|0; nullFunc_vi(1); }
function b89(p0) { p0 = p0|0; nullFunc_vi(3); }
function b90(p0) { p0 = p0|0; nullFunc_vi(5); }
function b91(p0) { p0 = p0|0; nullFunc_vi(7); }
function b92(p0) { p0 = p0|0; nullFunc_vi(9); }
function b93(p0) { p0 = p0|0; nullFunc_vi(11); }
function b94(p0) { p0 = p0|0; nullFunc_vi(13); }
function b95(p0) { p0 = p0|0; nullFunc_vi(15); }
function b96(p0) { p0 = p0|0; nullFunc_vi(17); }
function b97(p0) { p0 = p0|0; nullFunc_vi(19); }
function b98(p0) { p0 = p0|0; nullFunc_vi(21); }
function b99(p0) { p0 = p0|0; nullFunc_vi(23); }
function b100(p0) { p0 = p0|0; nullFunc_vi(25); }
function b101(p0) { p0 = p0|0; nullFunc_vi(27); }
function b102(p0) { p0 = p0|0; nullFunc_vi(29); }
function b103(p0) { p0 = p0|0; nullFunc_vi(31); }
function b104(p0) { p0 = p0|0; nullFunc_vi(33); }
function b105(p0) { p0 = p0|0; nullFunc_vi(35); }
function b106(p0) { p0 = p0|0; nullFunc_vi(37); }
function b107(p0) { p0 = p0|0; nullFunc_vi(39); }
function b108(p0) { p0 = p0|0; nullFunc_vi(41); }
function b109(p0) { p0 = p0|0; nullFunc_vi(50); }
function b110(p0) { p0 = p0|0; nullFunc_vi(51); }
function b111(p0) { p0 = p0|0; nullFunc_vi(52); }
function b112(p0) { p0 = p0|0; nullFunc_vi(53); }
function b113(p0) { p0 = p0|0; nullFunc_vi(54); }
function b114(p0) { p0 = p0|0; nullFunc_vi(55); }
function b115(p0) { p0 = p0|0; nullFunc_vi(56); }
function b116(p0) { p0 = p0|0; nullFunc_vi(57); }
function b117(p0) { p0 = p0|0; nullFunc_vi(58); }
function b118(p0) { p0 = p0|0; nullFunc_vi(59); }
function b119(p0) { p0 = p0|0; nullFunc_vi(60); }
function b120(p0) { p0 = p0|0; nullFunc_vi(61); }
function b121(p0) { p0 = p0|0; nullFunc_vi(62); }
function b122(p0) { p0 = p0|0; nullFunc_vi(63); }
function b124(p0) { p0 = p0|0; nullFunc_ii(0);return 0; }
function b125(p0) { p0 = p0|0; nullFunc_ii(1);return 0; }
function b126(p0) { p0 = p0|0; nullFunc_ii(3);return 0; }
function b127(p0) { p0 = p0|0; nullFunc_ii(5);return 0; }
function b128(p0) { p0 = p0|0; nullFunc_ii(7);return 0; }
function b129(p0) { p0 = p0|0; nullFunc_ii(9);return 0; }
function b130(p0) { p0 = p0|0; nullFunc_ii(11);return 0; }
function b131(p0) { p0 = p0|0; nullFunc_ii(13);return 0; }
function b132(p0) { p0 = p0|0; nullFunc_ii(15);return 0; }
function b133(p0) { p0 = p0|0; nullFunc_ii(17);return 0; }
function b134(p0) { p0 = p0|0; nullFunc_ii(19);return 0; }
function b135(p0) { p0 = p0|0; nullFunc_ii(21);return 0; }
function b136(p0) { p0 = p0|0; nullFunc_ii(23);return 0; }
function b137(p0) { p0 = p0|0; nullFunc_ii(25);return 0; }
function b138(p0) { p0 = p0|0; nullFunc_ii(27);return 0; }
function b139(p0) { p0 = p0|0; nullFunc_ii(29);return 0; }
function b140(p0) { p0 = p0|0; nullFunc_ii(31);return 0; }
function b141(p0) { p0 = p0|0; nullFunc_ii(33);return 0; }
function b142(p0) { p0 = p0|0; nullFunc_ii(35);return 0; }
function b143(p0) { p0 = p0|0; nullFunc_ii(37);return 0; }
function b144(p0) { p0 = p0|0; nullFunc_ii(39);return 0; }
function b145(p0) { p0 = p0|0; nullFunc_ii(41);return 0; }
function b146(p0) { p0 = p0|0; nullFunc_ii(43);return 0; }
function b147(p0) { p0 = p0|0; nullFunc_ii(44);return 0; }
function b148(p0) { p0 = p0|0; nullFunc_ii(45);return 0; }
function b149(p0) { p0 = p0|0; nullFunc_ii(46);return 0; }
function b150(p0) { p0 = p0|0; nullFunc_ii(47);return 0; }
function b151(p0) { p0 = p0|0; nullFunc_ii(48);return 0; }
function b152(p0) { p0 = p0|0; nullFunc_ii(49);return 0; }
function b153(p0) { p0 = p0|0; nullFunc_ii(50);return 0; }
function b154(p0) { p0 = p0|0; nullFunc_ii(51);return 0; }
function b155(p0) { p0 = p0|0; nullFunc_ii(52);return 0; }
function b156(p0) { p0 = p0|0; nullFunc_ii(53);return 0; }
function b157(p0) { p0 = p0|0; nullFunc_ii(54);return 0; }
function b158(p0) { p0 = p0|0; nullFunc_ii(55);return 0; }
function b159(p0) { p0 = p0|0; nullFunc_ii(56);return 0; }
function b160(p0) { p0 = p0|0; nullFunc_ii(57);return 0; }
function b161(p0) { p0 = p0|0; nullFunc_ii(58);return 0; }
function b162(p0) { p0 = p0|0; nullFunc_ii(59);return 0; }
function b163(p0) { p0 = p0|0; nullFunc_ii(60);return 0; }
function b164(p0) { p0 = p0|0; nullFunc_ii(61);return 0; }
function b165(p0) { p0 = p0|0; nullFunc_ii(62);return 0; }
function b166(p0) { p0 = p0|0; nullFunc_ii(63);return 0; }
function b168() { ; nullFunc_v(0); }
function b169() { ; nullFunc_v(1); }
function b170() { ; nullFunc_v(3); }
function b171() { ; nullFunc_v(5); }
function b172() { ; nullFunc_v(7); }
function b173() { ; nullFunc_v(9); }
function b174() { ; nullFunc_v(11); }
function b175() { ; nullFunc_v(13); }
function b176() { ; nullFunc_v(15); }
function b177() { ; nullFunc_v(17); }
function b178() { ; nullFunc_v(19); }
function b179() { ; nullFunc_v(21); }
function b180() { ; nullFunc_v(23); }
function b181() { ; nullFunc_v(25); }
function b182() { ; nullFunc_v(27); }
function b183() { ; nullFunc_v(29); }
function b184() { ; nullFunc_v(31); }
function b185() { ; nullFunc_v(33); }
function b186() { ; nullFunc_v(35); }
function b187() { ; nullFunc_v(37); }
function b188() { ; nullFunc_v(39); }
function b189() { ; nullFunc_v(41); }
function b190() { ; nullFunc_v(44); }
function b191() { ; nullFunc_v(45); }
function b192() { ; nullFunc_v(46); }
function b193() { ; nullFunc_v(47); }
function b194() { ; nullFunc_v(48); }
function b195() { ; nullFunc_v(49); }
function b196() { ; nullFunc_v(50); }
function b197() { ; nullFunc_v(51); }
function b198() { ; nullFunc_v(52); }
function b199() { ; nullFunc_v(53); }
function b200() { ; nullFunc_v(54); }
function b201() { ; nullFunc_v(55); }
function b202() { ; nullFunc_v(56); }
function b203() { ; nullFunc_v(57); }
function b204() { ; nullFunc_v(58); }
function b205() { ; nullFunc_v(59); }
function b206() { ; nullFunc_v(60); }
function b207() { ; nullFunc_v(61); }
function b208() { ; nullFunc_v(62); }
function b209() { ; nullFunc_v(63); }
function b211(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(0); }
function b212(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(1); }
function b213(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(3); }
function b214(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(5); }
function b215(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(7); }
function b216(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(9); }
function b217(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(11); }
function b218(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(13); }
function b219(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(15); }
function b220(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(17); }
function b221(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(19); }
function b222(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(21); }
function b223(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(23); }
function b224(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(25); }
function b225(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(27); }
function b226(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(29); }
function b227(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(31); }
function b228(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(33); }
function b229(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(35); }
function b230(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(37); }
function b231(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(39); }
function b232(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(41); }
function b233(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(44); }
function b234(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(45); }
function b235(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(46); }
function b236(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(47); }
function b237(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(48); }
function b238(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(49); }
function b239(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(50); }
function b240(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(51); }
function b241(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(52); }
function b242(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(53); }
function b243(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(54); }
function b244(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(55); }
function b245(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(56); }
function b246(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(57); }
function b247(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(58); }
function b248(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(59); }
function b249(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(60); }
function b250(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(61); }
function b251(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(62); }
function b252(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(63); }
function b254(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(0); }
function b255(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(1); }
function b256(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(3); }
function b257(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(5); }
function b258(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(7); }
function b259(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(9); }
function b260(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(11); }
function b261(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(13); }
function b262(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(15); }
function b263(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(17); }
function b264(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(19); }
function b265(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(21); }
function b266(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(23); }
function b267(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(25); }
function b268(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(27); }
function b269(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(29); }
function b270(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(31); }
function b271(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(33); }
function b272(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(35); }
function b273(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(37); }
function b274(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(39); }
function b275(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(41); }
function b276(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(44); }
function b277(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(45); }
function b278(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(46); }
function b279(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(47); }
function b280(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(48); }
function b281(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(49); }
function b282(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(50); }
function b283(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(51); }
function b284(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(52); }
function b285(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(53); }
function b286(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(54); }
function b287(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(55); }
function b288(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(56); }
function b289(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(57); }
function b290(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(58); }
function b291(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(59); }
function b292(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(60); }
function b293(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(61); }
function b294(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(62); }
function b295(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(63); }

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_iiii = [b1,b2,jsCall_iiii_0,b3,jsCall_iiii_1,b4,jsCall_iiii_2,b5,jsCall_iiii_3,b6,jsCall_iiii_4,b7,jsCall_iiii_5,b8,jsCall_iiii_6,b9,jsCall_iiii_7,b10,jsCall_iiii_8,b11,jsCall_iiii_9,b12,jsCall_iiii_10,b13,jsCall_iiii_11,b14,jsCall_iiii_12,b15,jsCall_iiii_13
,b16,jsCall_iiii_14,b17,jsCall_iiii_15,b18,jsCall_iiii_16,b19,jsCall_iiii_17,b20,jsCall_iiii_18,b21,jsCall_iiii_19,b22,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,_sn_write,b23,b24,b25,b26,b27,b28,b29,b30,b31,b32,b33,b34,b35,b36,b37
,b38,b39,b40,b41,b42];
var FUNCTION_TABLE_viiiii = [b44,b45,jsCall_viiiii_0,b46,jsCall_viiiii_1,b47,jsCall_viiiii_2,b48,jsCall_viiiii_3,b49,jsCall_viiiii_4,b50,jsCall_viiiii_5,b51,jsCall_viiiii_6,b52,jsCall_viiiii_7,b53,jsCall_viiiii_8,b54,jsCall_viiiii_9,b55,jsCall_viiiii_10,b56,jsCall_viiiii_11,b57,jsCall_viiiii_12,b58,jsCall_viiiii_13
,b59,jsCall_viiiii_14,b60,jsCall_viiiii_15,b61,jsCall_viiiii_16,b62,jsCall_viiiii_17,b63,jsCall_viiiii_18,b64,jsCall_viiiii_19,b65,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b66,b67,b68,b69,b70,b71,b72,b73,b74,b75,b76,b77,b78,b79,b80
,b81,b82,b83,b84,b85];
var FUNCTION_TABLE_vi = [b87,b88,jsCall_vi_0,b89,jsCall_vi_1,b90,jsCall_vi_2,b91,jsCall_vi_3,b92,jsCall_vi_4,b93,jsCall_vi_5,b94,jsCall_vi_6,b95,jsCall_vi_7,b96,jsCall_vi_8,b97,jsCall_vi_9,b98,jsCall_vi_10,b99,jsCall_vi_11,b100,jsCall_vi_12,b101,jsCall_vi_13
,b102,jsCall_vi_14,b103,jsCall_vi_15,b104,jsCall_vi_16,b105,jsCall_vi_17,b106,jsCall_vi_18,b107,jsCall_vi_19,b108,__ZNSt9bad_allocD2Ev,__ZNSt9bad_allocD0Ev,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv117__class_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,__ZN10__cxxabiv120__si_class_type_infoD0Ev,__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv,b109,b110,b111,b112,b113,b114,b115,b116,b117
,b118,b119,b120,b121,b122];
var FUNCTION_TABLE_ii = [b124,b125,jsCall_ii_0,b126,jsCall_ii_1,b127,jsCall_ii_2,b128,jsCall_ii_3,b129,jsCall_ii_4,b130,jsCall_ii_5,b131,jsCall_ii_6,b132,jsCall_ii_7,b133,jsCall_ii_8,b134,jsCall_ii_9,b135,jsCall_ii_10,b136,jsCall_ii_11,b137,jsCall_ii_12,b138,jsCall_ii_13
,b139,jsCall_ii_14,b140,jsCall_ii_15,b141,jsCall_ii_16,b142,jsCall_ii_17,b143,jsCall_ii_18,b144,jsCall_ii_19,b145,__ZNKSt9bad_alloc4whatEv,b146,b147,b148,b149,b150,b151,b152,b153,b154,b155,b156,b157,b158,b159,b160,b161
,b162,b163,b164,b165,b166];
var FUNCTION_TABLE_v = [b168,b169,jsCall_v_0,b170,jsCall_v_1,b171,jsCall_v_2,b172,jsCall_v_3,b173,jsCall_v_4,b174,jsCall_v_5,b175,jsCall_v_6,b176,jsCall_v_7,b177,jsCall_v_8,b178,jsCall_v_9,b179,jsCall_v_10,b180,jsCall_v_11,b181,jsCall_v_12,b182,jsCall_v_13
,b183,jsCall_v_14,b184,jsCall_v_15,b185,jsCall_v_16,b186,jsCall_v_17,b187,jsCall_v_18,b188,jsCall_v_19,b189,__ZL25default_terminate_handlerv,__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev,b190,b191,b192,b193,b194,b195,b196,b197,b198,b199,b200,b201,b202,b203,b204
,b205,b206,b207,b208,b209];
var FUNCTION_TABLE_viiiiii = [b211,b212,jsCall_viiiiii_0,b213,jsCall_viiiiii_1,b214,jsCall_viiiiii_2,b215,jsCall_viiiiii_3,b216,jsCall_viiiiii_4,b217,jsCall_viiiiii_5,b218,jsCall_viiiiii_6,b219,jsCall_viiiiii_7,b220,jsCall_viiiiii_8,b221,jsCall_viiiiii_9,b222,jsCall_viiiiii_10,b223,jsCall_viiiiii_11,b224,jsCall_viiiiii_12,b225,jsCall_viiiiii_13
,b226,jsCall_viiiiii_14,b227,jsCall_viiiiii_15,b228,jsCall_viiiiii_16,b229,jsCall_viiiiii_17,b230,jsCall_viiiiii_18,b231,jsCall_viiiiii_19,b232,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b233,b234,b235,b236,b237,b238,b239,b240,b241,b242,b243,b244,b245,b246,b247
,b248,b249,b250,b251,b252];
var FUNCTION_TABLE_viiii = [b254,b255,jsCall_viiii_0,b256,jsCall_viiii_1,b257,jsCall_viiii_2,b258,jsCall_viiii_3,b259,jsCall_viiii_4,b260,jsCall_viiii_5,b261,jsCall_viiii_6,b262,jsCall_viiii_7,b263,jsCall_viiii_8,b264,jsCall_viiii_9,b265,jsCall_viiii_10,b266,jsCall_viiii_11,b267,jsCall_viiii_12,b268,jsCall_viiii_13
,b269,jsCall_viiii_14,b270,jsCall_viiii_15,b271,jsCall_viiii_16,b272,jsCall_viiii_17,b273,jsCall_viiii_18,b274,jsCall_viiii_19,b275,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b276,b277,b278,b279,b280,b281,b282,b283,b284,b285,b286,b287,b288,b289,b290
,b291,b292,b293,b294,b295];

  return { _malloc: _malloc, ___cxa_can_catch: ___cxa_can_catch, _free: _free, ___cxa_is_pointer_type: ___cxa_is_pointer_type, _i64Add: _i64Add, _memmove: _memmove, _emscripten_bind_VoidPtr___destroy___0: _emscripten_bind_VoidPtr___destroy___0, _emscripten_bind_CImageUtilHtml5_LoadImageBuffer_3: _emscripten_bind_CImageUtilHtml5_LoadImageBuffer_3, _memset: _memset, ___cxa_demangle: ___cxa_demangle, _emscripten_bind_CImageUtilHtml5_CImageUtilHtml5_0: _emscripten_bind_CImageUtilHtml5_CImageUtilHtml5_0, _memcpy: _memcpy, _strlen: _strlen, _bitshift64Lshr: _bitshift64Lshr, _emscripten_bind_CImageUtilHtml5___destroy___0: _emscripten_bind_CImageUtilHtml5___destroy___0, _i64Subtract: _i64Subtract, _strcpy: _strcpy, _bitshift64Shl: _bitshift64Shl, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, establishStackSpace: establishStackSpace, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_iiii: dynCall_iiii, dynCall_viiiii: dynCall_viiiii, dynCall_vi: dynCall_vi, dynCall_ii: dynCall_ii, dynCall_v: dynCall_v, dynCall_viiiiii: dynCall_viiiiii, dynCall_viiii: dynCall_viiii };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);
var real____cxa_demangle = asm["___cxa_demangle"]; asm["___cxa_demangle"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____cxa_demangle.apply(null, arguments);
};

var real____cxa_can_catch = asm["___cxa_can_catch"]; asm["___cxa_can_catch"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____cxa_can_catch.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__free.apply(null, arguments);
};

var real____cxa_is_pointer_type = asm["___cxa_is_pointer_type"]; asm["___cxa_is_pointer_type"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____cxa_is_pointer_type.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Add.apply(null, arguments);
};

var real__memmove = asm["_memmove"]; asm["_memmove"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__memmove.apply(null, arguments);
};

var real__emscripten_bind_VoidPtr___destroy___0 = asm["_emscripten_bind_VoidPtr___destroy___0"]; asm["_emscripten_bind_VoidPtr___destroy___0"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__emscripten_bind_VoidPtr___destroy___0.apply(null, arguments);
};

var real__emscripten_bind_CImageUtilHtml5_CImageUtilHtml5_0 = asm["_emscripten_bind_CImageUtilHtml5_CImageUtilHtml5_0"]; asm["_emscripten_bind_CImageUtilHtml5_CImageUtilHtml5_0"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__emscripten_bind_CImageUtilHtml5_CImageUtilHtml5_0.apply(null, arguments);
};

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__malloc.apply(null, arguments);
};

var real__emscripten_bind_CImageUtilHtml5_LoadImageBuffer_3 = asm["_emscripten_bind_CImageUtilHtml5_LoadImageBuffer_3"]; asm["_emscripten_bind_CImageUtilHtml5_LoadImageBuffer_3"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__emscripten_bind_CImageUtilHtml5_LoadImageBuffer_3.apply(null, arguments);
};

var real__strlen = asm["_strlen"]; asm["_strlen"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__strlen.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Lshr.apply(null, arguments);
};

var real__emscripten_bind_CImageUtilHtml5___destroy___0 = asm["_emscripten_bind_CImageUtilHtml5___destroy___0"]; asm["_emscripten_bind_CImageUtilHtml5___destroy___0"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__emscripten_bind_CImageUtilHtml5___destroy___0.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Subtract.apply(null, arguments);
};

var real__strcpy = asm["_strcpy"]; asm["_strcpy"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__strcpy.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Shl.apply(null, arguments);
};
var ___cxa_demangle = Module["___cxa_demangle"] = asm["___cxa_demangle"];
var ___cxa_can_catch = Module["___cxa_can_catch"] = asm["___cxa_can_catch"];
var _free = Module["_free"] = asm["_free"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var ___cxa_is_pointer_type = Module["___cxa_is_pointer_type"] = asm["___cxa_is_pointer_type"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _emscripten_bind_VoidPtr___destroy___0 = Module["_emscripten_bind_VoidPtr___destroy___0"] = asm["_emscripten_bind_VoidPtr___destroy___0"];
var _memset = Module["_memset"] = asm["_memset"];
var _emscripten_bind_CImageUtilHtml5_CImageUtilHtml5_0 = Module["_emscripten_bind_CImageUtilHtml5_CImageUtilHtml5_0"] = asm["_emscripten_bind_CImageUtilHtml5_CImageUtilHtml5_0"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _emscripten_bind_CImageUtilHtml5_LoadImageBuffer_3 = Module["_emscripten_bind_CImageUtilHtml5_LoadImageBuffer_3"] = asm["_emscripten_bind_CImageUtilHtml5_LoadImageBuffer_3"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _strlen = Module["_strlen"] = asm["_strlen"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _emscripten_bind_CImageUtilHtml5___destroy___0 = Module["_emscripten_bind_CImageUtilHtml5___destroy___0"] = asm["_emscripten_bind_CImageUtilHtml5___destroy___0"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _strcpy = Module["_strcpy"] = asm["_strcpy"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
;

Runtime.stackAlloc = asm['stackAlloc'];
Runtime.stackSave = asm['stackSave'];
Runtime.stackRestore = asm['stackRestore'];
Runtime.establishStackSpace = asm['establishStackSpace'];

Runtime.setTempRet0 = asm['setTempRet0'];
Runtime.getTempRet0 = asm['getTempRet0'];


// TODO: strip out parts of this we do not need

//======= begin closure i64 code =======

// Copyright 2009 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Defines a Long class for representing a 64-bit two's-complement
 * integer value, which faithfully simulates the behavior of a Java "long". This
 * implementation is derived from LongLib in GWT.
 *
 */

var i64Math = (function() { // Emscripten wrapper
  var goog = { math: {} };


  /**
   * Constructs a 64-bit two's-complement integer, given its low and high 32-bit
   * values as *signed* integers.  See the from* functions below for more
   * convenient ways of constructing Longs.
   *
   * The internal representation of a long is the two given signed, 32-bit values.
   * We use 32-bit pieces because these are the size of integers on which
   * Javascript performs bit-operations.  For operations like addition and
   * multiplication, we split each number into 16-bit pieces, which can easily be
   * multiplied within Javascript's floating-point representation without overflow
   * or change in sign.
   *
   * In the algorithms below, we frequently reduce the negative case to the
   * positive case by negating the input(s) and then post-processing the result.
   * Note that we must ALWAYS check specially whether those values are MIN_VALUE
   * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
   * a positive number, it overflows back into a negative).  Not handling this
   * case would often result in infinite recursion.
   *
   * @param {number} low  The low (signed) 32 bits of the long.
   * @param {number} high  The high (signed) 32 bits of the long.
   * @constructor
   */
  goog.math.Long = function(low, high) {
    /**
     * @type {number}
     * @private
     */
    this.low_ = low | 0;  // force into 32 signed bits.

    /**
     * @type {number}
     * @private
     */
    this.high_ = high | 0;  // force into 32 signed bits.
  };


  // NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the
  // from* methods on which they depend.


  /**
   * A cache of the Long representations of small integer values.
   * @type {!Object}
   * @private
   */
  goog.math.Long.IntCache_ = {};


  /**
   * Returns a Long representing the given (32-bit) integer value.
   * @param {number} value The 32-bit integer in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromInt = function(value) {
    if (-128 <= value && value < 128) {
      var cachedObj = goog.math.Long.IntCache_[value];
      if (cachedObj) {
        return cachedObj;
      }
    }

    var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);
    if (-128 <= value && value < 128) {
      goog.math.Long.IntCache_[value] = obj;
    }
    return obj;
  };


  /**
   * Returns a Long representing the given value, provided that it is a finite
   * number.  Otherwise, zero is returned.
   * @param {number} value The number in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromNumber = function(value) {
    if (isNaN(value) || !isFinite(value)) {
      return goog.math.Long.ZERO;
    } else if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MIN_VALUE;
    } else if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MAX_VALUE;
    } else if (value < 0) {
      return goog.math.Long.fromNumber(-value).negate();
    } else {
      return new goog.math.Long(
          (value % goog.math.Long.TWO_PWR_32_DBL_) | 0,
          (value / goog.math.Long.TWO_PWR_32_DBL_) | 0);
    }
  };


  /**
   * Returns a Long representing the 64-bit integer that comes by concatenating
   * the given high and low bits.  Each is assumed to use 32 bits.
   * @param {number} lowBits The low 32-bits.
   * @param {number} highBits The high 32-bits.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromBits = function(lowBits, highBits) {
    return new goog.math.Long(lowBits, highBits);
  };


  /**
   * Returns a Long representation of the given string, written using the given
   * radix.
   * @param {string} str The textual representation of the Long.
   * @param {number=} opt_radix The radix in which the text is written.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromString = function(str, opt_radix) {
    if (str.length == 0) {
      throw Error('number format error: empty string');
    }

    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (str.charAt(0) == '-') {
      return goog.math.Long.fromString(str.substring(1), radix).negate();
    } else if (str.indexOf('-') >= 0) {
      throw Error('number format error: interior "-" character: ' + str);
    }

    // Do several (8) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));

    var result = goog.math.Long.ZERO;
    for (var i = 0; i < str.length; i += 8) {
      var size = Math.min(8, str.length - i);
      var value = parseInt(str.substring(i, i + size), radix);
      if (size < 8) {
        var power = goog.math.Long.fromNumber(Math.pow(radix, size));
        result = result.multiply(power).add(goog.math.Long.fromNumber(value));
      } else {
        result = result.multiply(radixToPower);
        result = result.add(goog.math.Long.fromNumber(value));
      }
    }
    return result;
  };


  // NOTE: the compiler should inline these constant values below and then remove
  // these variables, so there should be no runtime penalty for these.


  /**
   * Number used repeated below in calculations.  This must appear before the
   * first call to any from* function below.
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_24_DBL_ = 1 << 24;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_32_DBL_ =
      goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_31_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ / 2;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_48_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_64_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_63_DBL_ =
      goog.math.Long.TWO_PWR_64_DBL_ / 2;


  /** @type {!goog.math.Long} */
  goog.math.Long.ZERO = goog.math.Long.fromInt(0);


  /** @type {!goog.math.Long} */
  goog.math.Long.ONE = goog.math.Long.fromInt(1);


  /** @type {!goog.math.Long} */
  goog.math.Long.NEG_ONE = goog.math.Long.fromInt(-1);


  /** @type {!goog.math.Long} */
  goog.math.Long.MAX_VALUE =
      goog.math.Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);


  /** @type {!goog.math.Long} */
  goog.math.Long.MIN_VALUE = goog.math.Long.fromBits(0, 0x80000000 | 0);


  /**
   * @type {!goog.math.Long}
   * @private
   */
  goog.math.Long.TWO_PWR_24_ = goog.math.Long.fromInt(1 << 24);


  /** @return {number} The value, assuming it is a 32-bit integer. */
  goog.math.Long.prototype.toInt = function() {
    return this.low_;
  };


  /** @return {number} The closest floating-point representation to this value. */
  goog.math.Long.prototype.toNumber = function() {
    return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ +
           this.getLowBitsUnsigned();
  };


  /**
   * @param {number=} opt_radix The radix in which the text should be written.
   * @return {string} The textual representation of this value.
   */
  goog.math.Long.prototype.toString = function(opt_radix) {
    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (this.isZero()) {
      return '0';
    }

    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        // We need to change the Long value before it can be negated, so we remove
        // the bottom-most digit in this base and then recurse to do the rest.
        var radixLong = goog.math.Long.fromNumber(radix);
        var div = this.div(radixLong);
        var rem = div.multiply(radixLong).subtract(this);
        return div.toString(radix) + rem.toInt().toString(radix);
      } else {
        return '-' + this.negate().toString(radix);
      }
    }

    // Do several (6) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));

    var rem = this;
    var result = '';
    while (true) {
      var remDiv = rem.div(radixToPower);
      var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
      var digits = intval.toString(radix);

      rem = remDiv;
      if (rem.isZero()) {
        return digits + result;
      } else {
        while (digits.length < 6) {
          digits = '0' + digits;
        }
        result = '' + digits + result;
      }
    }
  };


  /** @return {number} The high 32-bits as a signed value. */
  goog.math.Long.prototype.getHighBits = function() {
    return this.high_;
  };


  /** @return {number} The low 32-bits as a signed value. */
  goog.math.Long.prototype.getLowBits = function() {
    return this.low_;
  };


  /** @return {number} The low 32-bits as an unsigned value. */
  goog.math.Long.prototype.getLowBitsUnsigned = function() {
    return (this.low_ >= 0) ?
        this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
  };


  /**
   * @return {number} Returns the number of bits needed to represent the absolute
   *     value of this Long.
   */
  goog.math.Long.prototype.getNumBitsAbs = function() {
    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        return 64;
      } else {
        return this.negate().getNumBitsAbs();
      }
    } else {
      var val = this.high_ != 0 ? this.high_ : this.low_;
      for (var bit = 31; bit > 0; bit--) {
        if ((val & (1 << bit)) != 0) {
          break;
        }
      }
      return this.high_ != 0 ? bit + 33 : bit + 1;
    }
  };


  /** @return {boolean} Whether this value is zero. */
  goog.math.Long.prototype.isZero = function() {
    return this.high_ == 0 && this.low_ == 0;
  };


  /** @return {boolean} Whether this value is negative. */
  goog.math.Long.prototype.isNegative = function() {
    return this.high_ < 0;
  };


  /** @return {boolean} Whether this value is odd. */
  goog.math.Long.prototype.isOdd = function() {
    return (this.low_ & 1) == 1;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long equals the other.
   */
  goog.math.Long.prototype.equals = function(other) {
    return (this.high_ == other.high_) && (this.low_ == other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long does not equal the other.
   */
  goog.math.Long.prototype.notEquals = function(other) {
    return (this.high_ != other.high_) || (this.low_ != other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than the other.
   */
  goog.math.Long.prototype.lessThan = function(other) {
    return this.compare(other) < 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than or equal to the other.
   */
  goog.math.Long.prototype.lessThanOrEqual = function(other) {
    return this.compare(other) <= 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than the other.
   */
  goog.math.Long.prototype.greaterThan = function(other) {
    return this.compare(other) > 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than or equal to the other.
   */
  goog.math.Long.prototype.greaterThanOrEqual = function(other) {
    return this.compare(other) >= 0;
  };


  /**
   * Compares this Long with the given one.
   * @param {goog.math.Long} other Long to compare against.
   * @return {number} 0 if they are the same, 1 if the this is greater, and -1
   *     if the given one is greater.
   */
  goog.math.Long.prototype.compare = function(other) {
    if (this.equals(other)) {
      return 0;
    }

    var thisNeg = this.isNegative();
    var otherNeg = other.isNegative();
    if (thisNeg && !otherNeg) {
      return -1;
    }
    if (!thisNeg && otherNeg) {
      return 1;
    }

    // at this point, the signs are the same, so subtraction will not overflow
    if (this.subtract(other).isNegative()) {
      return -1;
    } else {
      return 1;
    }
  };


  /** @return {!goog.math.Long} The negation of this value. */
  goog.math.Long.prototype.negate = function() {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.MIN_VALUE;
    } else {
      return this.not().add(goog.math.Long.ONE);
    }
  };


  /**
   * Returns the sum of this and the given Long.
   * @param {goog.math.Long} other Long to add to this one.
   * @return {!goog.math.Long} The sum of this and the given Long.
   */
  goog.math.Long.prototype.add = function(other) {
    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 + b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns the difference of this and the given Long.
   * @param {goog.math.Long} other Long to subtract from this.
   * @return {!goog.math.Long} The difference of this and the given Long.
   */
  goog.math.Long.prototype.subtract = function(other) {
    return this.add(other.negate());
  };


  /**
   * Returns the product of this and the given long.
   * @param {goog.math.Long} other Long to multiply with this.
   * @return {!goog.math.Long} The product of this and the other.
   */
  goog.math.Long.prototype.multiply = function(other) {
    if (this.isZero()) {
      return goog.math.Long.ZERO;
    } else if (other.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return other.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return this.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().multiply(other.negate());
      } else {
        return this.negate().multiply(other).negate();
      }
    } else if (other.isNegative()) {
      return this.multiply(other.negate()).negate();
    }

    // If both longs are small, use float multiplication
    if (this.lessThan(goog.math.Long.TWO_PWR_24_) &&
        other.lessThan(goog.math.Long.TWO_PWR_24_)) {
      return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
    }

    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
    // We can skip products that would overflow.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns this Long divided by the given one.
   * @param {goog.math.Long} other Long by which to divide.
   * @return {!goog.math.Long} This Long divided by the given one.
   */
  goog.math.Long.prototype.div = function(other) {
    if (other.isZero()) {
      throw Error('division by zero');
    } else if (this.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      if (other.equals(goog.math.Long.ONE) ||
          other.equals(goog.math.Long.NEG_ONE)) {
        return goog.math.Long.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
      } else if (other.equals(goog.math.Long.MIN_VALUE)) {
        return goog.math.Long.ONE;
      } else {
        // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
        var halfThis = this.shiftRight(1);
        var approx = halfThis.div(other).shiftLeft(1);
        if (approx.equals(goog.math.Long.ZERO)) {
          return other.isNegative() ? goog.math.Long.ONE : goog.math.Long.NEG_ONE;
        } else {
          var rem = this.subtract(other.multiply(approx));
          var result = approx.add(rem.div(other));
          return result;
        }
      }
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().div(other.negate());
      } else {
        return this.negate().div(other).negate();
      }
    } else if (other.isNegative()) {
      return this.div(other.negate()).negate();
    }

    // Repeat the following until the remainder is less than other:  find a
    // floating-point that approximates remainder / other *from below*, add this
    // into the result, and subtract it from the remainder.  It is critical that
    // the approximate value is less than or equal to the real value so that the
    // remainder never becomes negative.
    var res = goog.math.Long.ZERO;
    var rem = this;
    while (rem.greaterThanOrEqual(other)) {
      // Approximate the result of division. This may be a little greater or
      // smaller than the actual value.
      var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));

      // We will tweak the approximate result by changing it in the 48-th digit or
      // the smallest non-fractional digit, whichever is larger.
      var log2 = Math.ceil(Math.log(approx) / Math.LN2);
      var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);

      // Decrease the approximation until it is smaller than the remainder.  Note
      // that if it is too large, the product overflows and is negative.
      var approxRes = goog.math.Long.fromNumber(approx);
      var approxRem = approxRes.multiply(other);
      while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
        approx -= delta;
        approxRes = goog.math.Long.fromNumber(approx);
        approxRem = approxRes.multiply(other);
      }

      // We know the answer can't be zero... and actually, zero would cause
      // infinite recursion since we would make no progress.
      if (approxRes.isZero()) {
        approxRes = goog.math.Long.ONE;
      }

      res = res.add(approxRes);
      rem = rem.subtract(approxRem);
    }
    return res;
  };


  /**
   * Returns this Long modulo the given one.
   * @param {goog.math.Long} other Long by which to mod.
   * @return {!goog.math.Long} This Long modulo the given one.
   */
  goog.math.Long.prototype.modulo = function(other) {
    return this.subtract(this.div(other).multiply(other));
  };


  /** @return {!goog.math.Long} The bitwise-NOT of this value. */
  goog.math.Long.prototype.not = function() {
    return goog.math.Long.fromBits(~this.low_, ~this.high_);
  };


  /**
   * Returns the bitwise-AND of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to AND.
   * @return {!goog.math.Long} The bitwise-AND of this and the other.
   */
  goog.math.Long.prototype.and = function(other) {
    return goog.math.Long.fromBits(this.low_ & other.low_,
                                   this.high_ & other.high_);
  };


  /**
   * Returns the bitwise-OR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to OR.
   * @return {!goog.math.Long} The bitwise-OR of this and the other.
   */
  goog.math.Long.prototype.or = function(other) {
    return goog.math.Long.fromBits(this.low_ | other.low_,
                                   this.high_ | other.high_);
  };


  /**
   * Returns the bitwise-XOR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to XOR.
   * @return {!goog.math.Long} The bitwise-XOR of this and the other.
   */
  goog.math.Long.prototype.xor = function(other) {
    return goog.math.Long.fromBits(this.low_ ^ other.low_,
                                   this.high_ ^ other.high_);
  };


  /**
   * Returns this Long with bits shifted to the left by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the left by the given amount.
   */
  goog.math.Long.prototype.shiftLeft = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var low = this.low_;
      if (numBits < 32) {
        var high = this.high_;
        return goog.math.Long.fromBits(
            low << numBits,
            (high << numBits) | (low >>> (32 - numBits)));
      } else {
        return goog.math.Long.fromBits(0, low << (numBits - 32));
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount.
   */
  goog.math.Long.prototype.shiftRight = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >> numBits);
      } else {
        return goog.math.Long.fromBits(
            high >> (numBits - 32),
            high >= 0 ? 0 : -1);
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount, with
   * the new top bits matching the current sign bit.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount, with
   *     zeros placed into the new leading bits.
   */
  goog.math.Long.prototype.shiftRightUnsigned = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >>> numBits);
      } else if (numBits == 32) {
        return goog.math.Long.fromBits(high, 0);
      } else {
        return goog.math.Long.fromBits(high >>> (numBits - 32), 0);
      }
    }
  };

  //======= begin jsbn =======

  var navigator = { appName: 'Modern Browser' }; // polyfill a little

  // Copyright (c) 2005  Tom Wu
  // All Rights Reserved.
  // http://www-cs-students.stanford.edu/~tjw/jsbn/

  /*
   * Copyright (c) 2003-2005  Tom Wu
   * All Rights Reserved.
   *
   * Permission is hereby granted, free of charge, to any person obtaining
   * a copy of this software and associated documentation files (the
   * "Software"), to deal in the Software without restriction, including
   * without limitation the rights to use, copy, modify, merge, publish,
   * distribute, sublicense, and/or sell copies of the Software, and to
   * permit persons to whom the Software is furnished to do so, subject to
   * the following conditions:
   *
   * The above copyright notice and this permission notice shall be
   * included in all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND, 
   * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY 
   * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  
   *
   * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
   * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
   * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
   * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
   * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
   *
   * In addition, the following condition applies:
   *
   * All redistributions must retain an intact copy of this copyright notice
   * and disclaimer.
   */

  // Basic JavaScript BN library - subset useful for RSA encryption.

  // Bits per digit
  var dbits;

  // JavaScript engine analysis
  var canary = 0xdeadbeefcafe;
  var j_lm = ((canary&0xffffff)==0xefcafe);

  // (public) Constructor
  function BigInteger(a,b,c) {
    if(a != null)
      if("number" == typeof a) this.fromNumber(a,b,c);
      else if(b == null && "string" != typeof a) this.fromString(a,256);
      else this.fromString(a,b);
  }

  // return new, unset BigInteger
  function nbi() { return new BigInteger(null); }

  // am: Compute w_j += (x*this_i), propagate carries,
  // c is initial carry, returns final carry.
  // c < 3*dvalue, x < 2*dvalue, this_i < dvalue
  // We need to select the fastest one that works in this environment.

  // am1: use a single mult and divide to get the high bits,
  // max digit bits should be 26 because
  // max internal value = 2*dvalue^2-2*dvalue (< 2^53)
  function am1(i,x,w,j,c,n) {
    while(--n >= 0) {
      var v = x*this[i++]+w[j]+c;
      c = Math.floor(v/0x4000000);
      w[j++] = v&0x3ffffff;
    }
    return c;
  }
  // am2 avoids a big mult-and-extract completely.
  // Max digit bits should be <= 30 because we do bitwise ops
  // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
  function am2(i,x,w,j,c,n) {
    var xl = x&0x7fff, xh = x>>15;
    while(--n >= 0) {
      var l = this[i]&0x7fff;
      var h = this[i++]>>15;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);
      c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);
      w[j++] = l&0x3fffffff;
    }
    return c;
  }
  // Alternately, set max digit bits to 28 since some
  // browsers slow down when dealing with 32-bit numbers.
  function am3(i,x,w,j,c,n) {
    var xl = x&0x3fff, xh = x>>14;
    while(--n >= 0) {
      var l = this[i]&0x3fff;
      var h = this[i++]>>14;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x3fff)<<14)+w[j]+c;
      c = (l>>28)+(m>>14)+xh*h;
      w[j++] = l&0xfffffff;
    }
    return c;
  }
  if(j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
    BigInteger.prototype.am = am2;
    dbits = 30;
  }
  else if(j_lm && (navigator.appName != "Netscape")) {
    BigInteger.prototype.am = am1;
    dbits = 26;
  }
  else { // Mozilla/Netscape seems to prefer am3
    BigInteger.prototype.am = am3;
    dbits = 28;
  }

  BigInteger.prototype.DB = dbits;
  BigInteger.prototype.DM = ((1<<dbits)-1);
  BigInteger.prototype.DV = (1<<dbits);

  var BI_FP = 52;
  BigInteger.prototype.FV = Math.pow(2,BI_FP);
  BigInteger.prototype.F1 = BI_FP-dbits;
  BigInteger.prototype.F2 = 2*dbits-BI_FP;

  // Digit conversions
  var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
  var BI_RC = new Array();
  var rr,vv;
  rr = "0".charCodeAt(0);
  for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
  rr = "a".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
  rr = "A".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;

  function int2char(n) { return BI_RM.charAt(n); }
  function intAt(s,i) {
    var c = BI_RC[s.charCodeAt(i)];
    return (c==null)?-1:c;
  }

  // (protected) copy this to r
  function bnpCopyTo(r) {
    for(var i = this.t-1; i >= 0; --i) r[i] = this[i];
    r.t = this.t;
    r.s = this.s;
  }

  // (protected) set from integer value x, -DV <= x < DV
  function bnpFromInt(x) {
    this.t = 1;
    this.s = (x<0)?-1:0;
    if(x > 0) this[0] = x;
    else if(x < -1) this[0] = x+DV;
    else this.t = 0;
  }

  // return bigint initialized to value
  function nbv(i) { var r = nbi(); r.fromInt(i); return r; }

  // (protected) set from string and radix
  function bnpFromString(s,b) {
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 256) k = 8; // byte array
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else { this.fromRadix(s,b); return; }
    this.t = 0;
    this.s = 0;
    var i = s.length, mi = false, sh = 0;
    while(--i >= 0) {
      var x = (k==8)?s[i]&0xff:intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-") mi = true;
        continue;
      }
      mi = false;
      if(sh == 0)
        this[this.t++] = x;
      else if(sh+k > this.DB) {
        this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;
        this[this.t++] = (x>>(this.DB-sh));
      }
      else
        this[this.t-1] |= x<<sh;
      sh += k;
      if(sh >= this.DB) sh -= this.DB;
    }
    if(k == 8 && (s[0]&0x80) != 0) {
      this.s = -1;
      if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;
    }
    this.clamp();
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) clamp off excess high words
  function bnpClamp() {
    var c = this.s&this.DM;
    while(this.t > 0 && this[this.t-1] == c) --this.t;
  }

  // (public) return string representation in given radix
  function bnToString(b) {
    if(this.s < 0) return "-"+this.negate().toString(b);
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else return this.toRadix(b);
    var km = (1<<k)-1, d, m = false, r = "", i = this.t;
    var p = this.DB-(i*this.DB)%k;
    if(i-- > 0) {
      if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }
      while(i >= 0) {
        if(p < k) {
          d = (this[i]&((1<<p)-1))<<(k-p);
          d |= this[--i]>>(p+=this.DB-k);
        }
        else {
          d = (this[i]>>(p-=k))&km;
          if(p <= 0) { p += this.DB; --i; }
        }
        if(d > 0) m = true;
        if(m) r += int2char(d);
      }
    }
    return m?r:"0";
  }

  // (public) -this
  function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }

  // (public) |this|
  function bnAbs() { return (this.s<0)?this.negate():this; }

  // (public) return + if this > a, - if this < a, 0 if equal
  function bnCompareTo(a) {
    var r = this.s-a.s;
    if(r != 0) return r;
    var i = this.t;
    r = i-a.t;
    if(r != 0) return (this.s<0)?-r:r;
    while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;
    return 0;
  }

  // returns bit length of the integer x
  function nbits(x) {
    var r = 1, t;
    if((t=x>>>16) != 0) { x = t; r += 16; }
    if((t=x>>8) != 0) { x = t; r += 8; }
    if((t=x>>4) != 0) { x = t; r += 4; }
    if((t=x>>2) != 0) { x = t; r += 2; }
    if((t=x>>1) != 0) { x = t; r += 1; }
    return r;
  }

  // (public) return the number of bits in "this"
  function bnBitLength() {
    if(this.t <= 0) return 0;
    return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));
  }

  // (protected) r = this << n*DB
  function bnpDLShiftTo(n,r) {
    var i;
    for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];
    for(i = n-1; i >= 0; --i) r[i] = 0;
    r.t = this.t+n;
    r.s = this.s;
  }

  // (protected) r = this >> n*DB
  function bnpDRShiftTo(n,r) {
    for(var i = n; i < this.t; ++i) r[i-n] = this[i];
    r.t = Math.max(this.t-n,0);
    r.s = this.s;
  }

  // (protected) r = this << n
  function bnpLShiftTo(n,r) {
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<cbs)-1;
    var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;
    for(i = this.t-1; i >= 0; --i) {
      r[i+ds+1] = (this[i]>>cbs)|c;
      c = (this[i]&bm)<<bs;
    }
    for(i = ds-1; i >= 0; --i) r[i] = 0;
    r[ds] = c;
    r.t = this.t+ds+1;
    r.s = this.s;
    r.clamp();
  }

  // (protected) r = this >> n
  function bnpRShiftTo(n,r) {
    r.s = this.s;
    var ds = Math.floor(n/this.DB);
    if(ds >= this.t) { r.t = 0; return; }
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<bs)-1;
    r[0] = this[ds]>>bs;
    for(var i = ds+1; i < this.t; ++i) {
      r[i-ds-1] |= (this[i]&bm)<<cbs;
      r[i-ds] = this[i]>>bs;
    }
    if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;
    r.t = this.t-ds;
    r.clamp();
  }

  // (protected) r = this - a
  function bnpSubTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]-a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c -= a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c -= a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c -= a.s;
    }
    r.s = (c<0)?-1:0;
    if(c < -1) r[i++] = this.DV+c;
    else if(c > 0) r[i++] = c;
    r.t = i;
    r.clamp();
  }

  // (protected) r = this * a, r != this,a (HAC 14.12)
  // "this" should be the larger one if appropriate.
  function bnpMultiplyTo(a,r) {
    var x = this.abs(), y = a.abs();
    var i = x.t;
    r.t = i+y.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);
    r.s = 0;
    r.clamp();
    if(this.s != a.s) BigInteger.ZERO.subTo(r,r);
  }

  // (protected) r = this^2, r != this (HAC 14.16)
  function bnpSquareTo(r) {
    var x = this.abs();
    var i = r.t = 2*x.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < x.t-1; ++i) {
      var c = x.am(i,x[i],r,2*i,0,1);
      if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {
        r[i+x.t] -= x.DV;
        r[i+x.t+1] = 1;
      }
    }
    if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);
    r.s = 0;
    r.clamp();
  }

  // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
  // r != q, this != m.  q or r may be null.
  function bnpDivRemTo(m,q,r) {
    var pm = m.abs();
    if(pm.t <= 0) return;
    var pt = this.abs();
    if(pt.t < pm.t) {
      if(q != null) q.fromInt(0);
      if(r != null) this.copyTo(r);
      return;
    }
    if(r == null) r = nbi();
    var y = nbi(), ts = this.s, ms = m.s;
    var nsh = this.DB-nbits(pm[pm.t-1]);	// normalize modulus
    if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }
    else { pm.copyTo(y); pt.copyTo(r); }
    var ys = y.t;
    var y0 = y[ys-1];
    if(y0 == 0) return;
    var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);
    var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;
    var i = r.t, j = i-ys, t = (q==null)?nbi():q;
    y.dlShiftTo(j,t);
    if(r.compareTo(t) >= 0) {
      r[r.t++] = 1;
      r.subTo(t,r);
    }
    BigInteger.ONE.dlShiftTo(ys,t);
    t.subTo(y,y);	// "negative" y so we can replace sub with am later
    while(y.t < ys) y[y.t++] = 0;
    while(--j >= 0) {
      // Estimate quotient digit
      var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);
      if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {	// Try it out
        y.dlShiftTo(j,t);
        r.subTo(t,r);
        while(r[i] < --qd) r.subTo(t,r);
      }
    }
    if(q != null) {
      r.drShiftTo(ys,q);
      if(ts != ms) BigInteger.ZERO.subTo(q,q);
    }
    r.t = ys;
    r.clamp();
    if(nsh > 0) r.rShiftTo(nsh,r);	// Denormalize remainder
    if(ts < 0) BigInteger.ZERO.subTo(r,r);
  }

  // (public) this mod a
  function bnMod(a) {
    var r = nbi();
    this.abs().divRemTo(a,null,r);
    if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);
    return r;
  }

  // Modular reduction using "classic" algorithm
  function Classic(m) { this.m = m; }
  function cConvert(x) {
    if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
    else return x;
  }
  function cRevert(x) { return x; }
  function cReduce(x) { x.divRemTo(this.m,null,x); }
  function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
  function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  Classic.prototype.convert = cConvert;
  Classic.prototype.revert = cRevert;
  Classic.prototype.reduce = cReduce;
  Classic.prototype.mulTo = cMulTo;
  Classic.prototype.sqrTo = cSqrTo;

  // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
  // justification:
  //         xy == 1 (mod m)
  //         xy =  1+km
  //   xy(2-xy) = (1+km)(1-km)
  // x[y(2-xy)] = 1-k^2m^2
  // x[y(2-xy)] == 1 (mod m^2)
  // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
  // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
  // JS multiply "overflows" differently from C/C++, so care is needed here.
  function bnpInvDigit() {
    if(this.t < 1) return 0;
    var x = this[0];
    if((x&1) == 0) return 0;
    var y = x&3;		// y == 1/x mod 2^2
    y = (y*(2-(x&0xf)*y))&0xf;	// y == 1/x mod 2^4
    y = (y*(2-(x&0xff)*y))&0xff;	// y == 1/x mod 2^8
    y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;	// y == 1/x mod 2^16
    // last step - calculate inverse mod DV directly;
    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
    y = (y*(2-x*y%this.DV))%this.DV;		// y == 1/x mod 2^dbits
    // we really want the negative inverse, and -DV < y < DV
    return (y>0)?this.DV-y:-y;
  }

  // Montgomery reduction
  function Montgomery(m) {
    this.m = m;
    this.mp = m.invDigit();
    this.mpl = this.mp&0x7fff;
    this.mph = this.mp>>15;
    this.um = (1<<(m.DB-15))-1;
    this.mt2 = 2*m.t;
  }

  // xR mod m
  function montConvert(x) {
    var r = nbi();
    x.abs().dlShiftTo(this.m.t,r);
    r.divRemTo(this.m,null,r);
    if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);
    return r;
  }

  // x/R mod m
  function montRevert(x) {
    var r = nbi();
    x.copyTo(r);
    this.reduce(r);
    return r;
  }

  // x = x/R mod m (HAC 14.32)
  function montReduce(x) {
    while(x.t <= this.mt2)	// pad x so am has enough room later
      x[x.t++] = 0;
    for(var i = 0; i < this.m.t; ++i) {
      // faster way of calculating u0 = x[i]*mp mod DV
      var j = x[i]&0x7fff;
      var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;
      // use am to combine the multiply-shift-add into one call
      j = i+this.m.t;
      x[j] += this.m.am(0,u0,x,i,0,this.m.t);
      // propagate carry
      while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }
    }
    x.clamp();
    x.drShiftTo(this.m.t,x);
    if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
  }

  // r = "x^2/R mod m"; x != r
  function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  // r = "xy/R mod m"; x,y != r
  function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }

  Montgomery.prototype.convert = montConvert;
  Montgomery.prototype.revert = montRevert;
  Montgomery.prototype.reduce = montReduce;
  Montgomery.prototype.mulTo = montMulTo;
  Montgomery.prototype.sqrTo = montSqrTo;

  // (protected) true iff this is even
  function bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }

  // (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
  function bnpExp(e,z) {
    if(e > 0xffffffff || e < 1) return BigInteger.ONE;
    var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;
    g.copyTo(r);
    while(--i >= 0) {
      z.sqrTo(r,r2);
      if((e&(1<<i)) > 0) z.mulTo(r2,g,r);
      else { var t = r; r = r2; r2 = t; }
    }
    return z.revert(r);
  }

  // (public) this^e % m, 0 <= e < 2^32
  function bnModPowInt(e,m) {
    var z;
    if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
    return this.exp(e,z);
  }

  // protected
  BigInteger.prototype.copyTo = bnpCopyTo;
  BigInteger.prototype.fromInt = bnpFromInt;
  BigInteger.prototype.fromString = bnpFromString;
  BigInteger.prototype.clamp = bnpClamp;
  BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
  BigInteger.prototype.drShiftTo = bnpDRShiftTo;
  BigInteger.prototype.lShiftTo = bnpLShiftTo;
  BigInteger.prototype.rShiftTo = bnpRShiftTo;
  BigInteger.prototype.subTo = bnpSubTo;
  BigInteger.prototype.multiplyTo = bnpMultiplyTo;
  BigInteger.prototype.squareTo = bnpSquareTo;
  BigInteger.prototype.divRemTo = bnpDivRemTo;
  BigInteger.prototype.invDigit = bnpInvDigit;
  BigInteger.prototype.isEven = bnpIsEven;
  BigInteger.prototype.exp = bnpExp;

  // public
  BigInteger.prototype.toString = bnToString;
  BigInteger.prototype.negate = bnNegate;
  BigInteger.prototype.abs = bnAbs;
  BigInteger.prototype.compareTo = bnCompareTo;
  BigInteger.prototype.bitLength = bnBitLength;
  BigInteger.prototype.mod = bnMod;
  BigInteger.prototype.modPowInt = bnModPowInt;

  // "constants"
  BigInteger.ZERO = nbv(0);
  BigInteger.ONE = nbv(1);

  // jsbn2 stuff

  // (protected) convert from radix string
  function bnpFromRadix(s,b) {
    this.fromInt(0);
    if(b == null) b = 10;
    var cs = this.chunkSize(b);
    var d = Math.pow(b,cs), mi = false, j = 0, w = 0;
    for(var i = 0; i < s.length; ++i) {
      var x = intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-" && this.signum() == 0) mi = true;
        continue;
      }
      w = b*w+x;
      if(++j >= cs) {
        this.dMultiply(d);
        this.dAddOffset(w,0);
        j = 0;
        w = 0;
      }
    }
    if(j > 0) {
      this.dMultiply(Math.pow(b,j));
      this.dAddOffset(w,0);
    }
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) return x s.t. r^x < DV
  function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }

  // (public) 0 if this == 0, 1 if this > 0
  function bnSigNum() {
    if(this.s < 0) return -1;
    else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;
    else return 1;
  }

  // (protected) this *= n, this >= 0, 1 < n < DV
  function bnpDMultiply(n) {
    this[this.t] = this.am(0,n-1,this,0,0,this.t);
    ++this.t;
    this.clamp();
  }

  // (protected) this += n << w words, this >= 0
  function bnpDAddOffset(n,w) {
    if(n == 0) return;
    while(this.t <= w) this[this.t++] = 0;
    this[w] += n;
    while(this[w] >= this.DV) {
      this[w] -= this.DV;
      if(++w >= this.t) this[this.t++] = 0;
      ++this[w];
    }
  }

  // (protected) convert to radix string
  function bnpToRadix(b) {
    if(b == null) b = 10;
    if(this.signum() == 0 || b < 2 || b > 36) return "0";
    var cs = this.chunkSize(b);
    var a = Math.pow(b,cs);
    var d = nbv(a), y = nbi(), z = nbi(), r = "";
    this.divRemTo(d,y,z);
    while(y.signum() > 0) {
      r = (a+z.intValue()).toString(b).substr(1) + r;
      y.divRemTo(d,y,z);
    }
    return z.intValue().toString(b) + r;
  }

  // (public) return value as integer
  function bnIntValue() {
    if(this.s < 0) {
      if(this.t == 1) return this[0]-this.DV;
      else if(this.t == 0) return -1;
    }
    else if(this.t == 1) return this[0];
    else if(this.t == 0) return 0;
    // assumes 16 < DB < 32
    return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];
  }

  // (protected) r = this + a
  function bnpAddTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]+a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c += a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c += a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += a.s;
    }
    r.s = (c<0)?-1:0;
    if(c > 0) r[i++] = c;
    else if(c < -1) r[i++] = this.DV+c;
    r.t = i;
    r.clamp();
  }

  BigInteger.prototype.fromRadix = bnpFromRadix;
  BigInteger.prototype.chunkSize = bnpChunkSize;
  BigInteger.prototype.signum = bnSigNum;
  BigInteger.prototype.dMultiply = bnpDMultiply;
  BigInteger.prototype.dAddOffset = bnpDAddOffset;
  BigInteger.prototype.toRadix = bnpToRadix;
  BigInteger.prototype.intValue = bnIntValue;
  BigInteger.prototype.addTo = bnpAddTo;

  //======= end jsbn =======

  // Emscripten wrapper
  var Wrapper = {
    abs: function(l, h) {
      var x = new goog.math.Long(l, h);
      var ret;
      if (x.isNegative()) {
        ret = x.negate();
      } else {
        ret = x;
      }
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
    },
    ensureTemps: function() {
      if (Wrapper.ensuredTemps) return;
      Wrapper.ensuredTemps = true;
      Wrapper.two32 = new BigInteger();
      Wrapper.two32.fromString('4294967296', 10);
      Wrapper.two64 = new BigInteger();
      Wrapper.two64.fromString('18446744073709551616', 10);
      Wrapper.temp1 = new BigInteger();
      Wrapper.temp2 = new BigInteger();
    },
    lh2bignum: function(l, h) {
      var a = new BigInteger();
      a.fromString(h.toString(), 10);
      var b = new BigInteger();
      a.multiplyTo(Wrapper.two32, b);
      var c = new BigInteger();
      c.fromString(l.toString(), 10);
      var d = new BigInteger();
      c.addTo(b, d);
      return d;
    },
    stringify: function(l, h, unsigned) {
      var ret = new goog.math.Long(l, h).toString();
      if (unsigned && ret[0] == '-') {
        // unsign slowly using jsbn bignums
        Wrapper.ensureTemps();
        var bignum = new BigInteger();
        bignum.fromString(ret, 10);
        ret = new BigInteger();
        Wrapper.two64.addTo(bignum, ret);
        ret = ret.toString(10);
      }
      return ret;
    },
    fromString: function(str, base, min, max, unsigned) {
      Wrapper.ensureTemps();
      var bignum = new BigInteger();
      bignum.fromString(str, base);
      var bigmin = new BigInteger();
      bigmin.fromString(min, 10);
      var bigmax = new BigInteger();
      bigmax.fromString(max, 10);
      if (unsigned && bignum.compareTo(BigInteger.ZERO) < 0) {
        var temp = new BigInteger();
        bignum.addTo(Wrapper.two64, temp);
        bignum = temp;
      }
      var error = false;
      if (bignum.compareTo(bigmin) < 0) {
        bignum = bigmin;
        error = true;
      } else if (bignum.compareTo(bigmax) > 0) {
        bignum = bigmax;
        error = true;
      }
      var ret = goog.math.Long.fromString(bignum.toString()); // min-max checks should have clamped this to a range goog.math.Long can handle well
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
      if (error) throw 'range error';
    }
  };
  return Wrapper;
})();

//======= end closure i64 code =======



// === Auto-generated postamble setup entry stuff ===


function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);

  initialStackTop = STACKTOP;

  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return; 

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status, implicit) {
  if (implicit && Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') implicitly called by end of main(), but noExitRuntime, so not exiting the runtime (you can use emscripten_force_exit, if you want to force a true shutdown)');
    return;
  }

  if (Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') called, but noExitRuntime, so halting execution but not exiting the runtime or preventing further async execution (you can use emscripten_force_exit, if you want to force a true shutdown)');
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    // Work around a node.js bug where stdout buffer is not flushed at process exit:
    // Instead of process.exit() directly, wait for stdout flush event.
    // See https://github.com/joyent/node/issues/1669 and https://github.com/kripken/emscripten/issues/2582
    // Workaround is based on https://github.com/RReverser/acorn/commit/50ab143cecc9ed71a2d66f78b4aec3bb2e9844f6
    process['stdout']['once']('drain', function () {
      process['exit'](status);
    });
    console.log(' '); // Make sure to print something to force the drain event to occur, in case the stdout buffer was empty.
    // Work around another node bug where sometimes 'drain' is never fired - make another effort
    // to emit the exit status, after a significant delay (if node hasn't fired drain by then, give up)
    setTimeout(function() {
      process['exit'](status);
    }, 500);
  } else
  if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
    quit(status);
  }
  // if we reach here, we must throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

var abortDecorators = [];

function abort(what) {
  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';

  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}

Module["noExitRuntime"] = true;

run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}




// Bindings utilities

function WrapperObject() {
}
WrapperObject.prototype = Object.create(WrapperObject.prototype);
WrapperObject.prototype.constructor = WrapperObject;
WrapperObject.prototype.__class__ = WrapperObject;
WrapperObject.__cache__ = {};
Module['WrapperObject'] = WrapperObject;

function getCache(__class__) {
  return (__class__ || WrapperObject).__cache__;
}
Module['getCache'] = getCache;

function wrapPointer(ptr, __class__) {
  var cache = getCache(__class__);
  var ret = cache[ptr];
  if (ret) return ret;
  ret = Object.create((__class__ || WrapperObject).prototype);
  ret.ptr = ptr;
  return cache[ptr] = ret;
}
Module['wrapPointer'] = wrapPointer;

function castObject(obj, __class__) {
  return wrapPointer(obj.ptr, __class__);
}
Module['castObject'] = castObject;

Module['NULL'] = wrapPointer(0);

function destroy(obj) {
  if (!obj['__destroy__']) throw 'Error: Cannot destroy object. (Did you create it yourself?)';
  obj['__destroy__']();
  // Remove from cache, so the object can be GC'd and refs added onto it released
  delete getCache(obj.__class__)[obj.ptr];
}
Module['destroy'] = destroy;

function compare(obj1, obj2) {
  return obj1.ptr === obj2.ptr;
}
Module['compare'] = compare;

function getPointer(obj) {
  return obj.ptr;
}
Module['getPointer'] = getPointer;

function getClass(obj) {
  return obj.__class__;
}
Module['getClass'] = getClass;

// Converts a value into a C-style string.
function ensureString(value) {
  if (typeof value == 'string') return allocate(intArrayFromString(value), 'i8', ALLOC_STACK);
  return value;
}


// VoidPtr
function VoidPtr() { throw "cannot construct a VoidPtr, no constructor in IDL" }
VoidPtr.prototype = Object.create(WrapperObject.prototype);
VoidPtr.prototype.constructor = VoidPtr;
VoidPtr.prototype.__class__ = VoidPtr;
VoidPtr.__cache__ = {};
Module['VoidPtr'] = VoidPtr;

  VoidPtr.prototype['__destroy__'] = VoidPtr.prototype.__destroy__ = function() {
  var self = this.ptr;
  _emscripten_bind_VoidPtr___destroy___0(self);
};
// CImageUtilHtml5
function CImageUtilHtml5() {
  this.ptr = _emscripten_bind_CImageUtilHtml5_CImageUtilHtml5_0();
  getCache(CImageUtilHtml5)[this.ptr] = this;
};;
CImageUtilHtml5.prototype = Object.create(WrapperObject.prototype);
CImageUtilHtml5.prototype.constructor = CImageUtilHtml5;
CImageUtilHtml5.prototype.__class__ = CImageUtilHtml5;
CImageUtilHtml5.__cache__ = {};
Module['CImageUtilHtml5'] = CImageUtilHtml5;

CImageUtilHtml5.prototype['LoadImageBuffer'] = CImageUtilHtml5.prototype.LoadImageBuffer = function(arg0, arg1, arg2) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  else arg0 = ensureString(arg0);
  if (arg1 && typeof arg1 === 'object') arg1 = arg1.ptr;
  else arg1 = ensureString(arg1);
  if (arg2 && typeof arg2 === 'object') arg2 = arg2.ptr;
  else arg2 = ensureString(arg2);
  return Pointer_stringify(_emscripten_bind_CImageUtilHtml5_LoadImageBuffer_3(self, arg0, arg1, arg2));
};;

  CImageUtilHtml5.prototype['__destroy__'] = CImageUtilHtml5.prototype.__destroy__ = function() {
  var self = this.ptr;
  _emscripten_bind_CImageUtilHtml5___destroy___0(self);
};
(function() {
  function setupEnums() {
    
  }
  if (Module['calledRun']) setupEnums();
  else addOnPreMain(setupEnums);
})();

//# sourceMappingURL=lib_debug.js.map